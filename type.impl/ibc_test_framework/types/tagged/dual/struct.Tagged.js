(function() {var type_impls = {
"ibc_test_framework":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CValue%3E-for-Tagged%3CTagA,+TagB,+%26Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#379-383\">source</a><a href=\"#impl-AsRef%3CValue%3E-for-Tagged%3CTagA,+TagB,+%26Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;Value&gt; for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#380-382\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Value>","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionIdRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CValue%3E-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#385-389\">source</a><a href=\"#impl-AsRef%3CValue%3E-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;Value&gt; for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#386-388\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Value>","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#396-400\">source</a><a href=\"#impl-Clone-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#397-399\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#402-406\">source</a><a href=\"#impl-Debug-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#403-405\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#408-412\">source</a><a href=\"#impl-Display-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#409-411\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExportEnv-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/env.rs.html#82-86\">source</a><a href=\"#impl-ExportEnv-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"ibc_test_framework/types/env/trait.ExportEnv.html\" title=\"trait ibc_test_framework::types::env::ExportEnv\">ExportEnv</a>&gt; <a class=\"trait\" href=\"ibc_test_framework/types/env/trait.ExportEnv.html\" title=\"trait ibc_test_framework::types::env::ExportEnv\">ExportEnv</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">DualTagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.export_env\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/env.rs.html#83-85\">source</a><a href=\"#method.export_env\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ibc_test_framework/types/env/trait.ExportEnv.html#tymethod.export_env\" class=\"fn\">export_env</a>(&amp;self, writer: &amp;mut impl <a class=\"trait\" href=\"ibc_test_framework/types/env/trait.EnvWriter.html\" title=\"trait ibc_test_framework::types::env::EnvWriter\">EnvWriter</a>)</h4></section></summary><div class='docblock'>Export the environment variables using the given <a href=\"ibc_test_framework/types/env/trait.EnvWriter.html\" title=\"trait ibc_test_framework::types::env::EnvWriter\"><code>EnvWriter</code></a>.</div></details></div></details>","ExportEnv","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#461-469\">source</a><a href=\"#impl-IntoIterator-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, &lt;Value as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>&gt;</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.TaggedIterator.html\" title=\"struct ibc_test_framework::types::tagged::dual::TaggedIterator\">TaggedIterator</a>&lt;TagA, TagB, &lt;Value as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#466-468\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#428-432\">source</a><a href=\"#impl-Ord-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#429-431\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#902-905\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#414-418\">source</a><a href=\"#impl-PartialEq-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#415-417\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#422-426\">source</a><a href=\"#impl-PartialOrd-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#423-425\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tagged%3CTagA,+TagB,+%26Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#313-336\">source</a><a href=\"#impl-Tagged%3CTagA,+TagB,+%26Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#329-331\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.cloned\" class=\"fn\">cloned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>eable tagged reference into a tagged value.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: String = <span class=\"string\">\"foo\"</span>.to_string();\n<span class=\"kw\">let </span>val2: Tagged&lt;Foo, Bar, <span class=\"kw-2\">&amp;</span>String&gt; = Tagged::new(<span class=\"kw-2\">&amp;</span>val1);\n<span class=\"kw\">let </span>val3: Tagged&lt;Foo, Bar, String&gt; = val2.cloned();</code></pre></div>\n</div></details><section id=\"method.cloned_value\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#333-335\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.cloned_value\" class=\"fn\">cloned_value</a>(&amp;self) -&gt; Value</h4></section></div></details>",0,"ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionIdRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#24-311\">source</a><a href=\"#impl-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#38-40\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.new\" class=\"fn\">new</a>(value: Value) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new tagged value with any type tag.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#56-58\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.value\" class=\"fn\">value</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a></h4></section></summary><div class=\"docblock\"><p>Get a reference to the underlying value.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: <span class=\"kw-2\">&amp;</span>i64 = val1.value();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#74-76\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.into_value\" class=\"fn\">into_value</a>(self) -&gt; Value</h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the underlying value.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: i64 = val1.into_value();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#92-94\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a tagged value into a tagged reference.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Foo, Bar, <span class=\"kw-2\">&amp;</span>i64&gt; = val1.as_ref();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flip\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#110-112\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.flip\" class=\"fn\">flip</a>(self) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagB, TagA, Value&gt;</h4></section></summary><div class=\"docblock\"><p>Flips the ordering of the two tags.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Bar, Foo, i64&gt; = val1.flip();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retag\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#130-132\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.retag\" class=\"fn\">retag</a>&lt;TagC, TagD&gt;(self) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagC, TagD, Value&gt;</h4></section></summary><div class=\"docblock\"><p>Retag a tagged value with a different tag.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n<span class=\"kw\">struct </span>Baz;\n<span class=\"kw\">struct </span>Quux;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Baz, Quux, i64&gt; = val1.retag();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#149-151\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.map\" class=\"fn\">map</a>&lt;T&gt;(&amp;self, mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a>) -&gt; T) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, T&gt;</h4></section></summary><div class=\"docblock\"><p>Perform operation with the reference to the underlying reference,\nand have result that preserve the tag.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Foo, Bar, String&gt; = val1.map(|x| <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, x));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#174-179\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.map_ref\" class=\"fn\">map_ref</a>&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(\n    &amp;'a self,\n    mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>\n) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Perform operation with the reference to the underlying reference,\nand have result reference with the same lifetime that preserve the tags.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Person { name: String, age: u8 }\n<span class=\"kw\">struct </span>Alice;\n<span class=\"kw\">struct </span>Wonderland;\n\n<span class=\"kw\">let </span>person: Tagged&lt;Alice, Wonderland, Person&gt; = Tagged::new(Person {\n    name: <span class=\"string\">\"Alice\"</span>.to_string(),\n    age: <span class=\"number\">30</span>,\n});\n\n<span class=\"kw\">let </span>name: Tagged&lt;Alice, Wonderland, <span class=\"kw-2\">&amp;</span>str&gt; = person\n    .map_ref(|person| person.name.as_str());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_into\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#201-203\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.map_into\" class=\"fn\">map_into</a>&lt;T&gt;(\n    self,\n    mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(Value) -&gt; T\n) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, T&gt;</h4></section></summary><div class=\"docblock\"><p>Perform an operation consuming the original tagged value, and return\na result value preserving the original tag.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Person { name: String, age: u8 }\n<span class=\"kw\">struct </span>Alice;\n<span class=\"kw\">struct </span>Wonderland;\n\n<span class=\"kw\">let </span>person: Tagged&lt;Alice, Wonderland, Person&gt; = Tagged::new(Person {\n    name: <span class=\"string\">\"Alice\"</span>.to_string(),\n    age: <span class=\"number\">30</span>,\n});\n\n<span class=\"kw\">let </span>name: Tagged&lt;Alice, Wonderland, String&gt; = person.map_into(|person| person.name);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contra_map\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#260-262\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.contra_map\" class=\"fn\">contra_map</a>&lt;T&gt;(\n    &amp;self,\n    mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Value</a>) -&gt; T\n) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagB, TagA, T&gt;</h4></section></summary><div class=\"docblock\"><p>Perform operation with the reference to the underlying reference,\nand have two tags flipped in the result.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Bar, Foo, String&gt; = val1.contra_map(|x| <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, x));</code></pre></div>\n<p>This is mainly useful for accessing IBC data structures that may contain\ninformation about the counterparty chain. For example, consider\na tagged and simplified version of\n<a href=\"ibc_relayer_types/core/ics03_connection/connection/struct.ConnectionEnd.html\" title=\"struct ibc_relayer_types::core::ics03_connection::connection::ConnectionEnd\"><code>ConnectionEnd</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>ConnectionEnd {\n    connection_id: ConnectionId,\n    counterparty_connection_id: ConnectionId,\n}\n\n<span class=\"kw\">fn </span>process_connection_end&lt;ChainA, ChainB&gt;(\n    connection_end: Tagged&lt;ChainA, ChainB, ConnectionEnd&gt;)\n{\n    <span class=\"kw\">let </span>connection_id: Tagged&lt;ChainA, ChainB, ConnectionId&gt; =\n        connection_end.map(|c| c.connection_id.clone());\n\n    <span class=\"kw\">let </span>counterparty_connection_id: Tagged&lt;ChainB, ChainA, ConnectionId&gt; =\n        connection_end.contra_map(|c| c.connection_id.clone());\n\n    <span class=\"comment\">// do something\n</span>}</code></pre></div>\n<p>The <code>ConnectionEnd</code> data type above is a <em>bidirectional</em> data type that\ncontains fields that are specific to both chains: the connection ID\nand the counterparty connection ID. But when we tag the <code>ConnectionEnd</code>\ntype, we have to choose one dominant chain to appear at the first position.</p>\n<p>When we extract the <code>connection_id</code> field, we use <code>map</code> to preserve the\ntag ordering to say that the connection ID <em>belongs</em> to the <code>ChainA</code>,\nand corresponds to a connection to the counterparty <code>ChainB</code>.</p>\n<p>When we extract the <code>counterparty_connection_id</code> field, we use\n<code>contra_map</code> to flip the tag ordering to say that the connection ID\n<em>belongs</em> to the counterparty <code>ChainB</code>, and corresponds to a connection\nto <code>ChainA</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contra_map_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#286-291\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.contra_map_ref\" class=\"fn\">contra_map_ref</a>&lt;'a, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(\n    &amp;'a self,\n    mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>\n) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagB, TagA, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Perform operation with the reference to the underlying reference,\nand have the result reference with the same lifetime and have the\ntwo tags flipped in the result.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Person { name: String, age: u8 }\n<span class=\"kw\">struct </span>Alice;\n<span class=\"kw\">struct </span>Wonderland;\n\n<span class=\"kw\">let </span>person: Tagged&lt;Alice, Wonderland, Person&gt; = Tagged::new(Person {\n    name: <span class=\"string\">\"Alice\"</span>.to_string(),\n    age: <span class=\"number\">30</span>,\n});\n\n<span class=\"kw\">let </span>name: Tagged&lt;Wonderland, Alice, <span class=\"kw-2\">&amp;</span>str&gt; = person\n    .contra_map_ref(|person| person.name.as_str());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contra_map_into\" class=\"method\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#308-310\">source</a><h4 class=\"code-header\">pub fn <a href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html#tymethod.contra_map_into\" class=\"fn\">contra_map_into</a>&lt;T&gt;(\n    self,\n    mapper: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(Value) -&gt; T\n) -&gt; <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagB, TagA, T&gt;</h4></section></summary><div class=\"docblock\"><p>Perform operation consuming the underlying reference,\nand have two tags switched in the result.</p>\n<p>Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">let </span>val1: Tagged&lt;Foo, Bar, i64&gt; = Tagged::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>val2: Tagged&lt;Bar, Foo, String&gt; = val1.contra_map_into(|x| <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, x));</code></pre></div>\n</div></details></div></details>",0,"ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<section id=\"impl-Copy-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#391\">source</a><a href=\"#impl-Copy-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section>","Copy","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<section id=\"impl-Eq-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#420\">source</a><a href=\"#impl-Eq-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section>","Eq","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<section id=\"impl-Send-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#393\">source</a><a href=\"#impl-Send-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section>","Send","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"],["<section id=\"impl-Sync-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_test_framework/types/tagged/dual.rs.html#394\">source</a><a href=\"#impl-Sync-for-Tagged%3CTagA,+TagB,+Value%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TagA, TagB, Value: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"ibc_test_framework/types/tagged/dual/struct.Tagged.html\" title=\"struct ibc_test_framework::types::tagged::dual::Tagged\">Tagged</a>&lt;TagA, TagB, Value&gt;</h3></section>","Sync","ibc_test_framework::types::id::TaggedClientId","ibc_test_framework::types::id::TaggedClientIdRef","ibc_test_framework::types::id::TaggedPortId","ibc_test_framework::types::id::TaggedPortIdRef","ibc_test_framework::types::id::TaggedChannelId","ibc_test_framework::types::id::TaggedChannelIdRef","ibc_test_framework::types::id::TaggedConnectionId","ibc_test_framework::types::id::TaggedConnectionIdRef","ibc_test_framework::types::nary::channel::NthChannelId","ibc_test_framework::types::nary::channel::NthPortId","ibc_test_framework::types::nary::connection::NthConnectionId"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()