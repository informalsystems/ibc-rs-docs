(function() {var type_impls = {
"bitcoin":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CPtr-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1486\">source</a><a href=\"#impl-CPtr-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section><section id=\"method.as_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1488\">source</a><a href=\"#method.as_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_c_ptr\" class=\"fn\">as_c_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a> as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_mut_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1490\">source</a><a href=\"#method.as_mut_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_mut_c_ptr\" class=\"fn\">as_mut_c_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a> as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section></div></details>","CPtr","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Clone-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Debug-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1533\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>serde</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1534\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    d: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Display-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1130\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#215-217\">source</a><a href=\"#impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"bitcoin/key/struct.PublicKey.html\" title=\"struct bitcoin::key::PublicKey\">PublicKey</a>&gt; for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#216\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pk: <a class=\"struct\" href=\"bitcoin/key/struct.PublicKey.html\" title=\"struct bitcoin::key::PublicKey\">PublicKey</a>) -&gt; <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PublicKey>","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1499\">source</a><a href=\"#impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"secp256k1/key/struct.PublicKey.html\" title=\"struct secp256k1::key::PublicKey\">PublicKey</a>&gt; for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1500\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(src: <a class=\"struct\" href=\"secp256k1/key/struct.PublicKey.html\" title=\"struct secp256k1::key::PublicKey\">PublicKey</a>) -&gt; <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PublicKey>","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CTweakedPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#685-688\">source</a><a href=\"#impl-From%3CTweakedPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"bitcoin/key/struct.TweakedPublicKey.html\" title=\"struct bitcoin::key::TweakedPublicKey\">TweakedPublicKey</a>&gt; for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#687\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pair: <a class=\"struct\" href=\"bitcoin/key/struct.TweakedPublicKey.html\" title=\"struct bitcoin::key::TweakedPublicKey\">TweakedPublicKey</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<TweakedPublicKey>","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CXOnlyPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1494\">source</a><a href=\"#impl-From%3CXOnlyPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a>&gt; for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"docblock\"><p>Creates a new schnorr public key from a FFI x-only public key.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1496\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pk: <a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<XOnlyPublicKey>","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1133\">source</a><a href=\"#impl-FromStr-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1135\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Hash-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1119\">source</a><a href=\"#impl-LowerHex-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1120\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Ord-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#902-905\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-PartialEq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-PartialOrd-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1518\">source</a><a href=\"#impl-Serialize-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>serde</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1519\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    s: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1117\">source</a><a href=\"#impl-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp_fast_unstable\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1117\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.cmp_fast_unstable\" class=\"fn\">cmp_fast_unstable</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Like <code>cmp::Cmp</code> but faster and with no guarantees across library versions.</p>\n<p>The <code>Cmp</code> implementation for FFI types is stable but slow because it first\nserializes <code>self</code> and <code>other</code> before comparing them. This function provides a faster\ncomparison if you know that your types come from the same library version.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_fast_unstable\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1117\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.eq_fast_unstable\" class=\"fn\">eq_fast_unstable</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Like <code>cmp::Eq</code> but faster and with no guarantees across library versions.</p>\n<p>The <code>Eq</code> implementation for FFI types is stable but slow because it first serializes\n<code>self</code> and <code>other</code> before comparing them. This function provides a faster equality\ncheck if you know that your types come from the same library version.</p>\n</div></details></div></details>",0,"bitcoin::crypto::key::UntweakedPublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1145\">source</a><a href=\"#impl-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1149\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a><a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.25.0: Use Self::as_c_ptr if you need to access the FFI layer</span></div></span></summary><div class=\"docblock\"><p>Obtains a raw const pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1157\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.25.0: Use Self::as_mut_c_ptr if you need to access the FFI layer</span></div></span></summary><div class=\"docblock\"><p>Obtains a raw mutable pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_keypair\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1161\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.from_keypair\" class=\"fn\">from_keypair</a>(keypair: &amp;<a class=\"struct\" href=\"bitcoin/key/struct.Keypair.html\" title=\"struct bitcoin::key::Keypair\">Keypair</a>) -&gt; (<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"bitcoin/key/enum.Parity.html\" title=\"enum bitcoin::key::Parity\">Parity</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a> (and it’s <a href=\"bitcoin/key/enum.Parity.html\" title=\"enum bitcoin::key::Parity\"><code>Parity</code></a>) for <code>keypair</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1186\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a schnorr public key directly from a slice.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"secp256k1/enum.Error.html#variant.InvalidPublicKey\" title=\"variant secp256k1::Error::InvalidPublicKey\"><code>Error::InvalidPublicKey</code></a> if the length of the data slice is not 32 bytes or the\nslice does not represent a valid Secp256k1 point x coordinate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1208\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.serialize\" class=\"fn\">serialize</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]</h4></section></summary><div class=\"docblock\"><p>Serializes the key as a byte-encoded x coordinate value (32 bytes).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_tweak\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1248-1252\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.add_tweak\" class=\"fn\">add_tweak</a>&lt;V&gt;(\n    self,\n    secp: &amp;<a class=\"struct\" href=\"bitcoin/key/struct.Secp256k1.html\" title=\"struct bitcoin::key::Secp256k1\">Secp256k1</a>&lt;V&gt;,\n    tweak: &amp;<a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"bitcoin/key/enum.Parity.html\" title=\"enum bitcoin::key::Parity\">Parity</a>), <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"bitcoin/key/trait.Verification.html\" title=\"trait bitcoin::key::Verification\">Verification</a>,</div></h4></section></summary><div class=\"docblock\"><p>Tweaks an <a href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a> by adding the generator multiplied with the given tweak to it.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>The newly tweaked key plus an opaque type representing the parity of the tweaked key, this\nshould be provided to <code>tweak_add_check</code> which can be used to verify a tweak more efficiently\nthan regenerating it and checking equality.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the resulting key would be invalid.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::{Secp256k1, Keypair, Scalar, XOnlyPublicKey};\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>tweak = Scalar::random();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keypair = Keypair::new(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;mut </span>rand::thread_rng());\n<span class=\"kw\">let </span>(xonly, _parity) = keypair.x_only_public_key();\n<span class=\"kw\">let </span>tweaked = xonly.add_tweak(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweak).expect(<span class=\"string\">\"Improbable to fail with a randomly generated tweak\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tweak_add_check\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1310-1316\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.tweak_add_check\" class=\"fn\">tweak_add_check</a>&lt;V&gt;(\n    &amp;self,\n    secp: &amp;<a class=\"struct\" href=\"bitcoin/key/struct.Secp256k1.html\" title=\"struct bitcoin::key::Secp256k1\">Secp256k1</a>&lt;V&gt;,\n    tweaked_key: &amp;<a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a>,\n    tweaked_parity: <a class=\"enum\" href=\"bitcoin/key/enum.Parity.html\" title=\"enum bitcoin::key::Parity\">Parity</a>,\n    tweak: <a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    V: <a class=\"trait\" href=\"bitcoin/key/trait.Verification.html\" title=\"trait bitcoin::key::Verification\">Verification</a>,</div></h4></section></summary><div class=\"docblock\"><p>Verifies that a tweak produced by <a href=\"bitcoin/struct.XOnlyPublicKey.html#method.add_tweak\" title=\"method bitcoin::XOnlyPublicKey::add_tweak\"><code>XOnlyPublicKey::add_tweak</code></a> was computed correctly.</p>\n<p>Should be called on the original untweaked key. Takes the tweaked key and output parity from\n<a href=\"bitcoin/struct.XOnlyPublicKey.html#method.add_tweak\" title=\"method bitcoin::XOnlyPublicKey::add_tweak\"><code>XOnlyPublicKey::add_tweak</code></a> as input.</p>\n<p>Currently this is not much more efficient than just recomputing the tweak and checking\nequality. However, in future this API will support batch verification, which is\nsignificantly faster, so it is wise to design protocols with this in mind.</p>\n<h5 id=\"returns-1\"><a class=\"doc-anchor\" href=\"#returns-1\">§</a>Returns</h5>\n<p>True if tweak and check is successful, false otherwise.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::{Secp256k1, Keypair, Scalar};\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>tweak = Scalar::random();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keypair = Keypair::new(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;mut </span>rand::thread_rng());\n<span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>public_key, <span class=\"kw\">_</span>) = keypair.x_only_public_key();\n<span class=\"kw\">let </span>original = public_key;\n<span class=\"kw\">let </span>(tweaked, parity) = public_key.add_tweak(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweak).expect(<span class=\"string\">\"Improbable to fail with a randomly generated tweak\"</span>);\n<span class=\"macro\">assert!</span>(original.tweak_add_check(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweaked, parity, tweak));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1335\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.public_key\" class=\"fn\">public_key</a>(&amp;self, parity: <a class=\"enum\" href=\"bitcoin/key/enum.Parity.html\" title=\"enum bitcoin::key::Parity\">Parity</a>) -&gt; <a class=\"struct\" href=\"secp256k1/key/struct.PublicKey.html\" title=\"struct secp256k1::key::PublicKey\">PublicKey</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/key/struct.PublicKey.html\" title=\"struct secp256k1::key::PublicKey\"><code>PublicKey</code></a> for this <a href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a>.</p>\n<p>This is equivalent to using [<code>PublicKey::from_xonly_and_parity(self, parity)</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1340-1345\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitcoin/struct.XOnlyPublicKey.html#tymethod.verify\" class=\"fn\">verify</a>&lt;C&gt;(\n    &amp;self,\n    secp: &amp;<a class=\"struct\" href=\"bitcoin/key/struct.Secp256k1.html\" title=\"struct bitcoin::key::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    msg: &amp;<a class=\"struct\" href=\"secp256k1/struct.Message.html\" title=\"struct secp256k1::Message\">Message</a>,\n    sig: &amp;<a class=\"struct\" href=\"secp256k1/schnorr/struct.Signature.html\" title=\"struct secp256k1::schnorr::Signature\">Signature</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"bitcoin/key/trait.Verification.html\" title=\"trait bitcoin::key::Verification\">Verification</a>,</div></h4></section></summary><div class=\"docblock\"><p>Checks that <code>sig</code> is a valid schnorr signature for <code>msg</code> using this public key.</p>\n</div></details></div></details>",0,"bitcoin::crypto::key::UntweakedPublicKey"],["<section id=\"impl-Copy-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Copy-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","Copy","bitcoin::crypto::key::UntweakedPublicKey"],["<section id=\"impl-Eq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-Eq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","Eq","bitcoin::crypto::key::UntweakedPublicKey"],["<section id=\"impl-StructuralPartialEq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1115\">source</a><a href=\"#impl-StructuralPartialEq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"bitcoin/struct.XOnlyPublicKey.html\" title=\"struct bitcoin::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","StructuralPartialEq","bitcoin::crypto::key::UntweakedPublicKey"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()