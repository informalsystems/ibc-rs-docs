(function() {var type_impls = {
"bitcoin":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TapTweak-for-Keypair\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#606-634\">source</a><a href=\"#impl-TapTweak-for-Keypair\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bitcoin/key/trait.TapTweak.html\" title=\"trait bitcoin::key::TapTweak\">TapTweak</a> for <a class=\"type\" href=\"bitcoin/key/type.UntweakedKeypair.html\" title=\"type bitcoin::key::UntweakedKeypair\">UntweakedKeypair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_tweak\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#622-631\">source</a><a href=\"#method.tap_tweak\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitcoin/key/trait.TapTweak.html#tymethod.tap_tweak\" class=\"fn\">tap_tweak</a>&lt;C: <a class=\"trait\" href=\"bitcoin/key/trait.Verification.html\" title=\"trait bitcoin::key::Verification\">Verification</a>&gt;(\n    self,\n    secp: &amp;<a class=\"struct\" href=\"bitcoin/key/struct.Secp256k1.html\" title=\"struct bitcoin::key::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    merkle_root: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"bitcoin/taproot/struct.TapNodeHash.html\" title=\"struct bitcoin::taproot::TapNodeHash\">TapNodeHash</a>&gt;\n) -&gt; <a class=\"struct\" href=\"bitcoin/key/struct.TweakedKeypair.html\" title=\"struct bitcoin::key::TweakedKeypair\">TweakedKeypair</a></h4></section></summary><div class=\"docblock\"><p>Tweaks private and public keys within an untweaked <a href=\"bitcoin/key/struct.Keypair.html\" title=\"struct bitcoin::key::Keypair\"><code>Keypair</code></a> with corresponding public key\nvalue and optional script tree merkle root.</p>\n<p>This is done by tweaking private key within the pair using the equation q = p + H(P|c), where</p>\n<ul>\n<li>q is the tweaked private key</li>\n<li>p is the internal private key</li>\n<li>H is the hash function</li>\n<li>c is the commitment data\nThe public key is generated from a private key by multiplying with generator point, Q = qG.</li>\n</ul>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>The tweaked key and its parity.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.TweakedAux\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TweakedAux\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bitcoin/key/trait.TapTweak.html#associatedtype.TweakedAux\" class=\"associatedtype\">TweakedAux</a> = <a class=\"struct\" href=\"bitcoin/key/struct.TweakedKeypair.html\" title=\"struct bitcoin::key::TweakedKeypair\">TweakedKeypair</a></h4></section></summary><div class='docblock'>Tweaked key type with optional auxiliary information</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.TweakedKey\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TweakedKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bitcoin/key/trait.TapTweak.html#associatedtype.TweakedKey\" class=\"associatedtype\">TweakedKey</a> = <a class=\"struct\" href=\"bitcoin/key/struct.TweakedKeypair.html\" title=\"struct bitcoin::key::TweakedKeypair\">TweakedKeypair</a></h4></section></summary><div class='docblock'>Tweaked key type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dangerous_assume_tweaked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitcoin/crypto/key.rs.html#633\">source</a><a href=\"#method.dangerous_assume_tweaked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitcoin/key/trait.TapTweak.html#tymethod.dangerous_assume_tweaked\" class=\"fn\">dangerous_assume_tweaked</a>(self) -&gt; <a class=\"struct\" href=\"bitcoin/key/struct.TweakedKeypair.html\" title=\"struct bitcoin::key::TweakedKeypair\">TweakedKeypair</a></h4></section></summary><div class='docblock'>Directly converts an <a href=\"bitcoin/key/type.UntweakedPublicKey.html\" title=\"type bitcoin::key::UntweakedPublicKey\"><code>UntweakedPublicKey</code></a> to a <a href=\"bitcoin/key/struct.TweakedPublicKey.html\" title=\"struct bitcoin::key::TweakedPublicKey\"><code>TweakedPublicKey</code></a> <a href=\"bitcoin/key/trait.TapTweak.html#tymethod.dangerous_assume_tweaked\">Read more</a></div></details></div></details>","TapTweak","bitcoin::crypto::key::UntweakedKeyPair"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()