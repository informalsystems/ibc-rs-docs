(function() {
    var type_impls = Object.fromEntries([["namada_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiDecode-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#125\">source</a><a href=\"#impl-AbiDecode-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/codec/trait.AbiDecode.html\" title=\"trait ethers_core::abi::codec::AbiDecode\">AbiDecode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a> + <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#126\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#tymethod.decode\" class=\"fn\">decode</a>(bytes: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"enum\" href=\"ethers_core/abi/error/enum.AbiError.html\" title=\"enum ethers_core::abi::error::AbiError\">AbiError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the ABI encoded data</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#30\">source</a><a href=\"#method.decode_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#method.decode_hex\" class=\"fn\">decode_hex</a>(data: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"ethers_core/abi/error/enum.AbiError.html\" title=\"enum ethers_core::abi::error::AbiError\">AbiError</a>&gt;</h4></section></summary><div class='docblock'>Decode hex encoded ABI encoded data <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#method.decode_hex\">Read more</a></div></details></div></details>","AbiDecode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiDecode-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#57-79\">source</a><a href=\"#impl-AbiDecode-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/codec/trait.AbiDecode.html\" title=\"trait ethers_core::abi::codec::AbiDecode\">AbiDecode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#57-79\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#tymethod.decode\" class=\"fn\">decode</a>(bytes: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"ethers_core/abi/error/enum.AbiError.html\" title=\"enum ethers_core::abi::error::AbiError\">AbiError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the ABI encoded data</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#30\">source</a><a href=\"#method.decode_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#method.decode_hex\" class=\"fn\">decode_hex</a>(data: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"ethers_core/abi/error/enum.AbiError.html\" title=\"enum ethers_core::abi::error::AbiError\">AbiError</a>&gt;</h4></section></summary><div class='docblock'>Decode hex encoded ABI encoded data <a href=\"ethers_core/abi/codec/trait.AbiDecode.html#method.decode_hex\">Read more</a></div></details></div></details>","AbiDecode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiEncode-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#118\">source</a><a href=\"#impl-AbiEncode-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/codec/trait.AbiEncode.html\" title=\"trait ethers_core::abi::codec::AbiEncode\">AbiEncode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a> + <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#119\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiEncode.html#tymethod.encode\" class=\"fn\">encode</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>ABI encode the type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#14-16\">source</a><a href=\"#method.encode_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiEncode.html#method.encode_hex\" class=\"fn\">encode_hex</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns the encoded value as hex string, <em>with</em> a <code>0x</code> prefix</div></details></div></details>","AbiEncode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiEncode-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#57-79\">source</a><a href=\"#impl-AbiEncode-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/codec/trait.AbiEncode.html\" title=\"trait ethers_core::abi::codec::AbiEncode\">AbiEncode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#57-79\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiEncode.html#tymethod.encode\" class=\"fn\">encode</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>ABI encode the type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/codec.rs.html#14-16\">source</a><a href=\"#method.encode_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/codec/trait.AbiEncode.html#method.encode_hex\" class=\"fn\">encode_hex</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns the encoded value as hex string, <em>with</em> a <code>0x</code> prefix</div></details></div></details>","AbiEncode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiType-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#150\">source</a><a href=\"#impl-AbiType-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/trait.AbiType.html\" title=\"trait ethers_core::abi::AbiType\">AbiType</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.param_type\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#151\">source</a><a href=\"#method.param_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/trait.AbiType.html#tymethod.param_type\" class=\"fn\">param_type</a>() -&gt; <a class=\"enum\" href=\"ethabi/param_type/param_type/enum.ParamType.html\" title=\"enum ethabi::param_type::param_type::ParamType\">ParamType</a></h4></section></summary><div class='docblock'>The native ABI type this type represents.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minimum_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#117\">source</a><a href=\"#method.minimum_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/trait.AbiType.html#method.minimum_size\" class=\"fn\">minimum_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>A hint of the minimum number of bytes this type takes up in the ABI.</div></details></div></details>","AbiType","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbiType-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#186-210\">source</a><a href=\"#impl-AbiType-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/trait.AbiType.html\" title=\"trait ethers_core::abi::AbiType\">AbiType</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.param_type\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#186-210\">source</a><a href=\"#method.param_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/trait.AbiType.html#tymethod.param_type\" class=\"fn\">param_type</a>() -&gt; <a class=\"enum\" href=\"ethabi/param_type/param_type/enum.ParamType.html\" title=\"enum ethabi::param_type::param_type::ParamType\">ParamType</a></h4></section></summary><div class='docblock'>The native ABI type this type represents.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minimum_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#117\">source</a><a href=\"#method.minimum_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/trait.AbiType.html#method.minimum_size\" class=\"fn\">minimum_size</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>A hint of the minimum number of bytes this type takes up in the ABI.</div></details></div></details>","AbiType","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Accumulate%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1345\">source</a><a href=\"#impl-Accumulate%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, T&gt; <a class=\"trait\" href=\"winnow/stream/trait.Accumulate.html\" title=\"trait winnow::stream::Accumulate\">Accumulate</a>&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1347\">source</a><a href=\"#method.initial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Accumulate.html#tymethod.initial\" class=\"fn\">initial</a>(capacity: <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accumulate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1354\">source</a><a href=\"#method.accumulate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Accumulate.html#tymethod.accumulate\" class=\"fn\">accumulate</a>(&amp;mut self, acc: &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","Accumulate<&'i [T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Accumulate%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1330\">source</a><a href=\"#impl-Accumulate%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"winnow/stream/trait.Accumulate.html\" title=\"trait winnow::stream::Accumulate\">Accumulate</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1332\">source</a><a href=\"#method.initial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Accumulate.html#tymethod.initial\" class=\"fn\">initial</a>(capacity: <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accumulate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/mod.rs.html#1339\">source</a><a href=\"#method.accumulate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"winnow/stream/trait.Accumulate.html#tymethod.accumulate\" class=\"fn\">accumulate</a>(&amp;mut self, acc: T)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","Accumulate<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#944\">source</a><a href=\"#impl-Arg-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"rustix/path/arg/trait.Arg.html\" title=\"trait rustix::path::arg::Arg\">Arg</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#946\">source</a><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustix/path/arg/trait.Arg.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#952\">source</a><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustix/path/arg/trait.Arg.html#tymethod.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#958\">source</a><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustix/path/arg/trait.Arg.html#tymethod.as_cow_c_str\" class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#966-968\">source</a><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustix/path/arg/trait.Arg.html#tymethod.into_c_str\" class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'b,</div></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/path/arg.rs.html#976-979\">source</a><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustix/path/arg/trait.Arg.html#tymethod.into_with_c_str\" class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt;,</div></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3794\">source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsMut.html\" title=\"trait namada_core::ibc::primitives::prelude::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3795\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3780\">source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsMut.html\" title=\"trait namada_core::ibc::primitives::prelude::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3787\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3788\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3773\">source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3774\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/zerovec/slice.rs.html#546\">source</a><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;&lt;T as <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/zerovec/slice.rs.html#547\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_io/lib.rs.html#471\">source</a><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_io/lib.rs.html#472\">source</a><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_io/lib.rs.html#472\">source</a><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>bufs</code> into the object using vectored\nIO operations. <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_io/lib.rs.html#472\">source</a><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to flush the object, ensuring that any buffered data reach\ntheir destination. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_io/lib.rs.html#472\">source</a><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to close the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\">Read more</a></div></details></div></details>","AsyncWrite","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#259\">source</a><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"tokio/io/async_write/trait.AsyncWrite.html\" title=\"trait tokio::io::async_write::AsyncWrite\">AsyncWrite</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#260-264\">source</a><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#269-273\">source</a><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tokio/io/async_write/trait.AsyncWrite.html#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Like <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_write\" title=\"method tokio::io::async_write::AsyncWrite::poll_write\"><code>poll_write</code></a>, except that it writes from a slice of buffers. <a href=\"tokio/io/async_write/trait.AsyncWrite.html#method.poll_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#277\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tokio/io/async_write/trait.AsyncWrite.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this writer has an efficient <a href=\"tokio/io/async_write/trait.AsyncWrite.html#method.poll_write_vectored\" title=\"method tokio::io::async_write::AsyncWrite::poll_write_vectored\"><code>poll_write_vectored</code></a>\nimplementation. <a href=\"tokio/io/async_write/trait.AsyncWrite.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#281\">source</a><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to flush the object, ensuring that any buffered data reach\ntheir destination. <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_shutdown\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_write.rs.html#285\">source</a><a href=\"#method.poll_shutdown\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_shutdown\" class=\"fn\">poll_shutdown</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down. <a href=\"tokio/io/async_write/trait.AsyncWrite.html#tymethod.poll_shutdown\">Read more</a></div></details></div></details>","AsyncWrite","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#834\">source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#835\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBStr%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/bstr.rs.html#348\">source</a><a href=\"#impl-Borrow%3CBStr%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"winnow/stream/bstr/struct.BStr.html\" title=\"struct winnow::stream::bstr::BStr\">BStr</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/bstr.rs.html#350\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"winnow/stream/bstr/struct.BStr.html\" title=\"struct winnow::stream::bstr::BStr\">BStr</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<BStr>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/winnow/stream/bytes.rs.html#363\">source</a><a href=\"#impl-Borrow%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"winnow/stream/bytes/struct.Bytes.html\" title=\"struct winnow::stream::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/winnow/stream/bytes.rs.html#365\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"winnow/stream/bytes/struct.Bytes.html\" title=\"struct winnow::stream::bytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<Bytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#841\">source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#842\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorshDeserialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/borsh/de/mod.rs.html#400-402\">source</a><a href=\"#impl-BorshDeserialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/borsh/trait.BorshDeserialize.html\" title=\"trait namada_core::borsh::BorshDeserialize\">BorshDeserialize</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/borsh/trait.BorshDeserialize.html\" title=\"trait namada_core::borsh::BorshDeserialize\">BorshDeserialize</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.deserialize_reader\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/de/mod.rs.html#405\">source</a><a href=\"#method.deserialize_reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshDeserialize.html#tymethod.deserialize_reader\" class=\"fn\">deserialize_reader</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"namada_core/borsh/io/trait.Read.html\" title=\"trait namada_core::borsh::io::Read\">Read</a>,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/de/mod.rs.html#39\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshDeserialize.html#method.deserialize\" class=\"fn\">deserialize</a>(buf: &amp;mut &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Deserializes this instance from a given slice of bytes.\nUpdates the buffer to point at the remaining bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/de/mod.rs.html#46\">source</a><a href=\"#method.try_from_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshDeserialize.html#method.try_from_slice\" class=\"fn\">try_from_slice</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Deserialize this instance from a slice of bytes.</div></details><section id=\"method.try_from_reader\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/de/mod.rs.html#55\">source</a><a href=\"#method.try_from_reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshDeserialize.html#method.try_from_reader\" class=\"fn\">try_from_reader</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"namada_core/borsh/io/trait.Read.html\" title=\"trait namada_core::borsh::io::Read\">Read</a>,</div></h4></section></div></details>","BorshDeserialize","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorshSchema-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/borsh/schema.rs.html#661\">source</a><a href=\"#impl-BorshSchema-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/borsh/trait.BorshSchema.html\" title=\"trait namada_core::borsh::BorshSchema\">BorshSchema</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/borsh/trait.BorshSchema.html\" title=\"trait namada_core::borsh::BorshSchema\">BorshSchema</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_definitions_recursively\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/schema.rs.html#661\">source</a><a href=\"#method.add_definitions_recursively\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshSchema.html#tymethod.add_definitions_recursively\" class=\"fn\">add_definitions_recursively</a>(definitions: &amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.BTreeMap.html\" title=\"struct namada_core::ibc::primitives::prelude::BTreeMap\">BTreeMap</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a>, <a class=\"enum\" href=\"namada_core/borsh/schema/enum.Definition.html\" title=\"enum namada_core::borsh::schema::Definition\">Definition</a>&gt;)</h4></section></summary><div class='docblock'>Recursively, using DFS, add type definitions required for this type.\nType definition partially explains how to serialize/deserialize a type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.declaration\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/schema.rs.html#661\">source</a><a href=\"#method.declaration\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshSchema.html#tymethod.declaration\" class=\"fn\">declaration</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a></h4></section></summary><div class='docblock'>Get the name of the type without brackets.</div></details></div></details>","BorshSchema","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorshSerialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/borsh/ser/mod.rs.html#284-286\">source</a><a href=\"#impl-BorshSerialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/borsh/trait.BorshSerialize.html\" title=\"trait namada_core::borsh::BorshSerialize\">BorshSerialize</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/borsh/trait.BorshSerialize.html\" title=\"trait namada_core::borsh::BorshSerialize\">BorshSerialize</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/borsh/ser/mod.rs.html#289\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/trait.BorshSerialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"namada_core/borsh/io/trait.Write.html\" title=\"trait namada_core::borsh::io::Write\">Write</a>,</div></h4></section></div></details>","BorshSerialize","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMut-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1599\">source</a><a href=\"#impl-BufMut-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1601\">source</a><a href=\"#method.remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.remaining_mut\" class=\"fn\">remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.remaining_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1607\">source</a><a href=\"#method.advance_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.advance_mut\" class=\"fn\">advance_mut</a>(&amp;mut self, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Advance the internal cursor of the BufMut <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.advance_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1623\">source</a><a href=\"#method.chunk_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.chunk_mut\" class=\"fn\">chunk_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"bytes/buf/uninit_slice/struct.UninitSlice.html\" title=\"struct bytes::buf::uninit_slice::UninitSlice\">UninitSlice</a></h4></section></summary><div class='docblock'>Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and <code>BufMut::remaining_mut()</code>. Note that this <em>can</em> be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation). <a href=\"bytes/buf/buf_mut/trait.BufMut.html#tymethod.chunk_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1641-1643\">source</a><a href=\"#method.put\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put\" class=\"fn\">put</a>&lt;T&gt;(&amp;mut self, src: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bytes/buf/buf_impl/trait.Buf.html\" title=\"trait bytes::buf::buf_impl::Buf\">Buf</a>,\n    <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1657\">source</a><a href=\"#method.put_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_slice\" class=\"fn\">put_slice</a>(&amp;mut self, src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1662\">source</a><a href=\"#method.put_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_bytes\" class=\"fn\">put_bytes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Put <code>cnt</code> bytes <code>val</code> into <code>self</code>. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_remaining_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#128\">source</a><a href=\"#method.has_remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.has_remaining_mut\" class=\"fn\">has_remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if there is space in <code>self</code> for more bytes. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.has_remaining_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#330\">source</a><a href=\"#method.put_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u8\" class=\"fn\">put_u8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 8 bit integer to <code>self</code>. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u8\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#354\">source</a><a href=\"#method.put_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i8\" class=\"fn\">put_i8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Writes a signed 8 bit integer to <code>self</code>. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i8\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#378\">source</a><a href=\"#method.put_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16\" class=\"fn\">put_u16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#401\">source</a><a href=\"#method.put_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16_le\" class=\"fn\">put_u16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#428\">source</a><a href=\"#method.put_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16_ne\" class=\"fn\">put_u16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u16_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#451\">source</a><a href=\"#method.put_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16\" class=\"fn\">put_i16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#474\">source</a><a href=\"#method.put_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16_le\" class=\"fn\">put_i16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#501\">source</a><a href=\"#method.put_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16_ne\" class=\"fn\">put_i16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i16_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#524\">source</a><a href=\"#method.put_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32\" class=\"fn\">put_u32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#547\">source</a><a href=\"#method.put_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32_le\" class=\"fn\">put_u32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#574\">source</a><a href=\"#method.put_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32_ne\" class=\"fn\">put_u32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u32_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#597\">source</a><a href=\"#method.put_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32\" class=\"fn\">put_i32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#620\">source</a><a href=\"#method.put_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32_le\" class=\"fn\">put_i32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#647\">source</a><a href=\"#method.put_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32_ne\" class=\"fn\">put_i32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i32_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#670\">source</a><a href=\"#method.put_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64\" class=\"fn\">put_u64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in the big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#693\">source</a><a href=\"#method.put_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64_le\" class=\"fn\">put_u64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#720\">source</a><a href=\"#method.put_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64_ne\" class=\"fn\">put_u64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u64_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#743\">source</a><a href=\"#method.put_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64\" class=\"fn\">put_i64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in the big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#766\">source</a><a href=\"#method.put_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64_le\" class=\"fn\">put_i64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#793\">source</a><a href=\"#method.put_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64_ne\" class=\"fn\">put_i64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i64_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#816\">source</a><a href=\"#method.put_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128\" class=\"fn\">put_u128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in the big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#839\">source</a><a href=\"#method.put_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128_le\" class=\"fn\">put_u128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#866\">source</a><a href=\"#method.put_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128_ne\" class=\"fn\">put_u128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_u128_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#889\">source</a><a href=\"#method.put_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128\" class=\"fn\">put_i128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in the big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#912\">source</a><a href=\"#method.put_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128_le\" class=\"fn\">put_i128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#939\">source</a><a href=\"#method.put_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128_ne\" class=\"fn\">put_i128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_i128_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#962\">source</a><a href=\"#method.put_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint\" class=\"fn\">put_uint</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#990\">source</a><a href=\"#method.put_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint_le\" class=\"fn\">put_uint_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1023\">source</a><a href=\"#method.put_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint_ne\" class=\"fn\">put_uint_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_uint_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1050\">source</a><a href=\"#method.put_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int\" class=\"fn\">put_int</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1078\">source</a><a href=\"#method.put_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int_le\" class=\"fn\">put_int_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1111\">source</a><a href=\"#method.put_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int_ne\" class=\"fn\">put_int_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_int_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1139\">source</a><a href=\"#method.put_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32\" class=\"fn\">put_f32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1163\">source</a><a href=\"#method.put_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32_le\" class=\"fn\">put_f32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1191\">source</a><a href=\"#method.put_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32_ne\" class=\"fn\">put_f32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f32_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1215\">source</a><a href=\"#method.put_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64\" class=\"fn\">put_f64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1239\">source</a><a href=\"#method.put_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64_le\" class=\"fn\">put_f64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1267\">source</a><a href=\"#method.put_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64_ne\" class=\"fn\">put_f64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.put_f64_ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1285-1287\">source</a><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.limit\" class=\"fn\">limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"bytes/buf/limit/struct.Limit.html\" title=\"struct bytes::buf::limit::Limit\">Limit</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which can write at most <code>limit</code> bytes to <code>self</code>. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.limit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1317-1319\">source</a><a href=\"#method.writer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.writer\" class=\"fn\">writer</a>(self) -&gt; <a class=\"struct\" href=\"bytes/buf/writer/struct.Writer.html\" title=\"struct bytes::buf::writer::Writer\">Writer</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Writer&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which implements the <code>Write</code> trait for <code>self</code>. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.writer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/buf/buf_mut.rs.html#1345-1347\">source</a><a href=\"#method.chain_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.chain_mut\" class=\"fn\">chain_mut</a>&lt;U&gt;(self, next: U) -&gt; <a class=\"struct\" href=\"bytes/buf/chain/struct.Chain.html\" title=\"struct bytes::buf::chain::Chain\">Chain</a>&lt;Self, U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a>,\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this buffer with another. <a href=\"bytes/buf/buf_mut/trait.BufMut.html#method.chain_mut\">Read more</a></div></details></div></details>","BufMut","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3269\">source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3310\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3272\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Codec-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustls/msgs/codec.rs.html#211\">source</a><a href=\"#impl-Codec-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rustls/msgs/codec/trait.Codec.html\" title=\"trait rustls::msgs::codec::Codec\">Codec</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"rustls/msgs/codec/trait.Codec.html\" title=\"trait rustls::msgs::codec::Codec\">Codec</a> + <a class=\"trait\" href=\"rustls/msgs/codec/trait.TlsListElement.html\" title=\"trait rustls::msgs::codec::TlsListElement\">TlsListElement</a> + <a class=\"trait\" href=\"namada_core/tendermint/consensus/state/fmt/trait.Debug.html\" title=\"trait namada_core::tendermint::consensus::state::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implement <code>Codec</code> for lists of elements that implement <code>TlsListElement</code>.</p>\n<p><code>TlsListElement</code> provides the size of the length prefix for the list.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustls/msgs/codec.rs.html#212\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustls/msgs/codec/trait.Codec.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, bytes: &amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Function for encoding itself by appending itself to\nthe provided vec of bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustls/msgs/codec.rs.html#250\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustls/msgs/codec/trait.Codec.html#tymethod.read\" class=\"fn\">read</a>(r: &amp;mut <a class=\"struct\" href=\"rustls/msgs/codec/struct.Reader.html\" title=\"struct rustls::msgs::codec::Reader\">Reader</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"enum\" href=\"rustls/error/enum.InvalidMessage.html\" title=\"enum rustls::error::InvalidMessage\">InvalidMessage</a>&gt;</h4></section></summary><div class='docblock'>Function for decoding itself from the provided reader\nwill return Some if the decoding was successful or\nNone if it was not.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_encoding\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustls/msgs/codec.rs.html#101\">source</a><a href=\"#method.get_encoding\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustls/msgs/codec/trait.Codec.html#method.get_encoding\" class=\"fn\">get_encoding</a>(&amp;self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convenience function for encoding the implementation\ninto a vec and returning it</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustls/msgs/codec.rs.html#109\">source</a><a href=\"#method.read_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rustls/msgs/codec/trait.Codec.html#method.read_bytes\" class=\"fn\">read_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"rustls/error/enum.InvalidMessage.html\" title=\"enum rustls::error::InvalidMessage\">InvalidMessage</a>&gt;</h4></section></summary><div class='docblock'>Function for wrapping a call to the read function in\na Reader for the slice of bytes provided</div></details></div></details>","Codec","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/tendermint/consensus/state/fmt/trait.Debug.html\" title=\"trait namada_core::tendermint::consensus::state::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/tendermint/consensus/state/fmt/trait.Debug.html\" title=\"trait namada_core::tendermint::consensus::state::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3767\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/tendermint/consensus/state/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"namada_core/tendermint/consensus/state/fmt/struct.Formatter.html\" title=\"struct namada_core::tendermint::consensus::state::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/tendermint/consensus/state/fmt/struct.Error.html\" title=\"struct namada_core::tendermint::consensus::state::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"namada_core/tendermint/consensus/state/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-Vec%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/open_fastrlp/decode.rs.html#332-334\">source</a><a href=\"#impl-Decodable-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"open_fastrlp/decode/trait.Decodable.html\" title=\"trait open_fastrlp::decode::Decodable\">Decodable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"open_fastrlp/decode/trait.Decodable.html\" title=\"trait open_fastrlp::decode::Decodable\">Decodable</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/open_fastrlp/decode.rs.html#336\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"open_fastrlp/decode/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(buf: &amp;mut &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;E&gt;, <a class=\"enum\" href=\"open_fastrlp/decode/enum.DecodeError.html\" title=\"enum open_fastrlp::decode::DecodeError\">DecodeError</a>&gt;</h4></section></div></details>","Decodable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#83\">source</a><a href=\"#impl-Decodable-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"rlp/traits/trait.Decodable.html\" title=\"trait rlp::traits::Decodable\">Decodable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#84\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(rlp: &amp;<a class=\"struct\" href=\"rlp/rlpin/struct.Rlp.html\" title=\"struct rlp::rlpin::Rlp\">Rlp</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"rlp/error/enum.DecoderError.html\" title=\"enum rlp::error::DecoderError\">DecoderError</a>&gt;</h4></section></summary><div class='docblock'>Decode a value from RLP bytes</div></details></div></details>","Decodable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1225\">source</a><a href=\"#impl-Decode-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Decode.html\" title=\"trait parity_scale_codec::codec::Decode\">Decode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Decode.html\" title=\"trait parity_scale_codec::codec::Decode\">Decode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1226\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#tymethod.decode\" class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#316-319\">source</a><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.decode_into\" class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"parity_scale_codec/decode_finished/struct.DecodeFinished.html\" title=\"struct parity_scale_codec::decode_finished::DecodeFinished\">DecodeFinished</a>, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.decode_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#331\">source</a><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.skip\" class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#341\">source</a><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.encoded_fixed_size\" class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.encoded_fixed_size\">Read more</a></div></details></div></details>","Decode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeLength-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1401\">source</a><a href=\"#impl-DecodeLength-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/codec/trait.DecodeLength.html\" title=\"trait parity_scale_codec::codec::DecodeLength\">DecodeLength</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1401\">source</a><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.DecodeLength.html#tymethod.len\" class=\"fn\">len</a>(self_encoded: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Return the number of elements in <code>self_encoded</code>.</div></details></div></details>","DecodeLength","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeTarget-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bs58/decode.rs.html#99\">source</a><a href=\"#impl-DecodeTarget-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bs58/decode/trait.DecodeTarget.html\" title=\"trait bs58::decode::DecodeTarget\">DecodeTarget</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bs58/decode.rs.html#100-104\">source</a><a href=\"#method.decode_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bs58/decode/trait.DecodeTarget.html#tymethod.decode_with\" class=\"fn\">decode_with</a>(\n    &amp;mut self,\n    max_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    f: impl for&lt;'a&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;'a mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"bs58/decode/enum.Error.html\" title=\"enum bs58::decode::Error\">Error</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"bs58/decode/enum.Error.html\" title=\"enum bs58::decode::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Decodes into this buffer, provides the maximum length for implementations that wish to\npreallocate space, along with a function that will write bytes into the buffer and return\nthe length written to it.</div></details></div></details>","DecodeTarget","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#181-183\">source</a><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"der/decode/trait.DecodeValue.html\" title=\"trait der::decode::DecodeValue\">DecodeValue</a>&lt;'a&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/decode/trait.Decode.html\" title=\"trait der::decode::Decode\">Decode</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#185\">source</a><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/decode/trait.DecodeValue.html#tymethod.decode_value\" class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: <a class=\"struct\" href=\"der/header/struct.Header.html\" title=\"struct der::header::Header\">Header</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"der/reader/trait.Reader.html\" title=\"trait der::reader::Reader\">Reader</a>&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided <a href=\"der/reader/trait.Reader.html\" title=\"trait der::reader::Reader\"><code>Reader</code></a>.</div></details></div></details>","DecodeValue<'a>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Default.html\" title=\"trait namada_core::ibc::primitives::prelude::Default\">Default</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3760\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3257\">source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3259\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#1146-1148\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#1150-1152\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3743\">source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Drop.html\" title=\"trait namada_core::ibc::primitives::prelude::Drop\">Drop</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3744\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"namada_core/ibc/primitives/prelude/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DynamicUsage-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/memuse/lib.rs.html#311\">source</a><a href=\"#impl-DynamicUsage-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"memuse/trait.DynamicUsage.html\" title=\"trait memuse::DynamicUsage\">DynamicUsage</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"memuse/trait.DynamicUsage.html\" title=\"trait memuse::DynamicUsage\">DynamicUsage</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dynamic_usage\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/memuse/lib.rs.html#311\">source</a><a href=\"#method.dynamic_usage\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"memuse/trait.DynamicUsage.html#tymethod.dynamic_usage\" class=\"fn\">dynamic_usage</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns a best estimate of the amount of heap-allocated memory used by this type. <a href=\"memuse/trait.DynamicUsage.html#tymethod.dynamic_usage\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dynamic_usage_bounds\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/memuse/lib.rs.html#311\">source</a><a href=\"#method.dynamic_usage_bounds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"memuse/trait.DynamicUsage.html#tymethod.dynamic_usage_bounds\" class=\"fn\">dynamic_usage_bounds</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the lower and upper bounds on the amount of heap-allocated memory used by\nthis type. <a href=\"memuse/trait.DynamicUsage.html#tymethod.dynamic_usage_bounds\">Read more</a></div></details></div></details>","DynamicUsage","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/open_fastrlp/encode.rs.html#262-264\">source</a><a href=\"#impl-Encodable-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"open_fastrlp/encode/trait.Encodable.html\" title=\"trait open_fastrlp::encode::Encodable\">Encodable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"open_fastrlp/encode/trait.Encodable.html\" title=\"trait open_fastrlp::encode::Encodable\">Encodable</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/open_fastrlp/encode.rs.html#266\">source</a><a href=\"#method.length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"open_fastrlp/encode/trait.Encodable.html#method.length\" class=\"fn\">length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/open_fastrlp/encode.rs.html#270\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"open_fastrlp/encode/trait.Encodable.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, out: &amp;mut dyn <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a>)</h4></section></div></details>","Encodable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#77\">source</a><a href=\"#impl-Encodable-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"rlp/traits/trait.Encodable.html\" title=\"trait rlp::traits::Encodable\">Encodable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rlp_append\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#78\">source</a><a href=\"#method.rlp_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Encodable.html#tymethod.rlp_append\" class=\"fn\">rlp_append</a>(&amp;self, s: &amp;mut <a class=\"struct\" href=\"rlp/stream/struct.RlpStream.html\" title=\"struct rlp::stream::RlpStream\">RlpStream</a>)</h4></section></summary><div class='docblock'>Append a value to the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rlp_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/traits.rs.html#26\">source</a><a href=\"#method.rlp_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Encodable.html#method.rlp_bytes\" class=\"fn\">rlp_bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a></h4></section></summary><div class='docblock'>Get rlp-encoded bytes for this instance</div></details></div></details>","Encodable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAppend-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/encode_append.rs.html#54\">source</a><a href=\"#impl-EncodeAppend-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html\" title=\"trait parity_scale_codec::encode_append::EncodeAppend\">EncodeAppend</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/encode_append.rs.html#55\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The item that will be appended.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_or_new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/encode_append.rs.html#57-61\">source</a><a href=\"#method.append_or_new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html#tymethod.append_or_new\" class=\"fn\">append_or_new</a>&lt;EncodeLikeItem, I&gt;(\n    self_encoded: <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n    iter: I,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&lt;Item = EncodeLikeItem&gt;,\n    EncodeLikeItem: <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html\" title=\"trait parity_scale_codec::encode_append::EncodeAppend\">EncodeAppend</a>&gt;::<a class=\"associatedtype\" href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html#associatedtype.Item\" title=\"type parity_scale_codec::encode_append::EncodeAppend::Item\">Item</a>&gt;,\n    &lt;I as <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type namada_core::ibc::primitives::prelude::IntoIterator::IntoIter\">IntoIter</a>: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.ExactSizeIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::ExactSizeIterator\">ExactSizeIterator</a>,</div></h4></section></summary><div class='docblock'>Append all items in <code>iter</code> to the given <code>self_encoded</code> representation\nor if <code>self_encoded</code> value is empty, <code>iter</code> is encoded to the <code>Self</code> representation. <a href=\"parity_scale_codec/encode_append/trait.EncodeAppend.html#tymethod.append_or_new\">Read more</a></div></details></div></details>","EncodeAppend","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#134-136\">source</a><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.ULE.html\" title=\"trait zerovec::ule::ULE\">ULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#138\">source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#63\">source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#69\">source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#229-233\">source</a><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"zerovec/varzerovec/slice/struct.VarZeroSlice.html\" title=\"struct zerovec::varzerovec::slice::VarZeroSlice\">VarZeroSlice</a>&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,\n    E: <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;T&gt;,\n    F: <a class=\"trait\" href=\"zerovec/varzerovec/components/trait.VarZeroVecFormat.html\" title=\"trait zerovec::varzerovec::components::VarZeroVecFormat\">VarZeroVecFormat</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#235\">source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#241\">source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#246\">source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#168-170\">source</a><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#172\">source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#178\">source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/encode.rs.html#183\">source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeTarget-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bs58/encode.rs.html#57\">source</a><a href=\"#impl-EncodeTarget-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bs58/encode/trait.EncodeTarget.html\" title=\"trait bs58::encode::EncodeTarget\">EncodeTarget</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bs58/encode.rs.html#58-62\">source</a><a href=\"#method.encode_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bs58/encode/trait.EncodeTarget.html#tymethod.encode_with\" class=\"fn\">encode_with</a>(\n    &amp;mut self,\n    max_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    f: impl for&lt;'a&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;'a mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"bs58/encode/enum.Error.html\" title=\"enum bs58::encode::Error\">Error</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"bs58/encode/enum.Error.html\" title=\"enum bs58::encode::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encodes into this buffer, provides the maximum length for implementations that wish to\npreallocate space, along with a function that will encode ASCII bytes into the buffer and\nreturn the length written to it.</div></details></div></details>","EncodeTarget","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#199-201\">source</a><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/encode/trait.EncodeValue.html\" title=\"trait der::encode::EncodeValue\">EncodeValue</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/encode/trait.Encode.html\" title=\"trait der::encode::Encode\">Encode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#203\">source</a><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.EncodeValue.html#tymethod.value_len\" class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"der/length/struct.Length.html\" title=\"struct der::length::Length\">Length</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+<a href=\"der/length/struct.Length.html\" title=\"struct der::length::Length\"><code>Length</code></a> header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#208\">source</a><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.EncodeValue.html#tymethod.encode_value\" class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl <a class=\"trait\" href=\"der/writer/trait.Writer.html\" title=\"trait der::writer::Writer\">Writer</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+<a href=\"der/length/struct.Length.html\" title=\"struct der::length::Length\"><code>Length</code></a> header) as ASN.1 DER using the\nprovided <a href=\"der/writer/trait.Writer.html\" title=\"trait der::writer::Writer\"><code>Writer</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/encode.rs.html#131-133\">source</a><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.EncodeValue.html#method.header\" class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"der/header/struct.Header.html\" title=\"struct der::header::Header\">Header</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"der/tag/trait.Tagged.html\" title=\"trait der::tag::Tagged\">Tagged</a>,</div></h4></section></summary><div class='docblock'>Get the <a href=\"der/header/struct.Header.html\" title=\"struct der::header::Header\"><code>Header</code></a> used to encode this value.</div></details></div></details>","EncodeValue","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3687\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Extend.html\" title=\"trait namada_core::ibc::primitives::prelude::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Copy.html\" title=\"trait namada_core::ibc::primitives::prelude::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n<p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3689\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3701\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3475\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Extend.html\" title=\"trait namada_core::ibc::primitives::prelude::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3478\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3484\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3490\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#218\">source</a><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/tag/trait.FixedTag.html\" title=\"trait der::tag::FixedTag\">FixedTag</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#219\">source</a><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"der/tag/trait.FixedTag.html#associatedconstant.TAG\" class=\"constant\">TAG</a>: <a class=\"enum\" href=\"der/tag/enum.Tag.html\" title=\"enum der::tag::Tag\">Tag</a> = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3802\">source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3812\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&[T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3844\">source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3853\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&[T; N]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Signature%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/signature.rs.html#267\">source</a><a href=\"#impl-From%3C%26Signature%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"ethers_core/types/signature/struct.Signature.html\" title=\"struct ethers_core::types::signature::Signature\">Signature</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/signature.rs.html#268\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(src: &amp;<a class=\"struct\" href=\"ethers_core/types/signature/struct.Signature.html\" title=\"struct ethers_core::types::signature::Signature\">Signature</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&Signature>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3823\">source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3833\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&mut [T]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3860\">source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3869\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<&mut [T; N]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3972\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3981\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">\"123\"</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b'1'</span>, <span class=\"string\">b'2'</span>, <span class=\"string\">b'3'</span>]);</code></pre></div>\n</div></details></div></details>","From<&str>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3876\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3886\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<[T; N]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CAcknowledgement%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_core_channel_types/acknowledgement.rs.html#29\">source</a><a href=\"#impl-From%3CAcknowledgement%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/core/channel/types/acknowledgement/struct.Acknowledgement.html\" title=\"struct namada_core::ibc::core::channel::types::acknowledgement::Acknowledgement\">Acknowledgement</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_core_channel_types/acknowledgement.rs.html#29\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"namada_core/ibc/core/channel/types/acknowledgement/struct.Acknowledgement.html\" title=\"struct namada_core::ibc::core::channel::types::acknowledgement::Acknowledgement\">Acknowledgement</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Acknowledgement>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CAcknowledgementStatus%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_core_channel_types/acknowledgement.rs.html#125\">source</a><a href=\"#impl-From%3CAcknowledgementStatus%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/core/channel/types/acknowledgement/enum.AcknowledgementStatus.html\" title=\"enum namada_core::ibc::core::channel::types::acknowledgement::AcknowledgementStatus\">AcknowledgementStatus</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Converts an acknowledgement result into a vector of bytes.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_core_channel_types/acknowledgement.rs.html#126\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(ack: <a class=\"enum\" href=\"namada_core/ibc/core/channel/types/acknowledgement/enum.AcknowledgementStatus.html\" title=\"enum namada_core::ibc::core::channel::types::acknowledgement::AcknowledgementStatus\">AcknowledgementStatus</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<AcknowledgementStatus>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CAppHash%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tendermint/hash.rs.html#220\">source</a><a href=\"#impl-From%3CAppHash%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/tendermint/struct.AppHash.html\" title=\"struct namada_core::tendermint::AppHash\">AppHash</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tendermint/hash.rs.html#221\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"namada_core/tendermint/struct.AppHash.html\" title=\"struct namada_core::tendermint::AppHash\">AppHash</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<AppHash>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1814\">source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1819\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitvec/vec/traits.rs.html#302-305\">source</a><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"bitvec/vec/struct.BitVec.html\" title=\"struct bitvec::vec::BitVec\">BitVec</a>&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bitvec/store/trait.BitStore.html\" title=\"trait bitvec::store::BitStore\">BitStore</a>,\n    O: <a class=\"trait\" href=\"bitvec/order/trait.BitOrder.html\" title=\"trait bitvec::order::BitOrder\">BitOrder</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitvec/vec/traits.rs.html#308\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: <a class=\"struct\" href=\"bitvec/vec/struct.BitVec.html\" title=\"struct bitvec::vec::BitVec\">BitVec</a>&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3924\">source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.Box.html\" title=\"struct namada_core::ibc::primitives::prelude::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3934\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.Box.html\" title=\"struct namada_core::ibc::primitives::prelude::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details></div></details>","From<Box<[T], A>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#1058\">source</a><a href=\"#impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#1059\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: <a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1711\">source</a><a href=\"#impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1712\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: <a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BytesMut>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#727\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#732\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a> into a <code><a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n<p>The conversion consumes the <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a>, and removes the terminating NUL byte.</p>\n</div></details></div></details>","From<CString>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCommitmentProofBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ibc_core_commitment_types/commitment.rs.html#74\">source</a><a href=\"#impl-From%3CCommitmentProofBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/core/commitment_types/commitment/struct.CommitmentProofBytes.html\" title=\"struct namada_core::ibc::core::commitment_types::commitment::CommitmentProofBytes\">CommitmentProofBytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ibc_core_commitment_types/commitment.rs.html#74\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"namada_core/ibc/core/commitment_types/commitment/struct.CommitmentProofBytes.html\" title=\"struct namada_core::ibc::core::commitment_types::commitment::CommitmentProofBytes\">CommitmentProofBytes</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CommitmentProofBytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3897-3899\">source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.ToOwned.html\" title=\"trait namada_core::ibc::primitives::prelude::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3916\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div>\n</div></details></div></details>","From<Cow<'a, [T]>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHash%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tendermint/hash.rs.html#49\">source</a><a href=\"#impl-From%3CHash%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"enum\" href=\"namada_core/tendermint/enum.Hash.html\" title=\"enum namada_core::tendermint::Hash\">Hash</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tendermint/hash.rs.html#50\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"namada_core/tendermint/enum.Hash.html\" title=\"enum namada_core::tendermint::Hash\">Hash</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Hash>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHexOrBin%3CUPPERCASE%3E%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serdect/slice.rs.html#191\">source</a><a href=\"#impl-From%3CHexOrBin%3CUPPERCASE%3E%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const UPPERCASE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"serdect/slice/struct.HexOrBin.html\" title=\"struct serdect::slice::HexOrBin\">HexOrBin</a>&lt;UPPERCASE&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serdect/slice.rs.html#192\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"serdect/slice/struct.HexOrBin.html\" title=\"struct serdect::slice::HexOrBin\">HexOrBin</a>&lt;UPPERCASE&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HexOrBin<UPPERCASE>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CId%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tendermint/account.rs.html#39\">source</a><a href=\"#impl-From%3CId%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/tendermint/account/struct.Id.html\" title=\"struct namada_core::tendermint::account::Id\">Id</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tendermint/account.rs.html#40\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"namada_core/tendermint/account/struct.Id.html\" title=\"struct namada_core::tendermint::account::Id\">Id</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Id>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonEmpty%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nonempty/lib.rs.html#716\">source</a><a href=\"#impl-From%3CNonEmpty%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"nonempty/struct.NonEmpty.html\" title=\"struct nonempty::NonEmpty\">NonEmpty</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nonempty/lib.rs.html#718\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(nonempty: <a class=\"struct\" href=\"nonempty/struct.NonEmpty.html\" title=\"struct nonempty::NonEmpty\">NonEmpty</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Turns a non-empty list into a Vec.</p>\n</div></details></div></details>","From<NonEmpty<T>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/set_of.rs.html#372-374\">source</a><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"der/asn1/set_of/struct.SetOfVec.html\" title=\"struct der::asn1::set_of::SetOfVec\">SetOfVec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/ord/trait.DerOrd.html\" title=\"trait der::ord::DerOrd\">DerOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/set_of.rs.html#376\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: <a class=\"struct\" href=\"der/asn1/set_of/struct.SetOfVec.html\" title=\"struct der::asn1::set_of::SetOfVec\">SetOfVec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/signature.rs.html#273\">source</a><a href=\"#impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"ethers_core/types/signature/struct.Signature.html\" title=\"struct ethers_core::types::signature::Signature\">Signature</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/signature.rs.html#274\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(src: <a class=\"struct\" href=\"ethers_core/types/signature/struct.Signature.html\" title=\"struct ethers_core::types::signature::Signature\">Signature</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Signature>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tendermint/signature.rs.html#38\">source</a><a href=\"#impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/tendermint/struct.Signature.html\" title=\"struct namada_core::tendermint::Signature\">Signature</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tendermint/signature.rs.html#39\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"namada_core/tendermint/struct.Signature.html\" title=\"struct namada_core::tendermint::Signature\">Signature</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Signature>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3058\">source</a></span><a href=\"#impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3071\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(string: <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\"><code>String</code></a> to a vector <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\"><code>Vec</code></a> that holds values of type <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1 = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>v1 = Vec::from(s1);\n\n<span class=\"kw\">for </span>b <span class=\"kw\">in </span>v1 {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{b}\"</span>);\n}</code></pre></div>\n</div></details></div></details>","From<String>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CTopic%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethabi/filter.rs.html#112\">source</a><a href=\"#impl-From%3CTopic%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"enum\" href=\"ethabi/filter/enum.Topic.html\" title=\"enum ethabi::filter::Topic\">Topic</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethabi/filter.rs.html#113\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(topic: <a class=\"enum\" href=\"ethabi/filter/enum.Topic.html\" title=\"enum ethabi::filter::Topic\">Topic</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Topic<T>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CTreeBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/namada_core/storage.rs.html#444-448\">source</a><a href=\"#impl-From%3CTreeBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"namada_core/storage/struct.TreeBytes.html\" title=\"struct namada_core::storage::TreeBytes\">TreeBytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/namada_core/storage.rs.html#445-447\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: <a class=\"struct\" href=\"namada_core/storage/struct.TreeBytes.html\" title=\"struct namada_core::storage::TreeBytes\">TreeBytes</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<TreeBytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3008\">source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.From.html\" title=\"trait namada_core::ibc::primitives::prelude::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3038\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div>\n</div></details></div></details>","From<VecDeque<T, A>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBase32-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-FromBase32-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromBase32 for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_base32\" class=\"method trait-impl\"><a href=\"#method.from_base32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_base32</a>(b32: &amp;[u5]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as FromBase32&gt;::Err&gt;</h4></section></summary><div class=\"docblock\"><p>Convert base32 to base256, removes null-padding if present, returns\n<code>Err(Error::InvalidPadding)</code> if padding bits are unequal <code>0</code></p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Err</a> = Error</h4></section></summary><div class='docblock'>The associated error which can be returned from parsing (e.g. because of bad padding).</div></details></div></details>","FromBase32","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBase32-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-FromBase32-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromBase32 for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_base32\" class=\"method trait-impl\"><a href=\"#method.from_base32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_base32</a>(b32: &amp;[u5]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as FromBase32&gt;::Err&gt;</h4></section></summary><div class=\"docblock\"><p>Convert base32 to base256, removes null-padding if present, returns\n<code>Err(Error::InvalidPadding)</code> if padding bits are unequal <code>0</code></p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Err</a> = Error</h4></section></summary><div class='docblock'>The associated error which can be returned from parsing (e.g. because of bad padding).</div></details></div></details>","FromBase32","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromHex-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/const_hex/traits.rs.html#219\">source</a><a href=\"#impl-FromHex-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"const_hex/traits/trait.FromHex.html\" title=\"trait const_hex::traits::FromHex\">FromHex</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/const_hex/traits.rs.html#220\">source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"const_hex/traits/trait.FromHex.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"hex/error/enum.FromHexError.html\" title=\"enum hex::error::FromHexError\">FromHexError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/const_hex/traits.rs.html#223\">source</a><a href=\"#method.from_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"const_hex/traits/trait.FromHex.html#tymethod.from_hex\" class=\"fn\">from_hex</a>&lt;T&gt;(hex: T) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"const_hex/traits/trait.FromHex.html\" title=\"trait const_hex::traits::FromHex\">FromHex</a>&gt;::<a class=\"associatedtype\" href=\"const_hex/traits/trait.FromHex.html#associatedtype.Error\" title=\"type const_hex::traits::FromHex::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of type <code>Self</code> from the given hex string, or fails\nwith a custom error type. <a href=\"const_hex/traits/trait.FromHex.html#tymethod.from_hex\">Read more</a></div></details></div></details>","FromHex","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromHex-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hex/lib.rs.html#188\">source</a><a href=\"#impl-FromHex-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/hex/lib.rs.html#189\">source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"hex/trait.FromHex.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"hex/error/enum.FromHexError.html\" title=\"enum hex::error::FromHexError\">FromHexError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hex/lib.rs.html#191\">source</a><a href=\"#method.from_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hex/trait.FromHex.html#tymethod.from_hex\" class=\"fn\">from_hex</a>&lt;T&gt;(hex: T) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a>&gt;::<a class=\"associatedtype\" href=\"hex/trait.FromHex.html#associatedtype.Error\" title=\"type hex::FromHex::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.AsRef.html\" title=\"trait namada_core::ibc::primitives::prelude::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of type <code>Self</code> from the given hex string, or fails\nwith a custom error type. <a href=\"hex/trait.FromHex.html#tymethod.from_hex\">Read more</a></div></details></div></details>","FromHex","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3406\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"namada_core/ibc/primitives/prelude/trait.Iterator.html#method.collect\" title=\"method namada_core::ibc::primitives::prelude::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n<h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"namada_core/ibc/primitives/prelude/trait.Iterator.html#method.size_hint\" title=\"method namada_core::ibc::primitives::prelude::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.shrink_to\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"namada_core/ibc/primitives/prelude/struct.Box.html\" title=\"struct namada_core::ibc::primitives::prelude::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3409\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/iter/from_par_iter.rs.html#25-27\">source</a><a href=\"#impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rayon/iter/trait.FromParallelIterator.html\" title=\"trait rayon::iter::FromParallelIterator\">FromParallelIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Send.html\" title=\"trait namada_core::ibc::primitives::prelude::Send\">Send</a>,</div></h3></section></summary><div class=\"docblock\"><p>Collects items from a parallel iterator into a vector.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/iter/from_par_iter.rs.html#29-31\">source</a><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\" class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a href=\"rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\">Read more</a></div></details></div></details>","FromParallelIterator<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3327\">source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3329\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3339\">source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3340\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3343\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#736\">source</a><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"aho_corasick/util/primitives/struct.PatternID.html\" title=\"struct aho_corasick::util::primitives::PatternID\">PatternID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#736\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#736\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"aho_corasick/util/primitives/struct.PatternID.html\" title=\"struct aho_corasick::util::primitives::PatternID\">PatternID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#753\">source</a><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.PatternID.html\" title=\"struct regex_automata::util::primitives::PatternID\">PatternID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#753\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#753\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.PatternID.html\" title=\"struct regex_automata::util::primitives::PatternID\">PatternID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#255\">source</a><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#256\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#259\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#289\">source</a><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.SmallIndex.html\" title=\"struct regex_automata::util::primitives::SmallIndex\">SmallIndex</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#290\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#293\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.SmallIndex.html\" title=\"struct regex_automata::util::primitives::SmallIndex\">SmallIndex</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#737\">source</a><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"aho_corasick/util/primitives/struct.StateID.html\" title=\"struct aho_corasick::util::primitives::StateID\">StateID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#737\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#737\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"aho_corasick/util/primitives/struct.StateID.html\" title=\"struct aho_corasick::util::primitives::StateID\">StateID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#754\">source</a><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.StateID.html\" title=\"struct regex_automata::util::primitives::StateID\">StateID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#754\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#754\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.StateID.html\" title=\"struct regex_automata::util::primitives::StateID\">StateID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3353\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3355\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#736\">source</a><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"aho_corasick/util/primitives/struct.PatternID.html\" title=\"struct aho_corasick::util::primitives::PatternID\">PatternID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#736\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"aho_corasick/util/primitives/struct.PatternID.html\" title=\"struct aho_corasick::util::primitives::PatternID\">PatternID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#753\">source</a><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.PatternID.html\" title=\"struct regex_automata::util::primitives::PatternID\">PatternID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#753\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.PatternID.html\" title=\"struct regex_automata::util::primitives::PatternID\">PatternID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#264\">source</a><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#266\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#299\">source</a><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.SmallIndex.html\" title=\"struct regex_automata::util::primitives::SmallIndex\">SmallIndex</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#301\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.SmallIndex.html\" title=\"struct regex_automata::util::primitives::SmallIndex\">SmallIndex</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#737\">source</a><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"aho_corasick/util/primitives/struct.StateID.html\" title=\"struct aho_corasick::util::primitives::StateID\">StateID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aho_corasick/util/primitives.rs.html#737\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"aho_corasick/util/primitives/struct.StateID.html\" title=\"struct aho_corasick::util::primitives::StateID\">StateID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#754\">source</a><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"regex_automata/util/primitives/struct.StateID.html\" title=\"struct regex_automata::util::primitives::StateID\">StateID</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex_automata/util/primitives.rs.html#754\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"regex_automata/util/primitives/struct.StateID.html\" title=\"struct regex_automata::util::primitives::StateID\">StateID</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/value.rs.html#1136-1139\">source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/value.rs.html#1141\">source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type namada_core::ibc::primitives::prelude::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/value.rs.html#1143\">source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3415\">source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3436\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type namada_core::ibc::primitives::prelude::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3416\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3417\">source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.IntoIter.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/vec.rs.html#42\">source</a><a href=\"#impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Send.html\" title=\"trait namada_core::ibc::primitives::prelude::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rayon/vec.rs.html#43\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/rayon/vec.rs.html#44\">source</a><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"rayon/vec/struct.IntoIter.html\" title=\"struct rayon::vec::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/vec.rs.html#46\">source</a><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\" class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&gt;::<a class=\"associatedtype\" href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" title=\"type rayon::iter::IntoParallelIterator::Iter\">Iter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoParallelIterator&gt;::Iter\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a href=\"rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\">Read more</a></div></details></div></details>","IntoParallelIterator","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/axum_core/response/into_response.rs.html#303\">source</a><a href=\"#impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"axum_core/response/into_response/trait.IntoResponse.html\" title=\"trait axum_core::response::into_response::IntoResponse\">IntoResponse</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_response\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/axum_core/response/into_response.rs.html#304\">source</a><a href=\"#method.into_response\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"axum_core/response/into_response/trait.IntoResponse.html#tymethod.into_response\" class=\"fn\">into_response</a>(self) -&gt; <a class=\"struct\" href=\"http/response/struct.Response.html\" title=\"struct http::response::Response\">Response</a>&lt;<a class=\"struct\" href=\"axum_core/body/struct.Body.html\" title=\"struct axum_core::body::Body\">Body</a>&gt;</h4></section></summary><div class='docblock'>Create a response.</div></details></div></details>","IntoResponse","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/schemars/json_schema_impls/sequences.rs.html#74\">source</a><a href=\"#impl-JsonSchema-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"schemars/trait.JsonSchema.html\" title=\"trait schemars::JsonSchema\">JsonSchema</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"schemars/trait.JsonSchema.html\" title=\"trait schemars::JsonSchema\">JsonSchema</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/schemars/json_schema_impls/sequences.rs.html#74\">source</a><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"schemars/trait.JsonSchema.html#method.is_referenceable\" class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a href=\"schemars/trait.JsonSchema.html#method.is_referenceable\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/schemars/json_schema_impls/sequences.rs.html#74\">source</a><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"schemars/trait.JsonSchema.html#tymethod.schema_name\" class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a href=\"schemars/trait.JsonSchema.html#tymethod.schema_name\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/schemars/json_schema_impls/sequences.rs.html#74\">source</a><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"schemars/trait.JsonSchema.html#method.schema_id\" class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a href=\"schemars/trait.JsonSchema.html#method.schema_id\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/schemars/json_schema_impls/sequences.rs.html#74\">source</a><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"schemars/trait.JsonSchema.html#tymethod.json_schema\" class=\"fn\">json_schema</a>(gen: &amp;mut <a class=\"struct\" href=\"schemars/gen/struct.SchemaGenerator.html\" title=\"struct schemars::gen::SchemaGenerator\">SchemaGenerator</a>) -&gt; <a class=\"enum\" href=\"schemars/schema/enum.Schema.html\" title=\"enum schemars::schema::Schema\">Schema</a></h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a href=\"schemars/trait.JsonSchema.html#tymethod.json_schema\">Read more</a></div></details></div></details>","JsonSchema","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Message-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#359\">source</a><a href=\"#impl-Message-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"prost/message/trait.Message.html\" title=\"trait prost::message::Message\">Message</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#378\">source</a><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#tymethod.encoded_len\" class=\"fn\">encoded_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the encoded length of the message without a length delimiter.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#385\">source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clears the message, resetting all fields to their default.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#48-50\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.encode\" class=\"fn\">encode</a>(&amp;self, buf: &amp;mut impl <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a buffer. <a href=\"prost/message/trait.Message.html#method.encode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#63-65\">source</a><a href=\"#method.encode_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.encode_to_vec\" class=\"fn\">encode_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#76-78\">source</a><a href=\"#method.encode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.encode_length_delimited\" class=\"fn\">encode_length_delimited</a>(\n    &amp;self,\n    buf: &amp;mut impl <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a>,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a buffer. <a href=\"prost/message/trait.Message.html#method.encode_length_delimited\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#92-94\">source</a><a href=\"#method.encode_length_delimited_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.encode_length_delimited_to_vec\" class=\"fn\">encode_length_delimited_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#107-109\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.decode\" class=\"fn\">decode</a>(buf: impl <a class=\"trait\" href=\"bytes/buf/buf_impl/trait.Buf.html\" title=\"trait bytes::buf::buf_impl::Buf\">Buf</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Default.html\" title=\"trait namada_core::ibc::primitives::prelude::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer. <a href=\"prost/message/trait.Message.html#method.decode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#116-118\">source</a><a href=\"#method.decode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.decode_length_delimited\" class=\"fn\">decode_length_delimited</a>(buf: impl <a class=\"trait\" href=\"bytes/buf/buf_impl/trait.Buf.html\" title=\"trait bytes::buf::buf_impl::Buf\">Buf</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Default.html\" title=\"trait namada_core::ibc::primitives::prelude::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from the buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#128-130\">source</a><a href=\"#method.merge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.merge\" class=\"fn\">merge</a>(&amp;mut self, buf: impl <a class=\"trait\" href=\"bytes/buf/buf_impl/trait.Buf.html\" title=\"trait bytes::buf::buf_impl::Buf\">Buf</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer, and merges it into <code>self</code>. <a href=\"prost/message/trait.Message.html#method.merge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/message.rs.html#142-144\">source</a><a href=\"#method.merge_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/message/trait.Message.html#method.merge_length_delimited\" class=\"fn\">merge_length_delimited</a>(&amp;mut self, buf: impl <a class=\"trait\" href=\"bytes/buf/buf_impl/trait.Buf.html\" title=\"trait bytes::buf::buf_impl::Buf\">Buf</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from buffer, and\nmerges it into <code>self</code>.</div></details></div></details>","Message","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Name-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#391\">source</a><a href=\"#impl-Name-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"prost/name/trait.Name.html\" title=\"trait prost::name::Name\">Name</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#392\">source</a><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"prost/name/trait.Name.html#associatedconstant.NAME\" class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;BytesValue&quot;</h4></section></summary><div class='docblock'>Simple name for this <a href=\"prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nThis name is the same as it appears in the source .proto file, e.g. <code>FooBar</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.PACKAGE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#393\">source</a><a href=\"#associatedconstant.PACKAGE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"prost/name/trait.Name.html#associatedconstant.PACKAGE\" class=\"constant\">PACKAGE</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;google.protobuf&quot;</h4></section></summary><div class='docblock'>Package name this message type is contained in. They are domain-like\nand delimited by <code>.</code>, e.g. <code>google.protobuf</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_url\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/types.rs.html#395\">source</a><a href=\"#method.type_url\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/name/trait.Name.html#method.type_url\" class=\"fn\">type_url</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a></h4></section></summary><div class='docblock'>Type URL for this <a href=\"prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>, which by default is the full name with a\nleading slash, but may also include a leading domain name, e.g.\n<code>type.googleapis.com/google.profile.Person</code>.\nThis can be used when serializing into the <code>google.protobuf.Any</code> type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/prost/name.rs.html#23\">source</a><a href=\"#method.full_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"prost/name/trait.Name.html#method.full_name\" class=\"fn\">full_name</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.String.html\" title=\"struct namada_core::ibc::primitives::prelude::String\">String</a></h4></section></summary><div class='docblock'>Fully-qualified unique name for this <a href=\"prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nIt’s prefixed with the package name and names of any parent messages,\ne.g. <code>google.rpc.BadRequest.FieldViolation</code>.\nBy default, this is the package name followed by the message name.\nFully-qualified names must be unique within a domain of Type URLs.</div></details></div></details>","Name","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3735\">source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Ord.html\" title=\"trait namada_core::ibc::primitives::prelude::Ord\">Ord</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Ord.html\" title=\"trait namada_core::ibc::primitives::prelude::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#lexicographical-comparison\" title=\"trait namada_core::ibc::primitives::prelude::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3737\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#980-982\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1001-1003\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1027-1029\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/iter/extend.rs.html#599-601\">source</a><a href=\"#impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"rayon/iter/trait.ParallelExtend.html\" title=\"trait rayon::iter::ParallelExtend\">ParallelExtend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Copy.html\" title=\"trait namada_core::ibc::primitives::prelude::Copy\">Copy</a> + <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Send.html\" title=\"trait namada_core::ibc::primitives::prelude::Send\">Send</a> + <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sync.html\" title=\"trait namada_core::ibc::primitives::prelude::Sync\">Sync</a>,</div></h3></section></summary><div class=\"docblock\"><p>Extends a vector with copied items from a parallel iterator.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/iter/extend.rs.html#603-605\">source</a><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.ParallelExtend.html#tymethod.par_extend\" class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a href=\"rayon/iter/trait.ParallelExtend.html#tymethod.par_extend\">Read more</a></div></details></div></details>","ParallelExtend<&'a T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/iter/extend.rs.html#569-571\">source</a><a href=\"#impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rayon/iter/trait.ParallelExtend.html\" title=\"trait rayon::iter::ParallelExtend\">ParallelExtend</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Send.html\" title=\"trait namada_core::ibc::primitives::prelude::Send\">Send</a>,</div></h3></section></summary><div class=\"docblock\"><p>Extends a vector with items from a parallel iterator.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/iter/extend.rs.html#573-575\">source</a><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.ParallelExtend.html#tymethod.par_extend\" class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a href=\"rayon/iter/trait.ParallelExtend.html#tymethod.par_extend\">Read more</a></div></details></div></details>","ParallelExtend<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#865\">source</a><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#866\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/bytes.rs.html#179\">source</a><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"ethers_core/types/bytes/struct.Bytes.html\" title=\"struct ethers_core::types::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/types/bytes.rs.html#180\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"ethers_core/types/bytes/struct.Bytes.html\" title=\"struct ethers_core::types::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1621\">source</a><a href=\"#impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1622\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<BytesMut>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#871\">source</a><a href=\"#impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes.rs.html#872\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bytes/bytes/struct.Bytes.html\" title=\"struct bytes::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1335\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1353\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1371\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1389\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1627\">source</a><a href=\"#impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bytes/bytes_mut.rs.html#1628\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1335\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1353\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1371\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1389\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BytesMut>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3718-3722\">source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"namada_core/ibc/primitives/prelude/trait.Ord.html#lexicographical-comparison\" title=\"trait namada_core::ibc::primitives::prelude::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3725\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1335\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1353\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1371\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1389\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"namada_core/ibc/primitives/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Replacer-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/regex/regex/bytes.rs.html#2512\">source</a><a href=\"#impl-Replacer-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"regex/regex/bytes/trait.Replacer.html\" title=\"trait regex::regex::bytes::Replacer\">Replacer</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_append\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex/regex/bytes.rs.html#2513\">source</a><a href=\"#method.replace_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"regex/regex/bytes/trait.Replacer.html#tymethod.replace_append\" class=\"fn\">replace_append</a>(&amp;mut self, caps: &amp;<a class=\"struct\" href=\"regex/regex/bytes/struct.Captures.html\" title=\"struct regex::regex::bytes::Captures\">Captures</a>&lt;'_&gt;, dst: &amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Appends possibly empty data to <code>dst</code> to replace the current match. <a href=\"regex/regex/bytes/trait.Replacer.html#tymethod.replace_append\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_expansion\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex/regex/bytes.rs.html#2517\">source</a><a href=\"#method.no_expansion\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"regex/regex/bytes/trait.Replacer.html#method.no_expansion\" class=\"fn\">no_expansion</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;&gt;</h4></section></summary><div class='docblock'>Return a fixed unchanging replacement byte string. <a href=\"regex/regex/bytes/trait.Replacer.html#method.no_expansion\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/regex/regex/bytes.rs.html#2467\">source</a><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"regex/regex/bytes/trait.Replacer.html#method.by_ref\" class=\"fn\">by_ref</a>&lt;'r&gt;(&amp;'r mut self) -&gt; <a class=\"struct\" href=\"regex/regex/bytes/struct.ReplacerRef.html\" title=\"struct regex::regex::bytes::ReplacerRef\">ReplacerRef</a>&lt;'r, Self&gt;</h4></section></summary><div class='docblock'>Returns a type that implements <code>Replacer</code>, but that borrows and wraps\nthis <code>Replacer</code>. <a href=\"regex/regex/bytes/trait.Replacer.html#method.by_ref\">Read more</a></div></details></div></details>","Replacer","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#257-261\">source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#257-261\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SignableBytes-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/namada_core/key/mod.rs.html#460\">source</a><a href=\"#impl-SignableBytes-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"namada_core/key/trait.SignableBytes.html\" title=\"trait namada_core::key::SignableBytes\">SignableBytes</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.signable_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/namada_core/key/mod.rs.html#455-457\">source</a><a href=\"#method.signable_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/key/trait.SignableBytes.html#method.signable_hash\" class=\"fn\">signable_hash</a>&lt;H: <a class=\"trait\" href=\"namada_core/hash/trait.StorageHasher.html\" title=\"trait namada_core::hash::StorageHasher\">StorageHasher</a>&gt;(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]</h4></section></summary><div class='docblock'>Calculate a hash value to sign over.</div></details></div></details>","SignableBytes","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#168\">source</a><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#169\">source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"futures_sink/trait.Sink.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#171\">source</a><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_sink/trait.Sink.html#tymethod.poll_ready\" class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"futures_sink/trait.Sink.html#associatedtype.Error\" title=\"type futures_sink::Sink::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a href=\"futures_sink/trait.Sink.html#tymethod.poll_ready\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#175\">source</a><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_sink/trait.Sink.html#tymethod.start_send\" class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"futures_sink/trait.Sink.html#associatedtype.Error\" title=\"type futures_sink::Sink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a href=\"futures_sink/trait.Sink.html#tymethod.start_send\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#181\">source</a><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_sink/trait.Sink.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"futures_sink/trait.Sink.html#associatedtype.Error\" title=\"type futures_sink::Sink::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a href=\"futures_sink/trait.Sink.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/futures_sink/lib.rs.html#185\">source</a><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_sink/trait.Sink.html#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"futures_sink/trait.Sink.html#associatedtype.Error\" title=\"type futures_sink::Sink::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a href=\"futures_sink/trait.Sink.html#tymethod.poll_close\">Read more</a></div></details></div></details>","Sink<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tokenizable-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#316\">source</a><a href=\"#impl-Tokenizable-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.Tokenizable.html\" title=\"trait ethers_core::abi::tokens::Tokenizable\">Tokenizable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#317\">source</a><a href=\"#method.from_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/tokens/trait.Tokenizable.html#tymethod.from_token\" class=\"fn\">from_token</a>(token: <a class=\"enum\" href=\"namada_core/eth_abi/enum.Token.html\" title=\"enum namada_core::eth_abi::Token\">Token</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"ethers_core/abi/tokens/struct.InvalidOutputType.html\" title=\"struct ethers_core::abi::tokens::InvalidOutputType\">InvalidOutputType</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>Token</code> into expected type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#326\">source</a><a href=\"#method.into_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/tokens/trait.Tokenizable.html#tymethod.into_token\" class=\"fn\">into_token</a>(self) -&gt; <a class=\"enum\" href=\"namada_core/eth_abi/enum.Token.html\" title=\"enum namada_core::eth_abi::Token\">Token</a></h4></section></summary><div class='docblock'>Converts a specified type back into token.</div></details></div></details>","Tokenizable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tokenizable-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#301\">source</a><a href=\"#impl-Tokenizable-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.Tokenizable.html\" title=\"trait ethers_core::abi::tokens::Tokenizable\">Tokenizable</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#302\">source</a><a href=\"#method.from_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/tokens/trait.Tokenizable.html#tymethod.from_token\" class=\"fn\">from_token</a>(token: <a class=\"enum\" href=\"namada_core/eth_abi/enum.Token.html\" title=\"enum namada_core::eth_abi::Token\">Token</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"ethers_core/abi/tokens/struct.InvalidOutputType.html\" title=\"struct ethers_core::abi::tokens::InvalidOutputType\">InvalidOutputType</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>Token</code> into expected type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#311\">source</a><a href=\"#method.into_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ethers_core/abi/tokens/trait.Tokenizable.html#tymethod.into_token\" class=\"fn\">into_token</a>(self) -&gt; <a class=\"enum\" href=\"namada_core/eth_abi/enum.Token.html\" title=\"enum namada_core::eth_abi::Token\">Token</a></h4></section></summary><div class='docblock'>Converts a specified type back into token.</div></details></div></details>","Tokenizable","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scale_info/impls.rs.html#158-160\">source</a><a href=\"#impl-TypeInfo-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"scale_info/trait.TypeInfo.html\" title=\"trait scale_info::TypeInfo\">TypeInfo</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"scale_info/trait.TypeInfo.html\" title=\"trait scale_info::TypeInfo\">TypeInfo</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/scale_info/impls.rs.html#162\">source</a><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"scale_info/trait.TypeInfo.html#associatedtype.Identity\" class=\"associatedtype\">Identity</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a href=\"scale_info/trait.TypeInfo.html#associatedtype.Identity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/scale_info/impls.rs.html#164\">source</a><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scale_info/trait.TypeInfo.html#tymethod.type_info\" class=\"fn\">type_info</a>() -&gt; <a class=\"struct\" href=\"scale_info/ty/struct.Type.html\" title=\"struct scale_info::ty::Type\">Type</a></h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#223-225\">source</a><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/ord/trait.ValueOrd.html\" title=\"trait der::ord::ValueOrd\">ValueOrd</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/ord/trait.DerOrd.html\" title=\"trait der::ord::DerOrd\">DerOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/sequence_of.rs.html#227\">source</a><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/ord/trait.ValueOrd.html#tymethod.value_cmp\" class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"enum\" href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\">Ordering</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"namada_core/tendermint/consensus/state/enum.Ordering.html\" title=\"enum namada_core::tendermint::consensus::state::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#406\">source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#422\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#482\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.capacity\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#498\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#605\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#717\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div>\n</div></details></div></details>",0,"namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2963\">source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2990\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"namada_core/ibc/primitives/prelude/trait.Default.html\" title=\"trait namada_core::ibc::primitives::prelude::Default\"><code>Default</code></a> instead of\n<a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\"><code>Clone</code></a>), use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.resize_with\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.truncate\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3022\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is same as <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.extend\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::extend\"><code>extend</code></a> except that it is\nspecialized to work with slices instead. If and when Rust gets\nspecialization this function will likely be deprecated (but still\navailable).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3050-3052\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Copies elements from <code>src</code> range to the end of the vector.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n\nvec.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\nvec.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\nvec.extend_from_within(<span class=\"number\">4</span>..<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details></div></details>",0,"namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3141\">source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3158\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details></div></details>",0,"namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3505\">source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3605-3608\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Splice.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type namada_core::ibc::primitives::prelude::IntoIterator::IntoIter\">IntoIter</a>, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Splice&lt;&#39;_, &lt;I as IntoIterator&gt;::IntoIter, A&gt;\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.IntoIterator.html\" title=\"trait namada_core::ibc::primitives::prelude::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the iterator is not consumed until the end.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3664-3666\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, filter: F) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.ExtractIf.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf&lt;&#39;_, T, F, A&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extract_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element should be removed.</p>\n<p>If the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the vector and will not be yielded\nby the iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.retain\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">while </span>i &lt; vec.len() {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>Note that <code>extract_if</code> also lets you mutate every element in the filter closure,\nregardless of whether you choose to keep or remove it.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting an array into evens and odds, reusing the original allocation:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(extract_if)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(|x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n</div></details></div></details>",0,"namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#722\">source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#739\">source</a><h4 class=\"code-header\">pub const fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#802\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.capacity\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#820\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#934\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1050\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1088\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1130\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_parts\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_parts\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1176\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1227\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1246\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1270\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1301\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1338\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1381\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.try_reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.try_reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1406\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.with_capacity\" title=\"associated function namada_core::ibc::primitives::prelude::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1436\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1470\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/struct.Box.html\" title=\"struct namada_core::ibc::primitives::prelude::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"namada_core/ibc/primitives/prelude/struct.Box.html\" title=\"struct namada_core::ibc::primitives::prelude::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1523\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.drain\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.clear\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const unstable\">1.7.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1560\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const unstable\">1.7.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1592\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const unstable\">1.37.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1666\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_non_null\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const unstable\">1.37.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1728\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_non_null\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1792\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.as_non_null\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1800\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1887\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.truncate\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.resize\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::resize\"><code>resize</code></a>, <a href=\"namada_core/ibc/primitives/prelude/trait.Extend.html#tymethod.extend\" title=\"method namada_core::ibc::primitives::prelude::Extend::extend\"><code>extend</code></a>, or <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.clear\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.capacity\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>This method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.clear\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1919\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.remove\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1969\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n<h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.len\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2032\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.swap_remove\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2088-2090\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2114-2116\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2229-2232\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.PartialEq.html\" title=\"trait namada_core::ibc::primitives::prelude::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2256-2258\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2409\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2461\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.push\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.try_reserve\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div>\n<h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2495\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"namada_core/ibc/primitives/prelude/enum.Option.html#variant.None\" title=\"variant namada_core::ibc::primitives::prelude::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2524-2526\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Option.html\" title=\"enum namada_core::ibc::primitives::prelude::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_pop_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Removes and returns the last element in a vector if the predicate\nreturns <code>true</code>, or <a href=\"namada_core/ibc/primitives/prelude/enum.Option.html#variant.None\" title=\"variant namada_core::ibc::primitives::prelude::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_pop_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2551\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2601-2603\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Drain.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Drain\">Drain</a>&lt;'_, T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain&lt;&#39;_, T, A&gt;\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the vector in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2647\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2675\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/129041\" title=\"Tracking issue for const_vec_string_slice\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2693\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2726-2728\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.truncate\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.drain\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2784-2786\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnMut.html\" title=\"trait namada_core::ibc::primitives::prelude::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"namada_core/ibc/primitives/prelude/trait.Clone.html\" title=\"trait namada_core::ibc::primitives::prelude::Clone\"><code>Clone</code></a> a given value, use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.resize\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"namada_core/ibc/primitives/prelude/trait.Default.html\" title=\"trait namada_core::ibc::primitives::prelude::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"namada_core/ibc/primitives/prelude/trait.Default.html#tymethod.default\" title=\"associated function namada_core::ibc::primitives::prelude::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2826-2828\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2864\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.set_len\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2929\">source</a><h4 class=\"code-header\">pub fn <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.set_len\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.push\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::push\"><code>push</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.extend\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::extend\"><code>extend</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.extend_from_slice\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.extend_from_within\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.insert\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::insert\"><code>insert</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.append\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::append\"><code>append</code></a>, <a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.resize\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html#method.resize_with\" title=\"method namada_core::ibc::primitives::prelude::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div>\n</div></details></div></details>",0,"namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Vec%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#408\">source</a></span><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"namada_core/borsh/io/trait.Write.html\" title=\"trait namada_core::borsh::io::Write\">Write</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Write is implemented for <code>Vec&lt;u8&gt;</code> by appending to the vector.\nThe vector will grow as needed.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#410\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a buffer into this writer, returning how many bytes were written. <a href=\"namada_core/borsh/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#416\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"namada_core/borsh/io/trait.Write.html#tymethod.write\" title=\"method namada_core::borsh::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"namada_core/borsh/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#426\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"namada_core/borsh/io/trait.Write.html#method.write_vectored\" title=\"method namada_core::borsh::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"namada_core/borsh/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#431\">source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"namada_core/borsh/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#437\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flushes this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"namada_core/borsh/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1765\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"namada_core/borsh/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1818\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"namada_core/tendermint/consensus/state/fmt/struct.Arguments.html\" title=\"struct namada_core::tendermint::consensus::state::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"namada_core/ibc/primitives/prelude/enum.Result.html\" title=\"enum namada_core::ibc::primitives::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"namada_core/borsh/io/struct.Error.html\" title=\"struct namada_core::borsh::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"namada_core/borsh/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1878-1880\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"namada_core/borsh/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Sized.html\" title=\"trait namada_core::ibc::primitives::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"namada_core/borsh/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#329\">source</a><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#330\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#332\">source</a><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\" class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#336\">source</a><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\" class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#340\">source</a><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\" class=\"fn\">make</a>(from: <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/yokeable.rs.html#344-346\">source</a><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\" class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.FnOnce.html\" title=\"trait namada_core::ibc::primitives::prelude::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\">Read more</a></div></details></div></details>","Yokeable<'a>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#543-545\">source</a><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#551\">source</a><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zeroize/trait.Zeroize.html#tymethod.zeroize\" class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3247\">source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3248\">source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3251\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-AbiArrayType-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#155\">source</a><a href=\"#impl-AbiArrayType-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a>,</div></h3></section>","AbiArrayType","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-AbiArrayType-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/mod.rs.html#186-210\">source</a><a href=\"#impl-AbiArrayType-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/trait.AbiArrayType.html\" title=\"trait ethers_core::abi::AbiArrayType\">AbiArrayType</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section>","AbiArrayType","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-DecodeWithMemTracking-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1232\">source</a><a href=\"#impl-DecodeWithMemTracking-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/mem_tracking/trait.DecodeWithMemTracking.html\" title=\"trait parity_scale_codec::mem_tracking::DecodeWithMemTracking\">DecodeWithMemTracking</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/mem_tracking/trait.DecodeWithMemTracking.html\" title=\"trait parity_scale_codec::mem_tracking::DecodeWithMemTracking\">DecodeWithMemTracking</a>,</div></h3></section>","DecodeWithMemTracking","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3265\">source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-EncodeLike%3C%26%5BU%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1222\">source</a><a href=\"#impl-EncodeLike%3C%26%5BU%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section>","EncodeLike<&[U]>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-EncodeLike%3CVec%3CU%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1221\">source</a><a href=\"#impl-EncodeLike%3CVec%3CU%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;<a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section>","EncodeLike<Vec<U>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-EncodeLike%3CVecDeque%3CU%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1345\">source</a><a href=\"#impl-EncodeLike%3CVecDeque%3CU%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section>","EncodeLike<VecDeque<U>>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3731\">source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Eq.html\" title=\"trait namada_core::ibc::primitives::prelude::Eq\">Eq</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"namada_core/ibc/primitives/prelude/trait.Eq.html\" title=\"trait namada_core::ibc::primitives::prelude::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio_stream/stream_ext/collect.rs.html#120\">source</a><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"tokio_stream/stream_ext/collect/trait.FromStream.html\" title=\"trait tokio_stream::stream_ext::collect::FromStream\">FromStream</a>&lt;T&gt; for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/stable_deref_trait/lib.rs.html#159\">source</a><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"stable_deref_trait/trait.StableDeref.html\" title=\"trait stable_deref_trait::StableDeref\">StableDeref</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-TokenizableItem-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#405\">source</a><a href=\"#impl-TokenizableItem-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a>,</div></h3></section>","TokenizableItem","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-TokenizableItem-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ethers_core/abi/tokens.rs.html#400-403\">source</a><a href=\"#impl-TokenizableItem-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ethers_core/abi/tokens/trait.TokenizableItem.html\" title=\"trait ethers_core::abi::tokens::TokenizableItem\">TokenizableItem</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section>","TokenizableItem","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-WrapperTypeEncode-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#1220\">source</a><a href=\"#impl-WrapperTypeEncode-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/codec/trait.WrapperTypeEncode.html\" title=\"trait parity_scale_codec::codec::WrapperTypeEncode\">WrapperTypeEncode</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","WrapperTypeEncode","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#564\">source</a><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; <a class=\"trait\" href=\"zeroize/trait.ZeroizeOnDrop.html\" title=\"trait zeroize::ZeroizeOnDrop\">ZeroizeOnDrop</a> for <a class=\"struct\" href=\"namada_core/ibc/primitives/prelude/vec/struct.Vec.html\" title=\"struct namada_core::ibc::primitives::prelude::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: <a class=\"trait\" href=\"zeroize/trait.ZeroizeOnDrop.html\" title=\"trait zeroize::ZeroizeOnDrop\">ZeroizeOnDrop</a>,</div></h3></section>","ZeroizeOnDrop","namada_core::ibc::core::commitment_types::proto::ics23::Hash","namada_core::ibc::clients::wasm_types::Bytes"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[638437]}