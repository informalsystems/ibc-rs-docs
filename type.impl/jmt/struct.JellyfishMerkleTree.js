(function() {
    var type_impls = Object.fromEntries([["jmt",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JellyfishMerkleTree%3C'a,+R,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#44-1419\">source</a><a href=\"#impl-JellyfishMerkleTree%3C'a,+R,+H%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, R, H&gt; <a class=\"struct\" href=\"jmt/struct.JellyfishMerkleTree.html\" title=\"struct jmt::JellyfishMerkleTree\">JellyfishMerkleTree</a>&lt;'a, R, H&gt;<div class=\"where\">where\n    R: 'a + <a class=\"trait\" href=\"jmt/storage/trait.TreeReader.html\" title=\"trait jmt::storage::TreeReader\">TreeReader</a>,\n    H: <a class=\"trait\" href=\"jmt/trait.SimpleHasher.html\" title=\"trait jmt::SimpleHasher\">SimpleHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#50-55\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.new\" class=\"fn\">new</a>(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a R</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a <code>JellyfishMerkleTree</code> backed by the given <a href=\"jmt/storage/trait.TreeReader.html\" title=\"trait jmt::storage::TreeReader\"><code>TreeReader</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_put_value_sets\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#74-120\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.batch_put_value_sets\" class=\"fn\">batch_put_value_sets</a>(\n    &amp;self,\n    value_sets: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>)&gt;&gt;,\n    node_hashes: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"struct\" href=\"jmt/storage/struct.NibblePath.html\" title=\"struct jmt::storage::NibblePath\">NibblePath</a>, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]&gt;&gt;&gt;,\n    first_version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>&gt;, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>The batch version of <code>put_value_sets</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_value_set\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#344-356\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.put_value_set\" class=\"fn\">put_value_set</a>(\n    &amp;self,\n    value_set: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;)&gt;,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>This is a convenient function that calls\n<a href=\"struct.JellyfishMerkleTree.html#method.put_value_sets\"><code>put_value_sets</code></a> with a single\n<code>keyed_value_set</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_value_set_with_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#361-377\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.put_value_set_with_proof\" class=\"fn\">put_value_set_with_proof</a>(\n    &amp;self,\n    value_set: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;)&gt;,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>, <a class=\"struct\" href=\"jmt/proof/struct.UpdateMerkleProof.html\" title=\"struct jmt::proof::UpdateMerkleProof\">UpdateMerkleProof</a>&lt;H&gt;, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>This is a convenient function that calls\n<a href=\"struct.JellyfishMerkleTree.html#method.put_value_sets\"><code>put_value_sets_with_proof</code></a> with a single\n<code>keyed_value_set</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_value_sets\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#420-446\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.put_value_sets\" class=\"fn\">put_value_sets</a>(\n    &amp;self,\n    value_sets: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;)&gt;&gt;,\n    first_version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>&gt;, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the new nodes and values in a batch after applying <code>value_set</code>. For\nexample, if after transaction <code>T_i</code> the committed state of tree in the persistent storage\nlooks like the following structure:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>             S_i\n            /   \\\n           .     .\n          .       .\n         /         \\\n        o           x\n       / \\\n      A   B\n       storage (disk)</code></pre></div>\n<p>where <code>A</code> and <code>B</code> denote the states of two adjacent accounts, and <code>x</code> is a sibling subtree\nof the path from root to A and B in the tree. Then a <code>value_set</code> produced by the next\ntransaction <code>T_{i+1}</code> modifies other accounts <code>C</code> and <code>D</code> exist in the subtree under <code>x</code>, a\nnew partial tree will be constructed in memory and the structure will be:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>                S_i      |      S_{i+1}\n               /   \\     |     /       \\\n              .     .    |    .         .\n             .       .   |   .           .\n            /         \\  |  /             \\\n           /           x | /               x&#39;\n          o&lt;-------------+-               / \\\n         / \\             |               C   D\n        A   B            |\n          storage (disk) |    cache (memory)</code></pre></div>\n<p>With this design, we are able to query the global state in persistent storage and\ngenerate the proposed tree delta based on a specific root hash and <code>value_set</code>. For\nexample, if we want to execute another transaction <code>T_{i+1}'</code>, we can use the tree <code>S_i</code> in\nstorage and apply the <code>value_set</code> of transaction <code>T_{i+1}</code>. Then if the storage commits\nthe returned batch, the state <code>S_{i+1}</code> is ready to be read from the tree by calling\n<a href=\"struct.JellyfishMerkleTree.html#method.get_with_proof\"><code>get_with_proof</code></a>. Anything inside\nthe batch is not reachable from public interfaces before being committed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_value_set\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#450-479\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.append_value_set\" class=\"fn\">append_value_set</a>(\n    &amp;self,\n    value_set: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;)&gt;,\n    latest_version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Append value sets to the latest version of the tree, without incrementing its version.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_value_sets_with_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#484-525\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.put_value_sets_with_proof\" class=\"fn\">put_value_sets_with_proof</a>(\n    &amp;self,\n    value_sets: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;)&gt;&gt;,\n    first_version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>, <a class=\"struct\" href=\"jmt/proof/struct.UpdateMerkleProof.html\" title=\"struct jmt::proof::UpdateMerkleProof\">UpdateMerkleProof</a>&lt;H&gt;)&gt;, <a class=\"struct\" href=\"jmt/storage/struct.TreeUpdateBatch.html\" title=\"struct jmt::storage::TreeUpdateBatch\">TreeUpdateBatch</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Same as [<code>put_value_sets</code>], this method returns a Merkle proof for every update of the Merkle tree.\nThe proofs can be verified using the [<code>verify_update</code>] method, which requires the old <code>root_hash</code>, the <code>merkle_proof</code> and the new <code>root_hash</code>\nThe first argument contains all the root hashes that were stored in the tree cache so far. The last one is the new root hash of the tree.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_with_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1006-1080\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_with_proof\" class=\"fn\">get_with_proof</a>(\n    &amp;self,\n    key: <a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;, <a class=\"struct\" href=\"jmt/proof/struct.SparseMerkleProof.html\" title=\"struct jmt::proof::SparseMerkleProof\">SparseMerkleProof</a>&lt;H&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value (if applicable) and the corresponding merkle proof.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_with_exclusion_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1265-1306\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_with_exclusion_proof\" class=\"fn\">get_with_exclusion_proof</a>(\n    &amp;self,\n    key_hash: <a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>, <a class=\"struct\" href=\"jmt/proof/struct.SparseMerkleProof.html\" title=\"struct jmt::proof::SparseMerkleProof\">SparseMerkleProof</a>&lt;H&gt;), ExclusionProof&lt;H&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value (if applicable) and the corresponding merkle proof.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_range_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1361-1385\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_range_proof\" class=\"fn\">get_range_proof</a>(\n    &amp;self,\n    rightmost_key_to_prove: <a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"struct\" href=\"jmt/proof/struct.SparseMerkleRangeProof.html\" title=\"struct jmt::proof::SparseMerkleRangeProof\">SparseMerkleRangeProof</a>&lt;H&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the proof that shows a list of keys up to <code>rightmost_key_to_prove</code> exist at <code>version</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1391-1393\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, key: <a class=\"struct\" href=\"jmt/struct.KeyHash.html\" title=\"struct jmt::KeyHash\">KeyHash</a>, version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value (if applicable), without any proof.</p>\n<p>Equivalent to <a href=\"jmt/struct.JellyfishMerkleTree.html#method.get_with_proof\" title=\"method jmt::JellyfishMerkleTree::get_with_proof\"><code>get_with_proof</code></a> and dropping the\nproof, but more efficient.</p>\n</div></details><section id=\"method.get_root_hash\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1405-1407\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_root_hash\" class=\"fn\">get_root_hash</a>(&amp;self, version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>&gt;</h4></section><section id=\"method.get_root_hash_option\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1409-1413\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_root_hash_option\" class=\"fn\">get_root_hash_option</a>(&amp;self, version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"jmt/struct.RootHash.html\" title=\"struct jmt::RootHash\">RootHash</a>&gt;&gt;</h4></section><section id=\"method.get_leaf_count\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree.rs.html#1416-1418\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_leaf_count\" class=\"fn\">get_leaf_count</a>(&amp;self, version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></div></details>",0,"jmt::tree::Sha256Jmt"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JellyfishMerkleTree%3C'a,+R,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/jmt/tree/ics23_impl.rs.html#76-228\">source</a><a href=\"#impl-JellyfishMerkleTree%3C'a,+R,+H%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, R, H&gt; <a class=\"struct\" href=\"jmt/struct.JellyfishMerkleTree.html\" title=\"struct jmt::JellyfishMerkleTree\">JellyfishMerkleTree</a>&lt;'a, R, H&gt;<div class=\"where\">where\n    R: 'a + <a class=\"trait\" href=\"jmt/storage/trait.TreeReader.html\" title=\"trait jmt::storage::TreeReader\">TreeReader</a> + <a class=\"trait\" href=\"jmt/storage/trait.HasPreimage.html\" title=\"trait jmt::storage::HasPreimage\">HasPreimage</a>,\n    H: <a class=\"trait\" href=\"jmt/trait.SimpleHasher.html\" title=\"trait jmt::SimpleHasher\">SimpleHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_with_ics23_proof\" class=\"method\"><a class=\"src rightside\" href=\"src/jmt/tree/ics23_impl.rs.html#192-227\">source</a><h4 class=\"code-header\">pub fn <a href=\"jmt/struct.JellyfishMerkleTree.html#tymethod.get_with_ics23_proof\" class=\"fn\">get_with_ics23_proof</a>(\n    &amp;self,\n    key: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n    version: <a class=\"type\" href=\"jmt/type.Version.html\" title=\"type jmt::Version\">Version</a>,\n) -&gt; <a class=\"type\" href=\"anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"jmt/type.OwnedValue.html\" title=\"type jmt::OwnedValue\">OwnedValue</a>&gt;, <a class=\"struct\" href=\"ics23/ics23/struct.CommitmentProof.html\" title=\"struct ics23::ics23::CommitmentProof\">CommitmentProof</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value corresponding to the specified key (if there is a value associated with it)\nalong with an <a href=\"ics23/ics23/struct.CommitmentProof.html\" title=\"struct ics23::ics23::CommitmentProof\">ics23::CommitmentProof</a> proving either the presence of the value at that key,\nor the absence of any value at that key, depending on which is the case.</p>\n</div></details></div></details>",0,"jmt::tree::Sha256Jmt"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[24314]}