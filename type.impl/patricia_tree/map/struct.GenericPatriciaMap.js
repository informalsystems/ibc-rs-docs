(function() {
    var type_impls = Object.fromEntries([["patricia_tree",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#526-533\">source</a><a href=\"#impl-Clone-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#527-532\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#521-525\">source</a><a href=\"#impl-Debug-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#522-524\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#534-538\">source</a><a href=\"#impl-Default-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#535-537\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(Q,+V)%3E-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#566-579\">source</a><a href=\"#impl-Extend%3C(Q,+V)%3E-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, Q, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(Q, V)</a>&gt; for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a>,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#571-578\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(Q, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(Q, V)>","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(Q,+V)%3E-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#550-565\">source</a><a href=\"#impl-FromIterator%3C(Q,+V)%3E-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, Q, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(Q, V)</a>&gt; for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a>,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#555-564\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(Q, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(Q, V)>","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#118-465\">source</a><a href=\"#impl-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a>, V&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#131-133\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;self, key: Q) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this map contains a value for the specified key.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(map.contains_key(<span class=\"string\">\"foo\"</span>));\n<span class=\"macro\">assert!</span>(!map.contains_key(<span class=\"string\">\"bar\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#147-149\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.get\" class=\"fn\">get</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;self, key: Q) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#163-165\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;mut self, key: Q) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.get_mut(<span class=\"string\">\"foo\"</span>).map(|v| <span class=\"kw-2\">*</span>v = <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_longest_common_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#184-190\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.get_longest_common_prefix\" class=\"fn\">get_longest_common_prefix</a>&lt;'a, Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Q</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Finds the longest common prefix of <code>key</code> and the keys in this map,\nand returns a reference to the entry whose key matches the prefix.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.insert(<span class=\"string\">\"foobar\"</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix(<span class=\"string\">\"fo\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foo\"</span>.as_bytes(), <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix(<span class=\"string\">\"fooba\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foo\"</span>.as_bytes(), <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix(<span class=\"string\">\"foobar\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foobar\"</span>.as_bytes(), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix(<span class=\"string\">\"foobarbaz\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foobar\"</span>.as_bytes(), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_longest_common_prefix_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#211-220\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.get_longest_common_prefix_mut\" class=\"fn\">get_longest_common_prefix_mut</a>&lt;'a, Q&gt;(\n    &amp;mut self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a Q</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>)&gt;<div class=\"where\">where\n    Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Finds the longest common prefix of <code>key</code> and the keys in this map,\nand returns a mutable reference to the entry whose key matches the prefix.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.insert(<span class=\"string\">\"foobar\"</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix_mut(<span class=\"string\">\"fo\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix_mut(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foo\"</span>.as_bytes(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>)));\n<span class=\"kw-2\">*</span>map.get_longest_common_prefix_mut(<span class=\"string\">\"foo\"</span>).unwrap().<span class=\"number\">1 </span>= <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix_mut(<span class=\"string\">\"fooba\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foo\"</span>.as_bytes(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix_mut(<span class=\"string\">\"foobar\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foobar\"</span>.as_bytes(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">2</span>)));\n<span class=\"kw-2\">*</span>map.get_longest_common_prefix_mut(<span class=\"string\">\"foobar\"</span>).unwrap().<span class=\"number\">1 </span>= <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(map.get_longest_common_prefix_mut(<span class=\"string\">\"foobarbaz\"</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"foobar\"</span>.as_bytes(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">4</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.longest_common_prefix_len\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#241-246\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.longest_common_prefix_len\" class=\"fn\">longest_common_prefix_len</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the longest common prefix length of <code>key</code> and the keys in this map.</p>\n<p>Unlike <code>get_longest_common_prefix()</code>, this method does not check if there is a key that matches the prefix in this map.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.insert(<span class=\"string\">\"foobar\"</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"fo\"</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"foo\"</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"fooba\"</span>), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"foobar\"</span>), <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"foobarbaz\"</span>), <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(map.longest_common_prefix_len(<span class=\"string\">\"foba\"</span>), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#264-266\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.insert\" class=\"fn\">insert</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;mut self, key: Q, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into this map.</p>\n<p>If the map did not have this key present, <code>None</code> is returned.\nIf the map did have this key present, the value is updated, and the old value is returned.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#280-282\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;mut self, key: Q) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Removes a key from this map, returning the value at the key if the key was previously in it.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.common_prefixes\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#304-316\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.common_prefixes\" class=\"fn\">common_prefixes</a>&lt;'a, 'b, Q&gt;(\n    &amp;'a self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'b Q</a>,\n) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.CommonPrefixesIter.html\" title=\"struct patricia_tree::map::CommonPrefixesIter\">CommonPrefixesIter</a>&lt;'a, 'b, K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CommonPrefixesIter&lt;&#39;a, &#39;b, K::Borrowed, V&gt;\">ⓘ</a><div class=\"where\">where\n    Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,\n    'a: 'b,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that collects all entries in the map up to a certain key.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>t = PatriciaMap::new();\nt.insert(<span class=\"string\">\"a\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>]);\nt.insert(<span class=\"string\">\"x\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"x\"</span>]);\nt.insert(<span class=\"string\">\"ab\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"b\"</span>]);\nt.insert(<span class=\"string\">\"abc\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"c\"</span>]);\nt.insert(<span class=\"string\">\"abcd\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"d\"</span>]);\nt.insert(<span class=\"string\">\"abcdf\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"f\"</span>]);\n<span class=\"macro\">assert!</span>(t\n    .common_prefixes(<span class=\"string\">b\"abcde\"</span>)\n    .map(|(<span class=\"kw\">_</span>, v)| v)\n    .flatten()\n    .eq(<span class=\"macro\">vec!</span>[<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"d\"</span>].into_iter()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.common_prefix_values\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#336-344\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.common_prefix_values\" class=\"fn\">common_prefix_values</a>&lt;'a, 'b, Q&gt;(\n    &amp;'a self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'b Q</a>,\n) -&gt; impl 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>&gt;<div class=\"where\">where\n    Q: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;,\n    'b: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that collects all values of entries in the map up to a certain key.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>t = PatriciaMap::new();\nt.insert(<span class=\"string\">\"a\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>]);\nt.insert(<span class=\"string\">\"x\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"x\"</span>]);\nt.insert(<span class=\"string\">\"ab\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"b\"</span>]);\nt.insert(<span class=\"string\">\"abc\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"c\"</span>]);\nt.insert(<span class=\"string\">\"abcd\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"d\"</span>]);\nt.insert(<span class=\"string\">\"abcdf\"</span>, <span class=\"macro\">vec!</span>[<span class=\"string\">\"f\"</span>]);\n<span class=\"macro\">assert!</span>(t\n    .common_prefix_values(<span class=\"string\">b\"abcde\"</span>)\n    .flatten()\n    .eq(<span class=\"macro\">vec!</span>[<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"d\"</span>].into_iter()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_by_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#369-375\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.split_by_prefix\" class=\"fn\">split_by_prefix</a>&lt;Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>&gt;&gt;(&amp;mut self, prefix: Q) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Splits the map into two at the given prefix.</p>\n<p>The returned map contains all the entries of which keys are prefixed by <code>prefix</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = PatriciaMap::new();\na.insert(<span class=\"string\">\"rust\"</span>, <span class=\"number\">1</span>);\na.insert(<span class=\"string\">\"ruby\"</span>, <span class=\"number\">2</span>);\na.insert(<span class=\"string\">\"bash\"</span>, <span class=\"number\">3</span>);\na.insert(<span class=\"string\">\"erlang\"</span>, <span class=\"number\">4</span>);\na.insert(<span class=\"string\">\"elixir\"</span>, <span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>b = a.split_by_prefix(<span class=\"string\">\"e\"</span>);\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(a.keys().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"string\">b\"bash\"</span>, <span class=\"string\">b\"ruby\"</span>, <span class=\"string\">b\"rust\"</span>]);\n<span class=\"macro\">assert_eq!</span>(b.keys().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), [<span class=\"string\">b\"elixir\"</span>, <span class=\"string\">b\"erlang\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#389-391\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.Iter.html\" title=\"struct patricia_tree::map::Iter\">Iter</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, K, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the entries of this map, sorted by key.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[(Vec::from(<span class=\"string\">\"bar\"</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>.into(), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), (<span class=\"string\">\"foo\"</span>.into(), <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>)],\n           map.iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#407-409\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.IterMut.html\" title=\"struct patricia_tree::map::IterMut\">IterMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, K, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable iterator over the entries of this map, soretd by key.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"kw\">for </span>(<span class=\"kw\">_</span>, v) <span class=\"kw\">in </span>map.iter_mut() {\n   <span class=\"kw-2\">*</span>v += <span class=\"number\">10</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"bar\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#423-425\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.Keys.html\" title=\"struct patricia_tree::map::Keys\">Keys</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Keys&lt;&#39;_, K, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the keys of this map, in sorted order.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[Vec::from(<span class=\"string\">\"bar\"</span>), <span class=\"string\">\"baz\"</span>.into(), <span class=\"string\">\"foo\"</span>.into()],\n           map.keys().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#439-443\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.values\" class=\"fn\">values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.Values.html\" title=\"struct patricia_tree::map::Values\">Values</a>&lt;'_, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Values&lt;&#39;_, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the values of this map, in order by key.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>],\n           map.values().cloned().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#460-464\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.ValuesMut.html\" title=\"struct patricia_tree::map::ValuesMut\">ValuesMut</a>&lt;'_, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ValuesMut&lt;&#39;_, V&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable iterator over the values of this map, in order by key.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"kw\">for </span>v <span class=\"kw\">in </span>map.values_mut() {\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">10</span>;\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>],\n           map.values().cloned().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details></div></details>",0,"patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#23-117\">source</a><a href=\"#impl-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#41-46\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Makes a new empty <code>PatriciaMap</code> instance.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\n<span class=\"macro\">assert!</span>(map.is_empty());\n\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>));\n\nmap.remove(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"foo\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#60-62\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears this map, removing all values.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#76-78\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this map.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap.insert(<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#96-98\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this map contains no elements.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = PatriciaMap::new();\n<span class=\"macro\">assert!</span>(map.is_empty());\n\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!map.is_empty());\n\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details></div></details>",0,"patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#466-520\">source</a><a href=\"#impl-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a>, V&gt; <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#479-492\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.iter_prefix\" class=\"fn\">iter_prefix</a>&lt;'a, 'b&gt;(\n    &amp;'a self,\n    prefix: &amp;'b K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>,\n) -&gt; impl 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a V</a>)&gt;<div class=\"where\">where\n    'b: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Gets an iterator over the entries having the given prefix of this map, sorted by key.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[(Vec::from(<span class=\"string\">\"bar\"</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>.into(), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>)],\n           map.iter_prefix(<span class=\"string\">b\"ba\"</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_prefix_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#506-519\">source</a><h4 class=\"code-header\">pub fn <a href=\"patricia_tree/map/struct.GenericPatriciaMap.html#tymethod.iter_prefix_mut\" class=\"fn\">iter_prefix_mut</a>&lt;'a, 'b&gt;(\n    &amp;'a mut self,\n    prefix: &amp;'b K::<a class=\"associatedtype\" href=\"patricia_tree/trait.Bytes.html#associatedtype.Borrowed\" title=\"type patricia_tree::Bytes::Borrowed\">Borrowed</a>,\n) -&gt; impl 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut V</a>)&gt;<div class=\"where\">where\n    'b: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Gets a mutable iterator over the entries having the given prefix of this map, sorted by key.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>patricia_tree::PatriciaMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: PatriciaMap&lt;<span class=\"kw\">_</span>&gt; =\n    <span class=\"macro\">vec!</span>[(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"bar\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>, <span class=\"number\">3</span>)].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[(Vec::from(<span class=\"string\">\"bar\"</span>), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">2</span>), (<span class=\"string\">\"baz\"</span>.into(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3</span>)],\n           map.iter_prefix_mut(<span class=\"string\">b\"ba\"</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;());</code></pre></div>\n</div></details></div></details>",0,"patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-GenericPatriciaMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#539-549\">source</a><a href=\"#impl-IntoIterator-for-GenericPatriciaMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"patricia_tree/trait.Bytes.html\" title=\"trait patricia_tree::Bytes\">Bytes</a>, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"patricia_tree/map/struct.GenericPatriciaMap.html\" title=\"struct patricia_tree::map::GenericPatriciaMap\">GenericPatriciaMap</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#540\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#541\">source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"patricia_tree/map/struct.IntoIter.html\" title=\"struct patricia_tree::map::IntoIter\">IntoIter</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/patricia_tree/map.rs.html#542-548\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","patricia_tree::map::PatriciaMap","patricia_tree::map::StringPatriciaMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[62901]}