searchState.loadedDescShard("namada_sdk", 1, "Create a new <code>QueryMatcher</code> matching event types with the …\nA <code>StorageHasher</code> which can never be called.\nContains the error value\nThe length of the transaction hash string\nThe length of the hex encoded transaction hash.\nA hash, typically a sha-2 hash of a tx\nResult for functions that may fail\nA Keccak hasher algorithm.\nContains the success value\nThe storage hasher used for the merkle tree.\nThe storage hasher used for the merkle tree.\nReturn the inner pointer to the hash data.\nGiven hashes A and B, compute Sha256(A||B), but if one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash the value to store\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the hash is all zeros\nReturn the length of the hash.\nCompute sha256 of some bytes\nConvert this <code>Hash</code> to a <code>Vec</code>.\nReturn zeros\nA function that is seldom called.\nA likely path to be taken in an if-expression.\nAn unlikely path to be taken in an if-expression.\nA non-fatal failure does <strong>not</strong> interrupt WASM execution\nA result of a wasm call to host functions that may fail.\nKey-value pair represents data from account’s subspace. …\nA success\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given result as <code>i64</code> is a non-fatal failure\nCheck if the given result as <code>i64</code> is a success\nThe storage key\nExpect <code>HostEnvResult::Success</code>.\nExpect <code>HostEnvResult::Success</code>.\nConvert result to <code>i64</code>, which can be passed to wasm\nThe value as arbitrary bytes\nA trait for hashing an arbitrary stream of bytes.\nThe <code>Keccak</code> hash functions defined in <code>Keccak SHA3 submission</code>…\nRepresents a Keccak hash.\nErrors for converting / parsing Keccak hashes\nPad and squeeze the state to the output.\nPad and squeeze the state to the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this <code>KeccakHash</code> is comprised solely of bytes with …\nHash bytes using Keccak\nAbsorb additional input. Can be called multiple times.\nAbsorb additional input. Can be called multiple times.\nCreates  new <code>Keccak</code> hasher with a security level of 224 …\nCreates  new <code>Keccak</code> hasher with a security level of 256 …\nCreates  new <code>Keccak</code> hasher with a security level of 384 …\nCreates  new <code>Keccak</code> hasher with a security level of 512 …\nType identifier for Common\nType identifier for Ed25519 scheme\nThe type returned in the event of a conversion error.\nThe hashing algorithm to use to sign serialized data with.\nA byte vector containing the serialized data.\nRepresents a public key\nRepresents the public part of this keypair\nRepresents the public key for this scheme\nPublic key hash derived from <code>common::Key</code> borsh encoded …\nDerive Tendermint raw hash from the public key\nA value-to-value conversion that consumes the input value.\nType capturing signature scheme IDs\nType identifier for Secp256k1 scheme\nRepresents a secret key\nRepresents the secret key for this scheme\nTag type that indicates we should use <code>BorshSerialize</code> to …\nRepresents a digital signature scheme.\nA serialization method to provide to <code>namada_tx::Signed</code>, …\nHelper trait to compress arbitrary bytes to a hash value, …\nTag type that indicates we should use ABI serialization to …\nRepresents a signature\nRepresents the signature for this scheme\nThe scheme type of this implementation\nThe scheme type of this implementation\nThe scheme type of this implementation\nThe scheme type of this implementation\nSimple and safe type conversions that may fail in a …\nRepresents an error in signature verification\nEncodes <code>data</code> as a byte vector, with some arbitrary …\nCryptographic keys\nEd25519 keys and related functionality\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate a secret key from the bytes.\nGenerate a keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nsecp256k1 keys and related functionality\nSign the data with a key, using a SHA256 hasher.\nSign the data with a key.\nCalculate a hash value to sign over.\nConvert validator’s consensus key into address raw hash …\nDerive Tendermint raw hash from the public key\nConvert Tendermint validator’s raw hash bytes to Namada …\nConvert from one PublicKey type to another\nPerforms the conversion.\nConvert from one Signature type to another\nConvert from one SecretKey type to self\nConvert from self to another PublicKey type\nConvert from self to another SecretKey type\nConvert from self to another SecretKey type\nCheck that the public key matches the signature on the …\nCheck that the public key matches the signature on the …\nPublic key\nSignature\nString decoding error\nEncapsulate Ed25519 public keys\nEncapsulate Ed25519 signatures\nEncapsulate Ed25519 public keys\nEncapsulate Ed25519 secret keys\nEncapsulate Ed25519 signatures\nPublic key\nEncapsulate Secp256k1 public keys\nEncapsulate Secp256k1 signatures\nEncapsulate Secp256k1 public keys\nEncapsulate Secp256k1 secret keys\nEncapsulate Secp256k1 signatures\nSecret key\nAn implementation of the common signature scheme\nSignature\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive public key from this secret key\nEd25519 public key\nEd25519 secret key\nAn implementation of the Ed25519 signature scheme\nEd25519 signature\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsecp256k1 public key\nThe provided constant is for a traditional signature on …\nSecp256k1 secret key\nAn implementation of the Secp256k1 signature scheme\nSecp256k1 signature\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>r</code>, <code>s</code> and <code>v</code> parameters of this <code>Signature</code>, …\nBuild error for masp errors\nConvert circuit name\nThe context contains data that has been confirmed by the …\nThe possible sync states of the shielded context\nRepresents the amount used of different conversions\nShielded sync message dispatcher.\nShielded sync cache.\nEnv var to point to a dir with MASP parameters. When not …\nRandomness seed for MASP integration tests to build proofs …\nGeneric error\nMASP client implementation that queries data from the …\nInsufficient funds error\nAn inefficient MASP client which simply uses a client to …\na masp amount\na masp change\nData to log the error of a batch of masp transactions\nData to log the error of a single masp transaction\nThe data for a masp fee payment\nA task env whose backing thread-pool uses a no-op panic …\nThe data for a masp transfer relative to a given source\nThe data for a masp transfer relative to a given target\nShielded pool data for a token\nThe data for a single masp transfer\nThe network to use for MASP\nMaps a shielded tx to the index of its first output note.\nOutput circuit name\nMASP verifying keys\nSpend circuit name\nAn implementation of a shielded wallet along with methods …\nA configuration used to tune the concurrency parameters of …\nShielded transfer\nAbstracts platform specific details away from the logic of …\nRepresents the current state of the shielded pool from the …\nThe context possibly contains that that has not yet been …\nA type tracking the notes used to construct a shielded …\nRepresents the changes that were made to a list of …\nRepresents the changes that were made to a list of …\nA return type for gen_shielded_transfer\nFreeze a Builder into the format necessary for inclusion …\nMaps the note index (in the commitment tree) to a witness\nthe token address\nMaps asset types to their decodings\nThe error batch\nCreate a builder for building <code>ShieldedSyncConfig</code>. On the …\nShielded transfer builder\nLoad a cache of data as part of shielded sync if that …\nSave a cache of data as part of shielded sync if that …\nthe change in the token\nconvert verifying key\nRetrieve the <code>Dispatcher</code> used to run shielded sync.\nMaps note positions to the diversifier of their payment …\nEpoch in which the transaction was created\nGenerate a valid diversifier, i.e. one that has a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation of MASP functionality depending on a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad up the currently saved ShieldedContext\nGet a MASP transaction prover\nMASP transaction\nMaps note positions to their corresponding memos\nMetadata\ncreate a new <code>MaspLocalTaskEnv</code>\nCreate a new <code>MaspClient</code> given an rpc client.\nCreate a new <code>IndexerMaspClient</code>.\nCreate a new <code>ShieldedContext</code>\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\noutput verifying key\nPartially deauthorize the transparent bundle\nMaps viewing keys to applicable note positions\nMake sure the MASP params are present and load verifying …\nRun the dispatcher\nSave the given ShieldedContext for future loads\nThe shielded wallet implementation\nHow many tokens are missing.\nspend verifying key\nThe set of note positions that have been spent\nThe sync state of the context\nMake a ViewingKey that can view notes encrypted by given …\nToken to be spent.\nThe commitment tree produced by scanning all transactions …\nHelper functions and types\nHelper functions and types\nLocation where this shielded context is saved\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nMaps note positions to their witness (used to make merkle …\nBuilder error returned from the masp library\nAn implementation of ShieldedUtils for standard filesystems\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to load the last saved shielded context from the given …\nInitialize a shielded transaction context that identifies …\nSave this confirmed shielded context into its associated …\nThe methods of the shielded wallet that depend on the …\nA trait that allows downstream types specify how a …\nRepresents the current state of the shielded pool from the …\nAdd the necessary transaction inputs to the builder. The …\nAdd the necessary transaction outputs to the builder\nMaps asset types to their decodings\nCollect enough unspent notes in this context to exceed the …\nComputes added_amt - required_amt taking care of …\nConvert the given amount into the latest asset types …\nCompute the total unspent notes associated with the …\nConvert Namada amount and token type to MASP equivalents\nQuery the ledger for the decoding of the given asset type …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nMaps note positions to the diversifier of their payment …\nWe estimate the next epoch rewards accumulated by the …\nMake shielded components to embed within a Transfer …\nGet the asset type with the given epoch, token, and …\nEither get the denomination from the cache or query it\nDetermine if using the current note would actually bring …\nMaps note positions to their corresponding memos\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\nMaps viewing keys to applicable note positions\nUse the addresses already stored in the wallet to …\nQuery the ledger for the conversion that is allowed for …\nGet the last block height\nQuery for converting assets across epochs\nQuery the denomination of a token type\nQuery the MASP epoch\nGet the upper limit on the time to make a new block\nGet the address of the native token\nGroup all the information for every source/token and …\nThe set of note positions that have been spent\nThe sync state of the context\nThe commitment tree produced by scanning all transactions …\nLocation where this shielded context is saved\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nMaps note positions to their witness (used to make merkle …\nThe masp client implementation is capable of not only …\nThe masp client implementation is capable of not only …\nType alias for a successful note decryption.\nType alias for a successful note decryption.\nError type returned by the methods of this trait\nError type returned by the methods of this trait\nA cache of fetched indexed transactions.\nA cache of fetched indexed transactions.\nAlways retry\nAlways retry\nType alias for convenience and profit\nType alias for convenience and profit\nType alias for the entries of <code>IndexedNoteData</code> iterators\nType alias for the entries of <code>IndexedNoteData</code> iterators\nBorrowed version of an <code>IndexedNoteEntry</code>\nBorrowed version of an <code>IndexedNoteEntry</code>\nThis abstracts away the implementation details of how …\nThis abstracts away the implementation details of how …\nEnumerates the capabilities of a <code>MaspClient</code> implementation.\nEnumerates the capabilities of a <code>MaspClient</code> implementation.\nThe masp client implementation is only capable of fetching …\nThe masp client implementation is only capable of fetching …\nWhen retrying to fetch all notes in a loop, this dictates …\nWhen retrying to fetch all notes in a loop, this dictates …\nLimit number of retries to a fixed number\nLimit number of retries to a fixed number\nCache of decrypted notes.\nCache of decrypted notes.\nGiven a block height range we wish to request and a cache …\nGiven a block height range we wish to request and a cache …\nReturn the capabilities of this client.\nReturn the capabilities of this client.\nCheck if this cache has already been populated for a given …\nAppend elements to the cache from an iterator.\nFetch the commitment tree of height <code>height</code>.\nFetch the commitment tree of height <code>height</code>.\nFetch the tx notes map of height <code>height</code>.\nFetch the tx notes map of height <code>height</code>.\nFetch shielded transfers from blocks heights in the range …\nFetch shielded transfers from blocks heights in the range …\nFetch the witness map of height <code>height</code>.\nFetch the witness map of height <code>height</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nCache <code>notes</code> decrypted with <code>vk</code>, indexed at <code>itx</code>.\nAdd a single entry to the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if empty\nCheck if empty\nIterates over the fetched transactions in the order they …\nReturn the last block height we can retrieve data from.\nReturn the last block height we can retrieve data from.\nCheck the length of the fetched cache\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if retries are exhausted.\nCheck if the lack of one or more capabilities in the masp …\nReturns the number of successful trial decryptions in …\nTake cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nIterates over the fetched transactions in the order they …\nConsensus logic and parameters.\nVarious constants used by the Zcash primitives.\nStructs for handling encrypted memos.\nImplementation of a Merkle tree of commitments used to …\nStructs and constants specific to the Sapling shielded …\nImplementation of ZIP 32 for hierarchical deterministic …\nProduces an asset generator without cofactor cleared\nReturns the argument unchanged.\nAttempt to construct an asset type from an existing asset …\nReturn the identifier of this asset type\nGet the asset identifier as a vector of bools\nCalls <code>U::from(self)</code>.\nCreate a new AsstType from a unique asset name Not …\nAttempt to create a new AssetType from a unique asset name …\nDeserialize an AssetType object\nConstruct a value commitment from given value and …\nProduces a value commitment generator with cofactor cleared\nA <code>pairing::Engine</code> for BLS12-381 pairing operations.\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nThis structure contains cached computations pertaining to …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nThis is an element of $\\mathbb{G}_T$, the target group of …\nRepresents results of a Miller loop, one of the most …\nRepresents an element of the scalar field $\\mathbb{F}_q$ …\nAdds this point to another point.\nAdds this point to another point.\nAdds this point to another point in the affine model.\nAdds this point to another point in the affine model.\nConverts a batch of <code>G1Projective</code> elements into <code>G1Affine</code> …\nConverts a batch of <code>G2Projective</code> elements into <code>G2Affine</code> …\nMultiplies by $(1 - z)$, where $z$ is the parameter of …\nClears the cofactor, using Budroni-Pintore. This is …\nComputes the doubling of this point.\nComputes the doubling of this point.\nDoubles this group element.\nThis performs a “final exponentiation” routine to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a compressed element. See …\nAttempts to deserialize a compressed element. See …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element. See …\nAttempts to deserialize an uncompressed element. See …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the group identity, which is $1$.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is free of an $h$-torsion …\nReturns true if this point is free of an $h$-torsion …\nComputes $$\\sum_{i=1}^n \\textbf{ML}(a_i, b_i)$$ given a …\nNotes about how the BLS12-381 elliptic curve is designed, …\nInvoke the pairing function without the use of …\nSerializes this element into compressed form. See …\nSerializes this element into compressed form. See …\nSerializes this element into uncompressed form. See …\nSerializes this element into uncompressed form. See …\nDesign of BLS12-381\nBLS12-381 serialization\nA wrapper type representing blockchain heights. Safe …\nA globally-unique identifier for a set of consensus rules …\nThe MASP network upgrade.\nThe consensus rules deployed by <code>NetworkUpgrade::MASP</code>.\nMarker struct for the production network.\nAn event that occurs at a specified height on the Zcash …\nMASP consensus parameters.\nMarker struct for the test network.\nReturns the activation height for a particular network …\nReturns the branch ID corresponding to the consensus rule …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the range of heights for the consensus epoch …\nReturns the range of heights for the consensus epoch …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the specified network upgrade is active …\nLength in bytes of the asset identifier\nBLAKE2s Personalization for deriving asset identifier from …\nBLAKE2s Personalization for CRH^ivk = BLAKE2s(ak | nk)\nFirst 64 bytes of the BLAKE2s input during group hash. …\nBLAKE2s Personalization for the group hash for key …\nThe note commitment is randomized over this generator.\nThe node commitment is randomized again by the position in …\nBLAKE2s Personalization for the nullifier position …\nThe maximum number of chunks per segment of the Pedersen …\nThe exp table for <code>PEDERSEN_HASH_GENERATORS</code>.\nThe window size for exponentiation of Pedersen hash …\nThe generators (for each segment) used in all Pedersen …\nBLAKE2s Personalization for Pedersen hash generators.\nBLAKE2s Personalization for PRF^nf = BLAKE2s(nk | rho)\nBLAKE2s Personalization for the proof generation key base …\nThe prover will demonstrate knowledge of discrete log with …\nThe spender proves discrete log with respect to this base …\nBLAKE2s Personalization for the spending key base point\nBLAKE2s Personalization for the value commitment generator …\nThe value commitment is randomized over this generator, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the note commitment\nReturns [<code>self.cmu</code>] in the correct representation for …\nThis deserialization is unsafe because it does not do the …\nProduces an asset generator without cofactor cleared\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the value commitment for a given amount and …\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHelper trait for scalars and arrays, but not slices.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nBit representation of a field element.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nThis represents the bits of an element of a prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nThe backing store for a bit representation of a prime …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nThe zero constant.\nA field element of small multiplicative order $N$.\nThe ordering of bits within an <code>A::Store</code> element.\nViews the type as a mutable slice of its elements.\nViews the type as a slice of its elements.\nConsumes this iterator and inverts each field element …\nReturns the bits of the field characteristic (the modulus) …\nCubes this element.\nThe wrapped data buffer.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nWraps <code>self</code> in a <code>BitArray</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into a …\nConverts an element of the prime field into the standard …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …\nThe affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nPerforms exponentiation given a base.\nGiven a base and a number of scalars, compute a window …\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nPerforms exponentiation given a scalar.\nGiven a scalar, compute its wNAF representation and return …\nConstructs new space for the scalar representation while …\nConstructs new space for the window table while borrowing …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.\nThis is a pre-processed version of an affine point <code>(u, v)</code> …\nThis represents a Jubjub point in the affine <code>(u, v)</code> …\nRepresents an element of the base field $\\mathbb{F}_q$ of …\nThis is a pre-processed version of an extended point …\nThis represents an extended point <code>(U, V, Z, T1, T2)</code> with <code>Z</code> …\nRepresents an element of the scalar field $\\mathbb{F}_q$ …\nRepresents an element of the scalar field $\\mathbb{F}_r$ …\nRepresents an element of the scalar field $\\mathbb{F}_r$ …\nThis represents a point in the prime-order subgroup of …\nAdds this element to another element.\nAdds <code>rhs</code> to <code>self</code>, returning the result.\nAttempts to interpret a batch of byte representations of …\nThis takes a mutable slice of <code>ExtendedPoint</code>s and “…\nReturns the identity.\nReturns the identity.\nDoubles this field element.\nComputes the doubling of a point more efficiently than a …\nDoubles this field element.\nReturns the argument unchanged.\nConstructs an affine point from an extended point using …\nReturns the argument unchanged.\nConstructs an extended point (with <code>Z = 1</code>) from an affine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to convert a little-endian byte representation of …\nAttempts to interpret a byte representation of an affine …\nAttempts to convert a little-endian byte representation of …\nAttempts to interpret a byte representation of an affine …\nConverts a 512-bit little endian integer into an element …\nConverts a 512-bit little endian integer into a <code>Scalar</code> by …\nConverts from an integer represented in little endian into …\nConverts from an integer represented in little endian into …\nConstructs an AffinePoint given <code>u</code> and <code>v</code> without checking …\nConstructs an AffinePoint given <code>u</code> and <code>v</code> without checking …\nReturns the <code>u</code>-coordinate of this point.\nReturns the <code>v</code>-coordinate of this point.\nConstructs the neutral element <code>(0, 1)</code>.\nConstructs an extended point from the neutral element …\nConstructs this point from the neutral element <code>(0, 1)</code>.\nConstructs this point from the neutral element <code>(0, 1)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nComputes the multiplicative inverse of this element, …\nDetermines if this point is the identity.\nDetermines if this point is the identity.\nDetermines if this point is prime order, or in other words …\nDetermines if this point is prime order, or in other words …\nDetermines if this point is of small order.\nDetermines if this point is of small order.\nDetermines if this point is torsion free and so is in the …\nDetermines if this point is torsion free and so is …\nMultiplies this element by another element\nMultiplies <code>rhs</code> by <code>self</code>, returning the result.\nMultiplies this point by the cofactor, producing an …\nMultiplies this element by the cofactor <code>8</code>.\nMultiplies this point by the specific little-endian bit …\nMultiplies this point by the specific little-endian bit …\nNegates this element.\nThis computes the negation of a point <code>P = (u, v)</code> as …\nComputes the negation of a point <code>P = (U, V, Z, T)</code> as …\nNegates <code>self</code>.\nReturns one, the multiplicative identity.\nReturns one, the multiplicative identity.\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nComputes the square root of this element, if it exists.\nSquares this element.\nSquares this element.\nSubtracts another element from this element.\nSubtracts <code>rhs</code> from <code>self</code>, returning the result.\nConverts an element of <code>Fr</code> into a byte representation in …\nConverts this element into its byte representation.\nConverts an element of <code>Scalar</code> into a byte representation in\nReturns an <code>ExtendedPoint</code> for use in arithmetic operations.\nPerforms a pre-processing step that produces an …\nPerforms a pre-processing step that produces an …\nReturns zero, the additive identity.\nReturns zero, the additive identity.\nAn outgoing viewing key\nPRF^expand(sk, t) := BLAKE2b-512(“MASP__ExpandSeed”, …\nA memo field containing arbitrary bytes.\nAn empty memo field.\nErrors that may result from attempting to construct an …\nSome unknown memo format from ✨<em>the future</em>✨ that we can…\nAn unencrypted memo received alongside a shielded note in …\nThe unencrypted memo bytes received alongside a shielded …\nA memo field containing a UTF-8 string.\nType-safe wrapper around String to enforce memo length …\nReturns the raw byte array containing the memo bytes, …\nReturns a slice of the raw bytes, excluding null padding.\nCreates a <code>MemoBytes</code> indicating that no memo is present.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>MemoBytes</code> from a slice, exactly as provided.\nParses a <code>Memo</code> from its ZIP 302 serialization.\nReturns a <code>Memo</code> containing the given string, or an error if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>Memo</code> from its ZIP 302 serialization.\nA Merkle tree of note commitments.\nAn immutable commitment tree\nA hashable node within a Merkle tree.\nA hashable node within a Merkle tree.\nAn updatable witness to a path from a position in a …\nA path from a position in a particular commitment tree to …\nAdds a leaf node to the tree.\nTracks a leaf node that has been added to the underlying …\nReturns a blank leaf node.\nReturns the parent node within the tree of the two given …\nCreates an empty tree.\nReturns the empty root for the given depth.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a Merkle path directly from a path and position.\nReads a Merkle path from its serialized form.\nCreates an <code>IncrementalWitness</code> for the most recent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge the n-1 full Merkle trees with the last possibly …\nConstruct a commitment tree with the given leaf nodes\nConstruct a merkle path to the given position in …\nReturns the current witness, or None if the tree is empty.\nReturns the position of the witnessed leaf node in the …\nParses a node from the given byte source.\nParses a node from the given byte source.\nReads a <code>CommitmentTree</code> from its serialized form.\nReads an <code>IncrementalWitness</code> from its serialized form.\nGet the root node of the commitment tree\nReturns the current root of the tree.\nReturns the current root of the tree corresponding to the …\nReturns the root of the tree corresponding to this path …\nReturns the number of leaf nodes in the tree.\nReturns the number of leaf nodes in the tree.\nSerializes this node.\nSerializes this node.\nSerializes this tree as an array of bytes.\nSerializes this <code>IncrementalWitness</code> as an array of bytes.\nA generic interface for casting between machine scalars …\nNumbers which have upper and lower bounds\nPerforms addition, returning <code>None</code> if overflow occurred.\nPerforms division, returning <code>None</code> on division by zero or …\nPerforms multiplication, returning <code>None</code> if overflow …\nPerforms negation, returning <code>None</code> if the result can’t be …\nPerforms integral remainder, returning <code>None</code> on division by …\nPerforms shift left, returning <code>None</code> on shifts larger than …\nPerforms shift right, returning <code>None</code> on shifts larger than …\nPerforms subtraction, returning <code>None</code> if overflow occurred.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nUnary operator for retrieving the multiplicative inverse, …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nThe trait for <code>Num</code> types which also implement assignment …\nGeneric trait for types implementing numeric assignment …\nThe trait for <code>NumAssign</code> types which also implement …\nAn interface for casting between machine scalars.\nGeneric trait for types implementing basic numeric …\nThe trait for <code>Num</code> types which also implement numeric …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nThe resulting type after applying the fused multiply-add.\nThe result after applying the operator.\nReturn Archimedes’ constant <code>π</code>.\nBinary operator for raising a value to a power.\nGeneric trait for primitive integers.\nThe trait for <code>Num</code> references which implement numeric …\nReturn <code>sqrt(2.0)</code>.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nUseful functions for signed numbers (i.e. numbers that can …\nReturn the full circle constant <code>τ</code>.\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConvert a value to another, using the <code>as</code> operator.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for overflow and division by …\nPerforms euclid division, returning <code>None</code> on division by …\nReturns both the quotient and remainder from checked …\nMultiplies two numbers, checking for overflow. If overflow …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nFinds the euclid remainder of dividing two numbers, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nA value bounded by a maximum value\nA value bounded by a minimum value\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreate a number from its representation as a byte array in …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nConvert from a string and radix (typically <code>2..=36</code>).\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of <code>self</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConvert <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this number as a byte …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nConverts degrees to radians.\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturn the integer part of a number.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nNumbers which have upper and lower bounds\nNumbers which have lower bounds\nNumbers which have upper bounds\nReturns the largest finite number this type can represent\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the smallest finite number this type can represent\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nReturn Archimedes’ constant <code>π</code>.\nReturn <code>sqrt(2.0)</code>.\nReturn the full circle constant <code>τ</code>.\nTrait for floating point numbers that provide an …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the integer part of a number.\nReturn the integer part of a number.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nGeneric trait for primitive integers.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nConvert an integer from big endian to the target’s …\nConvert an integer from little endian to the target’s …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReverses the byte order of the integer.\nConvert <code>self</code> to big endian from the target’s endianness.\nConvert <code>self</code> to little endian from the target’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nCreate a number from its representation as a byte array in …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nPerforms addition, returning <code>None</code> if overflow occurred.\nPerforms division, returning <code>None</code> on division by zero or …\nPerforms multiplication, returning <code>None</code> if overflow …\nPerforms negation, returning <code>None</code> if the result can’t be …\nPerforms integral remainder, returning <code>None</code> on division by …\nPerforms shift left, returning <code>None</code> on shifts larger than …\nPerforms shift right, returning <code>None</code> on shifts larger than …\nPerforms subtraction, returning <code>None</code> if overflow occurred.\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for overflow and division by …\nMultiplies two numbers, checking for overflow. If overflow …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nPerforms euclid division, returning <code>None</code> on division by …\nReturns both the quotient and remainder from checked …\nFinds the euclid remainder of dividing two numbers, …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nUnary operator for retrieving the multiplicative inverse, …\nThe result after applying the operator.\nReturns the multiplicative inverse of <code>self</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe resulting type after applying the fused multiply-add.\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nPerforms addition with a flag for overflow.\nPerforms multiplication with a flag for overflow.\nPerforms substraction with a flag for overflow.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the product along with a boolean …\nReturns a tuple of the difference along with a boolean …\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nA trait for real number types that do not necessarily have …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nRaise a number to a real number power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nUseful functions for signed numbers (i.e. numbers that can …\nA trait for values which cannot be negative\nComputes the absolute value.\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns the sign of the number.\nReturns the sign of the number.\nA node within the Sapling commitment tree.\nTypesafe wrapper for nullifier values.\nA key used to derive the nullifier for a Sapling note.\nA Sapling payment address.\nEnum for note randomness before and after ZIP 212.\nThe asset type that the note represents\nReturns a blank leaf node.\nComputes the note commitment\nReturns the parent node within the tree of the two given …\nReturns [<code>self.cmu</code>] in the correct representation for …\nReturns the derived <code>esk</code> if this note was created after ZIP …\nReturns the <code>Diversifier</code> for this <code>PaymentAddress</code>.\nReturns the empty root for the given depth.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a PaymentAddress from bytes.\nConstructs a PaymentAddress from a diversifier and a …\nConstructs a new note commitment tree node from a …\nThe diversified base of the address, GH(d)\nImplementation of group hashing into Jubjub.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSapling key components.\nCompute a parent node in the Sapling commitment tree given …\nComputes the nullifier given the nullifier deriving key and\nImplementation of in-band secret distribution for MASP …\nImplementation of the Pedersen hash function used in …\nReturns <code>pk_d</code> for this <code>PaymentAddress</code>.\nThe public key of the address, g_d^ivk\nAbstractions over the proving system and parameters.\nParses a node from the given byte source.\nImplementation of RedJubjub, a specialization of RedDSA to …\nrseed\nCreate the spendAuthSig for a Sapling SpendDescription.\nReturns the byte encoding of this <code>PaymentAddress</code>.\nThe value of the note\nSerializes this node.\nProduces a random point in the Jubjub curve. The point is …\nErrors that can occur in the decoding of Sapling spending …\nA Sapling expanded spending key\nA Sapling key that provides the capability to view …\nCould not decode the <code>ask</code> bytes to a jubjub field element.\nCould not decode the <code>nsk</code> bytes to a jubjub field element.\nThe length of the byte slice provided for decoding was …\nAn outgoing viewing key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes the expanded spending key from its serialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes the expanded spending key to the its seralized …\nA Sapling ephemeral public key that has been precomputed …\nA Sapling incoming viewing key that has been precomputed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSapling KDF for note encryption.\nPerforms the necessary precomputations to use a <code>SaplingIvk</code> …\nSapling PRF^ock.\nSapling key agreement for note encryption.\nCreates a new encryption context for the given note.\nRecovery of the full note plaintext by the sender.\nRecovery of the full note plaintext by the sender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType for persisting any necessary context across multiple …\nInterface for creating zero-knowledge proofs for shielded …\nCreate the <code>bindingSig</code> for a Sapling transaction. All calls …\nCreate the value commitment, and proof for a MASP …\nInstantiate a new Sapling proving context.\nCreate the value commitment and proof for a MASP …\nCreate the value commitment, re-randomized key, and proof …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthorization state for a bundle of transaction data.\nA MASP transaction.\nThe set of defined transaction format versions.\nStructs for building transactions.\nStructs representing the components within Zcash …\nAbstractions and types related to fee calculations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn overflow or underflow occurred when computing value …\nGenerates a <code>Transaction</code> from its inputs and outputs.\nThe transaction has inputs in excess of outputs and fees; …\nErrors that can occur during transaction construction.\nAn error occurred in computing the fees for a transaction.\nInsufficient funds were provided to the transaction …\nReports on the progress made by the builder towards …\nAn error occurred in constructing the Sapling parts of a …\nAn error occurred in constructing the transparent parts of …\nAdds a Sapling note to be spent in this transaction.\nAdds a Sapling address to send funds to.\nAdds a Sapling note to be spent in this transaction.\nAdds a transparent coin to be spent in this transaction.\nAdds a transparent address to send funds to.\nBuilds a transaction from the configured spends and …\nReturns the number of steps completed so far while …\nReturns the total expected number of steps before this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Builder</code> targeted for inclusion in the block …\nReturns the network parameters that the builder has been …\nReturns the set of Sapling converts currently set to be …\nReturns the set of Sapling inputs currently committed to …\nReturns the set of Sapling outputs currently set to be …\nReturns the target height of the transaction under …\nReturns the set of transparent inputs currently committed …\nReturns the set of transparent outputs currently set to be …\nReturns the sum of the transparent, Sapling, and TZE value …\nSets the notifier channel, where progress of building the …\nA type-safe representation of some quantity of Zcash.\nReturns an iterator over the amount’s non-zero …\nReturns an iterator over the amount’s non-zero components\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a non-negative ValueSum from a Value.\nCreates an ValueSum from a Value.\nGet the given AssetType within this ValueSum\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the amount’s non-zero components\nCheck if ValueSum is zero\nOne ValueSum is more than or equal to another if each …\nFilters out everything but the given AssetType from this …\nDeserialize an ValueSum object from a list of amounts …\nDeserialize an ValueSum object from a list of amounts …\nDeserialize an ValueSum object from a list of amounts …\nConsensus rules (§4.4):\nConsensus rules (§4.4):\nReturns the address to which the TxOut was sent, if this …\nFilters out the given AssetType from this ValueSum\nStructs representing the components within Zcash …\nSerialize an ValueSum object into a list of amounts …\nSerialize an ValueSum object into a list of amounts …\nSerialize an ValueSum object into a list of amounts …\nReturns a zero-valued ValueSum.\nA type for balance violations in amount addition and …\nA type-safe representation of some quantity of Zcash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes and functions for building MASP shielded transaction …\nTypes related to computation of fees and change related to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsensus rules (§7.3) &amp; (§7.4):\nConsensus rules (§4.4) &amp; (§4.5):\nConsensus rules (§4.4) &amp; (§4.5):\nA subset of the parameters necessary to build a transaction\nParameters that go into constructing an output description\nA struct containing the information required in order to …\nParameters that go into constructing an output description\nLazily generated random parameters for MASP transactions\nMetadata about a transaction created by a <code>SaplingBuilder</code>.\nA struct containing the information required in order to …\nParameters that go into constructing a spend description\nPre-generated random parameters for MASPtTransactions\nAdds a convert note to be applied in this transaction.\nAdds a Sapling address to send funds to.\nAdds a Sapling note to be spent in this transaction.\nThe spend authorization randomizer\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith convert …\nThe parameters required to construct convert descriptions\nGet the commitment value randomness for the ith convert …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of Sapling inputs that will be consumed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a build parameter generator using the given RNG\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith output …\nThe parameters required to construct output descriptions\nGet the note RCM for the ith output description\nGet the commitment value randomness for the ith output …\nGet the random seed for the ith output description\nReturns the Sapling outputs that will be produced by the …\nThe note rcm value\nThe commitment value randomness\nThe commitment value randomness\nThe commitment value randomness\nThe note’s random seed\nGet the spend authorization randomizer for the ith spend …\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith spend …\nThe parameters required to construct spend descriptions\nGet the commitment value randomness for the ith spend …\nConvert these build parameters to their stored equivalent\nReturns the net value represented by the spends and …\nA trait that provides a minimized view of a Sapling …\nA trait that provides a minimized view of a Sapling input …\nA trait that provides a minimized view of a Sapling output …\nThe destination of this output\nThe asset type of the input being spent.\nThe asset type of the output being produced.\nThe allowed conversion being used.\nThe spend/view key of the input being spent.\nAn identifier for the input being spent.\nThe value of the input being spent.\nThe amount of the conversion being used.\nThe value of the output being produced.\nTypes and functions for building transparent transaction …\nTypes related to computation of fees and change related to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of value added to or removed from the …\nAdds a coin (the output of a previous transaction) to be …\nConstructs a new TransparentBuilder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of transparent inputs that will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the transparent outputs that will be produced by …\nThis trait provides a minimized view of a transparent …\nThis trait provides a minimized view of a transparent …\nReturns the asset type of the output being created.\nThe previous output being spent.\nReturns the script corresponding to the newly created …\nReturns the value of the output being created.\nA trait that represents the ability to compute the fees …\nComputes the total fee required for a transaction given …\nA fee rule that always returns a fixed fee, irrespective …\nReturns the fixed fee amount which which this rule was …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new nonstandard fixed fee rule with the …\nCreates a new fixed fee rule with the standard default fee.\nAdditional context that is needed to compute signature …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of all transparent input amounts, provided\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the signature hash for an input to a transaction, …\nImplements the Signature Digest section of ZIP 244\nDigester which constructs a digest of only the witness …\nA TransactionDigest implementation that commits to all of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA BIP-32 chain code\nA child index for a derived key\nA Sapling key that provides the capability to view …\nRepresents the collection of keys that comprise extended …\nA Sapling extended spending key\nA scope used for wallet-external operations, namely …\nA scope used for wallet-internal operations, such as …\nAn extended full viewing key bundled with partial …\nThe scope of a viewing key or address.\nAttempt to produce a payment address given the specified …\nAttempts to produce a valid payment address for the given …\nAugment this spending key with proof generation data. …\nAugment this this extended key with spend authorization …\nAugment this this extended key with spend authorization …\nReturns the internal address corresponding to the smallest …\nAttempts to decrypt the given address’s diversifier with …\nReturns the address with the lowest valid diversifier …\nReturns the payment address corresponding to the smallest …\nReturns the payment address corresponding to the smallest …\nDerives an internal spending key given an external …\nDerives an internal full viewing key used for internal …\nReturns the payment address corresponding to the specified …\nReturns the change address corresponding to the specified …\nSearch the diversifier space starting at diversifier index …\nFinds the next valid payment address starting from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pseudo extended spending key from an extended …\nConstruct a pseudo extended spending key from an extended …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes the extended spending key from its serialized …\nParses a <code>DiversifiableFullViewingKey</code> from its raw byte …\nReturns the child key corresponding to the path derived …\nExposes the external <code>FullViewingKey</code> component of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads and decodes the encoded form of the extended …\nSapling key derivation according to ZIP 32 and ZIP 316\nAttempt to produce a payment address given the specified …\nReturns the payment address corresponding to the smallest …\nReturns the internal full viewing key and diversifier key …\nSearch the diversifier space starting at diversifier index …\nEncodes the extended spending key to the its seralized …\nReturns the raw encoding of this …\nDerives an incoming viewing key corresponding to this full …\nDerives a nullifier-deriving key for the provided scope.\nDerives an outgoing viewing key corresponding to this full …\nGroup this collection of keys into a proof generation key. …\nReturns the Sapling derivation of a proof generation key …\nReturn None since there is insufficient data to construct …\nBundle this object into a proof generation key if a proof …\nGroup this collection of keys into an extended spending …\nReturns this key\nReturn None since there is insufficient data to construct …\nBundle this object into an extended spending key if a spend\nGroup this collection of keys into an extended full …\nReturns the Sapling derivation of an extended full viewing …\nReturn this key\nReturns the extended full viewing key contained in this …\nWrites the encoded form of the extended spending key as …\nA Sapling key that provides the capability to view …\nA key used to derive diversifiers for a particular child …\nRepresents the collection of keys that comprise extended …\nA Sapling extended spending key\nAn extended full viewing key bundled with partial …\nReturns the byte representation of the diversifier key.\nAttempts to produce a diversifier at the given index. …\nReturns the diversifier index to which this key maps the …\nReturns the first index starting from j that generates a …\nReturns the argument unchanged.\nConstructs the diversifier key from its constituent bytes.\nCalls <code>U::from(self)</code>.\nAttempt to produce a payment address given the specified …\nReturns the payment address corresponding to the smallest …\nReturns the internal full viewing key and diversifier key …\nSearch the diversifier space starting at diversifier index …\nGroup this collection of keys into a proof generation key. …\nGroup this collection of keys into an extended spending …\nGroup this collection of keys into an extended full …\n<code>ResponseQuery</code> with borsh-encoded <code>data</code> field\nContains information about the flow control of some ERC20 …\nRequest data to pass to <code>generate_bridge_pool_proof</code>.\nResponse data returned by <code>generate_bridge_pool_proof</code>.\n<code>RPC</code> path router\nA request context provides read-only access to storage and …\nQueries for data from the application at current or past …\nGeneric response from a query\nA <code>Router</code> handles parsing read-only query requests and …\n<code>Rpc</code>path router type\n<code>Shell</code>path router type\nArguments to pass to <code>transfer_to_erc</code>.\nContainer for the status of queried transfers to Ethereum.\nEthereum ABI encoded arguments to pass to <code>transfer_to_erc</code>.\nRequest a simple borsh-encoded value from <code>account</code>, without …\nGet a path to query <code>account</code>.\nAppendix data of all requested pending transfers.\nRequest a simple borsh-encoded value from <code>applied</code>, without …\nGet a path to query <code>applied</code>.\nRequest a simple borsh-encoded value from <code>block_header</code>, …\nGet a path to query <code>block_header</code>.\nThe token cap of some wrapped asset.\nResponse data to be borsh encoded\nResponse data to be borsh encoded\nRaw query bytes.\nRequest value with optional data (used for e.g. <code>dry_run_tx</code>…\nGet a path to query <code>dry_run_tx</code>.\nRequest a simple borsh-encoded value from <code>epoch</code>, without …\nRequest a simple borsh-encoded value from <code>epoch_at_height</code>, …\nGet a path to query <code>epoch_at_height</code>.\nGet a path to query <code>epoch</code>.\n<code>Shell</code> sub-router\nLog of events emitted by <code>FinalizeBlock</code> ABCI calls.\nCheck if the <code>transferred_amount</code> exceeds the token caps of …\nTransfers in the query whose status it was determined to …\nRequest a simple borsh-encoded value from …\nGet a path to query <code>first_block_height_of_current_epoch</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a given request using the provided context. This …\nHandle a given request using the provided context. This …\nHandle RPC query request in the ledger. On success, …\nBlock height from which data was derived\nBlock height from which data was derived\nThe block height for which the query should be executed.\nRequest a simple borsh-encoded value from <code>ibc_client_update</code>…\nGet a path to query <code>ibc_client_update</code>.\nRequest a simple borsh-encoded value from <code>ibc_packet</code>, …\nGet a path to query <code>ibc_packet</code>.\nNon-deterministic log of the request execution\nNon-deterministic log of the request execution\nInternal method which shouldn’t be invoked directly. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest a simple borsh-encoded value from <code>last_block</code>, …\nGet a path to query <code>last_block</code>.\nRequest a simple borsh-encoded value from <code>masp_epoch</code>, …\nGet a path to query <code>masp_epoch</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>masp_reward_tokens</code>.\nRequest a simple borsh-encoded value from <code>max_block_time</code>, …\nGet a path to query <code>max_block_time</code>.\nRequest a simple borsh-encoded value from <code>native_token</code>, …\nGet a path to query <code>native_token</code>.\nConstruct this router as a root router\nConstruct this router as a root router\nPath of the request, like an HTTP <code>GET</code> path.\nTransfers in the query whose status it was determined to …\nRetrieve all <code>PendingTransfer</code> instances returned from the …\nOptional proof - used for storage value reads which …\nOptional proof - used for storage value reads which …\nWhether to return a Merkle proof with the response, if …\nThe block height at which the query was performed.\nRequest a simple borsh-encoded value from <code>read_conversion</code>, …\nGet a path to query <code>read_conversion</code>.\nRequest a simple borsh-encoded value from <code>read_conversions</code>…\nGet a path to query <code>read_conversions</code>.\nRequest a simple borsh-encoded value from <code>read_results</code>, …\nGet a path to query <code>read_results</code>.\nTransfers in the query whose status it was determined to …\nThe address of the relayer to compensate.\nFor queries that only support latest height, check that …\nFor queries that don’t use request data, require that …\nFor queries that do not support proofs, check that proof …\nRequest a simple borsh-encoded value from <code>revealed</code>, …\nGet a path to query <code>revealed</code>.\n<code>Rpc</code> sub-router\nReference to the ledger’s <code>WlState</code>.\nRequest a simple borsh-encoded value from <code>storage_has_key</code>, …\nGet a path to query <code>storage_has_key</code>.\nRequest value with optional data (used for e.g. <code>dry_run_tx</code>…\nGet a path to query <code>storage_prefix</code>.\nTaken from config <code>storage_read_past_height_limit</code>. When …\nRequest value with optional data (used for e.g. <code>dry_run_tx</code>…\nGet a path to query <code>storage_value</code>.\nConstruct this router as a sub-router at the given prefix …\nConstruct this router as a sub-router at the given prefix …\nTotal minted supply of some wrapped asset.\nThe hashes of the transfers to be relayed.\nCache of transaction wasm compiled artifacts.\nHashes pertaining to bogus data that might have been …\nQueries router and handlers for validity predicates\n<code>Rpc</code> sub-router\nCache of VP wasm compiled artifacts.\nWhether the wrapped asset is whitelisted.\nWhether to return the appendix of a <code>PendingTransfer</code>.\n<code>Gov</code>path router type\n<code>Pgf</code>path router type\n<code>Token</code>path router type\n<code>VP</code> path router\n<code>Vp</code>path router type\nGet the balance of the given <code>token</code> belonging to the given …\nRequest a simple borsh-encoded value from <code>denomination</code>, …\nGet a path to query <code>denomination</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>effective_native_supply</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest a simple borsh-encoded value from <code>funding</code>, without …\nGet a path to query <code>funding</code>.\n<code>Vp</code> sub-router\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest a simple borsh-encoded value from <code>is_steward</code>, …\nGet a path to query <code>is_steward</code>.\nGet the total rewards minted by MASP.\nConstruct this router as a root router\nConstruct this router as a root router\nConstruct this router as a root router\nConstruct this router as a root router\nRequest a simple borsh-encoded value from <code>parameters</code>, …\nRequest a simple borsh-encoded value from <code>parameters</code>, …\nGet a path to query <code>parameters</code>.\nGet a path to query <code>parameters</code>.\n<code>Vp</code> sub-router\nQueries router and handlers for PoS validity predicate\n<code>Vp</code> sub-router\nRequest a simple borsh-encoded value from <code>proposal_id</code>, …\nGet a path to query <code>proposal_id</code>.\nRequest a simple borsh-encoded value from <code>proposal_id_votes</code>…\nGet a path to query <code>proposal_id_votes</code>.\nRequest a simple borsh-encoded value from <code>proposal_result</code>, …\nGet a path to query <code>proposal_result</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>staking_rewards_rate</code>.\nRequest a simple borsh-encoded value from <code>stewards</code>, …\nGet a path to query <code>stewards</code>.\nConstruct this router as a sub-router at the given prefix …\nConstruct this router as a sub-router at the given prefix …\nConstruct this router as a sub-router at the given prefix …\nConstruct this router as a sub-router at the given prefix …\n<code>Vp</code> sub-router\nRequest a simple borsh-encoded value from <code>total_supply</code>, …\nGet a path to query <code>total_supply</code>.\nEnriched bonds data with extra information calculated from …\nBonds and unbonds with all details (slashes and rewards, …\nBonds and unbonds with all details (slashes and rewards, …\n<code>POS</code> path router\n<code>Pos</code>path router type\nThe validator state from a query and the epoch when it was …\nRequest a simple borsh-encoded value from …\nGet a path to query <code>below_capacity_validator_set</code>.\nRequest a simple borsh-encoded value from <code>bond</code>, without …\nRequest a simple borsh-encoded value from <code>bond_deltas</code>, …\nGet a path to query <code>bond_deltas</code>.\nGet a path to query <code>bond</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>bond_with_slashing</code>.\nRequest a simple borsh-encoded value from <code>bonds_and_unbonds</code>…\nGet a path to query <code>bonds_and_unbonds</code>.\nSum of the bond amounts\nSum of the bond amounts\nSum of the bond amounts\nThe bonds amount reduced by slashes\nSum of the bond slashed amounts\nSum of the bond slashed amounts\nSum of the bond slashed amounts\nClient-only methods for the router type are composed from …\nRequest a simple borsh-encoded value from <code>consensus_key</code>, …\nGet a path to query <code>consensus_key</code>.\nRequest a simple borsh-encoded value from <code>consensus_key_set</code>…\nGet a path to query <code>consensus_key_set</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>consensus_validator_set</code>.\nThe queried data\nThe queried data\nThe queried data\nRequest a simple borsh-encoded value from …\nGet a path to query <code>delegation_validators</code>.\nRequest a simple borsh-encoded value from <code>delegations</code>, …\nGet a path to query <code>delegations</code>.\nRequest a simple borsh-encoded value from <code>enqueued_slashes</code>…\nGet a path to query <code>enqueued_slashes</code>.\nGet bonds and unbonds with all details (slashes and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequest a simple borsh-encoded value from <code>has_bonds</code>, …\nGet a path to query <code>has_bonds</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest a simple borsh-encoded value from <code>is_delegator</code>, …\nGet a path to query <code>is_delegator</code>.\nRequest a simple borsh-encoded value from <code>is_validator</code>, …\nGet a path to query <code>is_validator</code>.\nRequest a simple borsh-encoded value from <code>liveness_info</code>, …\nGet a path to query <code>liveness_info</code>.\nConstruct this router as a root router\nRequest a simple borsh-encoded value from <code>pos_params</code>, …\nGet a path to query <code>pos_params</code>.\nRequest a simple borsh-encoded value from <code>rewards</code>, without …\nGet a path to query <code>rewards</code>.\nRequest a simple borsh-encoded value from <code>slashes</code>, without …\nGet a path to query <code>slashes</code>.\nConstruct this router as a sub-router at the given prefix …\nRequest a simple borsh-encoded value from …\nGet a path to query <code>total_active_voting_power</code>.\nRequest a simple borsh-encoded value from <code>total_stake</code>, …\nGet a path to query <code>total_stake</code>.\nSum of the withdrawable amounts\nSum of the withdrawable amounts\nSum of the withdrawable amounts\nRequest a simple borsh-encoded value from <code>unbond</code>, without …\nGet a path to query <code>unbond</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>unbond_with_slashing</code>.\nSum of the unbond amounts\nSum of the unbond amounts\nSum of the unbond amounts\nThe unbonds amount reduced by slashes\nSum of the unbond slashed amounts\nSum of the unbond slashed amounts\nSum of the unbond slashed amounts\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_addresses</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_by_tm_addr</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_commission</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_incoming_redelegation</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_last_infraction_epoch</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>validator_metadata</code>.\nRequest a simple borsh-encoded value from <code>validator_slashes</code>…\nGet a path to query <code>validator_slashes</code>.\nRequest a simple borsh-encoded value from <code>validator_stake</code>, …\nGet a path to query <code>validator_stake</code>.\nRequest a simple borsh-encoded value from <code>validator_state</code>, …\nGet a path to query <code>validator_state</code>.\nRequest a simple borsh-encoded value from …\nGet a path to query <code>withdrawable_tokens</code>.\nQueries whether transaction with given hash was applied\nDry run broadcast data\nDetermines a result of an inner tx from …\nLive broadcast data\nTransaction failed in some other way specified in the …\nTx is applied and accepted by all VPs\nData needed for broadcasting a tx and monitoring its …\nRepresents a query for an event pertaining to the …\nA parsed event from tendermint relating to a transaction\nSome VPs rejected the tx\nResult of the tx batch (wasm), if any\nCheck the result of the batch. This should not be used …\nGet bonds and unbonds with all details (slashes and …\nResponse code\nLook up the denomination of a token in order to make a …\nDry run a transaction\nGet bonds and unbonds with all details (slashes and …\nThe event type to which this event query pertains\nLook up the denomination of a token in order to format it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>Event</code> to a <code>TxResponse</code>, or error out.\nGas used.\nQuery the accunt substorage space of an address\nGet all consensus validators in the given epoch\nGet all validators in the given epoch\nGet the bond amount at the given epoch\nGet the set of consensus keys registered in the network\nGet the validators to which a delegator is bonded at a …\nGet the delegations of a delegator at some epoch, …\nQuery the effective total supply of the native token\nGet the PoS parameters\nQuery an account substorage at a specific index\nQuery the registry contract embedded in the state of an …\nQuery the effective total supply of the native token\nQuery token amount of owner.\nQuery token total supply.\nGet the total active voting power in the given epoch\nGet the total staked tokens in the given epoch\nGet the given validator’s stake at the given epoch\nQuery and return a validator’s state\nGet liveness info for all consensus validators in the …\nFind if the given source address has any bonds.\nTransaction hash\nBlock height\nResponse additional information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a given address is a known delegator\nCheck if a given address is a known delegator at the given …\nQuery if the public_key is revealed\nCheck if the given address is a pgf steward.\nCheck if the given address is a known validator.\nCheck if the address exists on chain. Established address …\nResponse log\nGiven a Namada asset returned from an Osmosis swap, find …\nQuery a validator’s unbonds for a given epoch\nQuery the last committed block, if any.\nQuery the epoch of the last committed block\nQuery a validator’s bonds for a given epoch\nQuery and return validator’s commission rate and max …\nQuery a conversion.\nQuery conversions\nQuery the denomination of the given token\nQuery the epoch of the last committed block\nQuery the epoch of the given block height, if it exists. …\nGet the governance parameters\nQuery to check if the given storage key exists.\nLook up the IBC denomination from a IbcToken.\nQuery the global IBC parameters\nQuery the IBC rate limit for the provided token\nLook up IBC tokens. The given base token can be non-Namada …\nQuery and return the incoming redelegation epoch for a …\nQuery a validator’s bonds for a given epoch\nQuery the masp epoch of the last committed block\nQuery to read the tokens that earn masp rewards.\nQuery the total rewards minted by MASP\nQuery an estimate of the maximum block time.\nQuery and return validator’s metadata, including the …\nQuery the address of the native token\nQuery the information to estimate next epoch start\nQuery a route of Osmosis liquidity pools for swapping …\nGet the set of pgf fundings\nGet the public good fundings parameters\nGet the set of pgf stewards\nQuery proposal by Id\nQuery the proposal result\nGet all the votes of a proposal\nQuery the results of the last committed block\nQuery and return the available reward tokens corresponding …\nQuery a range of storage values with a matching prefix and …\nQuery a storage value and decode it with <code>BorshDeserialize</code>.\nQuery a storage value and the proof without decoding.\nCall the corresponding <code>tx_event_query</code> RPC method, to fetch …\nQuery the status of a given transaction.\nIdentical to <code>query_tx_status</code>, but does not need a <code>Namada</code> …\nQuery all unbonds for a validator, applying slashes\nQuery the consensus key by validator address\nQuery a wasm code hash\nQuery withdrawable tokens in a validator account for a …\nThe transaction to which this event query pertains\nGet the correct representation of the amount given the …\nWait for a first block and node to be synced.\nTransaction to broadcast\nHash of the transaction\nGrouping of addresses by validity predicate.\nFee and raw header\nRepresents the transaction data that is displayed on a …\nThe transaction’s signatures produced via the offline …\nRaw header\nThe different parts of a transaction that can be signed. …\nA structure holding the signing data to craft a transaction\nThe Token\nInformation about the post-fee balance of the tx’s …\nThe public keys to index map associated to an account\nReturn the necessary data regarding an account to be able …\nString blob\nCauses sign_tx to attempt signing using only the software …\nThe public key of the fee payer\nLoad the secret key corresponding to the given public key …\nFind the public key for the given address and try to load …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a disposable signing key.\nGenerates the transaction’s signatures for offline …\nIndex integer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName\nRegular output\nExpert-mode output\nThe address owning the transaction\nThe balance of the tx source after the tx has been applied\nThe public keys associated to an account\nID of the Transaction needing signing\nSign a transaction with a given signing key or public key …\nInner txs’ signatures\nThe source address of the tx\nThe threshold associated to an account\nConverts the given transaction to the form that is …\nThe token of the tx\nGiven CLI arguments and some defaults, determine the …\nIs valid?\nValidate the fee amount and token\nValidate the fee of the transaction in case of a …\nCreate a wrapper tx from a normal tx. Get the hash of the …\nOptional wrapper signature\n<code>Address</code> human-readable part\nWe’re using “Bech32m” variant\n<code>common::PublicKey</code> human-readable part\n<code>common::Signature</code> human-readable part\nEncoded bytes representation of <code>Self</code>.\nFormat to string with bech32m\nHuman-readable part\nMASP extended viewing key human-readable part\nMASP extended spending key human-readable part\nMASP payment address human-readable part\nWrapper for <code>T</code> to serde encode via <code>Display</code> and decode via …\nTry to decode <code>Self</code> from a string\nTry to decode <code>Self</code> from bytes\nEncode <code>Self</code> to a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the length of the human-readable part\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap to make <code>T</code> string encoded\nRaw value\nEncode <code>Self</code> to bytes\nTask spawner that uses a <code>LocalSet</code>.\nTask spawner that uses a <code>LocalSet</code>.\nA task environment that uses a <code>LocalSet</code>.\nA task environment that uses a <code>LocalSet</code>.\nTask spawner implementation.\nTask spawner implementation.\nAn environment to run async tasks on.\nAn environment to run async tasks on.\nSpawn tasks onto a thread pool.\nSpawn tasks onto a thread pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LocalSetTaskEnvironment</code> with <code>num_threads</code> …\nRun the provided async task to completion.\nRun the provided async task to completion.\nSpawn an async task onto a thread pool.\nSpawn an async task onto a thread pool.\nSpawn a sync task onto a thread pool.\nSpawn a sync task onto a thread pool.\nUser signing keys used for interacting with accounts in …\nAppHash is usually a SHA256 hash, but in reality it can be …\nBlocks consist of a header, transactions, votes (the …\nValidator signing keys used for authenticating consensus …\nEd25519 keys\nEd25519 keys\nGenesis data\nHash digests\nValidator display names\nEmpty hash\nPrivate keys as parsed from configuration files\nProposal\nPublic keys allowed in Tendermint protocols\nSecp256k1 keys\nSHA-256 hashes\nSignatures\nPublic key roles used in Tendermint networks\nTendermint timestamps\nTimeout durations\nTendermint version\nVotes are signed messages from validators for a particular …\nRe-export of tendermint v0.37 ABCI\nTendermint accounts\nCheck whether this time is after the given time.\nReturn the digest algorithm used to produce this hash\nApp hash\nApp state\nBorrow the <code>Hash</code> as a byte slice\nReturn the hash bytes as a byte slice.\nReturn a reference to the underlying byte array\nCheck whether this time is before the given time.\nBlocks within the chains of a Tendermint network\nBlock ID\nBlock ID\nChain information types for Tendermint networks\nChain ID\nChannels (RPC types)\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nTendermint consensus\nConsensus parameters\nConsensus state from this proposal - This doesn’t seem …\nConsensus state from this vote - This doesn’t seem to be …\nCryptographic functionality for Tendermint.\nGet data\nTransaction data\nParse <code>Timeout</code> from string ending in <code>s</code> or <code>ms</code>\nCalculate the amount of time which has passed since …\nGet Ed25519 public key\nIf applicable, borrow the Ed25519 keypair\nError types\nEvidence of malfeasance by validators (i.e. signing …\nGet evidence\nEvidence of malfeasance\nVote extension provided by the application. Only valid for …\nVote extension signature by the validator Only valid for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a <code>Hash</code> from base64-encoded string\nCreate a new <code>Hash</code> with the given algorithm type\nFrom an <code>ed25519_consensus::SigningKey</code>\nFrom an <code>ed25519_consensus::VerificationKey</code>\nDecode a <code>Hash</code> from upper-case hexadecimal\nDecode a <code>Hash</code> from upper-case hexadecimal\nFrom raw Ed25519 public key bytes\nFrom raw secp256k1 public key bytes\nGenesis data\nTime of genesis\nHash functions and their outputs\nGet header\nBlock header\nReturns block_id.hash\nHeight\nBlock height\nStarting height of the blockchain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the underlying byte array\nCreate signable vector from Proposal.\nCreate signable vector from Vote.\nConvenience function to check for Hash::None\nIs this vote a precommit?\nIs this vote a prevote?\nGet last commit\nLast commit, should be <code>None</code> for the initial block.\nMerkle tree used in Tendermint networks\nProposal message type\nBuilds a new <code>Block</code>, based on the given <code>Header</code>, data, …\nCreate a new signature from the given byte array, if …\nCreate a new account key from a <code>PublicKey</code>\nCreate a new consensus key from a <code>PublicKey</code>\nNodes in Tendermint blockchain networks\nParse <code>Time</code> from an RFC 3339 date\nPOL Round\nCryptographic private keys\nTypes used in the Privval protocol (Tendermint Core ADR-063…\nProposals from validators\nPublic keys used in Tendermint networks\nGet the public key associated with this private key\nGet the <code>PublicKey</code> value for this <code>TendermintKey</code>\nRound\nRound\nGet Secp256k1 public key\nSerde serializers\nCryptographic (a.k.a. digital) signatures\nSignature\nSignature\nTimestamps used by Tendermint blockchains\nTimestamp\nTimestamp\nSerialize this key as Bech32 with the given human readable …\nSerialize this key as a byte vector.\nSerialize this key as hexadecimal\nReturn an RFC 3339 and ISO 8601 date and time string with …\nCreate signable bytes from Proposal.\nCreate signable bytes from Vote.\nDefine traits and instances for dealing with trust …\nGet the unix epoch (“1970-01-01 00:00:00 UTC”) as a …\nReturn a Unix timestamp in seconds.\nReturn a Unix timestamp in nanoseconds.\nTendermint validators\nValidator address\nValidator index\nValidators\nVotes from validators\nType of vote (prevote or precommit)\nAbort snapshot restoration, and don’t try any other …\nThe chunk was accepted.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nThe result of applying a snapshot chunk.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nABCI application response codes.\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nA consensus method, driven by the consensus protocol and …\nThe consensus category of ABCI requests.\nThe consensus category of ABCI responses.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nError codes\nAn event that occurred while processing a request.\nThe attributes of an Event consist of a key, a value, and …\nReturns an exception (undocumented, nondeterministic).\nThe flush method requests that all pending method requests …\nIndicates that any pending requests should be completed …\nIndicates that all pending requests have been completed …\nAn info method, used for initialization and user queries.\nRequests information about the application state.\nRequests information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI requests.\nThe info category of ABCI responses.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nA mempool method, used for validating new transactions …\nThe mempool category of ABCI requests.\nThe mempool category of ABCI responses.\nA category of ABCI method.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nSuccess\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nReturns data queried from the application.\nReturns data queried from the application.\nReject this snapshot, try a different one.\nAll possible ABCI requests in CometBFT 0.37.\nAll possible ABCI responses for this protocol version.\nReapply this chunk, combine with <code>refetch_chunks</code> and …\nRestart this snapshot from <code>OfferSnapshot</code>, reusing chunks …\nA snapshot method, used for serving and restoring state …\nThe snapshot category of ABCI requests.\nThe snapshot category of ABCI responses.\nUnknown result, abort all snapshot restoration.\nEventAttribute keys and values in TM34 are base64-encoded …\nEventAttribute keys and values in TM37 and later are plain …\nA list of <code>EventAttribute</code>s describing the event.\nChecks whether <code>&amp;self</code> is equal to <code>other</code>, ignoring the <code>index</code> …\nChecks whether <code>&amp;self</code> is equal to <code>other</code>, ignoring the <code>index</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA variant of <code>core::hash::Hash::hash</code> that ignores the <code>index</code> …\nA variant of <code>core::hash::Hash::hash</code> that ignores the <code>index</code> …\nAccess the <code>index</code> field common to all variants of the enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWas the response an error?\nWas the response OK?\nAccess the <code>key</code> field common to all variants of the enum as …\nAccess the <code>key</code> field common to all variants of the enum as …\nThe kind of event.\nConstruct an event from generic data.\nSet <code>index</code> field common to all variants of the enum.\nABCI-specific data types used in requests and responses.\nGet the integer error value for this code\nAccess the <code>value</code> field common to all variants of the enum …\nAccess the <code>value</code> field common to all variants of the enum …\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nThe possible kinds of <code>CheckTx</code> checks.\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nSignals the end of a block.\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nA full check is required (the default).\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nIndicates that the mempool is initiating a recheck of the …\nAll possible ABCI requests in CometBFT 0.37.\nThe snapshot category of ABCI requests.\nThe ABCI protocol version.\nThe light client verified app hash for this height.\nSerialized JSON bytes containing the initial application …\nThe Tendermint block protocol version.\nEvidence of validator misbehavior.\nThe ID of the blockchain.\nThe binary chunk contents, as returned by <code>LoadSnapshotChunk</code>…\nThe chunk index, starting from <code>0</code> for the initial chunk.\nInitial consensus-critical parameters.\nRaw query bytes.\nAn application-specific identifier of the format of the …\nThe block’s hash.\nThe block header.\nThe height of the block just executed.\nThe height of the snapshot the chunks belong to.\nThe block height for which the query should be executed.\nThe chunk index, starting from <code>0</code>.  Tendermint applies …\nHeight of the initial block (typically <code>1</code>).\nThe kind of check to perform.\nInformation about the last commit.\nthe modified transactions cannot exceed this size.\nThe message to send back.\nThe Tendermint p2p protocol version.\nPath of the request, like an HTTP <code>GET</code> path.\naddress of the public key of the validator proposing the …\naddress of the public key of the validator proposing the …\nWhether to return a Merkle proof with the response, if …\nThe P2P ID of the node who sent this chunk.\nThe snapshot offered for restoration.\nThe genesis time.\nThe transaction bytes.\nThe bytes of the transaction to execute.\ntxs is an array of transactions that will be included in a …\ntxs is an array of transactions that will be included in a …\nInitial genesis validators, sorted by voting power.\nThe Tendermint software semantic version.\nAbort all snapshot restoration\nSnapshot accepted, apply chunks\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nReturns an exception (undocumented, nondeterministic).\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.")