searchState.loadedDescShard("namada_sdk", 0, "Namada SDK\nA transfer coming from a transparent address\nA transfer going to a transparent address\nDefault gas-limit\nA transfer coming from a shielded address\nWrapper for masp_primitive’s ExtendedSpendingKey\nWrapper for masp_primitive’s FullViewingKey\nA transfer going to an IBC address\nAn interface for high-level interaction with the Namada SDK\nProvides convenience methods for common Namada interactions\nWrapper for masp_primitive’s PaymentAddress\nA transfer going to a shielded address\nAbstracts platform specific details away from the logic of …\nAbstracts platform specific details away from the logic of …\nRepresents the current state of the shielded pool from the …\nRepresents a source of funds for a transfer\nRepresents a target for the funds of a transfer\nCaptures the interactive parts of the wallet’s …\nImplements transparent addresses as described in Accounts …\nGet the contained transparent address, if any\nGet the contained Address, if any\nStructures encapsulating SDK arguments\nArithmetics helpers\nGet the underlying viewing key\nMaps asset types to their decodings\nBoolean related functionality.\nBorsh binary encoding (re-exported) from official crate …\nBytes hex formatting\nLoad a cache of data as part of shielded sync if that …\nSave a cache of data as part of shielded sync if that …\nChain related data types\nUsed to send and receive messages from the ledger\nClone the rpc client.\nRe-exports of collection types.\nCompute the total unspent notes associated with the …\nControl flow utilities.\nControl flow utilities.\nA non-negative fixed precision decimal type.\nDecode a value with borsh\nTry to decode <code>Self</code> from bytes\nLook up the denomination of a token in order to make a …\nMaps note positions to the diversifier of their payment …\nGet the transparent address that this source would …\nGet the transparent address that this target would …\nEncode a value with borsh\nGeneric Error Type for all of the Shared Crate\nThis module defines encoding methods compatible with …\nEthereum bridge utilities shared between <code>wasm</code> and the <code>cli</code>.\nThe necessary type definitions for the contents of the …\nTypes representing data intended for Namada via Ethereum …\nEthereum bridge struct re-exports and types to do with …\nLogic to do with events emitted by the ledger.\nLook up the denomination of a token in order to format it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes for working with 32 bytes hashes.\nHash this payment address\nCompiler hints, to improve the performance of certain …\nImplement <code>std::fmt::Display</code> and <code>std::str::FromStr</code> via …\nShared internal types between the host env and guest …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCaptures the input/output streams used by this object\nThis module is for hashing Namada types using the keccak256\nCryptographic keys\nLoad up the currently saved ShieldedContext\nTry to load the last saved shielded context from the given …\nTry to load the last saved confirmed shielded context from …\nGet a MASP transaction prover\nMASP verification wrappers.\nMaps note positions to their corresponding memos\nConstruct a new Namada context with the given native token …\nReturn the native token\nConstruct a new Namada context looking up the native token …\nMake a Withdraw builder from the given minimum set of …\nMake a TxBecomeValidator builder from the given minimum …\nMake a Bond builder from the given minimum set of arguments\nMake a CommissionRateChange builder from the given minimum …\nMake ConsensusKeyChange builder from the given minimum set …\nMake a CommissionRateChange builder from the given minimum …\nMake a Claim-rewards builder from the given minimum set of …\nMake a TxCustom builder from the given minimum set of …\nMake a TxDeactivateValidator builder from the given …\nMake a TxIbcTransfer builder from the given minimum set of …\nMake a InitAccount builder from the given minimum set of …\nMake a InitProposal builder from the given minimum set of …\nMake a TxInitValidator builder from the given minimum set …\nMake a VoteProposal builder from the given minimum set of …\nMake a TxReactivateValidator builder from the given …\nMake a Redelegation builder for the given minimum set of …\nMake a ResignSteward builder from the given minimum set of …\nMake a RevealPK builder from the given minimum set of …\nMake a TxShieldedTransfer builder from the given minimum …\nMake a TxShieldingTransfer builder from the given minimum …\nMake a TxTransparentTransfer builder from the given …\nMake a Unbond builder from the given minimum set of …\nMake a TxUnjailValidator builder from the given minimum …\nMake a TxUnshieldingTransfer builder from the given …\nMake a TxUpdateAccount builder from the given minimum set …\nMake a UpdateStewardCommission builder from the given …\nMake a Withdraw builder from the given minimum set of …\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\nGet the contained PaymentAddress, if any\nMaps viewing keys to applicable note positions\nUpdates the internal state with the data of the newly …\nLedger read-only queries can be handled and dispatched via …\nCompile time tree patterns router with type-safe dynamic …\nSDK RPC queries\nSave the given ShieldedContext for future loads\nSave this shielded context into its associated context …\nObtain read guard on the shielded context\nStores the current state of the shielded pool\nObtain write guard on the shielded context\nSign the given transaction using the given signing data\nFunctions to sign transactions\nGet the contained extended key, if any\nGet the contained extended key, if any\nThe set of note positions that have been spent\nNamada’s standard string encoding for public types.\nProcess the given transaction using the given flags\nSync the current state of the multi-asset shielded pool in …\nThe sync state of the context\nGet the contained transparent address data, if any\nGet the contained TAddrData, if any\nFunctionality to abstract spawning tasks onto a thread …\nFunctionality to abstract spawning tasks onto a thread …\nRe-export of tendermint v0.37\nRe-export of tendermint-proto v0.37\nTypes for dealing with time and durations.\nEncode <code>Self</code> to bytes\nDerive a viewing key\nThe commitment tree produced by scanning all transactions …\nSDK functions to construct different types of transactions\nObtain the prototypical Tx builder\nMake a tx builder using no arguments\nAn unsigned 256 integer type. Used for, among other things,\nLocation where this shielded context is saved\nTypes that are used in validity predicates.\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nThis module contains types related with validator voting …\nObtain read guard on the wallet\nStores the addresses and keys required for ledger …\nObtain the wallet lock\nObtain write guard on the wallet\nMaps note positions to their witness (used to make merkle …\nThe length of <code>Address</code> encoded with Bech32m.\nAn account’s address\nError from decoding address from string\nThe length of an established <code>Address</code> encoded with Borsh.\nInternal Eth bridge address\nERC20 token for Ethereum bridge\nContains the error value\nAn established address is generated on-chain\nAn established address is generated on-chain\nA generator of established addresses\nBridge to Ethereum\nThe pool of transactions to be relayed to Ethereum\nInternal Governance address\nGovernance address\nLength of a hash of an address as a hexadecimal string\nLength of a trimmed hash of an address.\nInternal IBC address\nInter-blockchain communication\nIBC-related token\nAn implicit address is derived from a cryptographic key\nAn implicit address is derived from a cryptographic key\nAn internal address represents a module with a native VP\nAn internal address represents a module with a native VP\nInternal MASP address\nInternal Multitoken address\nMasp\nMultitoken\nNon-usable ERC20 tokens\nContains the success value\nInternal ledger parameters address\nInternal Public Goods funding address\nInternal PoS address\nInternal PoS slash pool address\nProtocol parameters\nPgf\nProof-of-stake\nProof-of-stake slash pool contains slashed tokens\nReplay protection\nResult of decoding address from string\nSHA-256 hash len\nAddress with temporary storage is used to pass data from …\nAddress with temporary storage is used to pass data from …\nDecode an address from Bech32m encoding\nEncode an address with Bech32m encoding\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new established address. Unlike …\nGenerate a new established address.\nGenerate a new established address. Requires a source of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the address established?\nIf the address implicit?\nIf the address internal?\nInitialize a new address generator with a given randomness …\nTry to get a raw hash of an address, only defined for …\nPrint the type of the address and its bech32m encoded value\nCertain internal addresses have reserved aliases.\nRepresents an address that defaults to a native token\nNamada address of the token that will be received.\nRepresents an address on the ledger\nRepresents the owner of a balance\nRepresents a block height\nBond arguments\nBridge pool recommendations conversion rates table.\nAn entry in the Bridge pool recommendations conversion …\nBridge pool proof arguments.\nBridge validator set arguments.\nClaim arguments\nCommission rate change args\nGenerate shell completions\nRPC address of a locally configured node\nConsensus key change args\nUser-provided custom expiration\nRepresents some data that is used in a transaction\nRepresents a shielded spending key\nRepresents a shielded viewing key\nRequest the default expiration\nHardware Wallet transport - HID (USB) or TCP\n<code>Duration</code> wrapper that provides a method to parse a value …\nRepresents the address of an Ethereum endpoint\nA transfer to be added to the Ethereum bridge pool.\nIBC shielding transfer generation arguments\nGovernance validator set arguments.\nHID transport (USB connected hardware wallet)\nIBC shielding transfer asset, to be used by …\nTransaction to initialize create a new proposal\nAn amount read in by the cli\nWallet key / address add arguments\nWallet key / address lookup arguments\nWallet list arguments\nWallet key / address remove arguments\nWallet key export arguments\nWallet restore key and implicit address arguments\nWallet key export arguments\nWallet generate key and implicit address arguments\nWallet key import arguments\nRepresents a key pair\nAttempt to look-up the address of the asset to shield on …\nAddress of a <code>namada-masp-indexer</code> live instance\nCommission rate change args\nSpecifies the minimum amount to be received\nAbstraction of types being used in Namada\nForce the tx to have no expiration\nIndividual hop of some route to take through Osmosis pools.\nGenerate payment address arguments\nRepresents a shielded payment address\nRepresents a public key\nCommon query arguments\nQuery token balance(s)\nQuery token balance(s)\nQuery PoS bonded stake\nQuery PoS bond(s)\nQuery PoS commission rate\nQuery asset conversions\nQuery PoS delegations\nQuery effective native supply\nQuery PoS to find a validator\nQuery the IBC rate limit for the specified token\nQuery validator metadata\nQuery pgf data\nQuery proposal\nQuery proposal votes\nQuery protocol parameters\nQuery the raw bytes of given storage key\nTransaction associated results arguments\nQuery PoS rewards\nGet an estimate for the MASP rewards for the next MASP …\nQuery PoS slashes\nQuery estimate of staking rewards rate\nQuery token total supply\nQuery historical transfer(s)\nQuery the state of a validator (its validator set or if it …\nCommon query arguments\nBridge pool batch recommendation.\nRedelegation arguments\nArguments to an Ethereum Bridge pool relay operation.\nCommission rate change args\nReveal public key\nThe concrete types being used in Namada SDK\nSupported shell types\nSync notes from MASP owned by the provided spending / …\nConstraints on the  osmosis swap\nRepresents a shielded spending key\nTCP transport\nRepresents the address of a Tendermint endpoint (used in …\nRepresents the source of a Transfer\nRepresents the target of a Transfer\nA time-weighted average price\nCommon transaction arguments\nTransaction to initialize a new account\nBuilder functions for Tx\nCustom transaction arguments\nDeactivate validator args\nThe possible values for the tx expiration\nIBC transfer transaction arguments\nTransaction to initialize a new account\nTransaction to initialize a new account\nAn token swap on Osmosis\nRe-activate a deactivated validator args\nShielded transfer transaction arguments\nShielded transfer-specific arguments\nShielding transfer transaction arguments\nShielding transfer-specific arguments\nTransparent transfer transaction arguments\nTransparent transfer-specific arguments\nRe-activate a jailed validator args\nUnshielding transfer transaction arguments\nUnshielding transfer-specific arguments\nTransaction to update a VP arguments\nUnbond arguments\nThe parsed amount read in from the cli. It has not yet …\nCommission rate change args\nAn amount whose representation has been validated against …\nValidator set proof arguments.\nValidator set update relayer arguments.\nRepresents a shielded viewing key\nTransaction to vote on a proposal\nWithdraw arguments\nAccount keys\nAddress of the account whose VP is to be updated\nAddress of the account whose VP is to be updated\nValidator address, either Comet or native\nSet the address\nAddress of an account that will become a validator.\nAddress to find\nList addresses only\nFind addresses only\nAn alias for the token, or the string representation of …\nKey alias\nKey alias\nAlias to find\nKey alias\nKey alias\nKey alias\nAddress alias\nAddress alias\nKey alias\nWhether to force overwrite the alias\nWhether to force overwrite the alias\nWhether to force overwrite the alias\nWhether to force overwrite the alias\nWhether to force overwrite the alias\nAllow non-compliant derivation path\nAllow non-compliant derivation path\nTransferred token amount\nTransferred token amount\nAmount of tokens to stake in a bond\nAmount of tokens to unbond from a bond\nThe amount to be transferred\nTransferred token amount\nTransferred token amount\nTransferred token amount\nTransferred token amount\nTransferred token amount\nAmount of tokens to stake in a bond\nAmount of tokens to unbond from a bond\nThe amount of tokens to redelegate\nThe amount to be transferred\nTransferred token amount\nThe type of token\nThe type of token\nAsset to shield over IBC to Namada\nNew validator avatar url\nThe validator’s avatar\nThe validator’s avatar\nNew validator avatar url\nOptional block height after which this key was created. …\nOptional blockheight after which this key was created. …\nOptional block height after which this key was created. …\nNumber of blocks fetched per concurrent fetch job.\nDo not wait for the transaction to be added to the …\nDo not wait for the transaction to be added to the …\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild the tx\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nBuild a transaction from this builder\nThe chain id for which the transaction is intended\nThe chain id for which the transaction is intended\nChannel ID\nChannel ID\nPath to the tx WASM code file\nPath to the tx WASM code file\nPath to the tx WASM code file\nPath to the tx WASM code file\nValue to which the tx changes the commission rate\nValue to which the tx changes the commission rate\nSet the commission rate\nNew validator commission rate\nCommission rate\nCommission rate\nNew validator commission rate\nThe number of confirmations to wait for on Ethereum\nThe number of block confirmations on Ethereum.\nValue to which the tx changes the commission rate\nConsensus key\nConsensus key\nNew consensus key\nConversion rate from the given token to gwei.\nBridge pool recommendations conversion rates table.\nRun in daemon mode, which will continuously perform …\nThe transfer specific data\nTransfer-specific data\nTransfer-specific data\nTransfer-specific data\nPath to the data file\nPath to the data file\nWhether to decrypt secret / spending keys\nWhether to decrypt secret / spending keys\nBIP44 / ZIP32 derivation path\nBIP44 / ZIP32 derivation path\nNew validator description\nThe validator description\nThe validator description\nNew validator description\nDest validator address\nDestination validator address\nHardware Wallet transport - HID (USB) or TCP\nHardware Wallet transport - HID (USB) or TCP\nNew validator discord handle\nThe validator’s discord handle\nThe validator’s discord handle\nNew validator discord handle\nGenerate an ephemeral signing key to be used only once to …\nGenerate an ephemeral signing key to be used only once to …\nGenerate an ephemeral signing key to be used only once to …\nConfirmation to remove the alias\nSimulate applying the transaction\nSimulate applying the transaction\nSimulate applying both the wrapper and inner transactions\nSimulate applying both the wrapper and inner transactions\nFlag to dump the conversion tree\nDump the transaction bytes to file\nDump the raw transaction bytes to file\nDump the wrapper transaction bytes to file\nSet the email\nNew validator email\nThe validator email\nThe validator email\nNew validator email\nEpoch of the asset\nEpoch in which to find bonded stake\nEpoch in which to find the validator state\nEpoch in which to find commission rate\nEpoch in which to find rewards\nThe epoch to query.\nThe epoch to query.\nThe epoch to query.\nThe epoch of the validator set to relay.\nThe address of the Ethereum wallet to pay the gas fees. If …\nThe address of the Ethereum wallet to pay the gas fees. If …\nEthereum cold key\nEthereum cold key\nEthereum hot key\nEthereum hot key\nThe Ethereum RPC endpoint.\nThe Ethereum RPC endpoint.\nThe optional expiration of the transaction\nThe optional expiration of the transaction\nThe optional expiration of the masp shielding transaction\nThe amount being paid (for gas unit) to include the …\nThe amount of gas fees\nThe amount being paid (for gas unit) to include the …\nThe amount of gas fees\nThe account of fee payer.\nThe account of fee payer.\nThe token in which the fee is being paid\nThe token in which the gas is being paid\nThe token in which the fee is being paid\nThe token in which the gas is being paid\nFile name\nSubmit the transaction even if it doesn’t pass client …\nSubmit the transaction even if it doesn’t pass client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn optional parameter indicating how much net gas the …\nThe Ethereum gas that can be spent during the relay call.\nThe Ethereum gas that can be spent during the relay call.\nThe max amount of gas used to process tx\nThe max amount of gas used to process tx\nThe price of Ethereum gas, during the relay call.\nThe price of Ethereum gas, during the relay call.\nOptional additional keys for gas payment\nOptional additional keys for gas payment\nOptional additional keys for gas payment\nGas spending keys\nOptional height to query balances at\nMemo for IBC transfer packet\nMemo for IBC transfer packet\nIBC shielding transfer data\nIBC shielding transfer data for the destination chain\nIf any new account is initialized by the tx, use the given …\nIf any new account is initialized by the tx, use the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an IBC transfer from the input arguments\nFlag if proposal is of type Pgf funding\nFlag if proposal is of type Pgf funding\nFlag if proposal is of type Pgf stewards\nFlag if proposal is of type Pgf stewards\nList keys only\nFind keys only\nHeight to sync up to. Defaults to most recent\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe ledger address\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nThe address of the ledger node as host:port\nRecovery address (on Osmosis) in case of failure\nSet the max commission rate change\nMaximum commission rate change\nMaximum commission rate change\nMaximum number of fetch jobs that will ever execute …\nThe maximum amount of gas to spend.\nChange memo\nOptional memo to be included in the transaction\nNew validator name\nThe validator’s name\nThe validator’s name\nNew validator name\nWhether not to convert balances\nWhether the transfer is for a NUT.\nWhether the transfer is for a NUT.\nA REST rpc endpoint to Osmosis\nThe token we wish to receive (on Namada)\nThe output directory path to where serialize the data\nThe output directory path to where serialize the data\nThe output directory path to where serialize the data\nAddress to receive funds exceeding the minimum amount, in …\nThe address that correspond to the signatures/signing-keys\nOwner (or delegator or source) of the redelegation\nThe optional address that correspond to the …\nOwner of the bonds that are being redelegated\nAddress of an owner\nAddress of an owner\nViewing key\nAddress of an owner\nAddress of an owner\nAddress of an owner\nPassword to decrypt key\nPassword to decrypt key\nPayment address to find\nThe id of the pool to use on Osmosis.\nPort ID\nPort ID\nPrompt for BIP39 passphrase\nPrompt for BIP39 passphrase\nThe proposal data\nThe proposal data\nProposal id\nProposal id\nProposal id\nProposal id\nProtocol key\nProtocol key\nA public key to be revealed on-chain\nA public key to be revealed on-chain\nPublic key to lookup keypair with\nPublic key hash to lookup keypair with\nA vector of public key to associate with the new account\nPublic keys\nPublic key for the new account\nPublic keys\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nCommon query args\nThe query parameters.\nThe query parameters.\nValue to which the tx changes the commission rate\nValue to which the tx changes the commission rate\nWhether to generate a raw non-hd key\nTransfer target address\nTransfer target address\nTransfer target address\nThe recipient address\nAddress of the recipient on Namada\nThe recipient address\nRefund target address\nRefund target address when the shielded transfer failure\nThe address of the node responsible for relaying the …\nThe Namada address for receiving fees for relaying\nThe amount of time to sleep between failed daemon mode …\nMaximum number of times to retry fetching. If <code>None</code> is …\nThe route to take through Osmosis pools\nSignature scheme\nSignature scheme\nScheme type\nScheme type\nThe sender of the transfer\nThe sender of the transfer\nPath to the serialized transaction\nPath to the serialized transaction\nWhich shell\nWhether to generate a spending key for the shielded pool\nWhether to generate a MASP spending key\nWhether to list MASP spending keys only\nList of signatures to attach to the transaction\nList of signatures to attach to the transaction\nSign the tx with the key for the given alias from your …\nSign the tx with the key for the given alias from your …\nConstraints on the  osmosis swap\nTransfer source address\nTransfer source address\nSource address for delegations. For self-bonds, the …\nSource address for unbonding from delegations. For …\nSource address for withdrawing from delegations. For …\nTransfer source address\nTransfer source spending key\nTransfer source spending key\nTransfer source spending key\nTransfer source address\nSource address for delegations. For self-bonds, the …\nSource address for unbonding from delegations. For …\nSource address for withdrawing from delegations. For …\nSource address for claiming rewards due to bonds. For …\nAddress of the source\nSpending keys used to determine note ownership\nSrc validator address\nSource validator address\nSteward address\nValidator address\nSteward address\nValidator address\nThe storage key to query\nThe amount of time to sleep between successful daemon mode …\nSynchronize with the network, or exit immediately, if the …\nSynchronize with the network, or exit immediately, if the …\nTransfer target address\nTransfer target address\nTransfer target address\nTransfer target address\nThe target address\nA threshold to associate with the new account\nThe account threshold\nThe account multisignature threshold\nThe account multisignature threshold\nThe account threshold\nTimeout height of the destination chain\nTimeout height of the destination chain\nTimeout timestamp offset\nTimeout timestamp offset\nConverts the expiration argument into an optional …\nTransferred token address\nTransferred token address\nTransferred token address\nTransferred token address\nTransferred token address\nTransferred token address\nTransferred token address\nAddress of a token\nAddress of a token\nAddress of a token\nToken address\nToken address\nThe output denomination expected from the pool on Osmosis.\nThe IBC transfer data\nThe keccak hashes of transfers to acquire a proof of.\nThe hashes of the transfers to be relayed\nWhether to list transparent secret keys only\nApply the given function to the Tx inside self\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nCommon tx arguments\nThe args for building a tx to the bridge pool\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the tx WASM file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the tx WASM file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nPath to the TX WASM code file\nHash of transaction to lookup\nPath to the TX WASM code file\nPath to the TX WASM code file to reveal PK\nPath to the TX WASM code file to reveal PK\nDon’t encrypt the keypair\nDon’t encrypt the keypair\nDon’t encrypt the keypair\nDon’t encrypt the keypair\nDon’t encrypt the keypair\nDon’t encrypt the key\nDon’t encrypt the key\nUse the deprecated pure ZIP 32 algorithm\nShow secret keys to user\nShow secret keys to user\nUse device to sign the transaction\nUse device to generate key and address\nValidator address\nValidator address\nValidator address\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address\nValidator address\nValidator address\nValidator address\nAddress of a validator\nAddress of a validator\nAddress of a validator\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nValidator address (should be self)\nAddress of a validator\nAddress of a validator\nAddress of a validator\nAddress of the validator\nPath to the VP WASM code file\nAny supported value\nViewing key\nViewing keys used to determine note ownership\nThe vote\nThe vote\nThe address of the voter\nVoter address\nThe address of the voter\nPath to the VP WASM code file\nPath to the VP WASM code file\nPath to the VP WASM code file for the new account\nPath to the VP WASM code file\nWait for the last query height.\nWhether to force overwrite the above alias, if it is …\nWhether to force overwrite the above alias, if it is …\nNew validator website\nThe validator website\nThe validator website\nNew validator website\nAddress of a <code>namada-masp-indexer</code> live instance\nThe fee payer signing key\nThe fee payer signing key\nOptional path to a serialized wrapper signature\nChannel ID via which the token is received\nPort ID via which the token is received\nThe token address which could be a non-namada address\nThe maximum percentage difference allowed between the …\nThe time period (in seconds) over which the average price …\nPerforms addition, returning <code>None</code> if overflow occurred.\nPerforms division, returning <code>None</code> on division by zero or …\nPerforms multiplication, returning <code>None</code> if overflow …\nPerforms negation, returning <code>None</code> if the result can’t be …\nPerforms integral remainder, returning <code>None</code> on division by …\nPerforms subtraction, returning <code>None</code> if overflow occurred.\nChecked arithmetics error.\nPerforms addition with a flag for overflow.\nPerforms substraction with a flag for overflow.\nConvert arithmetic operators within the given expression …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for overflow and division by …\nMultiplies two numbers, checking for overflow. If overflow …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nSubtracts two numbers, checking for underflow. If …\nThe original expression given to the <code>checked</code> macro.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the difference along with a boolean …\nExtend <code>bool</code> values with the possibility to create <code>Result</code> …\nExtend <code>Result</code> of <code>bool</code> values with the possibility to …\nReturn <code>Ok(())</code> if true, or <code>error</code> if false.\nReturn <code>Ok(())</code> if true, or the value returned by <code>handle_err</code> …\nReturn <code>Ok(())</code> if <code>Ok(true)</code>, <code>Err(error)</code> if <code>Ok(false)</code> or pass …\nReturn <code>Ok(())</code> if <code>Ok(true)</code>, <code>Err(handle_err())</code> if <code>Ok(false)</code> …\nA data-structure that can be de-serialized from binary …\nderive proc-macro for <code>borsh::de::BorshDeserialize</code> trait\nThe declaration and the definition of the type that can be …\nderive proc-macro for <code>borsh::BorshSchema</code> trait\nA data-structure that can be serialized into binary format …\nderive proc-macro for <code>borsh::ser::BorshSerialize</code> trait\nExtensions to types implementing <code>BorshSerialize</code>.\nRecursively, using DFS, add type definitions required for …\nGet the name of the type without brackets.\nDeserializes this instance from a given slice of bytes. …\nDeserializes an object from a reader.\nDeserializes an object from a slice of bytes.\nSubset of <code>std::io</code> which is used as part of borsh public …\nReturns the largest possible size of a serialised object …\nSerializes an object without allocation to compute and …\nModule is available if borsh is built with …\ngenerate BorshSchemaContainer for type <code>T</code>\nSerialize a value to a <code>Vec</code> of bytes.\nSerialize an object into a vector of bytes.\nSerializes an object directly into a <code>Writer</code>.\nDeserialize this instance from a slice of bytes.\nDeserialize this instance from a slice of bytes, but …\nSerialize object into a vector of bytes and prefix with …\nA data-structure that can be de-serialized from binary …\nAdditional methods offered on enums which is used by …\nDeserializes this instance from a given slice of bytes. …\nDeserialises given variant of an enum from the reader.\nDeserializes an object from a reader.\nDeserializes an object from a slice of bytes.\nModule is available if borsh is built with …\nDeserialize this instance from a slice of bytes.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nThe operation failed because a pipe was closed.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nThe <code>Read</code> trait allows for reading bytes from a source.\nThe filesystem or storage medium is read-only, but a write …\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nStale network file handle.\nThe underlying storage (typically, a filesystem) is full.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nA trait for objects which are byte-oriented sinks.\nAn error returned when an operation could not be completed …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adapter for this instance of …\nTransforms this <code>Read</code> instance to an <code>Iterator</code> over its …\nCreates an adapter which will chain this stream with …\nAttempts to downcast the custom boxed error to <code>E</code>.\nFlushes this output stream, ensuring that all …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConvert the <code>Error</code> to an <code>io::Error</code>, preserving the original …\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nReturns a reference to the inner error wrapped by this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> …\nDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nCreates a new I/O error from a known kind of error as well …\nCreates a new I/O error from an arbitrary error payload.\nReturns the OS error that this error represents (if any).\nPull some bytes from this source into the specified …\nPull some bytes from this source into the specified buffer.\nReads the exact number of bytes required to fill <code>cursor</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nLike <code>read</code>, except that it reads into a slice of buffers.\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write multiple buffers into this writer.\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.\nArray length isn’t present in payload, it’s determined …\nThe declaration and the definition of the type that can be …\nAll schema information needed to deserialize a single type.\nConvenience constant representing the length range of a …\nConvenience constant representing the length width of a …\nThe type that we use to represent the declaration of the …\nThe type that we use to represent the definition of the …\nThe type that we use for value of discriminant.\nThe struct with no fields, structurally identical to an …\nA Sequence defined with an empty length range.\nA possibly tagged union, a.k.a enum.\nThe name of the field in the struct (can be used to …\nThe collection representing the fields of a struct.\nSome of the declared types were lacking definition making …\nSome of the declared types were lacking definition, which …\nThe struct with named fields, structurally identical to a …\nThe theoretical maximum size of the encoded value …\nA fixed-size type, which is considered undivisible\nThe type is recursive and thus theoretical maximum size is …\nPossible error when validating a <code>BorshSchemaContainer</code>, …\nPossible error when calculating theoretical maximum size …\nA sequence of homogeneous elements.\nA structure, structurally similar to a tuple.\nonly 0, 1, 2, 4 and 8 bytes long sequences’ <code>length_width</code> …\nDeclared tag width is too small.  Tags must be large …\nDeclared tag width is too large.  Tags may be at most …\nA fixed-size tuple with the length known at the compile …\nThe struct with unnamed fields, structurally identical to …\nThe type that we use for the name of the variant.\nsequences of zero-sized types of dynamic length are …\nHelper method to add a single type definition to the map.\nRecursively, using DFS, add type definitions required for …\nGet the name of the type without brackets.\ngenerate BorshSchemaContainer for type <code>T</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule is available if borsh is built with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the largest possible size of a serialised object …\nValidates container for violation of any well-known rules …\nType of each element of the sequence.\nBounds on the possible lengths of the sequence.\nHow many bytes does the length tag occupy.\nWidth in bytes of the discriminant tag.\nPossible variants of the enumeration. <code>VariantName</code> is …\nA data-structure that can be serialized into binary format …\nModule is available if borsh is built with …\nLowercase hexadecimal encoding\nUppercase hexadecimal encoding\nThe length of the block hash\nThe length of the block height\nHash of a block as fixed-size byte array\nThe block header data from Tendermint header relevant for …\nHeight of a block, i.e. the level. The <code>default</code> is the …\nThe length of the chain ID string\nThe maximum length of chain ID prefix\nSeparator between chain ID prefix and the generated hash\nChain ID\nChain ID prefix\nRelease default chain ID. Must be <code>CHAIN_ID_LENGTH</code> long.\nEpoch identifier. Epochs are identified by consecutive …\nPredecessor block epochs\nExtracts a string slice containing the entire chain ID …\nExtracts a string slice containing the entire chain ID.\nChecked epoch addition.\nChecked block height addition.\nChecked epoch division.\nChecked epoch multiplication.\nChecked epoch integral reminder.\nChecked epoch subtraction. Computes self - rhs, returning …\nChecked block height subtraction.\nThe number of bytes when this header is encoded\nThe first block height 1.\nReturn all starting block heights for each successive …\nThe block heights of the first block of each known epoch. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerive the chain ID from the genesis hash and release …\nLook up the epoch of a given block height. If the given …\nLook up the starting block height of an epoch at or before …\nLook up the starting block height of the given epoch\nMerkle root hash of block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate a range of epochs, inclusive of the start and end.\nIterate a range of consecutive epochs starting from <code>self</code> …\nRecord start of a new epoch at the given block height\nChange to the next epoch\nGet the height of the next block\nHash of the addresses of the next validator set\nFind the prefix of a valid ChainId.\nChange to the previous epoch.\nGet the height of the previous block\nChecked epoch subtraction. Computes self - rhs, returning …\nA sentinel value block height 0 may be used before any …\nReturn a temporary chain ID made only from the prefix. …\nTimestamp associated to block\nUnchecked epoch addition.\nValidate that chain ID is matching the expected value …\nA hash table where the iteration order of the key-value …\nA hash set where the iteration order of the values is …\nMoves all key-value pairs from <code>other</code> into <code>self</code>, leaving …\nMoves all values from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.\nReturns a mutable slice of all the key-value pairs in the …\nReturns a slice of all the key-value pairs in the map.\nReturns a slice of all the values in the set.\nSearch over a sorted set for a value.\nSearch over a sorted map with a comparator function.\nSearch over a sorted set with a comparator function.\nSearch over a sorted map with an extraction function.\nSearch over a sorted set with an extraction function.\nSearch over a sorted map for a key.\nReturns the set intersection, cloned into a new set.\nReturns the set union, cloned into a new set.\nReturns the set symmetric-difference, cloned into a new …\nReturn the number of elements the map can hold without …\nReturn the number of elements the set can hold without …\nRemove all key-value pairs in the map, while preserving …\nRemove all elements in the set, while preserving its …\nReturn <code>true</code> if an equivalent to <code>value</code> exists in the set.\nReturn <code>true</code> if an equivalent to <code>key</code> exists in the map.\nReturn an empty <code>IndexMap</code>\nReturn an empty <code>IndexSet</code>\nReturn an iterator over the values that are in <code>self</code> but …\nClears the <code>IndexMap</code> in the given index range, returning …\nClears the <code>IndexSet</code> in the given index range, returning …\nGet the given key’s corresponding entry in the map for …\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nGet the first key-value pair\nGet the first value\nGet the first entry in the map for in-place manipulation.\nGet the first key-value pair, with mutable access to the …\nExamples\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nCreate an <code>IndexMap</code> from the sequence of key-value pairs in …\nReturn a reference to the value stored for <code>key</code>, if it is …\nReturn a reference to the value stored in the set, if it …\nReturn item index, key and value\nReturn item index and value\nGet a key-value pair by index\nGet a value by index\nGet an entry in the map by index for in-place manipulation.\nGet a key-value pair by index\nReturn item index, if it exists in the map\nReturn item index, if it exists in the set\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturns a slice of key-value pairs in the given range of …\nReturns a slice of values in the given range of indices.\nReturns a mutable slice of key-value pairs in the given …\nReturn a reference to the map’s <code>BuildHasher</code>.\nReturn a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value at the supplied <code>index</code>.\nReturns a reference to the value corresponding to the …\nReturns a reference to the value at the supplied <code>index</code>.\nReturns a mutable reference to the value corresponding to …\nReturns a mutable reference to the value at the supplied …\nInsert a key-value pair in the map.\nInsert the value into the set.\nInsert a key-value pair in the map before the entry at the …\nInsert the value into the set before the value at the …\nInsert a key-value pair in the map, and get their index.\nInsert the value into the set, and get its index.\nInsert a key-value pair in the map at its ordered position …\nInsert the value into the set at its ordered position …\nReturn an iterator over the values that are in both <code>self</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into a boxed slice of all the key-value pairs in …\nConverts into a boxed slice of all the values in the set.\nReturn an owning iterator over the keys of the map, in …\nReturn an owning iterator over the values of the map, in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nReturns true if the map contains no elements.\nReturns true if the set contains no elements.\nReturns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…\nReturns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the values of the set, in their …\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the keys of the map, in their order\nGet the last key-value pair\nGet the last value\nGet the last entry in the map for in-place manipulation.\nGet the last key-value pair, with mutable access to the …\nReturn the number of key-value pairs in the map.\nReturn the number of elements in the set.\nMoves the position of a key-value pair from one index to …\nMoves the position of a value from one index to another by …\nCreate a new map. (Does not allocate.)\nCreate a new set. (Does not allocate.)\nReturns the index of the partition point of a sorted map …\nReturns the index of the partition point of a sorted set …\nRemove the last key-value pair\nRemove the last value\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove the value from the set, and return <code>true</code> if it was …\nRemove and return the key-value pair equivalent to <code>key</code>.\nAdds a value to the set, replacing the existing value, if …\nAdds a value to the set, replacing the existing value, if …\nReserve capacity for <code>additional</code> more key-value pairs.\nReserve capacity for <code>additional</code> more values.\nReserve capacity for <code>additional</code> more key-value pairs, …\nReserve capacity for <code>additional</code> more values, without …\nScan through each key-value pair in the map and keep those …\nScan through each value in the set and keep those where the\nReverses the order of the map’s key-value pairs in place.\nReverses the order of the set’s values in place.\nInsert a key-value pair in the map at the given index.\nInsert the value into the set at the given index.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove the value from the set, and return <code>true</code> if it was …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the value from the set return it and the index it …\nRemove the key-value pair by index\nRemove the value by index\nRemoves and returns the value in the set, if any, that is …\nShrink the capacity of the map with a lower limit.\nShrink the capacity of the set with a lower limit.\nShrink the capacity of the map as much as possible.\nShrink the capacity of the set as much as possible.\nSort the set’s values by their default ordering.\nSort the map’s key-value pairs in place using the …\nSort the set’s values in place using the comparison …\nSort the map’s key-value pairs in place using a sort-key …\nSort the set’s values in place using a key extraction …\nSort the map’s key-value pairs by the default ordering …\nSort the set’s values by their default ordering.\nSort the map’s key-value pairs in place using the …\nSort the set’s values in place using the comparison …\nSort the map’s key-value pairs by the default ordering …\nSort the key-value pairs of the map and return a by-value …\nSort the values of the set and return a by-value iterator …\nSort the key-value pairs of the map and return a by-value …\nSort the values of the set and return a by-value iterator …\nCreates a splicing iterator that replaces the specified …\nCreates a splicing iterator that replaces the specified …\nSplits the collection into two at the given index.\nSplits the collection into two at the given index.\nReturns the set difference, cloned into a new set.\nSwaps the position of two key-value pairs in the map.\nSwaps the position of two values in the set.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove the value from the set, and return <code>true</code> if it was …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the value from the set return it and the index it …\nRemove the key-value pair by index\nRemove the value by index\nRemoves and returns the value in the set, if any, that is …\nReturn an iterator over the values that are in <code>self</code> or …\nRemoves and returns the value in the set, if any, that is …\nShortens the map, keeping the first <code>len</code> elements and …\nShortens the set, keeping the first <code>len</code> elements and …\nTry to reserve capacity for <code>additional</code> more key-value …\nTry to reserve capacity for <code>additional</code> more values.\nTry to reserve capacity for <code>additional</code> more key-value …\nTry to reserve capacity for <code>additional</code> more values, …\nReturn an iterator over all values that are in <code>self</code> or …\nReturn an iterator over the values of the map, in their …\nReturn an iterator over mutable references to the values …\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreate a new set with capacity for <code>n</code> elements. (Does not …\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreate a new set with capacity for <code>n</code> elements. (Does not …\nCreate a new map with <code>hash_builder</code>.\nCreate a new set with <code>hash_builder</code>.\nA draining iterator over the entries of an <code>IndexMap</code>.\nEntry for an existing key-value pair in an <code>IndexMap</code> or a …\nA hash table where the iteration order of the key-value …\nA hash table where the iteration order of the key-value …\nA view into an occupied entry in an <code>IndexMap</code> obtained by …\nAn owning iterator over the entries of an <code>IndexMap</code>.\nAn owning iterator over the keys of an <code>IndexMap</code>.\nAn owning iterator over the values of an <code>IndexMap</code>.\nAn iterator over the entries of an <code>IndexMap</code>.\nA mutable iterator over the entries of an <code>IndexMap</code>.\nA mutable iterator over the entries of an <code>IndexMap</code>.\nAn iterator over the keys of an <code>IndexMap</code>.\nOpt-in mutable access to <code>Entry</code> keys.\nOpt-in mutable access to <code>IndexMap</code> keys.\nExisting slot with equivalent key.\nA view into an occupied entry in an <code>IndexMap</code>. It is part …\nOpt-in access to the experimental raw entry API.\nA dynamically-sized slice of key-value pairs in an <code>IndexMap</code>…\nA splicing iterator for <code>IndexMap</code>.\nVacant slot (no equivalent key in the map).\nA view into a vacant entry in an <code>IndexMap</code>. It is part of …\nAn iterator over the values of an <code>IndexMap</code>.\nA mutable iterator over the values of an <code>IndexMap</code>.\nModifies the entry if it is occupied.\nReturns a mutable slice of the remaining entries in the …\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nSearch over a sorted map with a comparator function.\nSearch over a sorted map with an extraction function.\nSearch over a sorted map for a key.\nGet the first key-value pair.\nGet the first key-value pair, with mutable access to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the entry’s value in the map.\nGets a reference to the entry’s value in the map.\nReturn item index, mutable reference to key and value\nGet a key-value pair by index.\nGet a key-value pair by index, with mutable access to the …\nReturn mutable reference to key and value at an index.\nGets a mutable reference to the entry’s value in the map.\nGets a mutable reference to the entry’s value in the map.\nReturns a slice of key-value pairs in the given range of …\nReturns a mutable slice of key-value pairs in the given …\nReturn the index where the key-value pair exists or will …\nReturn the index of the key-value pair\nReturn the index where a key-value pair may be inserted.\nReturn the index of the key-value pair\nReturns a reference to the key at the supplied <code>index</code>.\nSets the value of the entry to <code>value</code>, and returns the entry…\nInserts the entry’s key and the given value into the …\nSets the value of the entry to <code>value</code>, and returns the entry…\nSets the value of the entry (after inserting if vacant), …\nInserts the entry’s key and the given value into the …\nInserts the entry’s key and the given value into the map …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes ownership of the key, leaving the entry vacant.\nReturn an owning iterator over the keys of the map slice.\nConverts into a mutable reference to the entry’s value …\nConverts into a mutable reference to the entry’s value …\nReturns a mutable slice of the remaining entries in the …\nReturns a mutable slice of the remaining entries in the …\nReturn an owning iterator over the values of the map slice.\nReturns true if the map slice contains no elements.\nReturn an iterator over the key-value pairs of the map …\nReturn an iterator over the key-value pairs of the map …\nReturn an iterator over the key-value pairs of the map, in …\nGets a reference to the entry’s key, either within the …\nGets a reference to the entry’s key in the map.\nGets a reference to the key that was used to find the …\nGets a reference to the entry’s key in the map.\nGets a mutable reference to the entry’s key, either …\nReturn an iterator over the keys of the map slice.\nGet the last key-value pair.\nGet the last key-value pair, with mutable access to the …\nReturn the number of key-value pairs in the map slice.\nMoves the position of the entry to a new index by shifting …\nMoves the position of the entry to a new index by shifting …\nReturns an empty slice.\nReturns an empty mutable slice.\nInserts a default-constructed value in the entry if it is …\nInserts the given default value in the entry if it is …\nInserts the result of the <code>call</code> function in the entry if it …\nInserts the result of the <code>call</code> function with a reference …\nReturns the index of the partition point of a sorted map …\nCreates a raw entry builder for the <code>IndexMap</code>.\nOpt-in access to the experimental raw entry API.\nCreates a raw immutable entry builder for the <code>IndexMap</code>.\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nScan through each key-value pair in the map and keep those …\nFunctions to serialize and deserialize an <code>IndexMap</code> as an …\nInserts the entry’s key and the given value into the map …\nRemove the key, value pair stored in the map for this …\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nRemove and return the key, value pair stored in the map …\nDivides one slice into two at an index.\nDivides one mutable slice into two at an index.\nReturns the first key-value pair and the rest of the slice,\nReturns the first key-value pair and the rest of the slice,\nReturns the last key-value pair and the rest of the slice, …\nReturns the last key-value pair and the rest of the slice, …\nSwaps the position of entry with another.\nSwaps the position of entry with another.\nRemove the key, value pair stored in the map for this …\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nRemove and return the key, value pair stored in the map …\nReturn an iterator over the values of the map slice.\nReturn an iterator over mutable references to the the …\nExisting slot with equivalent key.\nOpt-in access to the experimental raw entry API.\nA builder for computing where in an <code>IndexMap</code> a key-value …\nA builder for computing where in an <code>IndexMap</code> a key-value …\nRaw entry for an existing key-value pair or a vacant …\nA raw view into an occupied entry in an <code>IndexMap</code>. It is …\nA view into a vacant raw entry in an <code>IndexMap</code>. It is part …\nVacant slot (no equivalent key in the map).\nModifies the entry if it is occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess an entry by hash.\nAccess an entry by hash.\nAccess an entry by hash, including its index.\nAccess an entry by key.\nAccess an entry by key.\nAccess an entry by a key and its hash.\nAccess an entry by a key and its hash.\nGets a reference to the entry’s value in the map.\nGets a reference to the entry’s key and value in the map.\nGets a reference to the entry’s key and value in the map.\nGets a mutable reference to the entry’s value in the map.\nReturn the index where the key-value pair exists or may be …\nReturn the index of the key-value pair\nReturn the index where a key-value pair may be inserted.\nAccess the index of an entry by hash.\nSets the value of the entry, and returns the entry’s old …\nInserts the given key and value into the map, and returns …\nInserts the given key and value into the map with the …\nSets the key of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into a mutable reference to the entry’s key in …\nConverts into a mutable reference to the entry’s key and …\nConverts into a mutable reference to the entry’s value …\nGets a reference to the entry’s key in the map.\nGets a mutable reference to the entry’s key in the map.\nMoves the position of the entry to a new index by shifting …\nInserts the given default key and value in the entry if it …\nInserts the result of the <code>call</code> function in the entry if it …\nCreates a raw entry builder for the <code>IndexMap</code>.\nCreates a raw immutable entry builder for the <code>IndexMap</code>.\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nInserts the given key and value into the map at the given …\nInserts the given key and value into the map with the …\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nSwaps the position of entry with another.\nRemove the key, value pair stored in the map for this …\nRemove and return the key, value pair stored in the map …\nDeserializes an <code>IndexMap</code> from an ordered sequence.\nSerializes an <code>IndexMap</code> as an ordered sequence.\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of an <code>IndexSet</code>.\nA hash set where the iteration order of the values is …\nA hash set where the iteration order of the values is …\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of an <code>IndexSet</code>.\nAn iterator over the items of an <code>IndexSet</code>.\nOpt-in mutable access to <code>IndexSet</code> values.\nA dynamically-sized slice of values in an <code>IndexSet</code>.\nA splicing iterator for <code>IndexSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>IndexSet</code>…\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nReturns a slice of the remaining entries in the iterator.\nSearch over a sorted set for a value.\nSearch over a sorted set with a comparator function.\nSearch over a sorted set with an extraction function.\nGet the first value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn item index and mutable reference to the value\nGet a value by index.\nReturn mutable reference to the value at an index.\nReturns a slice of values in the given range of indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set slice contains no elements.\nReturn an iterator over the values of the set slice.\nGet the last value.\nReturn the number of elements in the set slice.\nReturns an empty slice.\nReturns the index of the partition point of a sorted set …\nScan through each value in the set and keep those where the\nDivides one slice into two at an index.\nReturns the first value and the rest of the slice, or <code>None</code> …\nReturns the last value and the rest of the slice, or <code>None</code> …\nShutdown signal receiver.\nShutdown signal receiver.\nShutdown signal receiver.\nShutdown signal receiver.\nReturns the argument unchanged.\nInstall a shutdown signal handler, and retrieve the …\nInstall a shutdown signal handler, and retrieve the …\nCalls <code>U::from(self)</code>.\nCheck if the shutdown signal has been received.\nCheck if the shutdown signal has been received.\nTime related logic for futures.\nTime related logic for futures.\nWait until a shutdown signal is received.\nWait until a shutdown signal is received.\nConstant sleep strategy.\nConstant sleep strategy.\nA <code>Duration</code> type to represent a span of time, typically …\nA <code>Duration</code> type to represent a span of time, typically …\nA future timed out.\nA future timed out.\nFuture task related errors.\nFuture task related errors.\nExponential backoff sleep strategy.\nExponential backoff sleep strategy.\nA measurement of a monotonically nondecreasing clock. …\nA measurement of a monotonically nondecreasing clock. …\nLinear backoff sleep strategy.\nLinear backoff sleep strategy.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nMap a function to the duration returned from a sleep …\nMap a function to the duration returned from a sleep …\nA future ran for the max number of allowed times.\nA future ran for the max number of allowed times.\nThe duration of one nanosecond.\nThe output type to return.\nThe output type to return.\nRun a fallible task forever.\nRun a fallible task forever.\nA <code>SleepRunUntil</code> implementation, for running a fallible …\nA <code>SleepRunUntil</code> implementation, for running a fallible …\nThe duration of one second.\nA <code>SleepStrategy</code> adaptor, to run async tasks with custom …\nA <code>SleepStrategy</code> adaptor, to run async tasks with custom …\nZero cost abstraction to check if we should exit a running …\nZero cost abstraction to check if we should exit a running …\nA sleep strategy to be applied to fallible runs of …\nA sleep strategy to be applied to fallible runs of …\nThe state of the sleep strategy.\nThe state of the sleep strategy.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nRetrieve a duration from a <code>u64</code>.\nRetrieve a duration from a <code>u64</code>.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nCalculate a duration from a sleep strategy state.\nCalculate a duration from a sleep strategy state.\nThe base of the exponentiation.\nThe base of the exponentiation.\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nThe number of times to run the fallible task.\nThe number of times to run the fallible task.\nThe amount of time added to each consecutive sleep.\nThe amount of time added to each consecutive sleep.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nExit with an error.\nExit with an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the value into a <code>std::time::Instant</code>.\nReturns true if this <code>Duration</code> spans no time.\nMap a function to the duration returned from a sleep …\nMap a function to the duration returned from a sleep …\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturn a new sleep strategy state.\nReturn a new sleep strategy state.\nMove to the next state of the sleep strategy.\nMove to the next state of the sleep strategy.\nReturns an instant corresponding to “now”.\nCheck if an error has occurred, prompting an early exit.\nCheck if an error has occurred, prompting an early exit.\nMove to the previous state of the sleep strategy.\nMove to the previous state of the sleep strategy.\nRetry running a fallible task for a limited number of …\nExecute a fallible task.\nRun a future as many times as <code>iter_times</code> yields a value, …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nPause the active task for the given duration.\nPause the active task for the given duration.\nSleep for a <code>Duration</code> equivalent to the value of the …\nThe sleep strategy to use.\nThe sleep strategy to use.\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nExit with success, returning a value.\nExit with success, returning a value.\nRun a time constrained task until the given deadline.\nConverts a <code>Duration</code> to a <code>std::time::Duration</code>, failing if …\nConverts a <code>Duration</code> to a <code>core::time::Duration</code>, failing if …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nA 256 bit number with <code>POS_DECIMAL_PRECISION</code> number of Dec …\nContains the error value\nGeneric error <code>Dec</code> operations can return\nContains the success value\nThe number of Dec places for PoS rational calculations\nGeneric result type for fallible <code>Dec</code> operations\nGet the absolute value of self as integer\nGet the non-negative difference between two <code>Dec</code>s.\nReturn the integer value of a <code>Dec</code> by rounding up.\nDo addition of two <code>Dec</code>s\nChecked division\nChecked multiplication. Return <code>None</code> if overflow. This …\nChecked negation\nDo subtraction of two <code>Dec</code>s\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if the <code>Dec</code> is negative\nCheck if value is zero\nCreate a new <code>Dec</code> using a mantissa and a scale.\nThe representation of 1\nThe representation of 1 / 3\nConvert the Dec type into a I256 with truncation\nConvert the Dec type into a Uint with truncation\nPerforms division with truncation.\nThe representation of 2\nThe representation of 2 / 5\nThe representation of 2 / 3\nThe representation of 0\nAccepted tx timeout\nApplied tx timeout\nArithmetic error\nBalance is too low\nBalance is too low for fee payment\nBond amount is zero\nCannot vote in governance\nThe queried node is outdated, and is in the process of …\nThe consensus key is not Ed25519\nThe consensus key is not unique\nError invoking smart contract function.\nError that occurs due to a conversion error\nError that occurs when trying to decode a value\nErrors That deal with encoding or decoding data\nError that occurs when trying to encode a value\nLike EncodeTxFailure but for the encode error type\nEncoding transaction failure\nErrors that deal with Decoding, Encoding, or Conversions\nEpoch not in storage\nNot whitelisted error.\nExceeded token caps error.\nContains the error value\nGeneral error interface for anything that may go wrong in …\nEthereum bridge related errors\nEthereum bridge related errors.\nEvent Errors\nExpect a dry running transaction\nExpect a live running transaction\nExpect a wrapped running transaction\nFailed to deserialize the proposal data from json\nError generating Bridge pool proof.\nError that corresponds to a general error\nUpdating a VP of an internal implicit address\nUpdating an VP of an implicit account\nThere is an incoming redelegation that is still subject to …\nAn interrupt was called\nInvalid owner account\nAccount threshold is not set\nInvalid bond pair\nInvalid Bridge pool nonce error.\nInvalid commission rate set\nAn empty string was provided as a new email\nCouldn’t understand who the fee payer is\nInvalid fee token error.\nThe proposal data are invalid\nThe proposal vote is not valid\nThe proposal can’t be voted\nThe address is not a valid steward\nThe commission for the steward are not valid\nInvalid validator address\nKey Retrieval Errors\nSource address does not exist on chain\nLower bond amount than the unbond\nNo Balance found for token\nThe metadata string is too long\nAccount threshold is not set\nNot enough signature\nNegative balance after transfer\nNo Balance found for token\nNo bonds found\nNo delegations found at epoch\nError that corresponds to not receiving any response\nError that occurs when no such key exists\nNo unbonded bonds found\nNo unbonded bonds ready to withdraw in the current epoch\nEthereum node timeout error.\nContains the success value\nAny Other errors that are uncategorized\nOther Errors that may show up when using the interface\nThe proposal can’t be found\nErrors that handle querying from storage\nErrors that deal with querying some kind of data\nError querying Ethereum voting powers.\nError reading the Bridge pool.\nError reading the signed Bridge pool.\nThe redelegation amount is larger than the remaining bond …\nThe redelegation amount is 0\nThe src and dest validators are the same\nThe redelegation owner is a validator\nError calculating relay cost.\nThe standard Result type that most code ought to return\nError retrieving from storage\nError retrieving contract address.\nEthereum RPC error.\nError that deals with Serde encoding failures\nTarget Address does not exist on chain\nSource Address does not exist on chain\nToken Address does not exist on chain\nRate of epoch change too large for current epoch\nTransfer already in pool error.\nError querying transfer to Ethereum progress.\nTransaction Errors\nError during broadcasting a transaction\nErrors to do with transaction events.\nUnexpected Error\nUnbond amount is zero\nValidator is frozen and ineligible to be unjailed or have …\nAlready inactive at pipeline epoch\nNot jailed at pipeline epoch\nValidator not inactive\nWasm querying failure\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an Ethereum encoding method equivalent to …\nAddress.\nArray of params with unknown size.\nBoolean value.\nVector of bytes of unknown size.\nContains a method to encode data to a format compatible …\nA container for data types that are able to be Ethereum …\nArray with known size.\nVector of bytes with known size.\nSigned integer.\nString.\nEthereum ABI params.\nTuple of params of variable types.\nUnsigned integer.\nReturns the encoded <code>Token</code> instances, in a type-safe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nReturn the underlying ABI encoded value.\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nCheck if the token is a dynamic type resulting in prefixed …\nEncodes a slice of <code>Token</code> instances, and returns the keccak …\nReturn a new ABI encoded value of type <code>T</code>.\nHere the type information is not compiler deduced, proceed …\nEncodes a slice of <code>Token</code> instances, and returns the keccak …\nEncodes a struct into a sequence of ABI <code>Token</code> instances.\nCheck whether the type of the token matches the given …\nCheck if all the types of the tokens match the given …\nInternal Eth bridge address\nInternal Eth bridge address\nBridge is enabled from this epoch onwards. a validator set …\nBridge is enabled from genesis\nThe fullnode is synced up to the given block height.\nCheck if it is possible to send a validator set update …\nArguments to <code>block_on_eth_sync</code>.\nRepresents a configuration value for the version of a …\nRepresents all the Ethereum contracts that need to be …\nThe bridge is disabled\nThe bridge is enabled\nAn ERC20 token whitelist entry.\nNumber of tokens to mint after receiving a “transfer to …\nEnum indicating if the bridge was initialized at genesis …\nMethods used to query blockchain Ethereum bridge related …\nA handle to <code>EthBridgeQueries</code>.\nAn enum indicating if the Ethereum bridge is enabled.\nRepresents chain parameters for the Ethereum bridge.\nSubset of <code>EthereumBridgeParams</code>, containing only Ethereum …\nRepresents a configuration value for the minimum number of …\nCheck if it is possible to send a validator set update …\nThis enum is used as a parameter to …\nThe underlying storage type.\nThe result of querying an Ethereum nodes syncing status.\nThe fullnode is syncing.\nRepresents an Ethereum contract that may be upgraded.\nThe Ethereum address of the contract.\nBlock until Ethereum finishes synchronizing.\nThe Ethereum address of the bridge contract.\nBridge pool SDK functionality.\nCheck if the bridge is disabled, enabled, or scheduled to …\nThe addresses of the Ethereum contracts that need to be …\nThe addresses of the Ethereum contracts that need to be …\nThe deadline before we timeout in the CLI.\nThe duration of sleep calls between each RPC timeout.\nAmount of wrapped ERC20s to mint.\nList of ERC20 token types whitelisted at genesis time.\nInitial Ethereum block height when events will first be …\nInitial Ethereum block height when events will first be …\nCheck if Ethereum has finished synchronizing. In case it …\nCheck if Ethereum has finished synchronizing. In case it …\nFetch the sync status of an Ethereum node.\nFetch the sync status of an Ethereum node, with a custom …\nReturn a handle to <code>EthBridgeQueries</code>.\nEthereum Bridge transaction events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean indicating whether the bridge is …\nCheck if the Ethereum Bridge has been enabled at compile …\nReturns true if <code>SyncStatus</code> reflects a synchronized node.\nMinimum number of confirmations needed to trust an …\nMinimum number of confirmations needed to trust an …\nThe Ethereum address of the ERC20 contract that represents …\nAmount of NUTs to mint.\nEthereum bridge oracle\nEthereum bridge protocol transactions and validation.\nGet the Ethereum address for wNam from storage, if possible\nFunctionality for accessing the storage subspace\nEthereum bridge struct re-exports and types to do with …\nThe address of the whitelisted ERC20 token.\nThe token cap of the whitelisted ERC20 token.\nValidator set updates SDK functionality.\nThe version of the contract. Starts from 1.\nNative validity predicates for the Namada Ethereum bridge. …\nFunctionality for accessing the multitoken subspace\nCraft a transaction that adds a transfer to the Ethereum …\nConstruct a merkle proof of a batch of transfers in the …\nQuery the contents of the Ethereum bridge pool. Prints out …\nQuery the status of a set of transfers to Ethreum, indexed …\nIterates over all ethereum events and returns the amount …\nQuery the contents of the Ethereum bridge pool that is …\nRecommend the most economical batch of transfers to relay …\nRelay a validator set update, signed off for a given epoch.\nStatus of some Bridge pool transfer.\nBridge pool transfer status update event.\nHash of bridge pool transaction\nEthereum bridge events on Namada’s event log.\nThe transfer has expired.\nThe transfer has been relayed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new Bridge pool expired transfer event.\nReturn a new Bridge pool relayed transfer event.\nEthereum bridge event types.\nStatus of the Bridge pool transfer.\nHash of the Bridge pool transfer.\nBridge pool expiration event.\nBridge pool relay event.\nConfiguration for an oracle.\nConfiguration for an oracle.\nThe status of the Ethereum bridge (active / inactive)\nThe Ethereum address of the current bridge contract.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum number of block confirmations an Ethereum …\nThe earliest Ethereum block from which events may be …\nThis module contains functionality for handling protocol …\nValidation logic for Ethereum bridge protocol actions.\nThe keys changed while applying a protocol transaction.\nFunctions dealing with bridge pool root hash.\nCode for handling Ethereum events protocol txs.\nCode for handling validator set update protocol txs.\nLogic and data types relating to tallying validators’ …\nApplies a tally of signatures on over the Ethereum bridge …\nSign the latest Bridge pool root, and return the associated\nApplies derived state changes to storage, based on …\nSign the given Ethereum events, and return the associated …\nAggregate validators’ votes\nSign the next set of validators, and return the associated …\nThe voting power behind a tally aggregated over multiple …\nExtension methods for <code>EpochedVotingPower</code> instances.\nRepresents all the information needed to tally a piece of …\nThe addresses of validators that voted for something, and …\nCalculate a new <code>Tally</code> based on some validators’ …\nDeterministically constructs a <code>Votes</code> map from a set of …\nQuery the stake of the most secure <code>Epoch</code> referenced by an …\nFetch the sum of the stake tallied on an <code>EpochedVotingPower</code>…\nReturns the argument unchanged.\nCheck if the <code>Tally</code> associated with an <code>EpochedVotingPower</code> …\nCalls <code>U::from(self)</code>.\nWhether this event has been acted on or not - this should …\nThe votes which have been counted towards <code>voting_power</code>. …\nFetch the sum of the stake tallied on an <code>EpochedVotingPower</code>…\nThe total voting power that’s voted for this event …\nThe error yielded from validating faulty vote extensions.\nBridge pool roots validation.\nEthereum events validation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidator set update validation.\nValidates a vote extension issued at the provided block …\nValidates an Ethereum events vote extension issued at the …\nValidates a validator set update vote extension issued at …\nA key for storing the active / inactive status of the …\nStorage key for the Ethereum address of the bridge …\nTools for accessing the storage subspaces of the Ethereum …\nThe key to the escrow of the VP.\nStorage queries for ethereum bridge.\nKey for storing the initial Ethereum block height when …\nCheck if the given <code>key</code> contains an Ethereum bridge address …\nReturns whether a key belongs to this account or not\nStorage key for the minimum confirmations parameter.\nStorage key for the Ethereum address of wNam.\nParameters for configuring the Ethereum bridge\nKey prefix for the storage subspace\nProofs over some arbitrary data.\nFunctionality for accessing keys to do with tallying votes\nValidity predicate storage\nERC20 token whitelist storage data.\nFunctionality for accessing the multitoken subspace\nThe main address of the Ethereum bridge pool\nA simple Merkle tree for the Ethereum bridge pool\nParse the key to ensure it is of the correct type.\nDelete a key from storage and update the root\nReturns the argument unchanged.\nGet the height at which the key was inserted\nGet the storage key for the transfers using the hash\nCreate a batched membership proof for the provided keys\nGet the storage key for the batch nonce of the bridge …\nGet the storage key for the transfers in the pool\nGet the storage key for the root of the Merkle tree …\nUpdate the tree with a new value.\nCalls <code>U::from(self)</code>.\nCheck if a key belongs to the bridge pools sub-storage\nCheck if a key is for a pending transfer\nCreate a new merkle tree for the Ethereum bridge pool\nParse a db key to see if it is valid for the bridge pool.\nReturn the root as a <code>Hash</code> type.\nGet a reference to the backing store\nRecomputes the root and check if it matches the …\nBridge is enabled from this epoch onwards. a validator set …\nBridge is enabled from genesis\nCheck if it is possible to send a validator set update …\nThe bridge is disabled\nThe bridge is enabled\nNumber of tokens to mint after receiving a “transfer to …\nEnum indicating if the bridge was initialized at genesis …\nMethods used to query blockchain Ethereum bridge related …\nA handle to <code>EthBridgeQueries</code>.\nAn enum indicating if the Ethereum bridge is enabled.\nCheck if it is possible to send a validator set update …\nThis enum is used as a parameter to …\nThe underlying storage type.\nCheck if the bridge is disabled, enabled, or scheduled to …\nCheck if the bridge is disabled, enabled, or scheduled to …\nAmount of wrapped ERC20s to mint.\nReturn a handle to <code>EthBridgeQueries</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the latest nonce for the Ethereum bridge pool.\nGet the nonce at a particular block height.\nGet the latest root of the Ethereum bridge pool Merkle …\nGet the root of the Ethereum bridge pool Merkle tree at a …\nQuery the Bridge <code>ValidatorSetArgs</code> at the given <code>Epoch</code>. Also …\nExtension of …\nFor a given Namada validator, return its corresponding …\nReturn the number of ERC20 and NUT assets to be minted, …\nFor a given Namada validator, return its corresponding …\nFor a given Namada validator, return its corresponding …\nQuery the Governance <code>ValidatorSetArgs</code> at the given <code>Epoch</code>. …\nGet the nonce of the next transfers to Namada event to be …\nGet a quorum of validator signatures over the …\nFetch the token cap of the asset associated with the given …\nFetch the token supply of the asset associated with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean indicating whether the bridge is …\nReturns a boolean indicating whether the bridge is …\nBehaves exactly like <code>Self::is_bridge_active</code>, but performs …\nCheck if the Ethereum Bridge has been enabled at compile …\nCheck if the token at the given <code>EthAddress</code> is whitelisted.\nGiven a <code>TransferToEthereum</code> event, look-up the corresponding\nDetermines if it is possible to send a validator set …\nAmount of NUTs to mint.\nCheck if ERC20s should be minted.\nCheck if NUTs should be minted.\nReturn a handle to the inner <code>WlState</code>.\nValdidate an <code>EthereumEvent</code>’s nonce against the current …\nCheck if a validator set update proof is available for the …\nRepresents a configuration value for the version of a …\nRepresents all the Ethereum contracts that need to be …\nAn ERC20 token whitelist entry.\nRepresents chain parameters for the Ethereum bridge.\nSubset of <code>EthereumBridgeParams</code>, containing only Ethereum …\nRepresents a configuration value for the minimum number of …\nRepresents an Ethereum contract that may be upgraded.\nThe Ethereum address of the contract.\nThe Ethereum address of the bridge contract.\nThe addresses of the Ethereum contracts that need to be …\nThe addresses of the Ethereum contracts that need to be …\nList of ERC20 token types whitelisted at genesis time.\nInitial Ethereum block height when events will first be …\nInitial Ethereum block height when events will first be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the Ethereum bridge parameters in storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum number of confirmations needed to trust an …\nMinimum number of confirmations needed to trust an …\nThe Ethereum address of the ERC20 contract that represents …\nReads the latest <code>EthereumOracleConfig</code> from storage. If it …\nGet the Ethereum address for wNam from storage, if possible\nThe address of the whitelisted ERC20 token.\nThe token cap of the whitelisted ERC20 token.\nThe version of the contract. Starts from 1.\nEthereum bridge pool root proof.\nEthereum proofs contain the <code>secp256k1</code> signatures of …\nAdd a new signature to this <code>EthereumProof</code>.\nAdd a new batch of signatures to this <code>EthereumProof</code>.\nThe signed data.\nThe signed data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap a function over the inner data of this <code>EthereumProof</code>.\nReturn an incomplete <code>EthereumProof</code>.\nThe signatures contained in the proof.\nThe signatures contained in the proof.\nSort signatures based on voting powers in descending order.\nA list of all storage keys\nStorage sub-key space reserved to keeping track of the …\nA wrapper struct for managing keys related to tracking …\nStorage sub-key space reserved to keeping track of the …\nGenerator for the keys under which details of votes for …\nStorage segments of <code>Keys</code>.\nStorage sub-key space reserved to keeping track of the …\nStorage keys values\nGet the <code>body</code> key - there should be a Borsh-serialized <code>T</code> …\nThe data being voted on, corresponding to the <code>T</code> type …\nGet the Keys from the storage key. It returns None if the …\nGet the key prefix corresponding to the storage location of\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the storage key is a key to store the epoch\nReturn true if the storage key is a key to store the <code>seen</code>\nThe prefix under which the details of a piece of data for …\nGet the <code>seen</code> key - there should be a <code>bool</code> stored here.\nWhether more than two thirds of voting power across …\nGet the <code>seen_by</code> key - there should be a <code>BTreeSet&lt;Address&gt;</code> …\nThe validators who have voted on <code>body</code>.\nReturn the storage key segments to be stored under <code>Keys</code>.\nGet the key prefix corresponding to the storage location …\nGet the <code>voting_power</code> key - there should be an …\nThe total voting power behind <code>body</code>.\nGet the <code>voting_started_epoch</code> key - there should be an <code>Epoch</code>…\nThe epoch when voting on <code>body</code> started.\nEthereum bridge pool VP storage\nEthereum bridge VP storage\nInitialize the storage owned by the Bridge Pool VP.\nInitialize the storage owned by the Ethereum Bridge VP.\nThe token cap of an ERC20 asset.\nThe denomination of the ERC20 asset.\nWhitelisted ERC20 token storage sub-space.\nRepresents the type of a key relating to whitelisted ERC20.\nWhether an ERC20 asset is whitelisted or not.\nThe current supply of a wrapped ERC20 asset, circulating …\nThe specific ERC20 as identified by its Ethereum address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if some <code>storage::Key</code> is an Ethereum bridge whitelist …\nThe type of this key.\nThe key holds a wrapped ERC20 balance\nRepresents a key relating to a wrapped ERC20\nRepresents the type of a key relating to a wrapped ERC20\nA type of key which tracks the total supply of some …\nThe specific ERC20 as identified by its Ethereum address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the given key has an ERC20 token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a NUT token address from an ERC20 address.\nThe type of this key\nConstruct a token address from an ERC20 address.\nThe owner of the balance\nThis type must be able to represent any valid Ethereum …\n<code>ChainTransfer(uint256,address,string)</code>\n<code>Erc20Transfer(bytes32,uint256,address,address)</code>\n…\n<code>Signature(bytes32,bytes32,uint8)</code>\n<code>ValidatorSetArgs(bytes32[],uint256)</code>\nAmount in micro units. For different granularity another …\nIndicates an event is to do with a finalized block.\nA change in tokens amount\nAn amount with its denomination.\nGiven a number represented as <code>M*B^D</code>, then <code>M</code> is the …\nContains the error value\nIndicates if an event is emitted do to an individual Tx or …\nAbstract token events interface\nExternal chain address.\nInternal chain address in Namada.\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nAbstract token keys interface\nThe four possible u64 words in a <code>Uint</code>. Used for converting …\nMaximum decimal places in a native token <code>Amount</code> and <code>Change</code>.\nDecimal scale of a native token <code>Amount</code> and <code>Change</code>. For …\nContains the success value\nStorage read prefix iterator\nAbstract token storage read interface\nResult of a storage API call.\nResult extension to easily wrap custom errors into <code>Error</code>.\nCommon storage read interface\nCommon storage write interface\nTransparent token storage <code>Keys/Read/Write</code> implementation\nIndicates an event is to do with an individual transaction.\nA user account.\nAbstract token storage write interface\nReturns the significand of this number\nKey for transparent token balance\nBurn a specified amount of tokens from some address.\nBurn a specified amount of tokens from some address. If …\nCheck if there are enough funds.\nFind the minimal precision that holds this value …\nGet the amount as a <code>Change</code>\nChecked addition. Returns <code>None</code> on overflow or if the …\nChecked addition. Returns <code>None</code> on overflow.\nChecked division. Returns <code>None</code> on underflow.\nDivide by <code>u64</code> with zero divisor and overflow check.\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked addition. Returns <code>None</code> on overflow or if the …\nChecked subtraction. Returns <code>None</code> on underflow.\nChecked subtraction. Returns <code>None</code> on overflow.\nCredit tokens to an account, to be used only by protocol. …\nCredit tokens to an account, to be used only by protocol. …\nDecrement the balance of a given token and owner.\nDecrement the total network supply of a given token.\nDelete a value at the given key from storage.\nDelete all key-vals with a matching prefix.\nReturns the denomination of this number\nConvert this denominated amount into a plain amount by …\nGet the corresponding u64 word from the input uint256.\nAdd denomination info if it exists in storage.\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nEmit burn token event\nEmit mint token event\nEmit transfer token event\nToken transaction events.\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate amount from the absolute value of <code>Change</code>.\nGiven a u64 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a i128 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a string and a denomination, parse an amount from …\nConvert to an <code>Amount</code> under the assumption that the input …\nConvert a <code>u128</code> to an <code>Amount</code>.\nConvert a <code>u64</code> to an <code>Amount</code>.\nAttempt to convert an unsigned integer to an <code>Amount</code> with …\nReturns the address from the first key segment if it’s …\nReturn the segment at the index parameter\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGet the height of the first block of the current epoch.\nGet the effective circulating total supply of native …\nGet the effective circulating total supply of native …\nGiven the epoch at the given block height.\nGet the height of the first block of the given epoch.\nGet the native token address\nGiven the information about predecessor block epochs\nGet the transaction index.\nStorage <code>has_key</code> in. It will try to read from the storage.\nAttempt to increase the precision of an amount. Can fail …\nIncrement the balance of a given token and owner.\nIncrement the total network supply of a given token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>std::result::Result</code> into storage_api <code>Result</code>.\nCheck if the given storage key is for total supply of a …\nCheck if the given storage key is a balance key for an …\nReturns the owner address if the given storage key is a …\nReturns <code>true</code> if the key is empty\nCheck if <code>Amount</code> is greater than zero.\nCheck if the given key is a key to a validity predicate. …\nCheck if <code>Amount</code> is zero.\nCheck if the inner <code>Amount</code> is zero.\nIterator over the possible denominations\nIterates over all addresses in the key segments\nStorage prefix iterator. It will try to read from the …\nStorage prefix iterator ordered by the storage keys. It …\nIterate over all words in this <code>Amount</code>.\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nReturns the length\nCreate a new amount with the maximum value\nCreate a new amount with the maximum signed value\nMint <code>amount</code> of <code>token</code> as <code>minter</code> to <code>dest</code>.\nObtain a storage key for the minted multitoken balance.\nObtain a storage key for the multitoken minter.\nMultiply by a decimal <code>Dec</code> with the result rounded up. …\nMultiply by a decimal <code>Dec</code> with the result rounded down. …\nReturn a denominated native token amount.\nReturn a denominated native token amount.\nCreate a new amount of native token from whole number of …\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nMake a new denominated amount representing amount*…\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nObtain a storage key prefix for token parameters.\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nReturns a new key with segments of <code>Self</code> and the given …\nGet the raw <code>Uint</code> value, which represents namnam\nStorage read Borsh encoded value. It will try to read from …\nRead the balance of a given token and owner.\nRead the balance of a given token and owner.\nStorage read raw bytes. It will try to read from the …\nRead the denomination of a given token, if any. Note that …\nRead the denomination of a given token, if any. Note that …\nRead the total network supply of a given token.\nReceive a given amount.\nCreate a new <code>DenominatedAmount</code> with the same underlying …\nMultiply this number by 10^denom and return the computed …\nThe segments of the key in the original (left-to-right) …\nSpend a given amount.\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nTransparent token storage keys\nReturns a sub key without the first segment\nSum with overflow check\nGet a string representation of a native token amount.\nA precise string representation. The number of decimal …\nApply transfer of a <code>token</code> from <code>src</code> to <code>dest</code> in storage.\nTransfer <code>token</code> from <code>src</code> to <code>dest</code>. Returns an <code>Err</code> if <code>src</code> has …\nToken transfers\nA combination of Euclidean division and fractions: x*(a,b) …\nUpdate the balance of a given token and owner.\nUpdate the total network supply of a given token.\nReturns a key of the validity predicate of the given …\nNative VP for multitokens\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nWrap another <code>std::error::Error</code> with a static message.\nAdd a static message to a possible error in <code>Result</code>.\nWrite a value to be encoded with Borsh at the given key to …\nWrite a value as bytes at the given key to storage.\nWrite the denomination of a given token.\nInitialize parameters for the token in storage during the …\nZero <code>Amount</code>.\nExtend an <code>Event</code> with amount data.\nToken burn operation.\nToken burn event.\nExtend an <code>Event</code> with token event descriptor data.\nToken mint operation.\nToken mint event.\nExtend an <code>Event</code> with source post balance data.\nExtend an <code>Event</code> with source account data.\nExtend an <code>Event</code> with source account data.\nExtend an <code>Event</code> with source post balance data.\nExtend an <code>Event</code> with target account data.\nExtend an <code>Event</code> with target account data.\nExtend an <code>Event</code> with target post balance data.\nExtend an <code>Event</code> with token address data.\nNamada token event.\nToken event kind.\nNamada token operation.\nToken transfer operation.\nToken transfer event.\nAdditional description of the token event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe token event kind associated with this operation.\nThe event level.\nThe operation that took place.\nConstruct a simple transfer operation\nToken event types.\nThe amount of minted tokens.\nThe amount of minted tokens.\nThe balance that <code>target_account</code> ended up with.\nThe balance that <code>target_account</code> ended up with.\nThe balance that <code>sources</code> and <code>targets</code> ended up with.\nThe source of the token transfer.\nThe target account whose balance was changed.\nThe target account whose balance was changed.\nThe target of the token transfer.\nThe affected token address.\nThe affected token address.\nBurn token event.\nMint token event.\nTransfer token event.\nKey segment for a balance key\nKey segment for a denomination key\nKey segment for minted balance\nKey segment for multitoken minter\nKey segment for token parameters\nObtain a storage key for user’s balance.\nObtain a storage key prefix for all users’ balances.\nObtain a storage key denomination of a token.\nCheck if the given storage key is for total supply of a …\nCheck if the given storage key is for a minter of a …\nCheck if the given storage key is a balance key for an …\nCheck if the given storage key is a parameter key for an …\nCheck if the given storage key is a balance key for the …\nCheck if the given storage key is a denomination key for …\nCheck if a key is part of the multitoken vp sub storage\nGets the key for the given token address, error with the …\nObtain a storage key for the minted multitoken balance.\nObtain a storage key for the multitoken minter.\nObtain a storage key prefix for token parameters.\nMulti-transfer credit or debit amounts\nReturns a reference to the value corresponding to pair of …\nGets an owning iterator over the pairs of credited or …\nGets an iterator over the pair of credited or debited …\nTransfer tokens from <code>sources</code> to <code>dests</code>.\nTransfer transparent token, insert the verifier expected …\nMultitoken VP\nGeneric types for DI\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the minter if the minter is valid and the minter VP …\nReturn if the parameter change was done via a governance …\nRun the validity predicate\nQuery an ABI encoding of the Bridge validator set at a …\nQuery an ABI encoding of the Governance validator set at a …\nQuery an ABI encoding of the validator set to be installed …\nRelay a validator set update, signed off for a given epoch.\nValidity predicate for the Ethereum bridge\nValidity predicate for the Ethereum bridge\nValidity predicate for non-usable tokens.\nGeneric types for DI\nGeneric types for DI\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the validity predicate\nValidate that a wasm transaction is permitted to change …\nRun the validity predicate\nThe key holds a wrapped ERC20 balance\nRepresents a key relating to a wrapped ERC20\nRepresents the type of a key relating to a wrapped ERC20\nA type of key which tracks the total supply of some …\nThe specific ERC20 as identified by its Ethereum address\nReturns true if the given key has an ERC20 token\nConstruct a NUT token address from an ERC20 address.\nThe type of this key\nConstruct a token address from an ERC20 address.\nThe owner of the balance\nA list of all storage keys\nThe main address of the Ethereum bridge pool\nTransfer ERC20 assets from Namada to Ethereum.\nThe amount of fees to be paid, in Namada, to the relayer …\nRefund non-usable tokens.\nA transfer message to Ethereum sitting in the bridge pool, …\nAdditional data appended to a <code>TransferToEthereumEvent</code> to …\nBridge pool key segments.\nA transfer message to be submitted to Ethereum to move …\nTransfer to Ethereum kinds.\nStorage keys values\nThe amount to be transferred\nThe amount of fees.\nRetrieve a reference to the appendix of this …\nThe type of token\nBridge pool nonce storage key\nCalculate the checksum of this <code>PendingTransferAppendix</code>.\nConstruct a NUT token address from an ERC20 address.\nConstruct a token address from an ERC20 address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCraft a <code>PendingTransfer</code> from its constituents.\nThe amount of gas fees paid by the user sending this …\nAmount of gas fees paid by the user sending the transfer.\nGet the storage key for the transfers using the hash\nGet the storage key for the transfers in the pool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the owned appendix of this <code>PendingTransfer</code>.\nCheck if a key is for a pending transfer\nThe kind of the pending transfer to Ethereum.\nThe kind of transfer to Ethereum.\nThe account of fee payer.\nThe recipient address\nThe sender of the transfer.\nThe sender of the transfer\nSigned root storage key\nThe address of the fungible token to draw gas fees from.\nGet a token <code>Address</code> from this <code>PendingTransfer</code>.\nTransfer to Ethereum data.\nRepresentation of address on Ethereum. The inner value is …\nAn Ethereum event to be processed by the Namada ledger\nNonces of Ethereum events.\nAn event transferring some kind of value from Namada to …\nAn event transferring some kind of value from Ethereum to …\nA confirmation event that a batch of transfers have been …\nEvent transferring batches of ether or Ethereum based …\nEvent transferring batches of ether or Ethereum based …\nNamada native type to replace the ethabi::Uint type\nEvent indication that the validator set has been updated …\nQuantity of wrapped Asset in the transfer\nQuantity of the ERC20 token in the transfer\nAddress of the smart contract issuing the token\nAddress of the smart contract issuing the token\nTry to increment this <code>Uint</code>, whilst checking for overflows.\nChecksum of all Namada specific fields, including, but not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses an <code>EthAddress</code> from a standard hex-encoded Ethereum …\nReturns the nonce of an Ethereum event.\nSHA256 of the Borsh serialization of the <code>EthereumEvent</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMonotonically increasing nonce\nThe address receiving assets on Ethereum\nThe address receiving wrapped assets on Namada\nConvert to an Ethereum-compatible byte representation.\nThe canonical way we represent an <code>EthAddress</code> in storage …\nThe batch of transfers\nHash of the validators in the bridge contract\nHash of the validators in the governance contract\nMonotonically increasing nonce\nMonotonically increasing nonce\nMonotonically increasing nonce\nThe Namada address that receives the gas fees for relaying …\nThe batch of transfers\nThe batch of transfers\nThis type must be able to represent any valid Ethereum …\n<code>ChainTransfer(uint256,address,string)</code>\n<code>Erc20Transfer(bytes32,uint256,address,address)</code>\n…\n<code>Signature(bytes32,bytes32,uint8)</code>\n<code>ValidatorSetArgs(bytes32[],uint256)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the next block height.\nUnchecked epoch addition.\nError resulting from an invalid encoding of an event …\nA thin wrapper around a HashMap for parsing event JSONs …\nIndicates an event is to do with a finalized block.\nThe domain of the event to emit.\nUsed in sub-systems that may emit events.\nCustom events that can be queried from Tendermint using a …\nErrors to do with emitting events.\nIndicates if an event is emitted do to an individual Tx or …\nAn event to be emitted in Namada.\nABCI event type.\nBuild an <code>EventType</code> segment by segment.\nInvalid event domain.\nError when parsing an event type\nError resulting from a missing event attribute.\nError when parsing attributes from an event JSON.\nMissing event domain.\nMissing key in attributes.\nMissing value in attributes.\nIndicates an event is to do with an individual transaction.\nAppend a new segment to the final <code>EventType</code> and return a …\nReturn a reference to the event’s attributes.\nReturn a mutable reference to the event’s attributes.\nBuild the final <code>EventType</code>.\nRetrieve the domain of some event.\nCompute the gas cost of emitting this event. Returns <code>None</code> …\nEmit a single event.\nEmit a batch of events.\nInstantiate a new <code>EventType</code> in const contexts. Mostly …\nExtend events with additional fields.\nExtend this <code>Event</code> with additional data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the value associated with input key\nCheck if a certain attribute is present in the event.\nCheck if this <code>Event</code> has a subset of the keys and values in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the attributes of the event, destroying it in the …\nReturn the type of the event.\nReturn the level of the event.\nA log to store events emitted by <code>FinalizeBlock</code> calls in …\nJoins the attribute sets of two <code>Event</code>\nCreate a new event type.\nCreate a new event with no attributes and the given …\nCreate a new <code>EventTypeBuilder</code> with the domain of the given …\nCreate a new <code>EventTypeBuilder</code> with the given type.\nGet the raw string value corresponding to a given …\nGet the value corresponding to a given attribute.\nGet the value corresponding to a given attribute, if it …\nRetrieve the sub-domain of some event.\nGet ownership of the value associated to the input key\nAppend a new segment to the final <code>EventType</code> and return the …\nMap of event attributes.\nExtend an <code>Event</code> with the given closure.\nProvides event composition routines.\nEvent composed of various other event extensions.\nExtend an <code>Event</code> with a new domain.\nChecks for the presence of an attribute in the provided …\nRepresents an entry in the attributes of an <code>Event</code>.\nImplement the Display and FromStr traits for any serde type\nExtend an <code>AttributesMap</code> implementation with the ability to …\nExtend an event with additional data.\nExtend an event with additional attributes.\nExternal chain address.\nExtend an <code>Event</code> with block height information.\nReference to an ibc tx data section\nA mapping between the index of a transaction in a block …\nExtend an <code>Event</code> with info data.\nInternal chain address in Namada.\nKey to read or write and event attribute to.\nExtend an <code>Event</code> with log data.\nExtend an <code>Event</code> with <code>masp_data_refs</code> data, mapping a …\nReference to a MASP section\nA type representing the possible reference to some MASP …\nA list of MASP tx references\nParsed domain of some event.\nRead a raw (string encoded) attribute from an event’s …\nRead an attribute from an event’s attributes.\nExtend an <code>Event</code> with transaction hash information.\nA user account.\nData to be stored in the given <code>KEY</code>.\nThe attribute to be read.\nIdentical to <code>Self::Value</code>, with the exception that this …\nReturn a new implementation of <code>EventAttributeChecker</code>.\nCheck if the associated attribute is present in the …\nDispatch a callback on a list of attribute kinds.\nBuild a new <code>Domain</code> to extend an event with.\nAdd additional data to the specified <code>event</code>.\nAdd additional attributes to some <code>event</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new attribute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner domain as a <code>String</code>.\nReturn the data to be stored in the given <code>KEY</code>.\nCheck for the existence of an attribute.\nCheck if the associated attribute is present in the …\nIterate over all the key value pairs.\nThe set of masp data\nCreate a new composed event.\nRead a string encoded attribute from the provided event …\nRead a string encoded attribute from the provided event …\nRead an attribute from the provided event attributes.\nRead an attribute from the provided event attributes.\nRetrieve an attribute.\nThe transaction index in the block\nCompose an event with new data.\nInsert a new attribute into a map of event attributes.\nRepresents a log of <code>Event</code> instances emitted by …\nParameters to configure the pruning of the event log.\nIterator over an <code>EventLog</code> taking a matcher in order to …\nSilly simple event matcher.\nEmit a batch of events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates and filters events in the associated <code>EventLog</code> …\nReturns a new iterator over this <code>EventLog</code>.\nLog a new batch of events into the event log.\nSoft limit on the maximum number of events the event log …\nReturn a new event log.\nReturns an adapter that turns this <code>EventLog</code> into a …\nExact match.\nDetermine which kind of match will be performed over a …\nPrefix match.\nA <code>QueryMatcher</code> verifies if a Namada event matches a given …\nAdd a new attribute to the <code>QueryMatcher</code>.\nReturns a query matching the given applied transaction …\nReturns a query matching the given expired Bridge pool …\nReturns a query matching the given relayed Bridge pool …\nReturns the event type that this <code>QueryMatcher</code> attempts to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a query matching the given IBC packet parameters\nReturns a query matching the given IBC UpdateClient …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the match type performed over the <code>EventType</code>.\nChecks if this <code>QueryMatcher</code> validates the given <code>Event</code>.\nCreate a new <code>QueryMatcher</code> matching event types with the …\nCreate a new <code>QueryMatcher</code> with the given event type.")