searchState.loadedDescShard("namada_sdk", 2, "Returns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nReturns data queried from the application.\nReturns data queried from the application.\nReturns data queried from the application.\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI responses.\nUnknown result, abort all snapshot restoration\nInitial application hash.\nThe application protocol version.\nThe binary chunk contents, in an arbitrary format.\nThe response code.\nThe response code.\nThe response code for the query.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nChanges to consensus parameters (optional).\nInitial consensus-critical parameters (optional).\nResult bytes, if any.\nThe Merkle root hash of the application state.\nResult bytes, if any.\nSome arbitrary information.\nUndocumented.\nEvents that occurred while beginning the block.\nEvents that occurred while checking the transaction.\nEvents that occurred while executing the transaction.\nEvents that occurred while ending the block.\nAmount of gas consumed by the transaction.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAmount of gas requested for the transaction.\nThe block height from which data was derived.\nThe index of the key in the tree.\nAdditional information.\nAdditional information.\nAdditional information.\nThe key of the matching data.\nThe latest result of <code>Commit</code>.\nThe latest block for which the app has called <code>Commit</code>.\nThe output of the application’s logger.\nThe output of the application’s logger.\nThe output of the application’s logger.\nError reported for the mempool. Not used since CometBFT …\nThe message sent in the request.\nPriority for the mempool. Not used since CometBFT 0.38.\nSerialized proof for the value data, if requested, to be …\nRefetch and reapply the given chunks, regardless of <code>result</code>.\nReject the given P2P senders, regardless of <code>result</code>.\nThe result of applying the snapshot chunk.\nBlocks below this height may be removed.\nThe transactions’s sender. Not used since CometBFT 0.38.\nA list of local state snapshots.\nChanges to the validator set, if any.\nInitial validator set (optional).\nThe value of the matching data.\nThe application software semantic version.\nInformation on how the validator voted for a block.\nInformation on a block commit.\nEvidence that the validator voted for two different blocks …\nResults of executing one individual transaction.\nInformation on a block commit with provided vote …\nInformation about a whether a validator signed the last …\nFull information available, as determined by the …\nIn the message encoded in a CometBFT version before 0.38, …\nEvidence that a validator attacked a light client.\nEvidence of validator misbehavior.\nThe possible kinds of <code>Misbehavior</code>.\nUsed for state sync snapshots.\nUnknown evidence type (proto default value).\nA validator address with voting power.\nInformation about a whether a validator signed the last …\nThe validator’s address (the first 20 bytes of …\nThe number of chunks in the snapshot. Must be at least 1.\nThe response code.\nThe namespace for the <code>code</code>.\nResult bytes, if any.\nEvents that occurred while executing the transaction.\nSignature for the vote extension.\nThe application-specific snapshot format identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAn arbitrary snapshot hash.\nThe height when the offense occurred.\nThe height at which the snapshot was taken\nAdditional information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the validator has signed the block accordingly to …\nThe kind of evidence.\nThe output of the application’s logger.\nArbitrary application metadata, e.g., chunk hashes or …\nThe voting power of the validator.\nThe commit round.\nThe commit round.\nWhether or not the validator signed the last block.\nWhether or not the validator signed the last block.\nThe corresponding time when the offense occurred.\nTotal voting power of the validator set at <code>height</code>.\nIdentifies the validator.\nIdentifies the validator.\nThe offending validator.\nNon-deterministic extension provided by the sending …\nThe list of validator addresses in the last validator set, …\nThe list of validator addresses in the last validator set, …\nAccount IDs\nSize of an  account ID in bytes\nBorrow the account ID as a byte slice\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new account ID from raw bytes\nThe vote was not received.\nBlocks consist of a header, transactions, votes (the …\nIndicates whether the validator voted for a block, nil, or …\nno vote was received from a validator.\nvoted for the Commit.BlockID.\nvoted for nil.\nCommit contains the justification (ie. a set of …\nVoted for a block.\nCommitSig represents a signature of a validator. It’s a …\nBlock <code>Header</code> values contain metadata about the block and …\nBlock height for a particular chain (i.e. number of blocks …\nBlock identifiers which contain two distinct Merkle roots …\nBlock metadata - Todo: implement constructor and getters\nVoted for nil.\nParse <code>block::Height</code> from a type\nParse <code>block::Id</code> from a type\nBlock round for a particular chain\nBlock size parameters\nState after txs from the previous block\nBlock ID\nID of the block\nblock size - Todo: make this robust (u63)\nChain ID\nCommitSig within Commit\nConsensus params for the current block\nTransaction data\nMerkle root of transaction hashes\nThe default value for the <code>time_iota_ms</code> parameter.\nEvidence of malfeasance\nHash of evidence included in the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the hash of this header.\nThe block’s main hash is the Merkle root of all the …\nHash this header with a Merkle hasher provided by a crypto …\nBlock headers\nHeader of the block\nBlock header\nBlock height\nCurrent block height\nIncrement the block height by 1\nIncrement the block round by 1\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this signature is absent (no vote was received …\nWhether this signature is a commit  (validator voted for …\nWhether this signature is nil (validator voted for nil)\nPrevious block info\nLast commit, should be <code>None</code> for the initial block.\nCommit from validators from the last block\nRoot hash of all results from the txs from the previous …\nMaximum number of bytes in a block\nMaximum amount of gas which can be spent on a block\nValidators for the next block\nNumber of transactions - Todo: make this robust (u63)\nParse <code>block::Height</code>, or return an <code>Error</code> if parsing failed\nParse <code>block::Id</code>, or return an <code>Error</code> if parsing failed\nParts header (if available) is used for secure gossipping …\nBlock parts\nGet a shortened 12-character prefix of a block ID (ala git)\nOriginal proposer of the block\nRound\nSignatures\nSignedHeader contains commit and block header. It is what …\nCurrent timestamp\nThis parameter has no value anymore in Tendermint-core\nGet the address of this validator if a vote was received.\nValidators for the current block\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nHeader version\nSignature of vote\nSignature of vote\nTimestamp of vote\nTimestamp of vote\nValidator address\nValidator address\nno vote was received from a validator.\nvoted for the Commit.BlockID.\nvoted for nil.\nCommitSig represents a signature of a validator. It’s a …\nSignature of vote\nSignature of vote\nTimestamp of vote\nTimestamp of vote\nValidator address\nValidator address\nBlock <code>Header</code> values contain metadata about the block and …\n<code>Version</code> contains the protocol version for the blockchain …\nApp version\nState after txs from the previous block\nBlock version\nChain ID\nConsensus params for the current block\nMerkle root of transaction hashes\nHash of evidence included in the block\nReturns the argument unchanged.\nCurrent block height\nCalls <code>U::from(self)</code>.\nPrevious block info\nCommit from validators from the last block\nRoot hash of all results from the txs from the previous …\nValidators for the next block\nOriginal proposer of the block\nCurrent timestamp\nValidators for the current block\nHeader version\nBlock parts header\nReturns the argument unchanged.\nHash of the parts set header,\nCalls <code>U::from(self)</code>.\nconstructor\nNumber of parts in this block\nSigned block headers\nGet commit\nCommit containing signatures for the header\nReturns the argument unchanged.\nGet header\nBlock header\nCalls <code>U::from(self)</code>.\nConstructor.\nChain identifier (e.g. ‘gaia-9000’)\nInformation about a particular Tendermint blockchain\nGet the chain ID as a raw bytes.\nGet the chain ID as a <code>str</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses string to create a new chain ID\nCurrent block height of the chain\nTendermint blockchain identifiers\nChain identifier (e.g. ‘gaia-9000’)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast block ID seen for this chain\nCreate information about a particular network\nCurrent consensus time (if available)\nChain identifier (e.g. ‘gaia-9000’)\nMaximum length of a <code>chain::Id</code> name. Matches <code>MaxChainIDLen</code> …\nChannels\nChannel collections\nChannel IDs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChannel ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPriority value\nAmount of data recently sent\nCapacity of the send queue\nSize of the send queue\nGet the current channel id as an integer\nAll consensus-relevant parameters that can be adjusted by …\nTendermint consensus state\nParameters specific to the Application Blockchain …\nParameters limiting the size of a block and time between …\nBlock ID being proposed (if available)\nGet short prefix of the block ID for debugging purposes …\nParameters limiting the validity of evidence of byzantine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent block height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTendermint consensus parameters\nCurrent consensus round\nTendermint consensus state\nCurrent consensus step\nParameters limiting the types of public keys validators …\nThe ABCI application version. Will default to None if not …\nParameters specific to the Application Blockchain …\nAll consensus-relevant parameters that can be adjusted by …\nValidatorParams restrict the public key types validators …\nVersion Parameters\nParameters specific to the Application Blockchain …\nThe ABCI application version.\nParameters limiting the size of a block and time between …\nParameters limiting the validity of evidence of byzantine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of accepted public key types.\nParameters limiting the types of public keys validators …\nThe ABCI application version. Will default to None if not …\nConfigures the first height during which vote extensions …\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nPlaceholder string to show when block ID is absent. Syntax …\nAn <code>Ordering</code> is the result of a comparison between two …\nTendermint consensus state\nBlock ID being proposed (if available)\nUtilities for formatting and printing strings.\nReturns the argument unchanged.\nCurrent block height\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nReverses the <code>Ordering</code>.\nCurrent consensus round\nCurrent consensus step\nChains two orderings.\nChains the ordering with the given function.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nReturns a flag indicating what form of alignment was …\nDetermines if the <code>#</code> flag was specified.\nGets the formatted string, if it has no arguments to be …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nReturns the character used as ‘fill’ whenever there is …\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nMarks the tuple struct as non-exhaustive, indicating to …\nMarks the set as non-exhaustive, indicating to the reader …\nMarks the list as non-exhaustive, indicating to the reader …\nMarks the map as non-exhaustive, indicating to the reader …\nReturns flags for formatting.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nTakes a string slice and emits it to the internal buffer …\nPerforms the correct padding for an integer which has …\nReturns the optionally specified precision for numeric …\nDetermines if the <code>0</code> flag was specified.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nReturns the optionally specified integer width that the …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …\nA SHA256 digest implementation.\nPure Rust implementations of the cryptographic traits.\nSHA-256 hasher.\nTypes implementing the ECDSA algorithm using the Secp256k1 …\nThe pure Rust implementation of signature verification …\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLength of a SHA256 hash in bytes.\nA SHA256 digest implementation.\nSignature error.\nThe encoding of the public key was malformed.\nThe signature data was malformed.\nThe key used to verify a signature is not of a type …\nThis variant is deliberately opaque as to avoid …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConflicting block detected in light client attack\nDuplicate vote evidence\nDuplicate vote evidence\nDuration is a wrapper around core::time::Duration …\nEvidence of malfeasance by validators (i.e. signing …\nLightClient attack evidence\nLight client attack evidence\nA list of <code>Evidence</code>.\nEvidenceParams determine how we handle evidence of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this evidence data into a vector\nIterate over the evidence data\nMax age of evidence, in time.\nMax age of evidence, in blocks.\nThis sets the maximum size of total evidence in bytes that …\nconstructor\nCreate a new evidence data collection\nGet votes\nGenesis data\nApp hash\nApp state\nChain ID\nConsensus parameters\nTime of genesis\nStarting height of the blockchain\nValidators\nHash algorithms\nAppHash is usually a SHA256 hash, but in reality it can be …\nHash digests\nEmpty hash\nOutput size for the SHA-256 hash function\nSHA-256\nSHA-256 hashes\nSerialization/deserialization for <code>Hash</code> that allows for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserialize <code>Hash</code> from a string, allowing for empty hashes.\nSerialize <code>Hash</code> into a string.\nLength of a SHA256 hash in bytes.\nHash is the output of the cryptographic digest function\nImplementation of Merkle tree hashing for Tendermint.\nA wrapper for platform-provided host functions which can’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle proofs\nCompute a simple Merkle root from vectors of arbitrary …\nProofOp defines an operation used for calculating Merkle …\nMerkle proof defined by the list of ProofOps …\nActual data\nType of the ProofOp\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey of the ProofOp\nThe list of ProofOps\nNode IDs\nNode information\nBorrow the node ID as a byte slice\nChannels\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID\nNode information (used in RPC responses)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListen address\nMoniker\nTendermint network / chain ID,\nCreate a new Node ID from raw bytes\nOther status information\nProtocol version information\nTendermint version\nNode information\nListen address information\nIndex is off\nIndex is on\nOther information\nProtocol version information\nTransaction index status\nApp version\nBlock version\nChannels\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListen address\nMoniker\nTendermint network / chain ID,\nConstruct <code>ListenAddress</code>\nOther status information\nP2P protocol version\nProtocol version information\nRPC address\nTX index status\nTendermint version\nEd25519 keys\nPrivate keys as parsed from configuration files\nECDSA/secp256k1 signing key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCanonicalProposal for signing\nProposal\nRegular Proposal\nSignProposalRequest is a request to sign a proposal\nSignedProposalResponse is response containing a signed …\nTypes of proposals\nBlock ID\nBlock ID\nChain ID\nChain ID\nResponse error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncanonicalization requires fixed size encoding here\nHeight\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate signable vector from Proposal.\ntype alias for byte\nProposal message type\nCreate CanonicalProposal from Proposal\nPOL round\nPOL Round\nProposal\nProposal\ncanonicalization requires fixed size encoding here\nRound\nSignature\nTimestamp\nTimestamp\nCreate signable bytes from Proposal.\nUser signing keys used for interacting with accounts in …\nPublic key algorithms\nValidator signing keys used for authenticating consensus …\nEd25519 keys\ned25519\nPubKeyRequest requests the consensus public key from the …\nPubKeyResponse\nPublic keys allowed in Tendermint protocols\nECDSA/secp256k1 verification key (i.e. public key)\nSecp256k1 keys\nsecp256k1\nPublic key roles used in Tendermint networks\nGet the string label for this algorithm\nChain ID\nCustom deserialization for public keys to handle multiple …\nError\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key\nSerialize/deserialize <code>nil</code>able value into <code>T</code>, where <code>nil</code> …\nAppHash serialization with validation\nAppHash serialization with validation\nSerialize/deserialize bytes (<code>Vec&lt;u8&gt;</code>) type\nSerialize and deserialize any <code>T</code> that implements <code>FromStr</code> …\nCombines <code>from_str</code> and <code>allow_null</code>.\nHash serialization with validation\nSerialize/deserialize <code>nil</code>able type into <code>T</code>, where <code>nil</code> turns …\n<code>Option&lt;Hash&gt;</code> serialization with validation\nSerialize/deserialize <code>Option&lt;T&gt;</code> type where <code>T</code> has a …\nDe/serialize an optional type that must be converted …\nSerialize and deserialize part_set_header.total (from …\nAn alternative timestamp serialization/deserialization …\nSerialize/deserialize core::time::Duration type from and …\nSerialize/deserialize Timestamp type from and into string:\nSerialize/deserialize <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> type from and into …\nDeserialize <code>null</code> or an empty object <code>{}</code> as <code>None</code>.\nDeserialize <code>T</code> from a <code>nil</code>-able representation, accepting …\nSerialize <code>T</code> as <code>Some</code> value of <code>Option&lt;T&gt;</code>.\nDeserialize hexstring into AppHash\nSerialize from AppHash into hexstring\nDeserialize a base64-encoded string into an <code>AppHash</code>\nSerialize from <code>AppHash</code> into a base64-encoded string.\nSerialize into base64string, deserialize from base64string\nSerialize into hexstring, deserialize from hexstring\nSerialize into and deserialize from an optional …\nSerialize into string, deserialize from string\nSerialize into and deserialize from a sequence of …\nDeserialize base64string into <code>Vec&lt;u8&gt;</code>\nDeserialize base64string into String\nSerialize from T into base64string\nDeserialize a hex-encoded string into <code>Vec&lt;u8&gt;</code>\nSerialize from a byte slice into a hex-encoded string.\nDeserialize <code>Option&lt;base64string&gt;</code> into <code>Vec&lt;u8&gt;</code> or null\nSerialize from <code>T</code> into <code>Option&lt;base64string&gt;</code>\nDeserialize string into <code>Vec&lt;u8&gt;</code>\nSerialize from <code>T</code> into string\nDeserialize array into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>\nSerialize from <code>Vec&lt;T&gt;</code> into <code>Vec&lt;base64string&gt;</code>\nDeserialize string into T\nSerialize from T into string\nDeserialize a nullable string into T\nSerialize from T into string\nDeserialize hexstring into Hash\nSerialize from Hash into hexstring\nDeserialize <code>Option&lt;T&gt;</code>\nSerialize <code>Option&lt;T&gt;</code>\nDeserialize a nullable hexstring into <code>Option&lt;Hash&gt;</code>. A null …\nSerialize from <code>Option&lt;Hash&gt;</code> into a nullable hexstring. …\nDeserialize <code>Option&lt;T&gt;</code>\nSerialize <code>Option&lt;T&gt;</code>\nDeserialize (string or u32) into u32(part_set_header.total)\nSerialize from u32(part_set_header.total) into u32\nDeserialize <code>String</code> into <code>Time</code>\nSerialize from <code>Time</code> into <code>String</code>\nDeserialize string into Duration\nSerialize from Duration into string\nHelper struct to serialize and deserialize Timestamp into …\nDeserialize string into Timestamp\nHelper for formatting an <code>OffsetDateTime</code> value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize from Timestamp into string\nSerialization helper for converting an <code>OffsetDateTime</code> …\nDeserialize transactions into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>\nSerialize from <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> into transactions\nSize of an encoded Ed25519 signature in bytes.\nEd25519 signature.\nThe expected length of all currently supported signatures, …\nECDSA/secp256k1 signature (fixed-size)\nSignatures\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nParse an Ed25519 signature from a byte slice.\nCalls <code>U::from(self)</code>.\nBytes for the <code>R</code> component of a signature.\nBytes for the <code>s</code> component of a signature.\nReturn the inner byte array.\nConvert this signature into a byte vector.\nParse <code>Time</code> from a type\nTendermint timestamps\nParse <code>Time</code>, or return an <code>Error</code> if parsing failed\nConstant for a trust threshold of 1/3.\nFacilitates validation of <code>TrustThresholdFraction</code> instances …\nConstant for a trust threshold of 2/3.\nTrustThreshold defines how much of the total voting power …\nTrustThresholdFraction defines what fraction of the total …\nThe denominator of this fraction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the given signed voting power is sufficient …\nInstantiate a TrustThresholdFraction if the given …\nThe numerator of this fraction.\nMerkle proof of the presence of a transaction in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI requests.\nThe consensus category of ABCI responses.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nIndicates that any pending requests should be completed …\nIndicates that all pending requests have been completed …\nRequests information about the application state.\nRequests information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI requests.\nThe info category of ABCI responses.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI requests.\nThe mempool category of ABCI responses.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI requests in CometBFT 0.34.\nAll possible ABCI responses for this protocol version.\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nThe snapshot category of ABCI requests.\nThe snapshot category of ABCI responses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nThe possible kinds of <code>CheckTx</code> checks.\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nSignals the end of a block.\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nA full check is required (the default).\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nIndicates that the mempool is initiating a recheck of the …\nAll possible ABCI requests in CometBFT 0.34.\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nThe snapshot category of ABCI requests.\nThe ABCI protocol version.\nThe light client verified app hash for this height.\nSerialized JSON bytes containing the initial application …\nThe Tendermint block protocol version.\nEvidence of validator misbehavior.\nThe ID of the blockchain.\nThe binary chunk contents, as returned by <code>LoadSnapshotChunk</code>…\nThe chunk index, starting from <code>0</code> for the initial chunk.\nInitial consensus-critical parameters.\nRaw query bytes.\nAn application-specific identifier of the format of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block’s hash.\nThe block header.\nThe height of the block just executed.\nThe height of the snapshot the chunks belong to.\nThe block height for which the query should be executed.\nThe chunk index, starting from <code>0</code>.  Tendermint applies …\nHeight of the initial block (typically <code>1</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of check to perform.\nInformation about the last commit.\nThe message to send back.\nThe Tendermint p2p protocol version.\nPath of the request, like an HTTP <code>GET</code> path.\nWhether to return a Merkle proof with the response, if …\nThe P2P ID of the node who sent this chunk.\nThe snapshot offered for restoration.\nThe genesis time.\nThe transaction bytes.\nThe bytes of the transaction to execute.\nInitial genesis validators, sorted by voting power.\nThe Tendermint software semantic version.\nAbort all snapshot restoration\nSnapshot accepted, apply chunks\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nReturns an exception (undocumented, nondeterministic).\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nReturns data queried from the application.\nReturns data queried from the application.\nReturns data queried from the application.\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nAll possible ABCI responses for this protocol version.\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nThe snapshot category of ABCI responses.\nUnknown result, abort all snapshot restoration\nInitial application hash.\nThe application protocol version.\nThe binary chunk contents, in an arbitrary format.\nThe response code.\nThe response code.\nThe response code for the query.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nChanges to consensus parameters (optional).\nInitial consensus-critical parameters (optional).\nResult bytes, if any.\nThe Merkle root hash of the application state.\nResult bytes, if any.\nSome arbitrary information.\nUndocumented.\nEvents that occurred while beginning the block.\nEvents that occurred while checking the transaction.\nEvents that occurred while executing the transaction.\nEvents that occurred while ending the block.\nReturns the argument unchanged.\nAmount of gas consumed by the transaction.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAmount of gas requested for the transaction.\nThe block height from which data was derived.\nThe index of the key in the tree.\nAdditional information.\nAdditional information.\nAdditional information.\nCalls <code>U::from(self)</code>.\nThe key of the matching data.\nThe latest result of <code>Commit</code>.\nThe latest block for which the app has called <code>Commit</code>.\nThe output of the application’s logger.\nThe output of the application’s logger.\nThe output of the application’s logger.\nError reported for the mempool. Not used since CometBFT …\nThe message sent in the request.\nPriority for the mempool. Not used since CometBFT 0.38.\nSerialized proof for the value data, if requested, to be …\nRefetch and reapply the given chunks, regardless of <code>result</code>.\nReject the given P2P senders, regardless of <code>result</code>.\nThe result of applying the snapshot chunk.\nBlocks below this height may be removed.\nThe transactions’s sender. Not used since CometBFT 0.38.\nA list of local state snapshots.\nChanges to the validator set, if any.\nInitial validator set (optional).\nThe value of the matching data.\nThe application software semantic version.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI requests.\nThe consensus category of ABCI responses.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nIndicates that any pending requests should be completed …\nIndicates that all pending requests have been completed …\nRequests information about the application state.\nRequests information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI requests.\nThe info category of ABCI responses.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI requests.\nThe mempool category of ABCI responses.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI requests in CometBFT 0.37.\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI requests.\nThe snapshot category of ABCI responses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI requests.\nThe consensus category of ABCI responses.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns an exception (undocumented, nondeterministic).\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nIndicates that any pending requests should be completed …\nIndicates that all pending requests have been completed …\nRequests information about the application state.\nRequests information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI requests.\nThe info category of ABCI responses.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI requests.\nThe mempool category of ABCI responses.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI requests in CometBFT 0.38.\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI requests.\nThe snapshot category of ABCI responses.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nThe possible kinds of <code>CheckTx</code> checks.\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nA full check is required (the default).\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nIndicates that the mempool is initiating a recheck of the …\nAll possible ABCI requests in CometBFT 0.38.\nThe snapshot category of ABCI requests.\nABCI documentation\nABCI documentation\nABCI documentation\nThe ABCI protocol version.\nThe light client verified app hash for this height.\nSerialized JSON bytes containing the initial application …\nThe Tendermint block protocol version.\nThe ID of the blockchain.\nThe binary chunk contents, as returned by <code>LoadSnapshotChunk</code>…\nThe chunk index, starting from <code>0</code> for the initial chunk.\nInitial consensus-critical parameters.\nRaw query bytes.\nInformation about the last commit, obtained from the block …\nAn application-specific identifier of the format of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMerkle root hash of the fields of the decided block.\nThe height of the finalized block.\nThe height of the snapshot the chunks belong to.\nThe block height for which the query should be executed.\nThe chunk index, starting from <code>0</code>.  Tendermint applies …\nHeight of the initial block (typically <code>1</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of check to perform.\nthe modified transactions cannot exceed this size.\nThe message to send back.\nEvidence of validator misbehavior.\nMerkle root of the next validator set.\nThe Tendermint p2p protocol version.\nPath of the request, like an HTTP <code>GET</code> path.\nThe address of the public key of the original proposer of …\naddress of the public key of the validator proposing the …\naddress of the public key of the validator proposing the …\nWhether to return a Merkle proof with the response, if …\nThe P2P ID of the node who sent this chunk.\nThe snapshot offered for restoration.\nTimestamp of the finalized block.\nThe genesis time.\nThe transaction bytes.\nList of transactions committed as part of the block.\ntxs is an array of transactions that will be included in a …\ntxs is an array of transactions that will be included in a …\nInitial genesis validators, sorted by voting power.\nThe Tendermint software semantic version.\nAbort all snapshot restoration\nSnapshot accepted, apply chunks\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nReturns an exception (undocumented, nondeterministic).\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nReturns data queried from the application.\nReturns data queried from the application.\nReturns data queried from the application.\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI responses.\nUnknown result, abort all snapshot restoration\nABCI documentation\nABCI documentation\nABCI documentation\nThe hash of the application’s state.\nInitial application hash.\nThe application protocol version.\nThe binary chunk contents, in an arbitrary format.\nThe response code.\nThe response code.\nThe response code for the query.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nChanges to consensus parameters (optional).\nUpdates to the consensus params, if any.\nInitial consensus-critical parameters (optional).\nResult bytes, if any.\nThe Merkle root hash of the application state.\nResult bytes, if any.\nSome arbitrary information.\nUndocumented.\nEvents that occurred while beginning the block.\nEvents that occurred while checking the transaction.\nEvents that occurred while executing the transaction.\nEvents that occurred while ending the block.\nSet of block events emitted as part of executing the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of gas consumed by the transaction.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAmount of gas requested for the transaction.\nThe block height from which data was derived.\nThe index of the key in the tree.\nAdditional information.\nAdditional information.\nAdditional information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key of the matching data.\nThe latest result of <code>Commit</code>.\nThe latest block for which the app has called <code>Commit</code>.\nThe output of the application’s logger.\nThe output of the application’s logger.\nThe output of the application’s logger.\nError reported for the mempool. Not used since CometBFT …\nThe message sent in the request.\nPriority for the mempool. Not used since CometBFT 0.38.\nSerialized proof for the value data, if requested, to be …\nRefetch and reapply the given chunks, regardless of <code>result</code>.\nReject the given P2P senders, regardless of <code>result</code>.\nThe result of applying the snapshot chunk.\nBlocks below this height may be removed.\nThe transactions’s sender. Not used since CometBFT 0.38.\nA list of local state snapshots.\nThe result of executing each transaction including the …\nChanges to the validator set, if any.\nA list of updates to the validator set. These will reflect …\nInitial validator set (optional).\nThe value of the matching data.\nThe application software semantic version.\nValidator information\nProposer priority\nValidator set contains a vector of validators\nSimpleValidator is the form of the validator used for …\nA change to the validator set.\nValidator account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the hash of this validator set.\nReturns the bytes to be hashed into the Merkle tree - the …\nHash this header with a SHA256 hasher provided by a crypto …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidator name\nConstructor\nCreate a new validator.\nReturn the voting power of the validator.\nValidator voting power\nNew voting power\nGet proposer\nValidator proposer priority\nValidator public key\nPublic key\nValidator public key\nGet total voting power\nReturns the validator with the given Id if its in the Set.\nGet Info of the underlying validators.\nGet the current proposer priority\nVerify the given signature against the given sign_bytes …\nVoting power\nConvenience constructor for cases where there is a proposer\nConvenience constructor for cases where there is no …\nCanonicalVote is used for protobuf encoding a Vote\nVoting power\nVotes to commit to a particular block for a given round\nVotes for blocks which validators observe are valid for a …\nSignVoteRequest is a request to sign a vote\nSignedVote is the union of a canonicalized vote, the …\nSignedVoteResponse is a response containing a signed vote …\nTypes of votes\nValidatorIndex for a particular Vote\nVotes are signed messages from validators for a particular …\nBlock ID\nBlock ID\nChain ID\nChain ID\nOptional error\nVote extension provided by the application. Only valid for …\nVote extension signature by the validator Only valid for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>SignedVote</code> from the provided <code>Vote</code>, which may …\nBlock height\nBlock height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate signable vector from Vote.\nIs the current voting power zero?\nCreate new <code>SignedVote</code> from provided canonicalized vote, …\nCreate CanonicalVote from Vote\nRound\nRound\nReturn the bytes (of the canonicalized vote) that were …\nReturn the actual signature on the canonicalized vote.\nSignature\nTimestamp\nTimestamp\nCreate signable bytes from Vote.\nValidator address\nReturn the id of the validator that signed this vote.\nValidator index\nGet the current voting power\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nVote\nOptional Vote\nType of vote (prevote or precommit)\nType of vote (prevote or precommit)\nBuilt-in <code>prost_types</code> with slight customization to enable …\nEvent allows application developers to attach additional …\nEventAttribute is a single key-value pair, associated with …\nApplies a snapshot chunk\nlists available snapshots\nloads a snapshot chunk\noffers a snapshot to the application\nnondeterministic\nTxResult contains results of executing the transaction.\nValidator\nValidatorUpdate\nVoteInfo\nThe first 20 bytes of SHA256(public key)\nlight client-verified app hash for snapshot height\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNumber of chunks in the snapshot\nreserve 1\nnondeterministic\nThe application-specific snapshot format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>CheckTxType</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>MisbehaviorType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nhash is the merkle root hash of the fields of the proposed …\nArbitrary snapshot hash, equal only if identical\nThe height when the offense occurred\nThe height at which the snapshot was taken\nnondeterministic\nnondeterministic\nnondeterministic\nnondeterministic\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>CheckTxType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MisbehaviorType</code>.\nbytes data = 2; // use “value” instead.\nnondeterministic\nnondeterministic\nthe modified transactions cannot exceed this size.\nmempool_error is set by CometBFT. ABCI applictions …\nArbitrary application metadata\nPubKey pub_key = 2 [(gogoproto.nullable)=false];\naddress of the public key of the validator proposing the …\naddress of the public key of the original proposer of the …\nChunks to refetch and reapply\nChunk senders to reject and ban\nNested message and enum types in <code>Request</code>.\nNested message and enum types in <code>Response</code>.\nNested message and enum types in <code>ResponseApplySnapshotChunk</code>…\nNested message and enum types in <code>ResponseOfferSnapshot</code>.\nNested message and enum types in <code>ResponseProcessProposal</code>.\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nThe round at which the block proposer decided in the …\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>status</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nsnapshot offered by peers\nReturns the enum value of <code>status</code>, or the default if the …\nThe corresponding time where the offense occurred\nTotal voting power of the validator set in case the ABCI …\ntxs is an array of transactions that will be included in a …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nThe offending validator\nReserved for future use\nList of validators’ addresses in the last validator set …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAbort all snapshot restoration\nChunk successfully accepted\nReject this snapshot, try others\nRetry chunk (combine with refetch and reject)\nRetry snapshot (combine with refetch and reject)\nUnknown result, abort all snapshot restoration\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Result</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Result</code>.\nAbort all snapshot restoration\nSnapshot accepted, apply chunks\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nUnknown result, abort all snapshot restoration\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Result</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Result</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ProposalStatus</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ProposalStatus</code>.\nBlockRequest requests a block for a specific height\nBlockResponse returns block to the requested\nNoBlockResponse informs the node that the peer does not …\nStatusRequest requests the status of a peer.\nStatusResponse is a peer response to inform their status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Message</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nBlockPart is sent when gossipping a piece of the proposed …\nEndHeight marks the end of the given height inside WAL. …\nHasVote is sent to indicate that a particular vote has …\nMsgInfo are msgs from the reactor which may update the …\nNewRoundStep is sent for every step taken in the …\nNewValidBlock is sent when a validator observes a valid …\nProposal is sent when a new block is proposed.\nProposalPOL is sent when a previous proposal is …\nTimedWALMessage wraps WALMessage and adds Time for …\nTimeoutInfo internally generated messages which may update …\nVote is sent when voting for a proposal (or lack thereof).\nVoteSetBits is sent to communicate the bit-array of votes …\nVoteSetMaj23 is sent to indicate that a given BlockID has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Message</code>.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nNested message and enum types in <code>WALMessage</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nProofOp defines an operation used for calculating Merkle …\nProofOps is Merkle proof defined by the list of ProofOps\nPublicKey defines the keys available for use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncoded in ProofOp.Key.\nTo encode in ProofOp.Data\nNested message and enum types in <code>PublicKey</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\n<code>Any</code> contains an arbitrary serialized protocol buffer …\nA Duration represents a signed, fixed-length span of time …\nA Timestamp represents a point in time independent of any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSerialize the given message type <code>M</code> as <code>Any</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSigned fractions of a second at nanosecond resolution of …\nNon-negative fractions of a second at nanosecond …\nNormalizes the duration to a canonical format.\nNormalizes the timestamp to a canonical format.\nSigned seconds of the span of time. Must be from …\nRepresents seconds of UTC time since Unix epoch …\nDecode the given message type <code>M</code> from <code>Any</code>, validating that …\nConverts a <code>core::time::Duration</code> to a <code>Duration</code>, failing if …\nA URL/resource name that uniquely identifies the type of …\nMust be a valid serialized protocol buffer of the above …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Message</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Message</code>.\nNested message and enum types in <code>Packet</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nPingRequest is a request to confirm that the connection is …\nPingResponse is a response to confirm that the connection …\nPubKeyRequest requests the consensus public key from the …\nPubKeyResponse is a response message containing the public …\nSignProposalRequest is a request to sign a proposal\nSignVoteRequest is a request to sign a vote\nSignedProposalResponse is response containing a signed …\nSignedVoteResponse is a response containing a signed vote …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Errors</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Errors</code>.\nNested message and enum types in <code>Message</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nABCIResponses retains the responses of the various ABCI …\nConsensusParamsInfo represents the latest consensus …\nValidatorsInfo represents the latest validator set, or the …\nthe latest AppHash we’ve received from calling …\nimmutable\nConsensus parameters used for validating blocks. Changes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLastBlockHeight=0 at genesis (ie. block(H=0) does not …\nMerkle root of the results from executing prev block\nLastValidators is used to validate block.LastCommit. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Message</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlockID\nBlockIdFlag indicates which BlcokID the signature is for\nBlockParams contains limits on the block size.\nCommit contains the evidence that a block was committed by …\nCommitSig is a part of the Vote included in a Commit.\nConsensusParams contains consensus critical parameters …\nData contains the set of transactions included in the block\nDuplicateVoteEvidence contains evidence of a validator …\nEvidenceParams determine how we handle evidence of …\nHashedParams is a subset of ConsensusParams.\nHeader defines the structure of a block header.\nLightClientAttackEvidence contains evidence of a set of …\nPartsetHeader\nVotes\nProposals\nSignedMsgType is a type of signed message in the consensus.\nTxProof represents a Merkle proof of the presence of a …\nValidatorParams restrict the public key types validators …\nVersionParams contains the ABCI application version.\nVote represents a prevote, precommit, or commit vote from …\nstate after txs from the previous block\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nzero if vote is nil.\nReturns the enum value of <code>block_id_flag</code>, or the default if …\nconsensus params for current block\ntransactions\nNested message and enum types in <code>Evidence</code>.\nconsensus info\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BlockIdFlag</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>SignedMsgType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\ncanonicalization requires fixed size encoding here\ncanonicalization requires fixed size encoding here\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BlockIdFlag</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SignedMsgType</code>.\nprev block info\nhashes of block data\nroot hash of all results from the txs from the previous …\nMax age of evidence, in time.\nMax age of evidence, in blocks.\nMax block size, in bytes. Note: must be greater than 0\nThis sets the maximum size of total evidence in bytes that …\nMax gas per block. Note: must be greater or equal to -1\nvalidators for the next block\noriginal proposer of the block\ncanonicalization requires fixed size encoding here\ncanonicalization requires fixed size encoding here\nSets <code>block_id_flag</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nTxs that will be applied by state @ block.Height+1. NOTE: …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\ntype alias for byte\ntype alias for byte\nhashes from the app output from the prev block\nbasic block info\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nApp includes the protocol and software version for the …\nConsensus captures the consensus rules for processing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nISO 8601 combined date and time with time zone.\nA duration in seconds precision.\nAlias of <code>TimeDelta</code>.\nA duration in nanos precision.\nA duration in seconds precision.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nAn associated offset type. This type is used to store the …\nAn RFC 3339 timestamp (e.g., “1970-01-01T00:00:00Z”).\nThe time zone.\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nThe UTC time zone. This is the most efficient time zone …\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves the date component with an associated timezone.\nRetrieves the date component.\nParses a string with the specified format string and …\nCheck if the given <code>duration</code> has passed since the given `…\nFix the offset from UTC to its current value, dropping the …\nFormats the combined date and time per the specified …\nFormats the combined date and time with the specified …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nConverts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …\nConverts the local <code>NaiveDateTime</code> to the timezone-aware …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nReconstructs the time zone from the offset.\nParses a rfc3339 string, or returns an error.\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nReturns a <code>DateTimeUtc</code> corresponding to the provided Unix …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nConverts the UTC <code>NaiveDate</code> to the local time. The UTC is …\nConverts the UTC <code>NaiveDateTime</code> to the local time. The UTC …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>Date</code> from ISO week date (year and week …\nMakes a new <code>Date</code> from ISO week date (year and week …\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nThe nano seconds\nReturns the DateTimeUtc corresponding to one second in the …\nReturns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …\nReturns a DateTimeUtc which corresponds to the current …\nRetrieves an associated offset from UTC.\nCreates the offset(s) for given local <code>NaiveDate</code> if …\nCreates the offset(s) for given local <code>NaiveDateTime</code> if …\nCreates the offset for given UTC <code>NaiveDate</code>. This cannot …\nCreates the offset for given UTC <code>NaiveDateTime</code>. This …\nParses a string from a user-specified format into a …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nCompare two DateTimes based on their true time, ignoring …\nThe seconds\nSubtracts another <code>DateTime</code> from the current date and time. …\nRetrieves the time component.\nReturns the number of seconds in between two <code>DateTimeUtc</code> …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns the number of non-leap seconds since January 1, …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-microseconds since January …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-milliseconds since January …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns the number of microseconds since the last second …\nReturns the number of milliseconds since the last second …\nReturns the number of nanoseconds since the last second …\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturns an rfc3339 string or an error.\nReturn an RFC 3339 and ISO 8601 date and time string with …\nReturns the unix timestamp associated with this <code>DateTimeUtc</code>…\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nReturns a <code>Date</code> which corresponds to the current date.\nReturns a <code>DateTimeUtc</code> corresponding to the Unix epoch.\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the second number changed.\nSet the time to a new fixed time on the existing date.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nMake a new <code>DateTime</code> from year, month, day, time components …\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nThe address of a multisignature account\nResult of submitting a transaction to the blockchain\nA section representing a multisig over another section\nA section representing a multisig over another section\nA transaction header/protocol signature\nA transaction with the commitment to a specific inner …\nA reference to a transaction with the commitment to a …\nResult of submitting a transaction to the mempool\nA section representing transaction code\nTransaction code. Sending to hardware wallets optional\nRepresents either some code bytes or their SHA-256 hash\nA section representing a multisig over another section\nA section representing transaction data\nTransaction data that needs to be sent to hardware wallets\nResult of dry running transaction\nTransaction data that does not need to be sent to hardware …\nResult of applying hash function to bytes\nA Namada transaction header indicating where transaction …\nWrap a header with a section for the purposes of computing …\nResult of applying identity function to bytes\nRepresents the pointers to a indexed tx, which are the …\nInclusive range of <code>IndexedTx</code> entries.\nA section providing the auxiliary inputs used to construct …\nA section providing the auxiliary inputs used to construct …\nEmbedded MASP transaction section\nA memo field (bytes).\nCapture the result of running a transaction\nThe public keys that constitute a signer\nLength of the transaction sections salt\nA section of a transaction. Carries an independent piece …\nTag type that indicates we should use ABI serialization to …\nSignature index within a multisig\nA generic signed data wrapper for serialize-able types.\nIndicates the list of public keys against which signatures …\nBecome validator transaction WASM path\nBond WASM path\nBridge pool WASM path\nChange commission WASM path\nChange consensus key WASM path\nChange validator metadata WASM path\nClaim-rewards WASM path\nDeactivate validator transaction WASM path\nIBC transaction WASM path\nInitialize account transaction WASM\nInitialize proposal transaction WASM path\nReactivate validator transaction WASM path\nRedelegate transaction WASM path\nResign steward WASM path\nReveal public key transaction WASM path\nTransparent transfer transaction WASM path\nUnbond WASM path\nUnjail validator transaction WASM path\nUpdate validity predicate WASM path\nUpdate steward commission WASM path\nVote transaction WASM path\nWithdraw WASM path\nA Namada transaction is represented as a header followed …\nAn inner transaction of the batch, represented by its …\nUser validity predicate WASM path\nActions applied in a transaction.\nAdd wasm code to the tx builder\nAdd wasm code to the tx builder from hash\nAdd wasm data to the tx builder\nAdd an extra section to the tx builder by code\nAdd an extra section to the tx builder by hash\nAdd a new inner tx to the transaction. Returns <code>false</code> if the\nAdd a masp builder section to the tx builder\nAdd a masp tx section to the tx builder\nAdd a memo section to the transaction\nAdd a new section to the transaction\nAdd wasm data already serialized to the tx builder\nAdd signatures\nAdd wrapper tx to the tx builder\nThe decoded set of asset types used by the transaction. …\nWhether the inner txs should be executed atomically\nThe commitments to the transaction’s sections\nThe optional index of an inner tx within this batc\nCreates a batched tx along with the reference to the first …\nCreates a batched tx along with the reference to one or …\nCreates a batched tx from one or more inner transactions\nCreate a new <code>IndexedTxRange</code> over a range of block heights.\nBroadcast a transaction to be included in the blockchain …\nConstructs the batched tx from the provided list. Returns …\nBuild a pgf funding proposal governance\nSubmit a transaction to bond\nSubmit validator commission rate change\nSubmit transaction to withdraw an unbond\nSubmit a custom transaction\nSubmit transaction to deactivate a validator\nBuild a default proposal governance\nSubmit an IBC transfer\nSubmit a transaction to initialize an account\nBuild a pgf funding proposal governance\nBuild a pgf funding proposal governance\nSubmit transaction to deactivate a validator\nRedelegate bonded tokens from one validator to another\nCraft transaction to resign as a steward\nSubmit transaction to reveal the given public key\nBuild a shielded transfer\nBuild a shielding transfer\nBuild a transparent transfer\nSubmit a transaction to unbond\nSubmit transaction to unjail a jailed validator\nBuild an unshielding transfer\nSubmit a transaction to update a VP\nCraft transaction to update a steward commission\nSubmit validator commission rate change\nSubmit validator metadata change\nBuild a proposal vote\nSubmit transaction to withdraw an unbond\nThe data that was used to construct the target transaction\nThe chain which this transaction is being submitted to\nThe reference to the inner transaction\nThe reference to the inner transaction\nExtract the code from this section is possible\nGet the code designated by the transaction code hash in …\nActual transaction code\nThe SHA-256 hash of the transaction’s code section\nExtract the code from this section is possible\nGet the hash of this transaction’s code\nGet the references to the inner transactions\nCompute signatures for the given keys\nData-Types that are used in transactions.\nExtract the data from this section if possible\nGet the data designated by the transaction data hash in …\nData bytes\nArbitrary data to be signed\nThe SHA-256 hash of the transaction’s data section\nGet the transaction data hash\nDisplay a result of a tx batch.\nBuild and dump a transaction either to file or to screen\nThe end of the range.\nCreate an <code>IndexedTx</code> that upper bounds the entire range of …\nTransaction events.\nDecompress this signature object with respect to the given …\nThe time at which this transaction expires\nExtract the extra data from this section if possible\nExtract the extra data from this section if possible\nGet the reference to the first inner transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake a new code section with the given hash\nInstantiate from a single signature and a matching PK.\nCreate a transaction of the given type\nGenerate IBC shielded transfer\nGet the data designated by the transaction data hash\nGet the hash of this section\nGet the hash of this section\nGet the hash of this Commitments\nGet the MASP builder section with the given hash\nGet the transaction section with the given hash\nGet a hash of this section with its signer and signatures …\nGet the transaction section with the given hash\nCheck if the public key for the given address has been …\nHash this section. Section hashes are useful for …\nGet the hash of this transaction header.\nHash this data section\nReturn the contained hash commitment\nHash this code section\nHash this signature section\nHash the commitments to the transaction’s sections\nGet the hash of this ciphertext section. This operation is …\nGet the transaction header\nType indicating how to process transaction\nGet the transaction header hash\nThe block height of the indexed tx\nReturn the result of applying identity function if there …\nIndex in multisig\nThe index in the block of the tx\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>TxResult</code> if the transaction was applied and …\nCheck if a reveal public key transaction is needed\nExtract the MASP builder from this section if possible\nExtract the MASP transaction from this section if possible\nGet the memo designated by the memo hash in the header for …\nThe SHA-256 hash of the transaction’s memo section\nGet the hash of this transaction’s memo\nTrack how Info objects map to descriptors and outputs\nCreate a new <code>IndexedTxRange</code>.\nMake a new header of the given transaction type\nMake a new data section with the given bytes\nMake a new code section with the given bytes\nSign the given section hash with the given key and return …\nInitialize a new <code>Signed</code> instance.\nInitialize a new transaction builder\nInitialize a new <code>Signed</code> instance from an existing …\nCreates a new event with the hash and height of the …\nPrepare a transaction for signing and submission by adding …\nSubmit transaction and wait for result. Returns a list of …\nGenerated protobuf tx type.\nGet the protocol header if it is present\nFilter out all the sections that must not be submitted to …\nPK that can be used to verify signature\nQuery the unbonds post-tx\nGets the hash of the raw transaction’s header\nRemove the transaction section with the given hash\nSalt with additional random data (usually a timestamp)\nAdditional random data\nSave accounts initialized from a tx into the wallet, if …\nGet hashes of all the sections in this transaction\nAdditional details necessary to process transaction\nAdd the given code to the transaction and set code hash in …\nSet the last transaction code hash stored in the header\nAdd the given code to the transaction and set the hash in …\nSet the last transaction data hash stored in the header\nSet the last transaction memo hash stored in the header\nThe signature of the data\nAdd signing keys to the tx builder\nAdd fee payer keypair to the tx builder\nExtract the signature from this section if possible\nSignature\nThe signature over the above hash\nThe signature over the above hash\nThe signature over the above hash\nThe public keys against which the signatures should be …\nThe public keys against which the signatures should be …\nThe public keys against which the signatures should be …\nGet a signature for data\nThe start of the range.\nBroadcast a transaction to be included in the blockchain.\nThe tag for the transaction code\nThe MASP transaction that this section witnesses\nThe hash of the section being signed\nThe hash of the section being signed\nThe hash of the section being signed\nA transaction timestamp\nConvert this transaction into protobufs bytes.\nConvert owned version to a referenced one\nConvert to a vector\nSerialize signature to pretty JSON into an I/O stream\nSerialize tx to pretty JSON into an I/O stream\nTry to deserialize a tx from protobuf bytes\nTry to parse a signature from JSON string bytes\nDeserialize tx from JSON string bytes\nConvert this transaction into protobufs bytes\nThe transaction\nThe transaction\nThe type of this transaction\nGet unique hashes of all the sections in this transaction\nUpdate the header whilst maintaining existing …\nDetermines the type of the input Tx\nVerify that the data has been signed by the secret key …\nVerify that the signature contained in this section is …\nVerify that the sections with the given hashes have been …\nVerify that the sections with the given hashes have been …\nVerify that the input data has been signed by the secret …\nCreate a new <code>IndexedTxRange</code> over a given <code>BlockHeight</code>.\nGet the wrapper header if it is present\nGet the transaction’s wrapper hash\nAn action applied from a tx.\nActions applied from txs.\nA bond is a validator’s self-bond or a delegation from …\nA claim of pending rewards.\nStorage access errors\nGov tx actions.\nMASP tx actions.\nA required authorizer for the transaction\nThe hash of the masp <code>crate::Section</code>\nPGF tx actions.\nPoS tx actions.\nRead actions from temporary storage\nA redelegation of bonded tokens from one validator to …\nAn unbond of a bond.\nA withdrawal of an unbond.\nWrite actions to temporary storage\nThe amount of tokens\nThe amount of tokens\nThe amount of tokens\nDestination validator address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to get the optional masp section reference …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to check if the action is IBC shielding …\nOwner (delegator) of the bonds to be redelegate\nPush an action applied in a tx.\nRead all the actions applied by a tx\nRead a temporary key-val\nSource address for delegations. For self-bonds, the …\nSource address for delegations. For self-bonds, the …\nSource address for withdrawing from delegations. For …\nSource address for claiming rewards from a bond. For …\nSource validator address\nValidator address\nValidator address\nValidator address\nValidator address\nWrite a temporary key-val\nThe block is full\nThe result of a specific tx in a batch\nThe result of a dry run, included the actual transaction …\nExpired tx\nThe extended transaction result, containing the references …\nAmount of some specified token to pay for fees.\nError in paying tx fee\nGas limit of a transaction\nThe transaction had an invalid signature.\nInvalid chain ID\nFound invalid commtiment to one of the transaction’s …\nInvalid signature\nInvalid tx\nInvalid vote extension\nNo action required\nSuccess\nExceeded gas limit\nTxs issued by validators as part of internal protocols\nAn ordinary tx\nReplayed tx\nThe different result codes that the ledger may send back …\nTx is too large\nExceeded gas limit\nTx code is not allowlisted\nTransaction application result. More specifically the set …\nSentinel used in transactions to signal events that …\nStruct that classifies that kind of Tx based on the …\nValidity predicate status flags.\nResult of checking a transaction with validity predicates\nError in WASM tx execution\nA Tx that contains a payload in the form of a raw tx\nA wrapper transaction with some metadata for inclusion and …\nErrors relating to decrypting a wrapper tx and its …\nThe addresses whose VPs accepted the transaction\nGet a flags value with all known bits set.\nAmount of fees paid per gas unit.\nCheck if the collection of inner tx results contains any …\nCheck if the collection of inner tx results contains any …\nCheck if all the inner txs in the collection have been …\nConvert the gas limit into scaled gas\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nStorage keys touched by the transaction\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the hash of the some inner tx in a batch.\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nErrors occurred in any of the VPs, if any\nTx data to evaluate a validity-predicate\nEvents emitted by the transaction\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe fee to be paid for including the tx\nGet the address of the implicit account associated with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConvert from <code>u32</code>.\nMax amount of gas that can be used when executing the …\nRetrieve an inner tx result, if it exists.\nGet the <code>DenominatedAmount</code> of fees to be paid by the given …\nProduce a SHA-256 hash of this section\nProduce a SHA-256 hash of this header\nGet the hash of a transaction\nNew established addresses created by the transaction\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert an inner tx result into this <code>TxResult</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the tx has been accepted by all the VPs\nWhether all known bits in this flags value are set.\nCheck if the collection of inner tx results is empty.\nWhether all bits in this flags value are unset.\nChecks if the given <code>ResultCode</code> value is a protocol level …\nIterate over all the inner tx results.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn the length of the collection of inner tx results.\nThe optional references to masp data (either MASP sections …\nCreate a new wrapper tx from the personal keypair, an …\nReturn a new set of tx results.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\ntxs to manage pgf\nUsed for signature verification and to determine an …\ntxs to manage pos Types used for PoS system transactions\ntransaction protocols made by validators Types for sending …\nThe addresses whose VPs rejected the transaction\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the sentinel for an invalid section commitment error\nSet the sentinel for an out of gas error\nValidity predicate status flags, containing info about …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts this result to <code>ExtendedTxResult</code>\nConvert the batched result to a string\nConvert to <code>u32</code>.\nConvert to <code>usize</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAddress of the fee token.\nThe transaction result\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe results of all the triggered validity predicates by …\nwrapper txs\nA validity predicate with an input that is intended to be …\nReturns the argument unchanged.\nThe input for the <code>eval</code>ed VP\nCalls <code>U::from(self)</code>.\nThe VP code hash to <code>eval</code>\nA tx data type to hold proposal data\nThe new commission distribution\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pgf steward address\nA tx data type to become a validator account.\nA bond is a validator’s self-bond or a delegation from …\nA claim of pending rewards.\nA change to the validator commission rate.\nA change to the validator’s consensus key.\nA change to the validator metadata.\nA redelegation of bonded tokens from one validator to …\nAn unbond of a bond.\nA withdrawal of an unbond.\nAddress of an account that will become a validator.\nThe amount of tokens\nThe amount of tokens\nThe amount of tokens\nURL that points to a picture (e.g. PNG), identifying the …\nValidator’s avatar url\nThe initial commission rate charged for delegation rewards\nValidator’s commission rate\nA key to be used for signing blocks and votes on blocks.\nThe new consensus key\nThe validator description\nValidator description\nDestination validator address\nThe validator’s discord handle\nValidator’s discord handle\nThe validator email\nValidator’s email\nAn Eth bridge governance public key\nAn Eth bridge hot signing public key used for validator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum change allowed per epoch to the commission …\nValidator’s name\nValidator’s name\nThe new commission rate\nOwner (delegator) of the bonds to be redelegate\nPublic key used to sign protocol transactions\nSource address for delegations. For self-bonds, the …\nSource address for delegations. For self-bonds, the …\nSource address for withdrawing from delegations. For …\nSource address for claiming rewards from a bond. For …\nSource validator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nThe validator website\nValidator website\nCollection of signatures over the Ethereum bridge pool …\nSignature over the Ethereum bridge pool merkle root and …\nEthereum events seen by some validator\nEthereum events contained in vote extensions that are …\nTxs sent by validators as part of internal protocols\nTypes of protocol messages to be sent\nValidator set update signed by some validator\nValidator set updates contained in vote extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduce a SHA-256 hash of this section\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this <code>ProtocolTxType</code> is an Ethereum protocol …\nwe require ProtocolTxs be signed\nThe type of protocol message being sent\nValidate the signature of a protocol tx\nAmount of some specified token to pay for fees.\nGas limit of a transaction\nA wrapper transaction with some metadata for inclusion and …\nErrors relating to decrypting a wrapper tx and its …\nAmount of fees paid per gas unit.\nThe fee to be paid for including the tx\nMax amount of gas that can be used when executing the …\nUsed for signature verification and to determine an …\nAddress of the fee token.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nProvides methods for converting a type <code>Self</code> into either a …\nIterator that maps left or right iterators to …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nEvaluate the provided expression for both <code>Either::Left</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nConverts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nMacro for unwrapping the left side of an <code>Either</code>, which …\nDual to <code>try_left!</code>, see its documentation for more …\nReturns the left value\nReturns the right value\nExtend an <code>Event</code> with batch data.\nExtend an <code>Event</code> with result code data.\nTransaction event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new event with the hash and height of the …\nTransaction event types.\nApplied transaction.")