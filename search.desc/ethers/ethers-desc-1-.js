searchState.loadedDescShard("ethers", 1, "Public key data\nPublic key data\nReturn an allocated ASN.1 DER serialization as a byte …\nSerialize a <code>SecretDocument</code> containing a PKCS#8-encoded …\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nReturn an ASN.1 DER-encoded byte vector.\nGet the PKCS#8 <code>Version</code> for this structure.\nWrite ASN.1 DER document to a file.\nWrite ASN.1 DER document to a file.\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\n<code>APPLICATION</code>: types whose meaning is specific to an …\nApplication tag.\n<code>BIT STRING</code> tag: <code>3</code>.\n<code>BMPString</code> tag: <code>30</code>.\n<code>BOOLEAN</code> tag: <code>1</code>.\nASN.1 <code>CHOICE</code> denotes a union of one or more possible …\nClass of an ASN.1 tag.\n<code>CONTEXT-SPECIFIC</code>: types whose meaning is specific to a …\nContext-specific tag.\nDate-and-time type shared by multiple ASN.1 types (e.g. …\nDate-and-time related errors.\nDecoding trait.\nMarker trait for data structures that can be decoded from …\nDecode the value part of a Tag-Length-Value encoded field, …\nDER ordering trait.\nASN.1 DER-encoded document.\nEncoding trait.\nReference encoder: wrapper type which impls <code>Encode</code> for any …\nEncode the value part of a Tag-Length-Value encoded field, …\nReference value encoder: wrapper type which impls …\n<code>ENUMERATED</code> tag: <code>10</code>.\nContains the error value\nError type.\nError type.\n<code>EXPLICIT</code> tagging.\nThis error indicates a previous DER parsing operation …\nFile not found error.\nTypes which have a constant ASN.1 <code>Tag</code>.\n<code>GeneralizedTime</code> tag: <code>24</code>.\nASN.1 DER headers: tag + length component of TLV-encoded …\nIndefinite length.\nThis is the maximum date represented by the <code>DateTime</code> This …\n<code>IA5String</code> tag: <code>22</code>.\n<code>IMPLICIT</code> tagging.\nMessage is incomplete and does not contain all of the …\nLength type with support for indefinite lengths as used by …\nIndefinite length disallowed.\n<code>INTEGER</code> tag: <code>2</code>.\nI/O errors.\nASN.1-encoded length.\nIncorrect length for a given field.\nMaximum length currently supported: 256 MiB\nTag number <code>0</code>\nTag number <code>1</code>\nTag number <code>10</code>\nTag number <code>11</code>\nTag number <code>12</code>\nTag number <code>13</code>\nTag number <code>14</code>\nTag number <code>15</code>\nTag number <code>16</code>\nTag number <code>17</code>\nTag number <code>18</code>\nTag number <code>19</code>\nTag number <code>2</code>\nTag number <code>20</code>\nTag number <code>21</code>\nTag number <code>22</code>\nTag number <code>23</code>\nTag number <code>24</code>\nTag number <code>25</code>\nTag number <code>26</code>\nTag number <code>27</code>\nTag number <code>28</code>\nTag number <code>29</code>\nTag number <code>3</code>\nTag number <code>30</code>\nTag number <code>4</code>\nTag number <code>5</code>\nTag number <code>6</code>\nTag number <code>7</code>\nTag number <code>8</code>\nTag number <code>9</code>\n<code>AnyRef</code> representation of the ASN.1 <code>NULL</code> type.\nReader type used by <code>Reader::read_nested</code>.\nMessage is not canonically encoded.\n<code>NULL</code> tag: <code>5</code>.\n<code>NumericString</code> tag: <code>18</code>.\nLength of <code>1</code>\nLength of <code>1</code>.\n<code>OBJECT IDENTIFIER</code> tag: <code>6</code>.\n<code>OCTET STRING</code> tag: <code>4</code>.\nOID is improperly encoded.\nUnknown OID.\nContains the success value\nInteger overflow occurred (library bug!).\nMessage is longer than this library’s internal limits …\nPermission denied reading file.\n<code>PrintableString</code> tag: <code>19</code>.\n<code>PRIVATE</code>: types whose meaning is specific to a given …\nPrivate tag number.\nReader trait which reads DER-encoded input.\nReader does not support the requested operation.\n<code>REAL</code> tag: <code>9</code>.\nResult type.\nSecret <code>Document</code> type.\nMarker trait for ASN.1 <code>SEQUENCE</code>s.\n<code>SEQUENCE</code> tag: <code>16</code>.\n<code>SET</code> and <code>SET OF</code> tag: <code>17</code>.\n<code>SET</code> cannot contain duplicates.\n<code>SET</code> ordering error: items not in canonical order.\n<code>Reader</code> which consumes an input byte slice.\n<code>Writer</code> which encodes DER into a mutable output byte slice.\nASN.1 tag\nASN.1 tags.\nTagging modes: <code>EXPLICIT</code> versus <code>IMPLICIT</code>.\nUnknown tag mode.\nASN.1 tag numbers (i.e. lower 5 bits of a <code>Tag</code>).\nInvalid tag number.\nUnexpected tag.\nUnknown/unsupported tag.\nTypes which have an ASN.1 <code>Tag</code>.\n<code>TeletexString</code> tag: <code>20</code>.\nUndecoded trailing data at end of message.\n<code>UNIVERSAL</code>: built-in types whose meaning is the same in all …\n<code>UTCTime</code> tag: <code>23</code>.\nUTF-8 errors.\n<code>UTF8String</code> tag: <code>12</code>.\nUnexpected value.\nDER value ordering trait.\n<code>VideotexString</code> tag: <code>21</code>.\n<code>VisibleString</code> tag: <code>26</code>.\nWriter trait which outputs encoded DER.\nLength of <code>0</code>\nLength of <code>0</code>.\nCreate an <code>APPLICATION</code> tag with this tag number.\nModule containing all of the various ASN.1 built-in types …\nAssert that this <code>Tag</code> matches the provided expected tag.\nAnnotate an <code>ErrorKind</code> with context about where it occurred,\nIs the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?\nGet the <code>Class</code> that corresponds to this <code>Tag</code>.\nAttempt to decode an ASN.1 <code>CONTEXT-SPECIFIC</code> field with the …\nCreate a <code>CONTEXT-SPECIFIC</code> tag with this tag number.\nEncode a <code>CONTEXT-SPECIFIC</code> field with the provided tag …\nGet the day.\nAttempt to decode this message using the provided decoder.\nDecode a value which impls the <code>Decode</code> trait.\nAttempt to decode this <code>AnyRef</code> type into the inner value.\nAttempt to decode this <code>Any</code> type into the inner value.\nAttempt to decode this message using the provided <code>Reader</code>.\nReturn an <code>Ordering</code> between <code>self</code> and <code>other</code> when serialized …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode a value which impls the <code>Encode</code> trait.\nEncode the provided type as an <code>Any</code> value.\nEncode this value to the provided byte slice, returning a …\nEncode this message as ASN.1 DER, appending it to the …\nEncode value (sans [<code>Tag</code>]+<code>Length</code> header) as ASN.1 DER using …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nFinish decoding, returning the given value if there is no …\nFinish encoding to the buffer, returning a slice …\nGet the length of DER Tag-Length-Value (TLV) encoded data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse <code>Self</code> from the provided DER-encoded byte slice.\nInstantiate from <code>SystemTime</code>.\nCompute a <code>DateTime</code> from the given <code>Duration</code> since the …\nGet the <code>Header</code> used to encode this value.\nGet the hour.\nCreate a new <code>ErrorKind::Incomplete</code> for the given length.\nGet the length of the input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an application tag?\nDoes this tag represent a constructed (as opposed to …\nIs this a context-specific tag?\nIs this length definite?\nDid the decoding operation fail due to an error?\nDid the decoding operation fail due to an error?\nHave we read all of the input data?\nIs this length indefinite?\nIs this value an ASN.1 <code>NULL</code> value?\nIs this value an ASN.1 <code>NULL</code> value?\nIs this a private tag?\nIs this a universal tag?\nIs this length equal to zero?\nGet the <code>ErrorKind</code> which occurred.\nLength of the encoded value\nCreate an <code>Error</code> for an invalid <code>Length</code>.\nGet the minutes.\nGet the month.\nCreate a new <code>AnyRef</code> from the provided <code>Tag</code> and DER bytes.\nCreate a new <code>Any</code> from the provided <code>Tag</code> and DER bytes.\nCreate a new <code>DateTime</code> from the given UTC time components.\nCreate a new <code>Error</code>.\nCreate a new <code>Header</code> from a <code>Tag</code> and a specified length.\nCreate a new <code>Length</code> for any value which fits inside of a …\nCreate a definite length from a type which can be …\nCreate a new slice reader for the given byte slice.\nCreate a new tag number (const-friendly).\nCreate a new encoder with the given byte slice as a …\nCreate an <code>Error</code> for an non-canonical value with the ASN.1 …\n<code>Any</code> representation of the ASN.1 <code>NULL</code> type.\nGet the <code>TagNumber</code> (lower 6-bits) for this tag.\nGet the octet encoding for this <code>Tag</code>.\nOffset within the original input stream.\nPeek at the next byte of input without modifying the …\nPeek forward in the input data, attempting to decode a …\nPeek at the next byte in the decoder and attempt to decode …\nGet the position within the buffer.\nGet the position inside of the message where the error …\nCreate a <code>PRIVATE</code> tag with this tag number.\nRead a single byte.\nAttempt to read input data, writing it into the provided …\nRead nested data of the given length.\nAttempt to read data borrowed directly from the input as a …\nRead a byte vector of the given length.\nA module for working with referenced data.\nGet the number of bytes still remaining in the buffer.\nPerform saturating addition of two lengths.\nPerform saturating subtraction of two lengths.\nGet the seconds.\nRead an ASN.1 <code>SEQUENCE</code>, creating a nested <code>Reader</code> for the …\nAttempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …\nAttempt to decode this value an ASN.1 <code>SEQUENCE</code>, creating a …\nEncode an ASN.1 <code>SEQUENCE</code> of the given length.\nGet the ASN.1 tag that this type is encoded with.\nTag representing the type of the encoded value\nObtain a slice of bytes contain a complete TLV production …\nEncode this type as DER, returning a byte vector.\nConvert to <code>SystemTime</code>.\nCreate an <code>Error</code> because the current tag was unexpected, …\nCompute <code>Duration</code> since <code>UNIX_EPOCH</code> from the given calendar …\nGet the raw value for this <code>AnyRef</code> type as a byte slice.\nAllow access to value\nGet the inner value.\nReturn an <code>Ordering</code> between value portion of TLV-encoded …\nReturn an error for an invalid value with the given tag.\nCreate an <code>Error</code> for an invalid value with the ASN.1 type …\nCompute the length of this value (sans [<code>Tag</code>]+<code>Length</code> …\nWrite the given DER-encoded bytes as output.\nWrite a single byte.\nGet the year.\nActual tag encountered in the message.\nActual length of the message buffer currently being …\nRaw byte value of the tag.\nLength of the decoded data.\nTag the decoder was expecting (if there is a single such …\nExpected message length.\nOID value that was unrecognized by a parser for a …\nTotal length of the remaining data left in the buffer.\nTag of the value being decoded.\nTag of the value which is not canonically encoded.\nTag of the unexpected value.\nIs this tag constructed? (vs primitive).\nIs this tag constructed? (vs primitive).\nIs this tag constructed? (vs primitive).\nTag number.\nTag number.\nTag number.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nOwned form of ASN.1 <code>BIT STRING</code> type.\nIterator over the bits of a <code>BitString</code>.\nASN.1 <code>BIT STRING</code> type.\nASN.1 <code>BMPString</code> type.\nASN.1 <code>CHOICE</code> denotes a union of one or more possible …\nContext-specific field which wraps an owned inner value.\nContext-specific field reference.\nASN.1 <code>GeneralizedTime</code> type.\nASN.1 <code>IA5String</code> type.\nASN.1 <code>IA5String</code> type.\nSigned arbitrary precision ASN.1 <code>INTEGER</code> type.\nSigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.\nLength of an RFC 5280-flavored ASN.1 DER-encoded <code>UtcTime</code>.\nMaximum number of unused bits allowed.\nMaximum number of unused bits allowed.\nMaximum year that can be represented as a <code>UTCTime</code>.\nASN.1 <code>NULL</code> type.\nObject identifier (OID).\nASN.1 <code>OCTET STRING</code> type: owned form..\nASN.1 <code>OCTET STRING</code> type: borrowed form.\nASN.1 <code>PrintableString</code> type.\nASN.1 <code>PrintableString</code> type.\nMarker trait for ASN.1 <code>SEQUENCE</code>s.\nASN.1 <code>SEQUENCE OF</code> backed by an array.\nIterator over the elements of an <code>SequenceOf</code>.\nThe <code>SequenceRef</code> type provides raw access to the octets …\nASN.1 <code>SET OF</code> backed by an array.\nIterator over the elements of an <code>SetOf</code>.\nASN.1 <code>SET OF</code> backed by a <code>Vec</code>.\nASN.1 <code>TeletexString</code> type.\nASN.1 <code>TeletexString</code> type.\nUnsigned arbitrary precision ASN.1 <code>INTEGER</code> type.\nUnsigned arbitrary precision ASN.1 <code>INTEGER</code> reference type.\nASN.1 <code>UTCTime</code> type.\nASN.1 <code>UTF8String</code> type.\nASN.1 <code>VideotexString</code> type.\nAdd an element to this <code>SequenceOf</code>.\nAdd an item to this <code>SetOf</code>.\nAdd an element to this <code>SetOfVec</code>.\nBorrow the inner byte slice.\nBorrow the inner byte slice.\nBorrow the encoded UCS-2 as bytes.\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice which contains the least …\nBorrow the inner byte slice.\nBorrow the inner byte slice.\nBorrow the elements of this <code>SetOfVec</code> as a slice.\nGet the length of this <code>BIT STRING</code> in bits.\nGet the length of this <code>BIT STRING</code> in bits.\nIterator over the bits of this <code>BIT STRING</code>.\nIterator over the bits of this <code>BIT STRING</code>.\nGet the number of bytes/octets needed to represent this …\nIs the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?\nGet an iterator over characters in the string.\nGet an iterator over the <code>u16</code> codepoints.\nAttempt to decode an <code>EXPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …\nAttempt to decode an <code>IMPLICIT</code> ASN.1 <code>CONTEXT-SPECIFIC</code> field …\nParse <code>T</code> from this <code>OCTET STRING</code>’s contents.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nExtend a <code>SetOfVec</code> using an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new ASN.1 <code>BIT STRING</code> from the given bytes.\nCreate a new ASN.1 <code>BIT STRING</code> from the given bytes.\nCreate a <code>GeneralizedTime</code> from a <code>DateTime</code>.\nCreate a <code>UtcTime</code> from a <code>DateTime</code>.\nCreate a new <code>SetOfVec</code> from the given iterator.\nInstantiate from <code>SystemTime</code>.\nInstantiate from <code>SystemTime</code>.\nCreate a new <code>BmpString</code> from its UCS-2 encoding.\nCreate a new <code>GeneralizedTime</code> given a <code>Duration</code> since …\nCreate a new <code>UtcTime</code> given a <code>Duration</code> since <code>UNIX_EPOCH</code> …\nCreate a new <code>BmpString</code> from a UTF-8 string.\nGet an element of this <code>SequenceOf</code>.\nGet the nth element from this <code>SetOf</code>.\nGet the nth element from this <code>SetOfVec</code>.\nIs the number of unused bits a value other than 0?\nIs the number of unused bits a value other than 0?\nInsert an item into this <code>SetOf</code>.\nInsert an item into this <code>SetOfVec</code>. Must be unique.\nInsert an item into this <code>SetOf</code>.\nInsert an item into this <code>SetOfVec</code>. Must be unique.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the inner bytes.\nTake ownership of the octet string.\nConvert this <code>SetOfVec</code> into the inner <code>Vec</code>.\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs the inner byte slice empty?\nIs this <code>SequenceOf</code> empty?\nIs this <code>SetOf</code> empty?\nIs this <code>SetOfVec</code> empty?\nIterate over the elements in this <code>SequenceOf</code>.\nIterate over the elements of this <code>SetOf</code>.\nIterate over the elements of this <code>SetOfVec</code>.\nGet the length of this <code>IntRef</code> in bytes.\nGet the length of this <code>Int</code> in bytes.\nGet the length of this <code>UintRef</code> in bytes.\nGet the length of this <code>Uint</code> in bytes.\nGet the length of the inner byte slice.\nGet the length of the inner byte slice.\nNumber of elements in this <code>SequenceOf</code>.\nNumber of elements in this <code>SetOf</code>.\nNumber of elements in this <code>SetOfVec</code>.\nCreate a new ASN.1 <code>BIT STRING</code> from a byte slice.\nCreate a new ASN.1 <code>BIT STRING</code> from a byte slice.\nCreate a new <code>IA5String</code>.\nCreate a new <code>IA5String</code>.\nCreate a new <code>IntRef</code> from a byte slice.\nCreate a new <code>Int</code> from a byte slice.\nCreate a new <code>UintRef</code> from a byte slice.\nCreate a new <code>Uint</code> from a byte slice.\nCreate a new ASN.1 <code>OCTET STRING</code> from a byte slice.\nCreate a new ASN.1 <code>OCTET STRING</code>.\nCreate a new ASN.1 <code>PrintableString</code>.\nCreate a new ASN.1 <code>PrintableString</code>.\nCreate a new <code>SequenceOf</code>.\nCreate a new <code>SetOf</code>.\nCreate a new <code>SetOfVec</code>.\nCreate a new ASN.1 <code>TeletexString</code>.\nCreate a new ASN.1 <code>TeletexString</code>.\nCreate a new ASN.1 <code>UTF8String</code>.\nCreate a new ASN.1 <code>VideotexString</code>.\nBorrow the raw bytes of this <code>BIT STRING</code>.\nBorrow the raw bytes of this <code>BIT STRING</code>.\nTag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.\nTag mode: <code>EXPLICIT</code> VS <code>IMPLICIT</code>.\nContext-specific tag number sans the leading <code>0b10000000</code> …\nContext-specific tag number sans the leading <code>0b10000000</code> …\nConvert this <code>GeneralizedTime</code> into a <code>DateTime</code>.\nConvert this <code>UtcTime</code> into a <code>DateTime</code>.\nConvert to <code>SystemTime</code>.\nConvert to <code>SystemTime</code>.\nGet the duration of this timestamp since <code>UNIX_EPOCH</code>.\nGet the duration of this timestamp since <code>UNIX_EPOCH</code>.\nGet the number of unused bits in this byte slice.\nGet the number of unused bits in the octet serialization …\nValue of the field.\nValue of the field.\nThe resulting type referencing back to Self\nThe resulting type after obtaining ownership.\nA trait for borrowing data from an owned struct\nA trait for cloning a referenced structure and getting …\nCreates a new object referencing back to the self for …\nCreates a new object taking ownership of the data\n<code>AlgorithmIdentifier</code> for this structure.\nX.509 <code>AlgorithmIdentifier</code> as defined in RFC 5280 Section …\n<code>AlgorithmIdentifier</code> reference which has <code>Any</code> parameters.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\n<code>AlgorithmIdentifier</code> with <code>ObjectIdentifier</code> parameters.\nAlgorithm parameters are missing.\nASN.1 DER-related errors.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nReturns <code>AlgorithmIdentifier</code> associated with the structure.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a SPKI document.\nMaximum size of a BER/DER-encoded OID in bytes.\nObject identifier (OID).\nUnknown algorithm OID.\nContains the success value\nAlgorithm parameters.\nAlgorithm parameters.\nResult type with <code>spki</code> crate’s <code>Error</code> type.\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nReturns <code>AlgorithmIdentifier</code> associated with the signature …\nReturns the <code>BitString</code> encoding of the signature.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>Any</code> algorithm parameters, and …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the public key type\n<code>AlgorithmIdentifier</code> for this structure.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nAssert the <code>algorithm</code> OID is an expected value.\nAssert the values of the <code>algorithm</code> and <code>parameters</code> OIDs.\nAssert <code>parameters</code> is an OID and has the expected value.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nDeserialize object from ASN.1 DER-encoded […\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nConvert to a pair of <code>ObjectIdentifier</code>s.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nAlgorithm <code>parameters</code>.\nGet the <code>parameters</code> field as an <code>AnyRef</code>.\nGet the <code>parameters</code> field as an <code>ObjectIdentifier</code>.\nGet the parent OID of this one (if applicable).\nPush an additional arc onto this OID, returning the child …\nLoad public key object from an ASN.1 DER-encoded file on …\n<code>AlgorithmIdentifier</code> for the corresponding singature system.\nPublic key data\nPublic key data\nPublic key data\n<code>BitString</code> encoding for this signature.\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nWrite ASN.1 DER-encoded public key to the given path\nUnrecognized OID value found in e.g. a SPKI …\nAccess to the affine coordinates of an elliptic curve …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nShould point compaction be applied by default?\nShould point compression be applied by default?\nElliptic curve with an arithmetic implementation.\nDecompact an elliptic curve point from an x-coordinate.\nDecompress an elliptic curve point.\nDouble a point (i.e. add it to itself)\nField element representation.\nNon-identity point type.\nThe output of the batch normalization; a container of …\nPoint compaction settings.\nPoint compression settings.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nScalar field modulo this curve’s order.\nPerform a batched conversion to affine representation on a …\nAttempt to decompact an elliptic curve point\nAttempt to decompress an elliptic curve point.\nDouble this point.\nReturns the argument unchanged.\nDecode a <code>NonIdentity</code> from its encoding.\nCalls <code>U::from(self)</code>.\nCreate a <code>NonIdentity</code> from a point.\nGenerate a random <code>NonIdentity&lt;ProjectivePoint&gt;</code>.\nConverts this element into its affine representation.\nConverts this element to its curve representation.\nReturn wrapped point.\nGet the affine x-coordinate as a serialized field element.\nIs the affine y-coordinate odd?\nScalar blinded with a randomly generated masking value.\nInstantiate a scalar from an unsigned integer without …\nIs this scalar greater than n / 2?\nNon-zero scalar type.\nScalar field element for a particular elliptic curve.\nGeneric scalar type with primitive functionality.\nUnsigned integer type (i.e. <code>Curve::Uint</code>)\nReturns the argument unchanged.\nInstantiate scalar from an unsigned integer without …\nCalls <code>U::from(self)</code>.\nIs this scalar greater than or equal to n / 2?\nCreate a new <code>BlindedScalar</code> from a scalar and a …\nCompact curve point\nCompact point (<code>0x05</code>)\nCompressed curve point\nCompressed point with even y-coordinate (<code>0x02</code>)\nCompressed point with odd y-coordinate (<code>0x03</code>)\nEncoded elliptic curve point with point compression.\nSize of a compressed elliptic curve point.\nSize of a compressed point for the given elliptic curve …\nEnum representing the coordinates of either compressed or …\nEncoded elliptic curve point sized appropriately for a …\nTrait for deserializing a value from a SEC1 encoded curve …\nIdentity point (a.k.a. point at infinity)\nIdentity point (<code>0x00</code>)\nTrait for supported modulus sizes which precomputes the …\nTag byte used by the <code>Elliptic-Curve-Point-to-Octet-String</code> …\nTrait for serializing a value to a SEC1 encoded curve …\nTrait for serializing a value to a SEC1 encoded curve …\nUncompressed curve point\nUncompressed point (<code>0x04</code>)\nEncoded elliptic curve point <em>without</em> point compression.\nSize of an uncompressed elliptic curve point.\nSize of an uncompressed point for the given elliptic curve …\nSize of an untagged point for given elliptic curve, i.e. …\nValidate that the given <code>EncodedPoint</code> represents the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the type this trait is impl’d on from an …\nParse a tag value from a byte\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this point compact?\nIs this point compressed?\nIs this point the identity point?\nCompute the expected total message length for a message …\nGet the tag octet needed to encode this set of <code>Coordinates</code>\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nSerialize this value as a SEC1 <code>EncodedPoint</code>, optionally …\nValidate that the given <code>EncodedPoint</code> is a valid public key …\nx-coordinate\nx-coordinate\nx-coordinate\ny-coordinate\nIs the y-coordinate odd?\nAffine point whose coordinates are represented by the …\nProjective point whose coordinates are represented by the …\nImplements the complete addition formula from …\nImplements the complete mixed addition formula from …\nImplements the exception-free point doubling formula from …\nSize of a Taproot Schnorr signature in bytes.\nAn extension trait that is automatically implemented for …\nSignature errors.\nTaproot Schnorr signature as defined in BIP340.\nTaproot Schnorr signature serialized as bytes.\nTaproot Schnorr signing key.\nTaproot Schnorr verifying key.\nBorrow the inner <code>AffinePoint</code> this type wraps.\nBorrow the secret <code>NonZeroScalar</code> value for this key.\nUpcast to an <code>RngCore</code> trait object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse signing key from big endian-encoded bytes.\nParse verifying key from big endian-encoded x-coordinate.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nGenerate a cryptographically random <code>SigningKey</code>.\nCompute Schnorr signature.\nCompute Schnorr signature.\nSerialize as bytes.\nSerialize as bytes.\nSerialize this signature as bytes.\nCompute Schnorr signature.\nGet the <code>VerifyingKey</code> that corresponds to this signing key.\nConvenience wrapper trait covering functionality of …\nSHA-224 hasher.\nSHA-256 hasher.\nCore block-level SHA-256 hasher with variable output size.\nSHA-384 hasher.\nSHA-512 hasher.\nCore block-level SHA-512 hasher with variable output size.\nSHA-512/224 hasher.\nSHA-512/256 hasher.\nProcess input data in a chained manner.\nCompute hash of <code>data</code>.\nRetrieve result and consume hasher instance.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new hasher instance.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nReset hasher instance to its initial state.\nProcess data, updating the internal state.\nAn <code>ethers-rs</code> internal crate.\nAn iterator over the variants of EthersCrate\nRepresents a generic Rust/Cargo project’s environment.\n“<code>&lt;self as kebab-case&gt;</code>”\nDetermines the crate paths to use by looking at the …\nReturns the <code>contract</code> crate’s <code>Path</code>.\nReturns the <code>core</code> crate’s <code>Path</code>.\n“::ethers::<code>&lt;self in ethers&gt;</code>”\n<code>&lt;ethers::*&gt;</code>\nReturns the <code>providers</code> crate’s <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe path on the file system, from an <code>ethers-rs</code> root …\nReturns an <code>EthersCrate</code>’s <code>Path</code> in the current project.\nReturns the <code>Path</code> in the current project.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether <code>crate_name</code> is the name of a file or …\nReturns whether the <code>crate</code> path identifier refers to the …\nCreates a new instance using the given manifest dir and …\nCreates a new instance using the the <code>CARGO_MANIFEST_DIR</code> …\n“<code>::&lt;self as snake_case&gt;</code>”\n<code>&lt;ethers_*&gt;</code>\nA marker trait used to indicate that an <code>RngCore</code> or …\nError type of random number generators\nTypes which may be filled with random data\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nGenerating random samples from probability distributions\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nConvenience re-export of common members\nGenerates a random value using the thread-local random …\nRandom number generators and adapters\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nSequence-related functionality\nRetrieve the lazily-initialized thread-local random number …\nFill self with random data\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nAll items in the provided weight collection are zero.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nA distribution of values of type <code>S</code> derived from the …\n<code>String</code> sampler\nTypes (distributions) that can be used to create a random …\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nA distribution to sample items uniformly from a slice.\nA generic random value distribution, implemented for many …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nSample values uniformly between two bounds.\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nAppend <code>len</code> random chars to <code>string</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Bernoulli</code> with the probability of success …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a distribution of values of ‘S’ by mapping the …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nCreate a new <code>Slice</code> instance which samples uniformly from …\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nGenerate a <code>String</code> of <code>len</code> random chars\nA distribution uniformly sampling numbers within a given …\nUpdate a subset of weights, without changing the number of …\nWeighted index sampling\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nAll items in the provided weight collection are zero.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCreate a distribution of values of ‘S’ by mapping the …\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nA random number generator that retrieves randomness from …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nWrappers / adapters forming RNGs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock random number generator\n<code>ReadRng</code> error type\nAn RNG that reads random bytes straight from any type …\nA wrapper around any PRNG that implements <code>BlockRngCore</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadRng</code> from a <code>Read</code>.\nCreate a new <code>ReseedingRng</code> from an existing PRNG, combined …\nReseed the internal PRNG.\nA simple implementation of <code>RngCore</code> for testing purposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>StepRng</code>, yielding an arithmetic sequence starting …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn iterator over multiple slice elements.\nExtension trait on slices, providing random mutation and …\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nReturns the argument unchanged.\nLow-level API for sampling indices\nCalls <code>U::from(self)</code>.\nShuffle a slice in place, but exit early.\nShuffle a mutable slice in place.\nA vector of indices.\nReturn type of <code>IndexVec::into_iter</code>.\nReturn type of <code>IndexVec::iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the value at the given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over the indices as a sequence of …\nReturn result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …\nReturns <code>true</code> if the length is 0.\nIterate over the indices as a sequence of <code>usize</code> values\nReturns the number of indices\nRandomly sample exactly <code>amount</code> distinct indices from …\nRandomly sample exactly <code>amount</code> distinct indices from …\nOpcode 0x1 - Addition operation\nOpcode 0x8 - Modulo addition operation\nOpcode 0x30 - Get address of currently executing account\nOpcode 0x16 - Bitwise AND operation\nSerde-friendly <code>AccountDiff</code> shadow.\nAction\nAn external action type.\nAn address type\nAn Ethereum Address\nA type that can either be an <code>Address</code> or <code>Bytes</code>.\nA vector of values\nA vector of values\nOpcode 0x31 - Get address of currently executing account\nOpcode 0x48 - Get the base fee\nOpcode 0x40 - Get the hash of one of the 256 most recent …\nOpcode 0x1A - Retrieve single byte from word\n<code>BadInstructions</code> is returned when given instruction is not …\n<code>BadJumpDestination</code> is returned when execution tried to move\nThe block type returned from RPC calls.\nBlock\nA block hash or block number.\nA block number or tag.\nBindings for block overrides in <code>debug_traceCall</code> options\nAd-Hoc trace API type\nBloom hash type with 256 bytes (2048 bits) size.\nA new value has been set.\nWhen builtin contract failed on input data\nbuilt-in tracer\nbuilt-in tracer\nWrapper type around Bytes to deserialize/serialize “0x”…\nA bytes type\nOpcode 0xF1 - Message-call into an account\nOpcode 0xF2 - Message-call into this account with …\nOpcode 0x37 - Copy input data in current environment to …\nOpcode 0x35 - Get input data of current environment\nOpcode 0x36 - Get size of input data in current environment\nOpcode 0x33 - Get caller address\nOpcode 0x34 - Get deposited value by the …\nOpcode 0x46 - Get the chain ID\nOpcode 0x39 - Copy code running in current environment to …\nOpcode 0x38 - Get size of code running in current …\nOpcode 0x41 - Get the block’s beneficiary address\nOpcode 0xF0 - Create a new account with associated code\nOpcode 0xF5 - Create a new account with associated code at …\nCall response\nCall\nCall\nContract call.\nCall\nCall code\nCall Result\nCall type.\nAn Ethereum EIP-155 chain.\nAn iterator over the variants of Chain\nValue changed.\nAux type for Diff::Changed.\nCreate response\nCreate\nCreate\nContract creation.\nCreate Result\nOpcode 0xF4 - Message-call into this account with an …\nOpcode 0x44 - Get the block’s difficulty\nOpcode 0x4 - Integer division operation\nOpcode 0x80 - Duplicate 1st stack item\nOpcode 0x89 - Duplicate 10th stack item\nOpcode 0x8A - Duplicate 11th stack item\nOpcode 0x8B - Duplicate 12th stack item\nOpcode 0x8C - Duplicate 13th stack item\nOpcode 0x8D - Duplicate 14th stack item\nOpcode 0x8E - Duplicate 15th stack item\nOpcode 0x8F - Duplicate 16th stack item\nOpcode 0x81 - Duplicate 2nd stack item\nOpcode 0x82 - Duplicate 3rd stack item\nOpcode 0x83 - Duplicate 4th stack item\nOpcode 0x84 - Duplicate 5th stack item\nOpcode 0x85 - Duplicate 6th stack item\nOpcode 0x86 - Duplicate 7th stack item\nOpcode 0x87 - Duplicate 8th stack item\nOpcode 0x88 - Duplicate 9th stack item\nMessage bytes\nWhen parsing a signature from string to hex\nDelegate call\nA value has been removed.\nSerde-friendly <code>Diff</code> shadow.\nOpcode 0x14 - Equality comparison\nOpcode 0xA - Exponential operation\nOpcode 0x3C - Copy an account’s code to memory\nOpcode 0x3F - Get hash of an account’s code\nOpcode 0x3B - Get size of an account’s code\nEarliest block (genesis)\nParameters for sending a transaction\nAn EIP-2930 transaction is a legacy transaction including …\nEmptyStep (AuthorityRound)\nHelper to classify the executed instruction\nExternal (attributed as part of an external protocol)\nFilter for\nRepresents the target range of blocks for the filter\nSupport for matching Filters\nFinalized block accepted as canonical\nOpcode 0x5A - Get the amount of available gas, including …\nOpcode 0x45 - Get the block’s gas limit\nOpcode 0x3A - Get price of gas in current environment\nOpcode 0x11 - Greater-than comparison\nAvailable built-in tracers\nAvailable tracers\nBindings for additional <code>debug_traceCall</code> options\nBindings for additional <code>debug_traceTransaction</code> options\nFixed-size uninterpreted hash type with 16 bytes (128 …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nA block hash\nMessage hash\nLittle-endian 256-bit signed integer.\nOpcode 0xFE - Designated invalid instruction\nOpcode 0x15 - Simple not operator\nError that occurs when the number is too large or too …\nReturned on evm internal error. Should never be ignored …\nWhen invalid code was attempted to deploy\nError that occurs when an invalid digit is encountered …\nInvalid length, secp256k1 signatures are 65 bytes\nWhen the code walks into a subroutine, that is not allowed\nWhen client is synced to highest block, eth_syncing with …\nWhen client is still syncing past blocks we get IsSyncing …\nOpcode 0x56 - Alter the program counter\nOpcode 0x5B - Mark a valid destination for jumps\nOpcode 0x57 - Conditionally alter the program counter\ncustom JS tracer\ncustom JS tracer\nInternal error during signature recovery\nThe instruction is recognized\nOpcode 0xA0 - Append log record with one topic\nOpcode 0xA1 - Append log record with two topics\nOpcode 0xA2 - Append log record with three topics\nOpcode 0xA3 - Append log record with four topics\nOpcode 0xA4 - Append log record with five topics\nOpcode 0x10 - Less-than comparison\nLatest block\nA log produced by a transaction.\nMaximum value.\nMinimum value.\nOpcode 0x51 - Load word from memory\nOpcode 0x6 - Modulo remainder operation\nOpcode 0x59 - Get the size of active memory in bytes\nOpcode 0x52 - Save word to memory\nOpcode 0x53 - Save byte to memory\nOpcode 0x2 - Multiplication operation\nOpcode 0x9 - Modulo multiplication operation\nA diff of some chunk of memory.\nWhen execution tries to modify the state in static context\nOpcode 0x19 - Bitwise NOT operation\nOpcode 0x43 - Get the block’s number\nAn ENS Name (format does not get checked)\nENS name or Ethereum Address. Not RLP encoded/serialized …\nLess than zero.\nNone\nNone\nA block number\nBlock by number from canon chain\nOpcode 0x17 - Bitwise OR operation\nOpcode 0x32 - Get execution origination address\nAn EVM Opcode.\nA type that is supposed to capture additional fields that …\nContract tried to access past the return data buffer.\n<code>OutOfGas</code> is returned when transaction execution runs out …\nWhen execution would exceed defined Stack Limit\nWhen execution would exceed defined subroutine Stack Limit\nOpcode 0x58 - Get the value of the program counter prior …\nOpcode 0x50 - Remove item from stack\nOpcode 0x5F - Place the constant value 0 on stack\nOpcode 0x60 - Place 1 byte item on stack\nOpcode 0x69 - Place 10 byte item on stack\nOpcode 0x6A - Place 11 byte item on stack\nOpcode 0x6B - Place 12 byte item on stack\nOpcode 0x6C - Place 13 byte item on stack\nOpcode 0x6D - Place 14 byte item on stack\nOpcode 0x6E - Place 15 byte item on stack\nOpcode 0x6F - Place 16 byte item on stack\nOpcode 0x70 - Place 17 byte item on stack\nOpcode 0x71 - Place 18 byte item on stack\nOpcode 0x72 - Place 19 byte item on stack\nOpcode 0x61 - Place 2 byte item on stack\nOpcode 0x73 - Place 20 byte item on stack\nOpcode 0x74 - Place 21 byte item on stack\nOpcode 0x75 - Place 22 byte item on stack\nOpcode 0x76 - Place 23 byte item on stack\nOpcode 0x77 - Place 24 byte item on stack\nOpcode 0x78 - Place 25 byte item on stack\nOpcode 0x79 - Place 26 byte item on stack\nOpcode 0x7A - Place 27 byte item on stack\nOpcode 0x7B - Place 28 byte item on stack\nOpcode 0x7C - Place 29 byte item on stack\nOpcode 0x62 - Place 3 byte item on stack\nOpcode 0x7D - Place 30 byte item on stack\nOpcode 0x7E - Place 31 byte item on stack\nOpcode 0x7F - Place 32 byte item on stack\nOpcode 0x63 - Place 4 byte item on stack\nOpcode 0x64 - Place 5 byte item on stack\nOpcode 0x65 - Place 6 byte item on stack\nOpcode 0x66 - Place 7 byte item on stack\nOpcode 0x67 - Place 8 byte item on stack\nOpcode 0x68 - Place 9 byte item on stack\nThe error type that is returned when parsing a 256-bit …\nA path type\nA type that can either be a <code>Path</code> or a <code>String</code>\nPending block (not yet part of the blockchain)\nGreater than or equal to zero.\nOpcode 0xF3 - Halt execution returning output data\nOpcode 0x3E - Copy output data from the previous call to …\nOpcode 0x3D - Get size of output data from the previous …\nOpcode 0xFD - Halt execution reverting state changes but …\nError in recovering public key from signature\nRecovery message data.\nResponse\nExecution has been reverted with REVERT instruction.\nReward action\nReward\nA block reward.\nReward type.\nOpcode 0x1D - Arithmetic (signed) right shift operation\nOpcode 0x5 - Signed integer division operation (truncated)\nOpcode 0x47 - Get balance of currently executing account\nOpcode 0xFF - Halt execution and register account for …\nOpcode 0x13 - Signed greater-than comparison\nOpcode 0x20 - Compute Keccak-256 hash\nOpcode 0x1B - Left shift operation\nOpcode 0x1C - Logical right shift operation\nOpcode 0xB - Extend length of two’s complement signed …\nOpcode 0x54 - Load word from storage\nOpcode 0x12 - Signed less-than comparison\nOpcode 0x7 - Signed modulo remainder operation\nOpcode 0x55 - Save word to storage\nOpcode 0xFA - Static message-call into an account\nOpcode 0x0 - Halts execution\nOpcode 0x3 - Subtraction operation\nOpcode 0x90 - Exchange 1st and 2nd stack items\nOpcode 0x99 - Exchange 1st and 11th stack items\nOpcode 0x9A - Exchange 1st and 12th stack items\nOpcode 0x9B - Exchange 1st and 13th stack items\nOpcode 0x9C - Exchange 1st and 14th stack items\nOpcode 0x9D - Exchange 1st and 15th stack items\nOpcode 0x9E - Exchange 1st and 16th stack items\nOpcode 0x9F - Exchange 1st and 17th stack items\nOpcode 0x91 - Exchange 1st and 3rd stack items\nOpcode 0x92 - Exchange 1st and 4th stack items\nOpcode 0x93 - Exchange 1st and 5th stack items\nOpcode 0x94 - Exchange 1st and 6th stack items\nOpcode 0x95 - Exchange 1st and 7th stack items\nOpcode 0x96 - Exchange 1st and 8th stack items\nOpcode 0x97 - Exchange 1st and 9th stack items\nOpcode 0x98 - Exchange 1st and 10th stack items\nSafe head block\nNo change.\nEnum to represent the sign of a 256-bit signed integer.\nAn ECDSA signature\nAn error involving a signature.\n<code>StackUnderflow</code> when there is not enough stack elements to …\nSerde-friendly <code>StateDiff</code> shadow.\nState Difference\nStatic call\nA diff of some storage value.\nA string type\nWhen there is not enough subroutine stack elements to …\nSuicide\nSuicide\nContract suicide.\nRepresents the sync status of the node\nStructure used in <code>eth_syncing</code> RPC\nOpcode 0x42 - Get the block’s timestamp\nError returned by <code>Block::time</code>.\nTimestamp is too large for <code>DateTime&lt;Utc&gt;</code>.\nTimestamp is zero.\nA single topic\nTrace-Filtering API trace type\nTransaction Trace\nTrace evm errors.\nTrace filter\nDescription of the type of trace to make\nDetails of a signed transaction\n“Receipt” of an executed transaction: details of its …\nParameters for sending a transaction\nTrace\nImplements <code>TryFrom&lt;Primitive&gt;</code> for a <code>#[repr(Primitive)] enum</code>…\nFixed-size uninterpreted hash type with 32 bytes (256 …\nTransaction Pool Content\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nLittle-endian large integer type 128-bit unsigned integer.\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nLittle-endian large integer type Unsigned 64-bit integer.\nA wrapper for <code>u8</code>\nUncle\nThe instruction is not recognized\nA record of an executed VM operation.\nA record of the execution of a single VM operation.\nA record of a full VM trace for a CALL/CREATE.\nA single value\nA single value\nUnion type for representing a single value or a vector of …\nThrown when signature verification failed (i.e. when the …\nVirtual Machine Execution Trace\nWasm error\nA validator withdrawal from the consensus layer. See …\nOpcode 0x18 - Bitwise XOR operation\nComputes the absolute value of <code>self</code>.\nSets the <code>access_list</code> field in the transaction to the …\nAction\nAction\nAction Type\nAction Type\nSets the inner filter object\nH160. the contract that emitted the log\nAddress\nAssigned address\nAddress.\nTarget address for withdrawn ether\nReturns the BloomFilter for the given address\nSets after offset\nValue of withdrawal (in wei)\nMaps Address(a) to Some(a) and Name to None.\nReturns the sign character.\nConversion to i128 with overflow checking.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nMaps Name(n) to Some(n) and Address to None.\nReturns the numeric block number if explicitly set\nConversion to u128 with overflow checking.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nMiner/author’s address. None if pending.\nAuthor’s address.\nReturns the chain’s average blocktime, if applicable.\nBalance.\nAccount balance.\nBase fee per unit of gas (if past London)\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nBlob gas used (if past Cancun)\nBlock hash. None when pending.\nHash of the block this transaction was included within.\nBlock Hash\nBlock Hash\nBlock number. None when pending.\nNumber of the block this transaction was included within.\nBlock Number\nBlock Number\nFilter block options, specifying on which blocks the …\nReturn specific byte.\nThe type of the call.\nSets the <code>chain_id</code> field in the transaction to the provided …\nSets the <code>chain_id</code> field in the transaction to the provided …\nChain ID (None for mainnet)\nChain ID (None for mainnet)\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nCreates an I256 from an absolute value and a negative …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nCode\nAccount code.\nThe code to be executed.\nContract address created, or <code>None</code> if not a deployment.\nThe gas cost for this instruction.\nSets amount of traces to display\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCumulative gas used within the block after this was …\nSets the <code>data</code> field in the transaction to the provided …\nSets the <code>data</code> field in the transaction to the provided …\nThe compiled code of a contract OR the first 4 bytes of …\nThe compiled code of a contract OR the first 4 bytes of …\nData\nThe changed data.\nDecodes the given RLP into a transaction request, ignoring …\nDecodes fields of the request starting at the RLP offset …\nDecodes the given RLP into a transaction, attempting to …\nDecodes the given RLP into a transaction, attempting to …\nDecodes the given RLP into a transaction, attempting to …\nDecodes RLP into a transaction.\nDeserialized this type into another container type\nDifficulty\nCalculates the quotient of Euclidean division of <code>self</code> by …\nThe price paid post-execution by the transaction (i.e. …\nError, See also <code>TraceError</code>\nError\nReturns the chain’s blockchain explorer’s API key, …\nReturns the chain’s blockchain explorer’s API key …\nReturns the chain’s blockchain explorer and its API …\nGiven the event signature in string form, it hashes it and …\nHashes all event signatures and sets them as array to …\nInformation concerning the execution of the operation.\nExcess blob gas (if past Cancun)\nCreate <code>10**n</code> as this type.\nExtra data\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSender address or ENS name\nSender\naddress of the sender.\nSender address or ENS name\nSender\nSender\nPrevious value.\nSets from address\nSets From block\nConvert from a decimal string.\nConvert from a hexadecimal string.\nCoerces an unsigned integer into a signed one. If the …\nCreates a new <code>Bytes</code> from a static slice.\nConverts the given byte into the corresponding error …\nSets the <code>gas</code> field in the transaction to the provided value\nSets the <code>gas</code> field in the transaction to the provided value\nSupplied gas (None for sensible default)\nGas amount\nSupplied gas (None for sensible default)\nGas amount\nGas\nGas\nGas Limit\nSets the <code>gas_price</code> field in the transaction to the …\nGas price (None for sensible default)\nGas Price, null for Type 2 transactions\nGas Price\nThe target gas usage as per EIP-1559\nGas used by this transaction alone.\nGas Used\nGas used\nGas used\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the deserialized value of the field, if it exists\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the numeric value of the <code>toBlock</code> field\nReturns the deserialized value of the field, if it exists. …\nReturns true if at least one topic is set\nThe transaction’s hash\nHash of the block\nMonotonically increasing identifier issued by consensus …\nInitialization code\nInput data\nInput data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this block that only holds transaction hashes …\nReturns the signed integer as a unsigned integer. If the …\nSplits a I256 into its absolute value and negative flag.\nReturns <code>true</code> if it’s “earliest”\nReturns <code>true</code> if it’s “finalized”\nReturns <code>true</code> if it’s “latest”\nReturns whether the chain implements EIP-1559 (with the …\nReturns whether the sign is negative.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if a numeric block number is set\nReturns <code>true</code> if it’s “pending”\nReturns whether the sign is positive.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if it’s “safe”\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nWhich key in storage is changed.\nReturns the number of leading zeros in the binary …\nInteger of the log index position in the block. None if it…\nLog Type\nLogs generated within this transaction.\nLogs bloom\nLogs bloom\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nReturns <code>true</code> if the bloom contains the address\nReturns <code>true</code> if the bloom matches the topics\nSets the <code>max_fee_per_gas</code> field in the transaction to the …\nRepresents the maximum amount that a user is willing to …\nRepresents the maximum amount that a user is willing to …\nSets the <code>max_priority_fee_per_gas</code> field in the transaction …\nRepresents the maximum tx fee that will go to the miner as …\nRepresents the maximum tx fee that will go to the miner as …\nThe maximum value which can be inhabited by this type.\nIf altered, the memory delta.\nref …\nThe minimum value which can be inhabited by this type.\nMinus one (multiplicative inverse) of this type.\nMix Hash\nCreates an empty transaction request with all fields left …\nCreates an empty transaction request with all fields left …\nCreates a new empty <code>Bytes</code>.\nThe next block’s base fee, it is a function of parent …\nSets the <code>nonce</code> field in the transaction to the provided …\nSets the <code>nonce</code> field in the transaction to the provided …\nTransaction nonce (None for next available nonce)\nThe transaction’s nonce\nTransaction nonce (None for next available nonce)\nNonce\nAccount nonce.\nBlock number. None if pending.\nOffset into memory the change begins.\noldestBlock is returned as an unsigned integer up to geth …\nOne (multiplicative identity) of this type.\nThe opcode of the executed instruction\nThe operations executed.\nCaptures unknown fields such as additional fields used by …\nCaptures unknown fields such as additional fields used by …\nCaptures unknown fields such as additional fields used by …\nOutput bytes\nOutput Bytes\nComputes the absolute value of <code>self</code>.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nCreates an I256 from a sign and an absolute value. Returns …\nCalculates <code>self</code> * <code>rhs</code>\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nShifts self left by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nCalculates <code>self</code> - <code>rhs</code>\nParent beacon block root (if past Cancun)\nHash of the parent\nConvenience function for sending a new payment transaction …\nThe program counter.\npending tx\npending tx\nnumber of pending tx\nRaises self to the power of <code>exp</code>, using exponentiation by …\nThe stack item placed, if any.\nqueued tx\nqueued tx\nnumber of queued tx\nECDSA signature r\nR value\nReads the contents at path, or simply returns the string.\nTransactions receipts root hash\nRecovers the Ethereum address which was used to sign the …\nRecover the sender of the tx from signature\nRecover the sender of the tx from signature and set the …\nRecovers the ethereum address which was used to sign a …\nRetrieve the recovery ID.\nRefund address.\nCalculates the least nonnegative remainder of …\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nTrue when the log was removed, due to a chain …\nReplace None values - aka wildcards - for the log input …\nResult\nResult\nAn (optional) array of effective priority fee per gas data …\nReward type.\nGets the transaction’s RLP encoding, prepared with the …\nGets the unsigned transaction’s RLP encoding\nProduces the RLP encoding of the transaction with the …\nProduces the RLP encoding of the transaction with the …\nProduces the RLP encoding of the transaction with the …\nGets the unsigned transaction’s RLP encoding\nState root. Only present before activation of EIP-658\nECDSA signature s\nS Value\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSeal fields\nSets the inner filter object\nSome convenient serde helpers\nHashes the transaction’s data with the provided chain id\nReturns the sign of self.\nReturns a number representing sign of <code>self</code>.\nSize in bytes\nProvides types and methods for constructing an <code>eth_call</code> …\nState Difference\nState root hash\nStatus: either 1 (success) or 0 (failure). Only present …\nAccount storage.\nThe altered storage value, if any.\nSubordinate trace of the CALL/CREATE if applicable.\nSubtraces\nSubtraces\nReturns whether the chain supports the <code>PUSH0</code> opcode or not.\nParse <code>Self::timestamp</code> into a <code>DateTime&lt;Utc&gt;</code>.\nTimestamp\nSets the <code>to</code> field in the transaction to the provided value\nSets the <code>to</code> field in the transaction to the provided value\nRecipient address (None for contract creation)\nRecipient (None when contract creation)\nRecipient address (None for contract creation)\nRecipient (None when contract creation)\nRecipient\nCurrent value.\nSets to address\nWrite to the slice in big-endian format.\nSets to block\nWrite to the slice in little-endian format.\nCopies and serializes <code>self</code> into a new <code>Vec</code> with the …\nSets topic0 (the event name for non-anonymous events)\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nReturns an iterator over all existing topics\ntopics: Array of 0 to 4 32 Bytes of indexed log arguments. …\nTopics\nReturns the BloomFilter for the given topics\nTotal difficulty\nTransaction Trace\nTrace address\nTrace address\ntracerConfig is slated for Geth v1.11.0 See …\nReturns the number of leading zeros in the binary …\nTransaction hash.\nTransaction Hash\nTransaction hash\nTransaction Hash\nTransaction Index. None when pending.\nIndex within the block.\nTransaction Index\nInteger of the transactions index position log was created …\nTransaction position\nTransaction type, Some(2) for EIP-1559 transaction, …\nTransaction type, Some(1) for AccessList transaction, None …\nTransactions\nTransactions root hash\nParses a raw signature which is expected to be 65 bytes …\nCompute the two’s complement of this number.\nConvert a floating point value to its nearest f64 integer.\nUncles’ hashes\nHash of the uncles\nComputes the absolute value of <code>self</code> without any wrapping …\nThe total gas used.\nECDSA recovery id\nV value\nWhat the value has been changed to.\nIndex of validator associated with withdrawal\nSets the <code>value</code> field in the transaction to the provided …\nSets the <code>value</code> field in the transaction to the provided …\nTransferred value (None for no transfer)\nTransferred value\nTransferred value (None for no transfer)\nTransferred value\nTransferred Value\nValue\nReward amount.\nVerifies that signature on <code>message</code> was produced by <code>address</code>\nVirtual Machine Execution Trace\nSets the <code>access_list</code> field in the transaction (converts …\nWithdrawals (if past Shanghai)\nWithdrawals root hash (if past Shanghai)\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nZero (additive identity) of this type.\nVarious block number representations, See …\nHelper type to parse both <code>u64</code> and <code>U256</code>\nHelper type to deserialize sequence of numbers\nHelper type to parse numeric strings, <code>u64</code> and <code>U256</code>\nHelper type to parse numeric strings, <code>u64</code> and <code>U256</code>\nDeserializes a number from hex or int\nDeserializes a number from hex or int, but optionally\nDeserializes single integer params: <code>1, [1], [&quot;0x01&quot;]</code>\nSupports parsing block number as strings\nSupports parsing ethereum-types U64\nSupports parsing ethereum-types <code>Option&lt;U64&gt;</code>\nSupports parsing numbers as strings\nSupports parsing numbers as strings\nSupports parsing u64\nSupports parsing u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFollowing the spec the block parameter is either:\nSame as <code>lenient_block_number</code> but requires to be <code>[num; 1]</code>\nThe state elements to override for a particular account.\nState Diff\nState override\nA wrapper type that holds a complete state override set.\nWraps a map from storage slot to the overriden value.\nReturns a state override set with a single element setting …\nAccount balance\nReturns a state override set with a single element setting …\nAccount code\nReturns a state override set with a single element setting …\nAccount nonce\nReturns an empty state override set.\nReturns a state override set with a single element setting …\nAccount storage\nTransaction types\nTransaction types\nWhen decoding a transaction request from RLP\nAn error involving an EIP1559 transaction request.\nParameters for sending a transaction\nWhen recovering the address from a signature\nChain ID (None for mainnet)\nThe compiled code of a contract OR the first 4 bytes of …\nReturns the argument unchanged.\nSender address or ENS name\nSupplied gas (None for sensible default)\nCalls <code>U::from(self)</code>.\nRepresents the maximum amount that a user is willing to …\nRepresents the maximum tx fee that will go to the miner as …\nTransaction nonce (None for next available nonce)\nRecipient address (None for contract creation)\nTransferred value (None for no transfer)\nWhen decoding a signed Eip1559 transaction\nWhen decoding a signed Eip2930 transaction\nWhen decoding a signed legacy transaction\nMissing transaction payload when decoding from RLP\nMissing transaction type when decoding from RLP\nError decoding the transaction type from the transaction’…\nThe TypedTransaction enum represents all Ethereum …\nAn error involving a typed transaction request.\nDecodes a signed TypedTransaction from a rlp encoded byte …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the transaction’s data with the included …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax cost of the transaction\nHashes the transaction’s data. Does not double-RLP encode\nAccess list\nAccess list item\nWhen decoding a transaction request from RLP\nAn error involving an EIP2930 transaction request.\nAn EIP-2930 transaction is a legacy transaction including …\nWhen recovering the address from a signature\nAccessed address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccessed storage keys\nEip712 Domain attributes used in determining the domain …\nPre-computed value of the following expression:\nPre-computed value of the following expression:\nHelper methods for computing the typed data hash used in …\nRepresents the name and type pair\nAn EIP-712 error.\nUser defined error type;\nRepresents the EIP-712 typed data object.\nCustom types for <code>TypedData</code>\nThe EIP-155 chain id. The user-agent should refuse signing …\nReturns the current domain. The domain depends on the …\nSigning domain metadata. The signing domain is the …\nDefault implementation of the domain separator;\nEncodes an object by encoding and concatenating each of …\nWhen using the derive macro, this is the primary method …\nHash a typed message according to EIP-712. The returned …\nParse token into Eip712 compliant ABI encoding\nEncode a single field.\nEncodes the type of an object by encoding a comma …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes an object\nReturns the hashed encoded type of <code>primary_type</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert hash map of field names and types into a type hash …\nThe message to be signed.\nThe user readable name of signing domain, i.e. the name of …\nThe type of the message.\nA disambiguating salt for the protocol. This can be used …\nHash of the struct, according to EIP-712 definition of …\nThis method is used for calculating the hash of the type …\nThe custom types used by this message.\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nWhen decoding a transaction request from RLP\nWhen recovering the address from a signature\nAn error involving a transaction request.\nParameters for sending a transaction\nChain ID (None for mainnet)\nThe compiled code of a contract OR the first 4 bytes of …\nReturns the argument unchanged.\nSender address or ENS name\nSupplied gas (None for sensible default)\nGas price (None for sensible default)\nCalls <code>U::from(self)</code>.\nTransaction nonce (None for next available nonce)\nRecipient address (None for contract creation)\nTransferred value (None for no transfer)\nDetails of a signed transaction\n“Receipt” of an executed transaction: details of its …\nBlock hash. None when pending.\nHash of the block this transaction was included within.\nBlock number. None when pending.\nNumber of the block this transaction was included within.\nContract address created, or <code>None</code> if not a deployment.\nCumulative gas used within the block after this was …\nThe price paid post-execution by the transaction (i.e. …\nSender\naddress of the sender.\nGas amount\nGas Price, null for Type 2 transactions\nGas used by this transaction alone.\nThe transaction’s hash\nInput data\nLogs generated within this transaction.\nLogs bloom\nRepresents the maximum amount that a user is willing to …\nRepresents the maximum tx fee that will go to the miner as …\nThe transaction’s nonce\nCaptures unknown fields such as additional fields used by …\nCaptures unknown fields such as additional fields used by …\nECDSA signature r\nState root. Only present before activation of EIP-658\nECDSA signature s\nStatus: either 1 (success) or 0 (failure). Only present …\nRecipient (None when contract creation)\nTransaction hash.\nTransaction Index. None when pending.\nIndex within the block.\nTransaction type, Some(2) for EIP-1559 transaction, …\nTransaction type, Some(1) for AccessList transaction, None …\nECDSA recovery id\nTransferred value\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nRepresents a node’s chain configuration.\nConsensus configuration for Clique.\nThe default max priority fee per gas, used in case the …\nThe number of blocks from the past for which the fee …\nThe threshold for base fee below which we use the default …\nThe default percentile of gas premiums that are fetched …\nThe threshold max change/difference (in %) at which we …\nEmpty consensus configuration for proof-of-work networks.\nEther is equivalent to 1e18 wei.\nBuilder for launching <code>ganache-cli</code>.\nA ganache CLI instance. Will close the instance when …\nThis represents the chain configuration, specifying the …\nAn account in the state of the genesis block.\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\nGwei is equivalent to 1e9 wei.\nKwei is equivalent to 1e3 wei.\nMwei is equivalent to 1e6 wei.\nOther less frequent unit sizes, equivalent to 1e{0} wei.\nThis enum holds the numeric types that a possible to be …\nPwei is equivalent to 1e15 wei.\nTwei is equivalent to 1e12 wei.\nCommon Ethereum unit types.\n1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei\nWei is equivalent to 1 wei.\nReturns the addresses used to instantiate this instance\nReturns the addresses used to instantiate this instance\nThe initial state of the genesis block.\nAdds an argument to pass to the <code>ganache-cli</code>.\nAdds an argument to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>ganache-cli</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nThe Arrow Glacier hard fork block.\nCreates a Geth builder which will execute <code>geth</code> at the …\nCreates an Anvil builder which will execute <code>anvil</code> at the …\nSets the port for authenticated RPC connections.\nThe base fee\nThe Berlin hard fork block.\nSets the block-time which will be used when the <code>ganache-cli</code>…\nSets the block-time which will be used when the <code>geth-cli</code> …\nSets the block-time in seconds which will be used when the …\nThe Byzantium hard fork block.\nCancun switch time.\nReturns the chain of the anvil instance\nSets the chain id for the geth instance.\nSets the chain_id the <code>anvil</code> instance will use.\nThe network’s chain ID.\nClique parameters.\nReturns the private key used to configure clique on this …\nThe genesis header coinbase address.\nThe fork configuration for this network.\nThe Constantinople hard fork block.\nThe DAO fork switch block (None = no fork).\nWhether or not the node supports the DAO hard-fork.\nReturns the path to this instances’ data directory\nSets the data directory for geth.\nThe genesis header difficulty.\nDisable discovery for the geth instance.\nThe EIP-150 hard fork block (None = no fork).\nThe EIP-150 hard fork hash.\nThe default EIP-1559 fee estimator which is based on the …\nThe EIP-155 hard fork block.\nThe EIP-158 hard fork block.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nEpoch length to reset votes and checkpoints.\nEthash parameters.\nThe genesis header extra data.\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns a bytes32 string representation of text. If the …\nFormat the output for the user which prefer to see values …\nDivides the provided amount with 10^{units} provided.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a Bytes value into a H256, accepting inputs that …\nDeserializes the input into an Option&lt;HashMap&lt;H256, …\nThe genesis header gas limit.\nThe block gas gasUsed\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the geth instance.\nThe address for an Ethereum contract is deterministically …\nReturns the CREATE2 address of a smart contract as …\nReturns the CREATE2 address of a smart contract as …\nThe Gray Glacier hard fork block.\nHash a message according to EIP-191 (version <code>0x01</code>).\nThe homestead switch block (None = no fork, 0 = already …\nCalculate the function selector as per the contract ABI …\nAllow geth to unlock accounts when rpc apis are open.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path to this instances’ IPC socket\nManually sets the IPC path for the socket manually.\nReturns whether the node is launched in Clique consensus …\nThe Istanbul hard fork block.\nCompute the Keccak-256 hash of input bytes.\nReturns the private keys used to instantiate this instance\nReturns the private keys used to instantiate this instance\nThe London hard fork block.\nVirtual fork after the merge to use as a network splitter.\nThe genesis header mix hash.\nSets the mnemonic which will be used when the <code>ganache-cli</code> …\nSets the mnemonic which will be used when the <code>anvil</code> …\nMoonbeam utils Moonbeam utilities\nThe Muir Glacier hard fork block.\nCreates an empty Ganache builder. The default port is …\nCreates an empty Geth builder.\nCreates a chain config using the given chain id. and funds …\nCreates an empty Anvil builder. The default port is 8545. …\nThe genesis header nonce.\nThe block number\nReturns the p2p port of this instance\nSets the port which will be used for incoming p2p …\nThe block parent hash\nReturns the decoded string represented by the bytes32 …\nParses an EIP-1191 checksum address.\nConverts the input to a U256 and converts from Ether to …\nMultiplies the provided amount with 10^{units} provided.\nSets the <code>path</code> to the <code>geth</code> executable\nSets the <code>path</code> to the <code>anvil</code> cli\nNumber of seconds between blocks to enforce.\nThe Petersburg hard fork block.\nReturns the port of this instance\nReturns the port of this instance\nSets the port which will be used when the <code>ganache-cli</code> …\nReturns the port of this instance\nSets the port which will be used when the <code>geth-cli</code> …\nSets the port which will be used when the <code>anvil</code> instance …\nConverts an public key, in compressed or uncompressed form …\nConvert a raw, uncompressed public key to an address.\nConverts a K256 SigningKey to an Ethereum Address\nSerialize a type.\nSets the Clique Private Key to the <code>geth</code> executable, which …\nShanghai switch time.\nConsumes the builder and spawns <code>ganache-cli</code>.\nConsumes the builder and spawns <code>geth</code>.\nConsumes the builder and spawns <code>anvil</code>.\nSets the startup timeout which will be used when the …\nTakes the stderr contained in the child process.\nTotal difficulty reached that triggers the merge consensus …\nA flag specifying that the network already passed the …\nSets the timeout which will be used when the <code>anvil</code> …\nThe genesis header timestamp.\nEncodes an Ethereum address to its EIP-55 checksum.\nBlocks until geth adds the specified peer, using 20s as …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nRepresents a JSON array.\nRepresents a JSON boolean.\nA structure that deserializes JSON into Rust values.\nContains the error value\nThis type represents all possible errors that can occur …\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nA structure for serializing Rust values into JSON.\nIterator that deserializes a stream into multiple JSON …\nRepresents a JSON string.\nRepresents any valid JSON value.\nMoves all elements from other into self, leaving other …\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Number</code> is an integer, represent it as i128 if …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Number</code> is an integer, represent it as u128 if …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nReturns the number of bytes so far deserialized into a …\nCategorizes the cause of this error.\nClears the map, removing all values.\nOne-based column number at which the error was detected.\nReturns true if the map contains a value for the specified …\nDeserialize JSON data to a Rust data structure.\nParses a JSON string as bytes. Note that this function …\nParses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …\nParses a newtype struct as the underlying value.\nParses a <code>null</code> as a None, and any other values as a …\nParse arbitrarily deep JSON structures without any …\nThe <code>Deserializer::end</code> method should be called after a …\nGets the given key’s corresponding entry in the map for …\nWhen serializing or deserializing JSON goes wrong.\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert boolean to <code>Value::Bool</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nConverts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …\nConverts an <code>i128</code> to a <code>Number</code>. Numbers smaller than …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nCreates a JSON deserializer from an <code>io::Read</code>.\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nCreates a JSON deserializer from a <code>&amp;[u8]</code>.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nCreates a JSON deserializer from a <code>&amp;str</code>.\nConverts a <code>u128</code> to a <code>Number</code>. Numbers greater than u64::MAX …\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nReturns a reference to the value corresponding to the key.\nIndex into a JSON array or map. A string index can be used …\nReturns the key-value pair matching the given key.\nReturns a mutable reference to the value corresponding to …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Writer</code> from the <code>Serializer</code>.\nTurn a JSON deserializer into an iterator over values of …\nGets an iterator over the values of the map.\nThe kind reported by the underlying standard library I/O …\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if this error was caused by input data that …\nReturns true if the map contains no elements.\nReturns true if this error was caused by prematurely …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if this error was caused by a failure to read …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if this error was caused by input that was not\nReturns true if the <code>Value</code> is an integer between zero and …\nReturns true if the <code>Number</code> is an integer between zero and …\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nOne-based line number at which the error was detected.\nA map of String to serde_json::Value.\nCreate a JSON deserializer from one of the possible …\nCreate a JSON stream deserializer from one of the possible …\nMakes a new empty Map.\nCreates a new JSON serializer.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nCreates a new JSON pretty print serializer.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nSerialize a Rust data structure into JSON data.\nSerialize newtypes without an object wrapper.\nReorders the entries of all <code>Value::Object</code> nested within …\nSorts this map’s entries in-place using <code>str</code>’s usual …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nThe Value enum, a loosely typed way of representing any …\nGets an iterator over the values of the map.\nGets an iterator over mutable values of the map.\nMakes a new empty Map with the given initial capacity.\nCreates a new JSON visitor whose output will be written to …\nA structure that deserializes JSON into Rust values.\nJSON input source that reads from a std::io input stream.\nTrait used by the deserializer for iterating over input. …\nJSON input source that reads from a slice of bytes.\nJSON input source that reads from a UTF-8 string.\nIterator that deserializes a stream into multiple JSON …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a JSON input source to read from a std::io input …\nCreate a JSON input source to read from a slice of bytes.\nCreate a JSON input source to read from a UTF-8 string.\nCategorizes the cause of a <code>serde_json::Error</code>.\nThe error was caused by input data that was semantically …\nThe error was caused by prematurely reaching the end of …\nContains the error value\nThis type represents all possible errors that can occur …\nThe error was caused by a failure to read or write bytes …\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nThe error was caused by input that was not syntactically …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA view into a single entry in a map, which may either be …\nAn owning iterator over a serde_json::Map’s entries.\nAn owning iterator over a serde_json::Map’s values.\nAn iterator over a serde_json::Map’s entries.\nA mutable iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s keys.\nRepresents a JSON key/value type.\nAn occupied Entry.\nAn occupied Entry. It is part of the <code>Entry</code> enum.\nA vacant Entry.\nA vacant Entry. It is part of the <code>Entry</code> enum.\nAn iterator over a serde_json::Map’s values.\nA mutable iterator over a serde_json::Map’s values.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nTakes the value of the entry out of the map, and returns …\nRemoves the entry from the map, returning the stored key …\nAn escaped ASCII plane control character (usually escaped …\nAn escaped backspace character (usually escaped as <code>\\b</code>)\nAn escaped carriage return character (usually escaped as <code>\\r</code>…\nRepresents a character escape code in a type-safe manner.\nThis structure compacts a JSON value with no extra …\nAn escaped form feed character (usually escaped as <code>\\f</code>)\nThis trait abstracts away serializing the JSON control …\nAn escaped line feed character (usually escaped as <code>\\n</code>)\nThis structure pretty prints a JSON value to make it human …\nAn escaped quote <code>&quot;</code>\nAn escaped reverse solidus <code>\\</code>\nA structure for serializing Rust values into JSON.\nAn escaped solidus <code>/</code>\nAn escaped tab character (usually escaped as <code>\\t</code>)\nCalled before every array.  Writes a <code>[</code> to the specified …\nCalled before every array value.  Writes a <code>,</code> if needed to …\nCalled before every object.  Writes a <code>{</code> to the specified …\nCalled before every object key.\nCalled before every object value.  A <code>:</code> should be written to\nCalled before each series of <code>write_string_fragment</code> and …\nCalled after every array.  Writes a <code>]</code> to the specified …\nCalled after every array value.\nCalled after every object.  Writes a <code>}</code> to the specified …\nCalled after every object key.  A <code>:</code> should be written to …\nCalled after every object value.\nCalled after each series of <code>write_string_fragment</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a pretty printer formatter that defaults to …\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nConstruct a pretty printer formatter that uses the <code>indent</code> …\nWrites a <code>true</code> or <code>false</code> value to the specified writer.\nWrites the representation of a byte array. Formatters can …\nWrites a character escape code to the specified writer.\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites a <code>null</code> value to the specified writer.\nWrites a number that has already been rendered to a string.\nWrites a raw JSON fragment that doesn’t need any …\nWrites a string fragment that doesn’t need any escaping …\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nRepresents a JSON array.\nRepresents a JSON boolean.\nA constant RawValue with the JSON value <code>false</code>.\nA type that can be used to index into a <code>serde_json::Value</code>.\nRepresents a JSON key/value type.\nA constant RawValue with the JSON value <code>null</code>.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nReference to a range of bytes encompassing a single valid …\nSerializer whose output is a <code>Value</code>.\nRepresents a JSON string.\nA constant RawValue with the JSON value <code>true</code>.\nRepresents any valid JSON value.\nReturns the argument unchanged.\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nAccess the JSON text underlying a raw value.\nCalls <code>U::from(self)</code>.\nConvert a <code>T</code> into a boxed <code>RawValue</code>.\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nA correctly sized stack allocation for the formatted bytes …\nTypes that can be decoded from a hex string.\nThe error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …\nThe table of lowercase characters used for hex encoding.\nThe table of uppercase characters used for hex encoding.\nThe lookup table of hex byte to value, used for hex …\nAn invalid character was found. Valid ones are: <code>0...9</code>, …\nIf the hex string is decoded into a fixed sized container, …\nThe length of the buffer in bytes.\nRepresents an invalid value in the <code>HEX_DECODE_LUT</code> table.\nA hex string’s length needs to be even, as two digits …\nEncoding values as hex string.\nEncoding values as hex string.\nReturns a reference the underlying stack-allocated byte …\nReturns a reference to the underlying bytes.\nReturns a mutable reference the underlying stack-allocated …\nReturns a mutable reference to the underlying bytes.\nReturns an unsafe mutable pointer to the slice’s buffer.\nReturns a mutable reference to the underlying bytes casted …\nReturns a raw pointer to the buffer.\nReturns a reference to the underlying bytes casted to a …\nReturns a mutable reference to the underlying buffer, …\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nReturns <code>true</code> if the input is a valid hex string and can be …\nReturns <code>true</code> if the input is a valid hex string.\nDecode a hex string into a fixed-length byte-array.\nEncodes <code>input</code> as a hex string into a <code>Buffer</code>.\nPrint an array of bytes into this buffer.\nPrint an array of bytes into this buffer.\nDecodes a hex string into raw bytes.\nDecode a hex string into a fixed-length byte-array.\nDecode a hex string into a mutable bytes slice.\nEncodes <code>data</code> as a hex string using lowercase characters.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nEncodes <code>data</code> as a prefixed hex string using lowercase …\nEncodes <code>input</code> as a hex string using lowercase characters …\nEncodes <code>input</code> as a hex string using uppercase characters …\nEncodes <code>data</code> as a hex string using uppercase characters.\nEncodes <code>data</code> as a prefixed hex string using uppercase …\nPrint an array of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint a slice of bytes into this buffer and return a …\nPrint an array of bytes into this buffer and return a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an instance of type <code>Self</code> from the given hex …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a cheap operation; you don’t need to worry about …\nCopies <code>self</code> into a new owned <code>String</code>.\nCopies <code>self</code> into a new <code>Vec</code>.\nModified from <code>hex</code>.\nTypes that can be decoded from a hex string.\nThe error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …\nAn invalid character was found. Valid ones are: <code>0...9</code>, …\nIf the hex string is decoded into a fixed sized container, …\nA hex string’s length needs to be even, as two digits …\nEncoding values as hex string.\nDecodes a hex string into raw bytes.\nDecode a hex string into a mutable bytes slice.\nEncodes <code>data</code> as hex string using lowercase characters.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncodes some bytes into a mutable slice of bytes.\nEncodes <code>data</code> as hex string using uppercase characters.\nCreates an instance of type <code>Self</code> from the given hex …\nThe associated error which can be returned from parsing.\nTypes that can be decoded from a hex string.\nEncoding values as hex string.\nEncoding values as hex string.\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result. …\nEncode the hex strict representing <code>self</code> into the result …\nEncode the hex strict representing <code>self</code> into the result …\nCreates an instance of type <code>Self</code> from the given hex …\nHolds private developer keys with their names\nReturns the private developer keys …\nReturns the argument unchanged.\nGet a key by then, like <code>Alith</code>\nCalls <code>U::from(self)</code>.\nCustom rlp decoding error.\nValue\nRLP decodable trait\nError concerning the RLP decoder.\nThe RLP encoded empty list.\nStructure encodable to RLP\nList\nThe RLP encoded empty data (used to mean “null value”).\nEmpty\nStores basic information about item\nRLP prototype\nData-oriented view onto rlp-slice.\nData length number has a prefixed zero byte, invalid for …\nExpect encoded data, RLP was something else.\nExpect an encoded list, RLP was something else.\nDeclared length is inconsistent with data specified after.\nExpected a different size list.\nNon-canonical (longer than necessary) representation used …\nDeclared length is invalid and results in overflow\nData has additional bytes at the end of the valid RLP …\nData has too few bytes for valid RLP.\nIterator over rlp-slice list elements.\nList length number has a prefixed zero byte, invalid for …\nAppendable rlp encoder.\nAppends value to the end of stream, chainable.\nApends null to the end of stream, chainable.\nAppends value to the end of stream, but do not count it as …\nAppends iterator to the end of stream, chainable.\nAppends list of values to the end of stream, chainable.\nAppends raw (pre-serialised) RLP data. Use with caution. …\nAppends raw (pre-serialised) RLP data. Checks for size …\nGet raw encoded bytes\nReturns an Rlp item in a list at the given index.\nReturns an Rlp item in a list at the given index along …\nDeclare appending the list of given size, chainable.\nDeclare appending the list of unknown size, chainable.\nClear the output stream so far.\nShortcut function to decode trusted rlp\nDecode a value from RLP bytes\nShortcut function to encode structure into rlp.\nCalculate total RLP size for appended payload.\nFinalize current unbounded list. Panics if no unbounded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new object from the given bytes RLP. The bytes\nReturns the argument unchanged.\nHeader length in bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if stream doesnt expect any more items.\nReturns current RLP size in bytes for the data pushed into …\nInitializes instance of empty <code>Stream</code>.\nInitializes the <code>Stream</code> as a list.\nInitializes the <code>Stream</code> as a list.\nInitializes instance of empty <code>Stream</code>.\nStreams out encoded bytes.\nAppend a value to the stream\nGet rlp-encoded bytes for this instance\nTotal size of the RLP.\nValue length in bytes\nThe Etherscan.io API client.\nThe API response type\nReturn the URL for the given address\nReturn the URL for the given block number\nReturns a Client that uses this ClientBuilder …\nCreates a <code>ClientBuilder</code> to configure a <code>Client</code>.\nConfigures the etherscan url and api url for the given …\nReturns the status of a contract execution\nCheck Source Code Verification Status with receipt …\nCheck Proxy Contract Verification Status with receipt …\nReturns the status of a transaction execution: <code>false</code> for …\nFetches a verified contract’s ABI.\nFetches a contract’s verified source code and its …\nReturns the latest price of 1 ETH.\nReturns the current amount of Ether in circulation …\nReturns the current amount of Ether in circulation, ETH2 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the estimated time, in seconds, for a transaction …\nReturns the current Safe, Proposed and Fast gas prices …\nReturns the list of beacon withdrawal transactions …\nReturns either (1) the oldest block since a particular …\nReturns the list of ERC-1155 ( NFT ) tokens transferred by …\nReturns the list of ERC-20 tokens transferred by an …\nReturns the list of ERC-721 ( NFT ) tokens transferred by …\nReturns the balance of the accounts from a list of …\nReturns the Ether balance of a given address.\nReturns the list of internal transactions performed by an …\nReturns the list of blocks mined by an address.\nReturns the list of transactions performed by an address, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new client with the correct endpoints based on …\nCreates a new instance that caches etherscan requests\nCreate a new client with the correct endpoints based on …\nCreate a new client with the correct endpoints based on …\nReturns the total number of discoverable Ethereum nodes.\nSets the root to the cache dir and the ttl to use\nSubmit Source Code for Verification\nSubmit Proxy Contract for Verification\nReturn the URL for the given token hash\nReturn the URL for the given transaction hash\nConfigures the etherscan api key\nConfigures the etherscan api url\nConfigures cache for etherscan request\nConfigures the <code>reqwest::Client</code>\nConfigures the etherscan url\nThe raw response from the balance-related API endpoints\nThe raw response from the beacon wihtdrawal transaction …\nThe pre-defined block type for retrieving mined blocks\nThe raw response from the ERC1155 transfer list API …\nThe raw response from the ERC20 transfer list API endpoint\nThe raw response from the ERC721 transfer list API endpoint\nPossible values for some field responses.\nThe raw response from the internal transaction list API …\nOptions for querying internal transactions\nThe raw response from the mined blocks API endpoint\nThe raw response from the transaction list API endpoint\nThe list sorting preference\nThe pre-defined block parameter for balance API endpoints\nOptions for querying ERC20 or ERC721 token transfers\nCommon optional arguments for the transaction or event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ndeprecated\ndeprecated\ndeprecated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEtherscan contract metadata.\nContains metadata and path mapped source code.\nContains only the source code.\nThe contract metadata’s SourceCode field.\nContains just mapped source code.\nParses the Abi String as an Abi struct.\nThe ABI of the contract.\nReturns the ABI of all contracts.\nParses the compiler version.\nThe version that this contract was compiled with. If it is …\nThe constructor arguments the contract was deployed with.\nThe name of the contract.\nThe version of the EVM the contract was deployed in. Can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf this contract is a proxy, the address of its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this contract is a Vyper or a Solidity …\nReturns the contract’s programming language.\nThe license of the contract.\nWhether the optimizer was used. This value should only be …\nWhether this contract is a proxy. This value should only …\nParses the Abi String as an RawAbi struct.\nReturns the raw ABI of all contracts.\nThe number of optimizations performed.\nReturns the contract’s source code.\nReturns the combined source code of all contracts.\nIncludes metadata for compiler settings and language.\nMaps this contract’s sources to a SourceTreeEntry vector.\nReturns the source tree of this contract’s sources.\nReturns the combined SourceTree of all contracts.\nReturns the contract’s path mapped source code.\nThe swarm source of the contract.\nProgramming language of the sources.\nCompiler settings, None if the language is not Solidity.\nSource path =&gt; source code\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFast Gas Price in wei\nReturns the argument unchanged.\nGas Used Ratio\nCalls <code>U::from(self)</code>.\nLast Block\nPropose Gas Price in wei\nSafe Gas Price in wei\nSuggested Base Fee in wei\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpand the source tree into the provided directory.  This …\nThe current amount of EIP1559 burnt fees\nThe current amount of ETH2 Staking rewards\nThe current amount of ETH in circulation\nETH-to-BTC exchange rate\nLast updated timestamp for the ETH-to-BTC exchange rate\nETH-to-USD exchange rate\nLast updated timestamp for the ETH-to-USD exchange rate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total number of discoverable Ethereum nodes\nLast updated date for the total number of discoverable …\nTotal withdrawn ETH from the beacon chain\nReturn None if empty, otherwise parse as Address.\nDeserializes as JSON either:\nGiven a Solc Version, lookup the build metadata and return …\nArguments for verifying contracts\nArguments for verifying a proxy contract\nProxy contract’s address\nProperly spelled constructor arguments. This is needed as …\nThe constructor arguments for the contract, if any.\nif codeformat=solidity-standard-json-input, then expected …\napplicable when codeformat=solidity-single-file\nImplementation contract proxy points to - must be verified …\nReturns the argument unchanged.")