searchState.loadedDescShard("ethers", 2, "A Gas escalator allows bumping transactions’ gas price …\nAn Ethereum gas price oracle.\nThe <code>Inner</code> type is the next lower middleware layer’s …\nThe next-lower middleware in the middleware stack\nA middleware allows customizing requests send and received …\nA builder trait to compose different <code>Middleware</code> layers and …\n<code>MiddlewareError</code> is a companion trait to <code>crate::Middleware</code>. …\nThrown when an internal middleware errors\nMiddleware used for calculating nonces locally, useful for …\nBasic trait to ensure that transactions about to be sent …\nThrown when the internal policy errors\nMiddleware used to enforce certain policies for …\nError thrown when the client interacts with the policy …\nThe JSON-RPC client type at the bottom of the stack\nA policy that rejects all transactions.\nMiddleware used for locally signing transactions, …\nTimeLag Provider\nMiddleware used for intercepting transaction requests and …\nRequests adding the given peer, returning a boolean …\nRequests adding the given peer as a trusted peer, which …\nReturns the client’s address\nAccess an underlying JSON-RPC error (if any)\nAttempt to convert this error to the next lower middleware…\nAttempts to access an underlying <code>ProviderError</code>, usually by …\nAccess an underlying <code>serde_json</code> error (if any)\nMiddlewareBuilder provides a way to compose many <code>Middleware</code>…\nSends the read-only (constant) transaction to a single …\nReturns the current client version using the …\nConvert a provider error into the associated error type by …\nQuery the node for an EIP-2930 Access List.\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nExecutes the given call and returns a number of possible …\nAfter replaying any previous transactions in the same …\nReturns the client’s address\nReturn the default sender (if any). This will typically be …\nEvaluates the transactions.\nMakes an asynchronous HTTP query to the underlying …\nGets a heuristic recommendation of max fee per gas and max …\nSends a transaction to a single Ethereum node and return …\nQuery the node for a <code>FeeHistory</code> object. This objct contains\nMakes an asynchronous HTTP query to the underlying …\nHelper for filling a transaction’s nonce using the wallet\nFill necessary details of a transaction for dispatch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the next lower middleware layer’s error to this …\nConvert a <code>ProviderError</code> to this type, by successively …\nThe Gas Escalator middleware is used to re-broadcast …\nThe gas oracle middleware is used to get the gas price …\nWraps <code>self</code> inside a <code>GasOracleMiddleware</code>.\nGets the accounts on the node\nReturns the account’s balance\nGets the block at <code>block_hash_or_number</code> (transaction hashes …\nGet the block number\nReturns all receipts for a block.\nGets the block at <code>block_hash_or_number</code> (full transactions …\nReturns the currently configured chain id, a value used in …\nReturns the deployed code at a given address\nGets the current gas price as estimated by the node\nGet the block header by number or hash\nReturns an array (possibly empty) of logs that match the …\nReturns a stream of logs are loaded in pages of given page …\nReturns the network version.\nReturns the EIP-1186 proof response …\nGet the storage of an address for a particular slot …\nGets the transaction with <code>transaction_hash</code>\nGets the transaction with block and index\nReturns the nonce of the address\nGets the transaction receipt with <code>transaction_hash</code>\nGets the block uncle at <code>block_hash_or_number</code> and <code>idx</code>\nGets the block uncle count at <code>block_hash_or_number</code>\nSends the given key to the node to be encrypted with the …\nGet a reference to the next-lower middleware in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error stems from a lower …\nReturns <code>true</code> if the underlying error is a serde_json …\n<code>SignerMiddleware</code> is instantiated with a signer.\nThis returns true if either the middleware stack contains …\nReturns the ENS name the <code>address</code> resolves to (or None if …\nReturns an indication if this node is currently mining.\nInitializes the middleware with the provided gas escalator …\nInstantiates the nonce manager with a 0 nonce. The <code>address</code> …\nCreates a new TransformerMiddleware that intercepts …\nCreates a new client from the provider and signer. Sets …\nCreates a new client from the provider and policy.\nInstantiates TimeLag provider\nCreates a new client from the provider and signer. Sets …\nReturns the next nonce to be used\nReturns general information about the node as well as …\nThe Nonce Manager is used to locally calculate nonces …\nWraps <code>self</code> inside a <code>NonceManagerMiddleware</code>.\nReturns all receipts for that block. Must be done on a …\nReturns the list of peers currently connected to the node.\nThe Policy is used to ensure transactions comply with the …\nThe HTTP or Websocket provider.\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nReturns the avatar HTTP link of the avatar that the …\nFetch a field for the <code>ens_name</code> (no None if not configured).\nReturns the address that the <code>ens_name</code> resolves to (or None …\nReturns the URL (not necesserily HTTP) of the image behind …\nSend a transaction with a simple escalation policy.\nSend the raw RLP encoded transaction to the entire …\nSigns and broadcasts the transaction. The optional …\nSigns and broadcasts the transaction. The optional …\nThis ensures the tx complies with the registered policy. …\nSends the transaction to the entire Ethereum network and …\nSigns a message with the internal signer, or if none is …\nSigns data using a specific account. This account needs to …\nSign a transaction via RPC call\nThe SignerMiddleware is used to locally sign transactions …\nReturns a reference to the client’s signer\nStarts the miner.\nStop terminates the miner, both at the consensus engine …\nSubscribe to a stream of incoming blocks.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of event logs matchin the provided …\nSubscribe to a stream of pending transaction hashes.\nReturn current client syncing status. If IsFalse sync is …\nThe TimeLag middleware provides safety against reorgs by …\nReturns traces created at given block\nExecutes the given call and returns a number of possible …\nExecutes given calls and returns a number of possible …\nReturn traces matching the given filter\nReturns trace at the given position\nTraces a call to <code>eth_sendRawTransaction</code> without making the …\nReplays all transactions in a block returning the …\nReplays a transaction, returning the traces\nReturns all traces of a given transaction\nThe TransformerMiddleware is used to intercept transactions\nReturns the details of all transactions currently pending …\nReturns a summary of all the transactions currently …\nReturns the number of transactions currently pending for …\nPrompts the node to decrypt the given account from its …\nStreams event logs matching the filter.\nStreams new block hashes\nStreams pending transactions.\nWraps <code>self</code> inside a <code>SignerMiddleware</code>.\nBuilds a SignerMiddleware with the given Signer.\nWraps <code>self</code> inside a new <code>Middleware</code>.\nA builder trait to compose different <code>Middleware</code> layers and …\nWraps <code>self</code> inside a <code>GasOracleMiddleware</code>.\nWraps <code>self</code> inside a <code>NonceManagerMiddleware</code>.\nWraps <code>self</code> inside a <code>SignerMiddleware</code>.\nWraps <code>self</code> inside a new <code>Middleware</code>.\nABI codec related errors\nThrown when the internal BaseContract errors\nProgrammatically generate type-safe Rust bindings for an …\nInclude all contracts\nA reduced form of <code>Contract</code> which just takes the <code>abi</code> and …\nHelper struct for managing calls to be made to the <code>function</code>…\nThrown during deployment if a constructor argument was …\n<code>Contract</code> is a <code>ContractInstance</code> object with an <code>Arc</code> …\n<code>ContractCall</code> is a <code>FunctionCall</code> object with an …\n<code>ContractDeployer</code> is a <code>ContractDeploymentTx</code> object with an …\nHelper which manages the deployment transaction of a smart …\nAn Error which is thrown when interacting with a smart …\nContract call returned an error\n<code>ContractFactory</code> is a <code>DeploymentTxFactory</code> object with an <code>Arc</code>…\nUsed to filter contracts that should be <em>included</em> in the …\nA Contract is an abstraction of an executable program on …\nThrown if a contract address is not found in the …\nA trait for enums unifying <code>EthError</code> types. This trait is …\nThrown when the ABI decoding fails\nThrown when the ABI decoding fails\nTo deploy a contract to the Ethereum network, a …\nThrown when detokenizing an argument\nThrown when detokenizing an argument\nDerives the <code>Eip712</code> trait for the labeled type.\nDerives the <code>AbiEncode</code> and <code>AbiDecode</code> traits for the labeled …\nDerives the <code>AbiType</code> and all <code>Tokenizable</code> traits for the …\nA helper trait for types that represent all call input …\nDerives the <code>EthCall</code> and <code>Tokenizeable</code> trait for the labeled …\nDerives the <code>Display</code> trait on structs by formatting each …\nA helper trait for types that represents a custom error …\nDerives the <code>EthError</code> and <code>Tokenizeable</code> trait for the …\nA trait for implementing event bindings\nDerives the <code>EthEvent</code> and <code>Tokenizable</code> traits for the …\nA trait for types (events) that can be decoded from a …\nHelper for managing the event filter before querying or …\nOnly include contracts that <em>don’t</em> match the filter\nA Contract Filter that exclude certain contracts\nHelper for managing a transaction before submitting it to …\nContract call reverted when not allowed\nHelper to match <code>ethabi::Param</code>s with structs and nested …\nUnsupported chain\nA value which is initialized on the first access.\nMetadata inside a log\nThe Multicall3 contract address that is deployed in …\nThe chain IDs that <code>MULTICALL_ADDRESS</code> has been deployed to.\nThrown when a middleware call fails\nCollects Abigen structs for a series of contracts, pending …\nA Multicall is an abstraction for sending batched …\nV1\nV2\nV3\nErrors using the <code>crate::Multicall</code> system\nThe version of the <code>Multicall</code>. Used to determine which …\nThrown when a provider call fails\nContract reverted\nOnly include contracts that match the filter\nA Contract Filter that only includes certain contracts.\nReturns a reference to the contract’s ABI\nReturns a reference to the deployer’s ABI\nReturns a reference to the contract’s ABI.\nRetrieves the ABI signature for the call\nRetrieves the ABI signature for the error\nRetrieves the ABI signature for the event this data …\nGenerates type-safe bindings to an Ethereum smart contract …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends multiple <code>call</code>s to the list of calls of the …\nAdd a custom derive to the derives for all structs and …\nAdd a Solidity custom error alias to specify the generated …\nManually adds a solidity event alias to specify what the …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAppends a <code>call</code> to the list of calls of the Multicall …\nAdd a Solidity method error alias to specify the generated …\nAdds an exact name to the filter\nAdds an exact name to the filter\nSets the pattern to use\nSets the pattern to use\nAdds the regex to use\nAdds the regex to use\nSets the filter’s address.\nReturns the contract’s address\nAddress from which this log originated\nCalls the contract’s <code>aggregate</code> (0x252dba42) function\nCalls the contract’s <code>aggregate3</code> (0x82ad56cb) function\nCalls the contract’s <code>aggregate3Value</code> (0x174dea71) …\nRemoves all <code>Abigen</code> items that should not be included based …\nConvert a <code>MulticallError</code> to a the underlying error if …\nConvert a <code>MulticallError</code> to a the underlying error if …\nConvert a <code>ContractError</code> to a <code>MiddlewareError</code> if possible.\nConvert a <code>MulticallError</code> to a <code>ProviderError</code> if possible.\nConvert a <code>ContractError</code> to a <code>ProviderError</code> if possible.\nIf this <code>MulticallError</code> is a revert, this method will …\nIf this <code>ContractError</code> is a revert, this method will …\nReturns a new contract instance at <code>address</code>.\nSets the filter’s <code>blockHash</code>. Setting this will override …\nSets the <code>block</code> field of the Multicall aggregate call.\nSets the block at which RPC requests are made\nSets the <code>block</code> field for sending the tx to the chain\nThe <code>block</code> field of the Multicall aggregate call.\nOptional block number to be used when calculating the …\nOptional block number to be used when calculating the …\nCalls the contract’s <code>blockAndAggregate</code> (0xc3077fa9) …\nThe block hash in which the log was emitted\nThe block in which the log was emitted\nBuild the contract bindings and prepare for writing\nQueries the Ethereum blockchain using <code>eth_call</code>, but via …\nDry runs the deployment of the contract\nQueries the blockchain via an <code>eth_call</code> for the provided …\nQueries the Ethereum blockchain using <code>eth_call</code>, but via …\nQueries the Ethereum blockchain using <code>eth_call</code>, but via …\nReturns a CallBuilder, which when awaited executes the …\nReturns an implementer of <code>RawCall</code> which can be <code>.await</code>d to …\nReturns a <code>CallBuilder</code> which can be <code>.await</code>d to query the …\nReturns the underlying transaction’s ABI encoded data\nSets the <code>chain_id</code> field in the deploy transaction to the …\nClears the batch of calls from the Multicall instance. …\nReturns a pointer to the deployer’s client\nReturns a pointer to the contract’s client.\nReturns a reference to the contract’s client.\nSets the number of confirmations to wait for the contract …\nReturns a new contract instance using the provided client\nReturns a new contract instance using the provided client\nThe Multicall contract interface.\nSets the <code>data</code> field in the deploy transaction to the …\nDecodes the provided ABI encoded function arguments with …\nDecode revert data into a <code>ContractRevert</code> type. Returns <code>None</code>…\nDecodes for a given event name, given the <code>log.topics</code> and …\nDecodes for a given event name, given the <code>log.topics</code> and …\nHelper for ABI decoding raw data based on a function’s …\nDecodes the provided ABI encoded input bytes\nDecodes the provided ABI encoded input bytes\nDecodes an Ethereum <code>RawLog</code> into an instance of the type.\ndecode from a <code>RawLog</code>\nDecodes a series of logs into a vector\nDecodes the provided ABI encoded function output with the …\nDecodes the provided ABI encoded function output with the …\nDecode the provided ABI encoded bytes as the output of the …\nDecodes the provided ABI encoded bytes with the selected …\nDecodes the provided ABI encoded function arguments with …\nDecode revert data into an <code>EthError</code> type. Returns <code>None</code> if …\nDecode revert data into an <code>EthError</code> type. Returns <code>None</code> if …\nDecode the error from EVM revert data including an Error …\nDecode the error from EVM revert data including an Error …\nDecodes the provided ABI encoded bytes with the selected …\nDecodes the provided ABI encoded bytes with the selected …\nCreates a new lazy value using <code>Default</code> as the initializing …\nConstructs the deployment transaction based on the …\nCreate a deployment tx using the provided tokens as …\nthe actual deployer, exposed for overriding the defaults\nthe actual deployer, exposed for overriding the defaults\nReturns a reference to the contract’s derives.\nReturns a mutable reference to the contract’s derives.\nSpecify whether to print cargo build script directives if …\nReturns the ABI encoded data for the provided function and …\nHelper for ABI encoding arguments for a specific function\nReturns the ABI encoded data for the provided function …\nReturns a mutable reference to the contract’s event …\nThe name of the error\nReturns the estimated gas cost for the underlying …\nReturns an <code>Event</code> builder for the provided event.\nReturns a reference to the contract’s event aliases.\nReturns an <code>Event</code> builder with the provided name.\nReturns an <code>Event</code> builder for the provided event.\nReturns an <code>Event</code> builder with the provided filter.\nExpands the <code>Abigen</code> and returns the <code>ExpandedContract</code> that …\nAdds multiple exact names to the filter\nAdds multiple exact names to the filter\nAdds multiple patterns to the filter\nAdds multiple patterns to the filter\nAdds multiple exact names to the filter\nAdds multiple exact names to the filter\nThe event filter’s state\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nSpecify whether to format the code or not. True by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>BaseContract</code> from the abi.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the deploy transaction to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a series of already resolved …\nSets the filter’s <code>from</code> block\nAttempts to load a new builder from an ABI JSON file at …\nReads all json files contained in the given <code>dir</code> and use …\nConvert a <code>MiddlewareError</code> to a <code>ContractError</code>\nAttempt to decode from a <code>JsonRpcError</code> by extracting revert …\nThe ABI of the function being called\nThe ABI of the function being called\nThe name of the function\nSets the <code>gas</code> field in the deploy transaction to the …\nSets the <code>gas</code> field in the transaction to the provided value\nSets the <code>gas_price</code> field in the deploy transaction to the …\nSets the <code>gas_price</code> field in the transaction to the …\nGenerates the contract bindings.\nGets the reference to the result of this lazy value if it …\nCalls the contract’s <code>getBasefee</code> (0x3e64a696) function\nCalls the contract’s <code>getBlockHash</code> (0xee82ac5e) function\nCalls the contract’s <code>getBlockNumber</code> (0x42cbb15c) function\nCalls the contract’s <code>getChainId</code> (0x3408e470) function\nCalls the contract’s <code>getCurrentBlockCoinbase</code> …\nCalls the contract’s <code>getCurrentBlockDifficulty</code> …\nCalls the contract’s <code>getCurrentBlockGasLimit</code> …\nCalls the contract’s <code>getCurrentBlockTimestamp</code> …\nCalls the contract’s <code>getEthBalance</code> (0x4d2301cc) function\nReturns the type identifier as it’s used in the solidity …\nReturns the name of the rust type that will be generated …\nReturns solidity type identifier as it’s used in the ABI.\nReturns the name of the rust type that will be generated …\nReturns the name of the rust type that will be generated …\nReturns the name of the rust type that will be generated …\nCalls the contract’s <code>getLastBlockHash</code> (0x27e86d6e) …\nGets the reference to the result of this lazy value if it …\nReturns the name of the rust type for the type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpgrades a <code>BaseContract</code> into a full fledged contract with …\nConsumes this <code>Lazy</code> returning the stored value.\nReturns true if this is an anonymous event\nTrue if the underlying error is a <code>ContractError</code>\nReturns whether to include the contract with the given <code>name</code>\nReturns true whether the <code>name</code> matches the filter\nReturns true whether the <code>name</code> matches the filter\nTrue if the underlying error is a MiddlewareError\nTrue if the error is a middleware error\nTrue if the error is a provider error\nTrue if the error is a provider error\nTrue if the error is a revert, false otherwise\nTrue if the error is a revert, false otherwise\nTrue if call is v1\nTrue if call is v2\nTrue if call is v3\nMakes a legacy transaction instead of an EIP-1559 one.\nUses a Legacy transaction instead of an EIP-1559 one to do …\nUses a Legacy transaction instead of an EIP-1559 one to …\nWhether to use a legacy or a EIP-1559 transaction.\nLog index position in the block\nReturns a transaction builder for the provided function …\nReturns a reference to the contract’s method aliases.\nReturns a mutable reference to the contract’s method …\nReturns a transaction builder for the selected function …\nA mapping from method signature to a name-index pair for …\nThe name of the event this type represents\nReturns a reference to the contract’s name.\nReturns a mutable reference to the contract’s name.\nReturns an Event builder for the ethereum event …\nCreates a new lazy value with the given initializing …\nCreates a new contract instance with the specified <code>ethers</code> …\nCreates a new instance with a filled type mapping table …\nCreate a new instance from a series (<code>contract name</code>, …\nCreates a new builder with the given contract name and ABI …\nCreates a new Multicall instance from the provided client. …\nCreate a new instance of this from a deployer.\nCreates a factory for deployment of the Contract with …\nCreates a new contract from the provided client, abi and …\nCreates a new builder with the given contract name Ident …\nCreates a new Multicall instance synchronously from the …\nSets the <code>nonce</code> field in the deploy transaction to the …\nSets the <code>nonce</code> field in the transaction to the provided …\nAttempt to parse a log into a specific output type.\nAdd another Abigen to the module or lib\nQueries the blockchain for the selected filter and returns …\nQueries the blockchain for the selected filter and returns …\nReturns the mapping table of abi …\nThe selector of the function\nThe selector of the error\nSigns and broadcasts a batch of transactions by using the …\nBroadcasts the contract deployment transaction and after …\nSigns and broadcasts the provided transaction\nBroadcasts the contract deployment transaction and after …\nRetrieves the signature for the event this data …\nReturns a reference to the contract’s ABI source.\nReturns a mutable reference to the contract’s ABI source.\nSets the <code>overriding state</code> of the Multicall aggregate call.\nThe state overrides of the Multicall aggregate\nContains the <code>EventStream</code> type which aids in streaming …\nTurns this event filter into <code>Stream</code> that yields decoded …\nAs <code>Self::stream</code>, but does not discard <code>Log</code> metadata.\nReturns all the solidity struct types\nReturns a subscription for the event\nAs <code>Self::subscribe</code>, but includes event metadata\nSets the <code>to</code> field in the deploy transaction to the …\nSets the filter’s <code>to</code> block\nSets the filter’s 0th topic (typically the event name …\nSets the filter’s 1st topic\nSets the filter’s 2nd topic\nSets the filter’s 3rd topic\nThe transaction hash in which the log was emitted\nTransactions index position log was created from\nSets the pattern to use\nSets the pattern to use\nCalls the contract’s <code>tryAggregate</code> (0xbce38bd7) function\nCalls the contract’s <code>tryBlockAndAggregate</code> (0x399542e9) …\nAdds multiple patterns to the filter\nAdds multiple patterns to the filter\nThe raw transaction object\nThe raw transaction object\n<code>true</code> if the selector corresponds to an error that this …\nSets the <code>value</code> field in the deploy transaction to the …\nSets the <code>value</code> field in the transaction to the provided …\nChanges which functions to use when making the contract …\nThe version of which methods to use when making the …\nSee <code>apply_filter</code>\nThe underlying error\nThe underlying error\nGeneric wrapper around Log streams, mapping their content …\nWrapper around a <code>EventStream</code>, that in addition to the …\nA stream of two items\nStream for <code>EventStream::select</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe stream ID, provided by the RPC server\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new <code>EventStream</code>\nTurns a stream of Results to a stream of <code>Result::ok</code> for …\nThis function will attempt to pull events from both event …\nSee <code>EventStream::select</code>\nTurns this stream of events into a stream that also yields …\nOn a duration basis (in milliseconds)\nThe frequency at which transactions will be bumped\nTrait for fetching updated gas prices after a transaction …\nError thrown when the GasEscalator interacts with the …\nA Gas escalator allows bumping transactions’ gas price …\nGeometrically increasing gas price.\nLinearly increasing gas price.\nThrown when an internal middleware errors\nOn a per block basis using the eth_newBlock filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven the initial gas price and the time elapsed since the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nA client over HTTP for the BlockNative gas tracker API …\nContains the error value\nA client over HTTP for the EthGasStation gas tracker API …\nA client over HTTP for the Etherchain gas tracker API that …\nA client over HTTP for the Etherscan gas tracker API that …\nAn internal error in the Etherscan client request made …\nGeneric <code>GasOracle</code> gas price categories.\nAn internal error thrown when the required gas category is …\nA client over HTTP for the beaconcha.in GasNow gas tracker …\nAn Ethereum gas price oracle.\nError thrown by a <code>GasOracle</code>.\nMiddleware used for fetching gas prices over an API …\nAn internal error in the HTTP request made from the …\nAn error with oracle response type\nContains the success value\nThe Polygon gas station API Queries over HTTP and …\nError thrown when the provider failed.\nGas oracle from a <code>Middleware</code> implementation such as an …\nAn error decoding JSON response from gas oracle\nSets the gas price category to be used when fetching the …\nSets the gas price category to be used when fetching the …\nSets the gas price category to be used when fetching the …\nSets the gas price category to be used when fetching the …\nSets the gas price category to be used when fetching the …\nSets the gas price category to be used when fetching the …\nMakes an asynchronous HTTP query to the underlying …\nMakes an asynchronous HTTP query to the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BlockNative gas oracle.\nCreates a new EthGasStation gas oracle.\nCreates a new Etherchain gas price oracle.\nCreates a new Etherscan gas price oracle.\nCreates a new beaconcha.in GasNow gas price oracle.\nPerform a request to the gas price API and deserialize the …\nPerform a request to the gas price API and deserialize the …\nPerform a request to the gas price API and deserialize the …\nPerform a request to the gas price API and deserialize the …\nPerform a request to the gas price API and deserialize the …\nPerform a request to the gas price API and deserialize the …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nA client over HTTP for the BlockNative gas tracker API …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA client over HTTP for the EthGasStation gas tracker API …\nEth Gas Station’s response for the current recommended …\nRecommended average (expected to be mined in &lt; 5 minutes).\nWaiting time (in minutes) for the <code>average</code> gas price.\nThe latest block number.\nAverage time (in seconds) to mine a single block.\nRecommended fast (expected to be mined in &lt; 2 minutes).\nWaiting time (in minutes) for the <code>fast</code> gas price.\nRecommended fastest (expected to be mined in &lt; 30 seconds).\nWaiting time (in minutes) for the <code>fastest</code> gas price.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecommended safe (expected to be mined in &lt; 30 minutes).\nWaiting time (in minutes) for the <code>safe_low</code> gas price.\nSmallest value of <code>gasUsed / gaslimit</code> from the last 10 …\nA client over HTTP for the Etherchain gas tracker API that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA client over HTTP for the Etherscan gas tracker API that …\nA client over HTTP for the beaconcha.in GasNow gas tracker …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMiddleware used for fetching gas prices over an API …\nThe Polygon gas station API Queries over HTTP and …\nThe response from the Polygon gas station API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGas oracle from a <code>Middleware</code> implementation such as an …\nThrown when the internal middleware errors\nThrown when an error happens at the Nonce Manager\nMiddleware used for calculating nonces locally, useful for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA policy that does not restrict anything.\nThrown when an internal middleware errors\nBasic trait to ensure that transactions about to be sent …\nThrown when the internal policy errors\nMiddleware used to enforce certain policies for …\nError thrown when the client interacts with the policy …\nA policy that rejects all transactions.\nEvaluates the transactions.\nThrown if the signer’s chain_id is different than the …\nThrown if the <code>gas</code> field is missing\nThrown if the <code>gas_price</code> field is missing\nThrown when an internal middleware errors\nThrown if the <code>nonce</code> field is missing\nThrown when the internal call to the signer fails\nMiddleware used for locally signing transactions, …\nError thrown when the client interacts with the blockchain\nThrown if a signature is requested from a different address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThrown when an internal middleware errors\nTimeLag Provider\nTimeLage Provider Errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the DsProxy type that implements the Transformer…\n<code>Transformer</code> is a trait to be implemented by a proxy …\nErrors thrown from the types that implement the <code>Transformer</code>…\nMiddleware used for intercepting transaction requests and …\nThe address of the DsProxy instance.\nDeploys a new DsProxy contract to the Ethereum network.\nExecute a tx through the DsProxy instance. The target can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of DsProxy by providing the address …\nTransforms a <code>transaction request</code> into one that can be …\nRepresents the DsProxy type that implements the Transformer…\nA lazily computed hash map with the Ethereum network IDs …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>cache</code> …\nContainer type for all return fields from the <code>cache</code> …\nThe parsed JSON ABI of the contract.\nThe bytecode of the contract.\nContainer type for all of the contract’s call\nContainer type for all input parameters for the <code>isProxy</code> …\nContainer type for all return fields from the <code>isProxy</code> …\nCalls the contract’s <code>build</code> (0xf3701da2) function\nCalls the contract’s <code>build</code> (0x8e1a55fc) function\nCalls the contract’s <code>cache</code> (0x60c7d295) function\nGets the contract’s <code>Created</code> event\nConstructs the general purpose <code>Deployer</code> instance based on …\nThis module was auto-generated with ethers-rs Abigen. More …\nReturns an <code>Event</code> builder for all the events of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the contract’s <code>isProxy</code> (0x29710388) function\nCreates a new contract instance with the specified <code>ethers</code> …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>cache</code> …\nContainer type for all return fields from the <code>cache</code> …\nThe parsed JSON ABI of the contract.\nThe bytecode of the contract.\nContainer type for all of the contract’s call\nContainer type for all input parameters for the <code>isProxy</code> …\nContainer type for all return fields from the <code>isProxy</code> …\naddr(bytes32)\nThe quorum is reached when all providers return the exact …\nBasic or bearer authentication in http or websocket …\nHTTP Basic Auth\nBearer Auth\nBesu\nThe primary builder which exposes <code>RawCall</code> methods.\nA builder which implements <code>RawCall</code> methods for overriding …\nHolds the inputs to the <code>eth_call</code> rpc method along with the …\nCustom error from unknown source\nThe polling interval to use for local endpoints, See …\nThe default polling interval for filters and pending …\nENS registry address (…\nEmpty requests array\nEmpty responses array\nAn error during ENS name resolution\nInvalid reverse ENS name\nErigon\nError response with a <code>JsonRpcError</code>.\nThe error type that can occur when creating a provider\nA JSON-RPC Error\nError type returned by most operations\nAn EscalatingPending is a pending transaction that …\nA simple gas escalation policy\ntext(bytes32, string)\nTypes of filters supported by the JSON-RPC.\nStreams data from an installed filter via …\nGeth\nError in underlying lib <code>reqwest</code>\nError in underlying lib <code>hex</code>\nA low-level JSON-RPC Client over HTTP.\nError thrown when sending an HTTP request\nImplements RetryPolicy that will retry requests that …\nsupportsInterface(bytes4 interfaceID)\nThe <code>Inner</code> type is the next lower middleware layer’s …\nThe next-lower middleware in the middleware stack\nTrait which must be implemented by data transports to be …\nAn internal error in the JSON RPC Client\nWrapper trait for <code>crate::JsonRpcClient</code> that erases …\nA JSON-RPC 2.0 error\nThrown if the response could not be parsed\nCustom JsonRpcError\nContains the JWT secret and claims parameters.\nGenerates a bearer token from a JWT secret\nError loading latest block\nError loading logs from block range\nA log query provides streaming access to historical logs …\nErrors while querying for logs\n<code>eth_newBlockFilter</code>\nThe quorum is reached when the majority of the providers …\nAn implementer of <code>RawCall</code> that maps a function <code>f</code> over the …\nA middleware allows customizing requests send and received …\n<code>MiddlewareError</code> is a companion trait to <code>crate::Middleware</code>. …\nErrors for the <code>MockProvider</code>\nMock transport used in test environments.\nHelper response type for <code>MockProvider</code>, allowing custom …\nname(bytes32)\nNethermind\n<code>eth_newBlockFilter</code> filter\nNoQuorumReached\nNode Clients\nThis includes general information about a running node, …\nThe type of stream this transport returns\nOpenEthereum\nRepresents a short summary of information known about a …\nA pending transaction is a transaction which has been …\n<code>eth_newPendingTransactionFilter</code> filter\nThe quorum is reached when the cumulative weight of a …\nAn abstract provider for interacting with the Ethereum …\nThe JSON-RPC client type at the bottom of the stack\nThe quorum is reached when the given number of provider …\nAn error thrown when making a call to the provider\nInternal provider error\nExtension trait for <code>Provider</code>\nA transport implementation supporting pub sub …\nDetermines when the provider reached a quorum\nError thrown when sending an HTTP request\nA provider that bundles multiple providers and only …\nIf you need to override the Authorization header value\nProvides methods for overriding parameters to the <code>eth_call</code> …\nThrown if the <em>read</em> request failed\nThrown if the request failed\nRetryClient presents as a wrapper around JsonRpcClient …\nBuilder for a <code>RetryClient</code>\nError thrown when:\nRetryPolicy defines logic for which JsonRpcClient::Error …\nAn <code>RpcError</code> is an abstraction over error types returned by …\nA client containing two clients.\nError thrown when using either read or write client\nSerde JSON Error\n(De)Serialization error\n(De)Serialization error\nError in underlying lib <code>serde_json</code>\nSigner is not available to this provider.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nStreams data from an installed filter via <code>eth_subscribe</code>\nTimeout while making requests\nDrains a stream of transaction hashes and yields entire …\nNode is not supported by this provider\nRPC method is not supported by this provider\nSuccessful response with a <code>serde_json::Value</code>.\nUsed by the <code>std::future::Future</code> implementation. You are …\nThe quorum is reached once the accumulated weight of the …\nThe configuration of a provider for the <code>QuorumProvider</code>\nThrown if the <em>write</em> request failed\nRequests adding the given peer, returning a boolean …\nAdd a provider to the set\nRequests adding the given peer as a trusted peer, which …\nTypes for the admin api\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nReturns a reference to the underlying byte array.\nAccess an underlying JSON-RPC error (if any)\nAccess an underlying JSON-RPC error (if any)\nAttempt to convert this error to the next lower middleware…\nAttempts to access an underlying <code>ProviderError</code>, usually by …\nAttempt to extract revert data from the JsonRpcError be …\nAccess an underlying <code>serde_json</code> error (if any)\nAccess an underlying <code>serde_json</code> error (if any)\nChecks that the provided request was submitted by the …\nProviders may include the <code>backoff</code> in the error response …\nMake a new basic auth\nMake a new bearer auth\nSets the block number to execute against\nSets the block number to execute against\nSets the block number to execute against\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nCreates the <code>RetryClient</code> with the configured settings\nConvenience method for creating a <code>QuorumProviderBuilder</code> …\nBorrows a stream, rather than consuming it.\nReturns a number in bytes form with padding to fit in 32 …\nSends the read-only (constant) transaction to a single …\nOverrides for the <code>eth_call</code> rpc method\nAnalogous to <code>Middleware::call</code>, but returns a <code>CallBuilder</code> …\nThe peer’s capabilities.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nReturns the current client version using the …\nThe error code\nTransforms a stream into a collection, returning a future …\nSets the number of assumed available compute units per …\nConcatenate all items of a stream into a single extendable …\nSets the number of confirmations for the pending …\nCreates a new instance connected to the given <code>url</code>, exit on …\nConvert a provider error into the associated error type by …\nDrives the stream to completion, counting the number of …\nQuery the node for an EIP-2930 Access List.\nRepeats a stream endlessly.\nAdditional data\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nExecutes the given call and returns a number of possible …\nAfter replaying any previous transactions in the same …\nDecode revert data (if any) into a decodeable type\nReturn the default sender (if any). This will typically be …\nCreate a <code>QuorumProvider</code> for different <code>PubsubClient</code> types\nCreate a <code>QuorumProvider</code> for different <code>JsonRpcClient</code> types\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nEthereum Name Service support Adapted from …\nSets the ENS Address (default: mainnet)\nCreates a stream which gives the current iteration count …\nERC related utilities. Only supporting NFTs for now.\nGets a heuristic recommendation of max fee per gas and max …\nSends a transaction to a single Ethereum node and return …\nQuery the node for a <code>FeeHistory</code> object. This objct contains\nFill necessary details of a transaction for dispatch\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nCustomize <code>Provider</code> settings for chain.\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the next lower middleware layer’s error to this …\nDecode the given string from hex (no 0x prefix), and …\nConvert a <code>ProviderError</code> to this type, by successively …\nWrap given slice in <code>Self</code>. Returns an error if slice.len() …\nFuse a stream such that <code>poll_next</code> will never again be …\nGenerate a JWT token with <code>claims.iat</code> set to current time.\nGets the accounts on the node\nReturns the account’s balance\nGets the block at <code>block_hash_or_number</code> (transaction hashes …\nGet the block number\nReturns all receipts for a block.\nGets the block at <code>block_hash_or_number</code> (full transactions …\nGet the current broadcast interval.\nReturns the currently configured chain id, a value used in …\nReturns the deployed code at a given address\nGets the current gas price as estimated by the node\nGet the block header by number or hash\nGets the polling interval which the provider currently …\nReturns an array (possibly empty) of logs that match the …\nReturns a stream of logs are loaded in pages of given page …\nReturns the network version.\nGet the current polling interval.\nReturns the EIP-1186 proof response …\nReturns a transaction request for calling the <code>resolver</code> …\nGet the storage of an address for a particular slot …\nGets the transaction with <code>transaction_hash</code>\nGets the transaction with block and index\nReturns the nonce of the address\nGets the transaction receipt with <code>transaction_hash</code>\nGets the block uncle at <code>block_hash_or_number</code> and <code>idx</code>\nGets the block uncle count at <code>block_hash_or_number</code>\nThe node’s private key.\nThe peer’s enode ID.\nThe subscription’s installed id on the ethereum node\nThe filter’s installed id on the ethereum node\nSends the given key to the node to be encrypted with the …\nSets the duration to wait initially before retrying\nGet a reference to the next-lower middleware in the …\nDo something with each item of this stream, afterwards …\nAllows inspecting the content of a pending transaction in …\nCreate a stream that emits items at a fixed interval. Used …\nSets the default polling interval for event filters and …\nSets the polling interval\nSets the stream’s polling interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the key, returning its underlying byte array.\nConverts this stream into a future of …\nThe IP address of the connected node.\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error stems from a lower …\nReturns true if the endpoint is local\nDetermine if the error output of the <code>eth_call</code> RPC request …\nReturns <code>true</code> if the underlying error is a serde_json …\nReturns <code>true</code> if the underlying error is a serde_json …\nThis returns true if either the middleware stack contains …\nWrap this stream in an <code>Either</code> stream, making it the …\nThe node’s listening address.\nLogs the pending transaction’s hash\nLogs the pending transaction hash along with a custom …\nReturns the ENS name the <code>address</code> resolves to (or None if …\nMaps a closure <code>f</code> over the result of <code>.await</code>ing this call\nMaps this stream’s items to a different type, returning …\nApplies a closure <code>f</code> to a <code>CallBuilder::Build</code>. Does nothing …\nCalls the future if <code>item</code> is None, otherwise returns a …\nThe error message\nReturns an indication if this node is currently mining.\nReturns an indication if this node is currently mining.\nReturns a <code>Provider</code> instantiated with an internal “mock”…\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nReturns the ENS namehash as specified in EIP-137\nNetworking information about the peer.\nCreate a new JwtAuth from a secret key, and optional <code>id</code> …\nInstantiate a new <code>LogQuery</code>\nInstantiate a new call builder based on <code>tx</code>\nCreate a new <code>TransactionStream</code> instance\nInstantiate a new provider with a backend.\nInitializes a new HTTP Client\nInstantiate a new <code>QuorumProvider</code> from a <code>Quorum</code> and a set of\nCreate a <code>WeightedProvider</code> with weight <code>1</code>\nCreates a new client using two different clients\nCreates a new <code>RetryClient</code> that wraps a client and adds …\nInstantiates a mock transport\nCreates a new subscription stream for the provided …\nCreates a new pending transaction poller from a hash and a …\nInstantiate a new <code>Caller</code> based on <code>tx</code>\nInstantiate a new map\nCreates a new watcher with the provided factory and filter …\nCreate a new <code>RetryClient</code> by connecting to the provided …\nInitializes a new HTTP Client with authentication\nAllows to customize the provider by providing your own …\nCreates a future that resolves to the next item in the …\nReturns the type of node we’re connected to, while also …\nReturns general information about the node as well as …\nReturns the ENS record key hash EIP-634\nReturns all receipts for that block. Must be done on a …\nCreates a new stream which exposes a <code>peek</code> method.\nReturns the list of peers currently connected to the node.\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nReturns the Provider associated with the pending …\nThe HTTP or Websocket provider.\nReturn a reference to the weighted providers\nPushes the data to the responses\nPushes the data or error to the responses\nProvider that uses a quorum\nThe weight at which the provider reached a quorum\nHow many retries for rate limited responses\nOverride the Authorization header with your own string\nReturns the client used for read operations\nAn adaptor for chunking up ready items of the stream …\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nMake a request, as <code>crate::JsonRpcClient</code>\nSends a request with the provided JSON-RPC and parameters …\nMake an RPC request via the internal connection, and …\nSends a POST request with the provided method and the …\nPushes the <code>(method, params)</code> to the back of the <code>requests</code> …\nReturns a transaction request for calling\nReturns the avatar HTTP link of the avatar that the …\nFetch a field for the <code>ens_name</code> (no None if not configured).\nReturns the address that the <code>ens_name</code> resolves to (or None …\nReturns the URL (not necesserily HTTP) of the image behind …\nSet retries\nReturns the reverse-registrar name of an address.\nWrap this stream in an <code>Either</code> stream, making it the …\nCreates a new Provider with a RwClient\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nReturns a <code>Future</code> that resolves when the next item in this …\nSend a transaction with a simple escalation policy.\nSend the raw RLP encoded transaction to the entire …\nSends the transaction to the entire Ethereum network and …\nCustomized <code>Provider</code> settings for chain\nSets the free compute units per second limit.\nSets the default polling interval for event filters and …\nSet the loaded elements buffer. This buffer contains logs …\nWhether to retry the request based on the given <code>error</code>\nSigns data using a specific account. This account needs to …\nSign a transaction via RPC call\nSign a transaction via RPC call\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nConsumes the client and returns the underlying clients\nStarts the miner.\nSets the state override set. Note that not all client …\nSets the state override set. Note that not all client …\nSets the state override set. Note that not all client …\nStop terminates the miner, both at the consensus engine …\nAlias for Box::pin, must be called in order to pin the …\nAdd a subscription to this transport\nSubscribe to a stream of incoming blocks.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of event logs matchin the provided …\nSubscribe to a stream of pending transaction hashes.\nReturns a transaction request for checking interface …\nReturn current client syncing status. If IsFalse sync is …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nPre-instantiated Infura HTTP clients which rotate through …\nComputes from this stream’s items new items of a …\nSets the number of retries after a connection times out\nReturns traces created at given block\nExecutes the given call and returns a number of possible …\nExecutes given calls and returns a number of possible …\nReturn traces matching the given filter\nReturns trace at the given position\nTraces a call to <code>eth_sendRawTransaction</code> without making the …\nReplays all transactions in a block returning the …\nReplays a transaction, returning the traces\nReturns all traces of a given transaction\nReturns a stream that yields the <code>Transaction</code>s for the …\nReturns a stream that yields the <code>Transaction</code>s for the …\nReturns a new <code>RwClient</code> with transposed clients\nTry to create a new <code>Provider</code>\nReturns the transaction hash of the pending transaction\nReturns the details of all transactions currently pending …\nReturns a summary of all the transactions currently …\nReturns the number of transactions currently pending for …\nPrompts the node to decrypt the given account from its …\nRemove a subscription from this transport\nUnsubscribes from the subscription.\nReturns the inner <code>Caller</code> from a <code>CallBuilder::Build</code>. Panics …\nConverts a stream of pairs into a future, which resolves …\nThe Url to which requests are made\nThe Url to which requests are made\nMutable access to the Url to which requests are made\nMutable access to the Url to which requests are made\nValidate a JWT token given the secret key and return the …\nStreams event logs matching the filter.\nStreams new block hashes\nStreams pending transactions\nStreams pending transactions.\nSet the broadcast interval. This controls how often the …\nset page size for pagination\nSet the polling interval. This controls how often the …\nSet the default sender on the provider\nInstantiate a <code>WeightedProvider</code> with a set weight\nReturns the client used for write operations\nAn adapter for zipping two streams together.\nUnderlying error\nThe contents of the HTTP response that could not be …\nReturned errors\nReturned responses\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe total difficulty of the peer’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nThe hash of the peer’s best known block.\nThe node’s private key.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nThe primary builder which exposes <code>RawCall</code> methods.\nA builder which implements <code>RawCall</code> methods for overriding …\nHolds the inputs to the <code>eth_call</code> rpc method along with the …\nAn implementer of <code>RawCall</code> that maps a function <code>f</code> over the …\nProvides methods for overriding parameters to the <code>eth_call</code> …\nUsed by the <code>std::future::Future</code> implementation. You are …\nSets the block number to execute against\nMaps a closure <code>f</code> over the result of <code>.await</code>ing this call\nProvides types and methods for constructing an <code>eth_call</code> …\nSets the state override set. Note that not all client …\nThe state elements to override for a particular account.\nState Diff\nState override\nA wrapper type that holds a complete state override set.\nWraps a map from storage slot to the overriden value.\nReturns a mutable reference to the <code>Account</code> in the map.\nReturns a state override set with a single element setting …\nOverride the account balance\nAccount balance\nReturns a state override set with a single element setting …\nOverride the code at the account\nAccount code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a state override set with a single element setting …\nOverride the account nonce\nAccount nonce\nReturns an empty state override set.\nReturns a state override set with a single element setting …\nAccount storage\nOverride the value of the account storage at the given …\naddr(bytes32)\nENS registry address (…\ntext(bytes32, string)\nsupportsInterface(bytes4 interfaceID)\nname(bytes32)\nReturns a number in bytes form with padding to fit in 32 …\nReturns a transaction request for calling the <code>resolver</code> …\nReturns the ENS namehash as specified in EIP-137\nReturns the ENS record key hash EIP-634\nReturns a transaction request for calling\nReturns the reverse-registrar name of an address.\nReturns a transaction request for checking interface …\nERC1155\nbalanceOf(address owner, uint256 tokenId)\nERC721\nownerOf(uint256 tokenId)\nAn ERC 721 or 1155 token\nSupported ERCs\nERC-1155 and ERC-721 metadata document.\nAddress of the NFT contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a HTTP url for an IPFS object.\nNFT ID in that contract\nThe URL of the image for the NFT\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method selector\nType of the NFT\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError propagated from the BIP-32 crate\nError propagated from the BIP-39 crate\nError propagated from k256’s ECDSA module\nError type from Eip712Error message\nUnderlying eth keystore error\nError propagated from the hex crate.\nError propagated by IO operations\nA wallet instantiated with a locally stored private key\nRepresents a structure that can resolve into a …\nError propagated from the mnemonic builder module.\nTrait for signing transactions and messages\nAn Ethereum private-public key pair which can be used for …\nError thrown by the Wallet module\nReturns the signer’s Ethereum Address\nBuilds a <code>LocalWallet</code> using the parameters set in mnemonic …\nBuilds a <code>LocalWallet</code> using the parameters set in the …\nReturns the signer’s chain id\nGets the wallet’s chain id\nDecrypts an encrypted JSON from the provided path to …\nSets the derivation path of the child key to be derived.\nCreates a new encrypted JSON with the provided private key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Wallet instance from a raw scalar value (big …\nSets the derivation path of the child key to be derived. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new random keypair seeded with the provided RNG\nCreates a new random encrypted JSON with the provided …\nConstruct a new wallet with an external Signer\nSets the password used to construct the seed from the …\nSets the phrase in the mnemonic builder. The phrase can …\nSigns the provided hash.\nSigns the hash of the provided message after prefixing it\nSigns the transaction\nSynchronously signs the provided transaction, normalizing …\nEncodes and signs the typed data according EIP-712. …\nGets the wallet’s signer\nApplies EIP155\nSets the signer’s chain id\nSets the wallet’s chain_id, used in conjunction with …\nSets the word count of a mnemonic phrase to be generated …\nSets the path to which the randomly generated phrase will …\nDescribes an error propagated from the BIP-32 crate.\nThe ChineseSimplified wordlist that implements the …\nThe ChineseTraditional wordlist that implements the …\nThe Czech wordlist that implements the Wordlist trait.\nThe English wordlist that implements the Wordlist trait.\nHolds valid entropy lengths for a mnemonic\nThe French wordlist that implements the Wordlist trait.\nDescribes the error when the mnemonic’s entropy length …\nDescribes the error when the wordlist is queried at an …\nDescribes the error when the given phrase is invalid.\nDescribes the error when the wordlist does not contain the …\nDescribes the error when the word count provided for …\nThe Italian wordlist that implements the Wordlist trait.\nThe Japanese wordlist that implements the Wordlist trait.\nThe Korean wordlist that implements the Wordlist trait.\nMnemonic represents entropy that can be represented as a …\nThe error type returned while interacting with mnemonics.\nThe Portuguese wordlist that implements the Wordlist trait.\nSixteen bytes of entropy\nThe Spanish wordlist that implements the Wordlist trait.\nThirtyTwo bytes of entropy\nTwenty bytes of entropy\nTwentyEight bytes of entropy\nTwentyFour bytes of entropy\nThe Wordlist trait that every language’s wordlist must …\nThe error type returned while interacting with wordists.\nDescribes an error propagated from the wordlist errors.\nReturns the derived child private key of the corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates new entropy from an RNG. Fails if the …\nAttempts to instantiate Entropy from a slice. Fails if the …\nReturns the word of a given index from the word list.\nReturns the word list as a string.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nReturns the index of a given word from the word list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the entropy array\nReturns the master private key of the corresponding …\nMnemonic phrases\nReturns a new mnemonic generated using the provided random …\nReturns a new mnemonic for a given phrase. The 12-24 …\nReturns a new mnemonic given the word count, generated …\nConverts the mnemonic into phrase.\nConvert to a bip23 seed\nWordlists\nComputes the number of words in the mnemonic\nDescribes an error propagated from the BIP-32 crate.\nHolds valid entropy lengths for a mnemonic\nDescribes the error when the mnemonic’s entropy length …\nDescribes the error when the given phrase is invalid.\nDescribes the error when the word count provided for …\nMnemonic represents entropy that can be represented as a …\nThe error type returned while interacting with mnemonics.\nSixteen bytes of entropy\nThirtyTwo bytes of entropy\nTwenty bytes of entropy\nTwentyEight bytes of entropy\nTwentyFour bytes of entropy\nDescribes an error propagated from the wordlist errors.\nThe ChineseSimplified wordlist that implements the …\nThe ChineseTraditional wordlist that implements the …\nThe Czech wordlist that implements the Wordlist trait.\nThe English wordlist that implements the Wordlist trait.\nThe French wordlist that implements the Wordlist trait.\nDescribes the error when the wordlist is queried at an …\nDescribes the error when the wordlist does not contain the …\nThe Italian wordlist that implements the Wordlist trait.\nThe Japanese wordlist that implements the Wordlist trait.\nThe Korean wordlist that implements the Wordlist trait.\nThe Portuguese wordlist that implements the Wordlist trait.\nThe Spanish wordlist that implements the Wordlist trait.\nThe Wordlist trait that every language’s wordlist must …\nThe error type returned while interacting with wordists.\nThe Chinese (Simplified) wordlist\nThe Chinese (Traditional) wordlist\nThe Czech wordlist\nThe English wordlist\nThe French wordlist\nReturns the word of a given index from the word list.\nReturns the word list as a string.\nReturns the index of a given word from the word list.\nThe Italian wordlist\nThe Japanese wordlist\nThe Korean wordlist\nThe Portuguese wordlist\nThe Spanish wordlist\nThe ChineseSimplified wordlist that implements the …\nChineseSimplified word list, split into words\nThe list of words as supported in the Chinese (Simplified) …\nThe ChineseTraditional wordlist that implements the …\nChineseTraditional word list, split into words\nThe list of words as supported in the Chinese …\nThe Czech wordlist that implements the Wordlist trait.\nCzech word list, split into words\nThe list of words as supported in the Czech language.\nThe English wordlist that implements the Wordlist trait.\nEnglish word list, split into words\nThe list of words as supported in the English language.\nThe French wordlist that implements the Wordlist trait.\nFrench word list, split into words\nThe list of words as supported in the French language.\nThe Italian wordlist that implements the Wordlist trait.\nItalian word list, split into words\nThe list of words as supported in the Italian language.\nThe Japanese wordlist that implements the Wordlist trait.\nJapanese word list, split into words\nThe list of words as supported in the Japanese language.\nThe Korean wordlist that implements the Wordlist trait.\nKorean word list, split into words\nThe list of words as supported in the Korean language.\nPortuguese word list, split into words\nThe Portuguese wordlist that implements the Wordlist trait.\nThe list of words as supported in the Portuguese language.\nSpanish word list, split into words\nThe list of words as supported in the Spanish language.\nThe Spanish wordlist that implements the Wordlist trait.")