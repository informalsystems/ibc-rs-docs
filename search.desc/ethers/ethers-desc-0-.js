searchState.loadedDescShard("ethers", 0, "ethers-rs\nAn Ethereum EIP-155 chain.\nWrapper around a hash map that maps a Chain to the contract…\nReturns the address of the contract on the specified …\nFetch the addressbook for a contract by its name. If the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nABI codec related errors\nThrown when the internal BaseContract errors\nProgrammatically generate type-safe Rust bindings for an …\nInclude all contracts\nA reduced form of <code>Contract</code> which just takes the <code>abi</code> and …\nHelper struct for managing calls to be made to the <code>function</code>…\nThrown during deployment if a constructor argument was …\n<code>Contract</code> is a <code>ContractInstance</code> object with an <code>Arc</code> …\n<code>ContractCall</code> is a <code>FunctionCall</code> object with an …\n<code>ContractDeployer</code> is a <code>ContractDeploymentTx</code> object with an …\nHelper which manages the deployment transaction of a smart …\nAn Error which is thrown when interacting with a smart …\nContract call returned an error\n<code>ContractFactory</code> is a <code>DeploymentTxFactory</code> object with an <code>Arc</code>…\nUsed to filter contracts that should be <em>included</em> in the …\nA Contract is an abstraction of an executable program on …\nThrown if a contract address is not found in the …\nA trait for enums unifying <code>EthError</code> types. This trait is …\nThrown when the ABI decoding fails\nThrown when the ABI decoding fails\nTo deploy a contract to the Ethereum network, a …\nThrown when detokenizing an argument\nThrown when detokenizing an argument\nDerives the <code>Eip712</code> trait for the labeled type.\nDerives the <code>AbiEncode</code> and <code>AbiDecode</code> traits for the labeled …\nDerives the <code>AbiType</code> and all <code>Tokenizable</code> traits for the …\nA helper trait for types that represent all call input …\nDerives the <code>EthCall</code> and <code>Tokenizeable</code> trait for the labeled …\nDerives the <code>Display</code> trait on structs by formatting each …\nA helper trait for types that represents a custom error …\nDerives the <code>EthError</code> and <code>Tokenizeable</code> trait for the …\nA trait for implementing event bindings\nDerives the <code>EthEvent</code> and <code>Tokenizable</code> traits for the …\nA trait for types (events) that can be decoded from a …\nHelper for managing the event filter before querying or …\nOnly include contracts that <em>don’t</em> match the filter\nA Contract Filter that exclude certain contracts\nHelper for managing a transaction before submitting it to …\nContract call reverted when not allowed\nHelper to match <code>ethabi::Param</code>s with structs and nested …\nUnsupported chain\nA value which is initialized on the first access.\nMetadata inside a log\nThe Multicall3 contract address that is deployed in …\nThe chain IDs that <code>MULTICALL_ADDRESS</code> has been deployed to.\nThrown when a middleware call fails\nCollects Abigen structs for a series of contracts, pending …\nA Multicall is an abstraction for sending batched …\nV1\nV2\nV3\nErrors using the <code>crate::Multicall</code> system\nThe version of the <code>Multicall</code>. Used to determine which …\nThrown when a provider call fails\nContract reverted\nOnly include contracts that match the filter\nA Contract Filter that only includes certain contracts.\nRetrieves the ABI signature for the call\nRetrieves the ABI signature for the error\nRetrieves the ABI signature for the event this data …\nGenerates type-safe bindings to an Ethereum smart contract …\nAddress from which this log originated\nThe <code>block</code> field of the Multicall aggregate call.\nOptional block number to be used when calculating the …\nOptional block number to be used when calculating the …\nThe block hash in which the log was emitted\nThe block in which the log was emitted\nThe Multicall contract interface.\nHelper for ABI decoding raw data based on a function’s …\nDecodes an Ethereum <code>RawLog</code> into an instance of the type.\ndecode from a <code>RawLog</code>\nDecodes a series of logs into a vector\nDecode the error from EVM revert data including an Error …\nDecode the error from EVM revert data including an Error …\nthe actual deployer, exposed for overriding the defaults\nthe actual deployer, exposed for overriding the defaults\nHelper for ABI encoding arguments for a specific function\nThe name of the error\nThe event filter’s state\nAttempt to decode from a <code>JsonRpcError</code> by extracting revert …\nThe ABI of the function being called\nThe ABI of the function being called\nThe name of the function\nReturns true if this is an anonymous event\nWhether to use a legacy or a EIP-1559 transaction.\nLog index position in the block\nA mapping from method signature to a name-index pair for …\nThe name of the event this type represents\nReturns an Event builder for the ethereum event …\nAttempt to parse a log into a specific output type.\nThe selector of the function\nThe selector of the error\nRetrieves the signature for the event this data …\nThe state overrides of the Multicall aggregate\nContains the <code>EventStream</code> type which aids in streaming …\nThe transaction hash in which the log was emitted\nTransactions index position log was created from\nThe raw transaction object\nThe raw transaction object\n<code>true</code> if the selector corresponds to an error that this …\nThe version of which methods to use when making the …\nThe underlying error\nThe underlying error\nGeneric wrapper around Log streams, mapping their content …\nWrapper around a <code>EventStream</code>, that in addition to the …\nA stream of two items\nStream for <code>EventStream::select</code>\nThe stream ID, provided by the RPC server\nExtensions to the <code>ethabi</code> API.\nEthereum data types.\nVarious utilities\nAPI building calls to contracts ABI.\nAdditional trait for types that can appear in arrays\nTrait for ABI decoding\nTrait for ABI encoding\nABI codec related errors\nContract ABI and optional bytecode as JSON object\nA parser that turns a “human readable abi” into a <code>Abi</code>\nA trait for types that can be represented in the Ethereum …\nABI address.\nAddress.\nAddress.\nMatch any.\nArray of unknown size.\nArray of params with unknown size.\njson array input as <code>[]</code>\nBoolean.\nBoolean value.\nABI bytes.\nBytes.\nVector of bytes of unknown size.\nEither an input/output or a nested component of an …\nContract constructor specification.\nAPI building calls to contracts ABI.\nThrown when the ABI decoding fails\nThrown when detokenizing an argument\nOutput type possible to deserialize from Contract ABI\nAn error thrown by <code>encode_packed</code>.\nContains the error value\nEthabi errors\nExtension trait for <code>ethabi::AbiError</code>.\nContract event.\nExtension trait for <code>ethabi::Event</code>.\nEvent param specification.\nContract events iterator.\nArray with fixed size.\nArray with known size.\nABI fixed bytes.\nVector of bytes with fixed size.\nVector of bytes with known size.\nContract function specification.\nExtension trait for <code>ethabi::Function</code>.\nContract functions generated by ethabi-derive\nContract functions iterator.\nCommonly used FixedBytes of size 32\nHex string parsing error.\nABI signed integer.\nSigned integer.\nSigned integer.\nInvalid data.\nInvalid entity such as a bad function name.\nRepresents contract ABI input variants\nDecoded log.\nthe associated <code>Log</code> type that can be parsed from a <code>RawLog</code> …\nCommon filtering functions that are available for any …\nDecoded log param.\nFunction does not accept Ether - the default\njson object input as <code>{&quot;abi&quot;: [..], &quot;bin&quot;: &quot;...&quot;}</code>\nContains the success value\nMatch any of the hashes.\nOther errors.\nOutput types of the contract function\nFunction param.\nFunction and event param types.\nError that can occur during human readable parsing\nInteger parsing error.\ntrait common to things (events) that have an associated <code>Log</code>…\nFunction accepts Ether\nSpecified not to read blockchain state\nContract ABI as a list of items where each item can be a …\nEthereum log.\nRaw topic filter.\nEthabi result type\nSerialization error.\nRepresents a solidity struct\nWhether a function modifies or reads blockchain state\nString.\nString.\nMatch only this hash.\nEthereum ABI params.\nSimplified output type for single value.\nMarker trait for <code>Tokenizable</code> types that are can tokenized …\nConvert types into <code>Token</code>s.\nAcceptable topic possibilities.\nTopic filter.\nTuple containing different types\nTuple of params of variable types.\nTuple params specification\nABI unsigned integer.\nUnsigned integer.\nUnsigned integer.\nSpecified to not modify the blockchain state\nABI word.\nCompute the method signature in the standard ABI format. …\nCompute the event signature in human-readable format. The …\nCompute the method signature in the standard ABI format.\nIf anonymous, event cannot be found using <code>from</code> filter.\nIf the struct only consists of elementary fields, this …\nReturns the bytecode object\nConstant function.\nCreates constructor call builder.\nContract constructor.\nContract constructor.\nOthers are just plain data.\nDecodes ABI compliant vector of bytes into vector of …\nDecodes the given bytes output for the contract function\nDecodes the ABI encoded data\nDecode hex encoded ABI encoded data\nParses the ABI function input to a list of tokens.\nParses the ABI function output to list of tokens.\nDecodes ABI compliant vector of bytes into vector of …\nReturns the deployed bytecode object\nEncodes vector of tokens into ABI compliant vector of …\nABI encode the type\nReturns the encoded value as hex string, <em>with</em> a <code>0x</code> prefix\nPrepares ABI constructor call with given input params.\nPrepares ABI function call with given input params.\nEncodes the given tokens into an ABI compliant vector of …\nGet the contract error named <code>name</code>, the first if there are …\nIterate over all errors of the contract in arbitrary order.\nContract errors, maps signature to error.\nContract errors, maps signature to error.\nGet all errors named <code>name</code>.\nGet the contract event named <code>name</code>, the first if there are …\n(event name, idx) -&gt; struct which are the identifying …\nIterate over all events of the contract in arbitrary order.\nContract events, maps signature to event.\nContract events, maps signature to event.\nGet all contract events named <code>name</code>.\nContract has fallback function.\nContract has fallback function.\nAll the fields of this struct\nCreates topic filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Token</code> into expected type.\nCreates a new instance from parsed ABI tokens.\nGet the function named <code>name</code>, the first if there are …\n(function name, param name) -&gt; struct which are the …\nIterate over all functions of the contract in arbitrary …\nContract functions.\nContract functions.\nGet all functions named <code>name</code>.\nReturns <code>true</code> if a field with an empty name exists\nIndexed flag. If true, param is used to build block bloom.\nIndexed flag. for solidity events\nConstructor input.\nEvent input.\nFunction input.\nAdditional Internal type.\nAdditional Internal type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts a specified type back into token.\nConverts <code>self</code> into a <code>Vec&lt;Token&gt;</code>.\nConverts token to…\nConverts token to…\nReturns true if topic is empty (Topic::Any)\nreturns whether a ParamType is dynamic used to decide how …\nCheck if the token is a dynamic type resulting in prefixed …\nreturns whether a zero length byte slice (<code>0x</code>) is a valid …\nParam type.\nParam type.\nParam type.\nLoads contract from json.\nReturns the full Keccak-256 hash of the signature of the …\nMap\nReturns the minimum number of bytes that <code>ty</code> takes up in …\nA hint of the minimum number of bytes this type takes up …\nName of this struct\nEvent name.\nParam name.\nFunction name.\nDecoded log name.\nParam name.\nParam name.\nCreates a new instance of the lexer\nFunction output.\n(function name) -&gt; <code>Vec&lt;structs&gt;</code> all structs the function …\nThe native ABI type this type represents.\nLog params.\nParses a “human readable abi” string vector\nParse a solidity struct definition\nParses a “human readable abi” string vector\nParses a “human readable abi” string\nParses a Constructor from a human readable form\nParses a Function from a human readable form\nParses a solidity event declaration from …\nParses an Event from a human readable form\nReturns the parsed function from the input string\nParses a Function from a human readable form\nparse the associated <code>Log</code> type from a <code>RawLog</code>\nParses <code>RawLog</code> and retrieves all log params from it. …\nParses <code>RawLog</code> and retrieves all log params from it. Fails, …\nParses a “human readable abi” string\nParses the input into a ParamType\nContract has receive function.\nContract has receive function.\nCompute the Keccak256 function selector used by contract …\nCompute the Keccak256 error selector used by contract ABIs.\nReturns the first four bytes of the Keccak-256 hash of the …\nReturn the 4 byte short signature of this function.\nEvent signature\nReturns a signature that uniquely identifies this function.\nWhether the function reads or modifies blockchain state\nSolidity struct definition parsing support\nsolidity structs as tuples\nsolidity structs\nReturns the next <code>Constructor</code> and consumes the underlying …\nReturns the next <code>Error</code> and consumes the underlying tokens\nReturns the next <code>Function</code> and consumes the underlying …\nTopic.\nUsually (for not-anonymous transactions) the first topic …\nTopic.\nSecond topic.\nTopic.\nThird topic.\nFourth topic.\nIndexed event params are represented as log topics.\nCheck whether the type of the token matches the given …\nCheck if all the types of the tokens match the given …\nDecoded log value.\nMatch any log parameters.\nLink additional structs for parsing\nContract error specification.\nABI address.\nAddress.\nAddress.\nMatch any.\nArray of unknown size.\nArray of params with unknown size.\nBoolean.\nBoolean value.\nABI bytes.\nBytes.\nVector of bytes of unknown size.\nContract constructor specification.\nAPI building calls to contracts ABI.\nContains the error value\nEthabi errors\nContract event.\nEvent param specification.\nContract events iterator.\nArray with fixed size.\nArray with known size.\nABI fixed bytes.\nVector of bytes with fixed size.\nVector of bytes with known size.\nContract function specification.\nContract functions generated by ethabi-derive\nContract functions iterator.\nCommonly used FixedBytes of size 32\nHex string parsing error.\nABI signed integer.\nSigned integer.\nSigned integer.\nInvalid data.\nInvalid entity such as a bad function name.\nDecoded log.\nthe associated <code>Log</code> type that can be parsed from a <code>RawLog</code> …\nCommon filtering functions that are available for any …\nDecoded log param.\nFunction does not accept Ether - the default\nContains the success value\nMatch any of the hashes.\nOther errors.\nOutput types of the contract function\nFunction param.\nFunction and event param types.\nInteger parsing error.\ntrait common to things (events) that have an associated <code>Log</code>…\nFunction accepts Ether\nSpecified not to read blockchain state\nEthereum log.\nRaw topic filter.\nEthabi result type\nSerialization error.\nWhether a function modifies or reads blockchain state\nString.\nString.\nMatch only this hash.\nEthereum ABI params.\nAcceptable topic possibilities.\nTopic filter.\nTuple containing different types\nTuple of params of variable types.\nTuple params specification\nABI unsigned integer.\nUnsigned integer.\nUnsigned integer.\nSpecified to not modify the blockchain state\nABI word.\nIf anonymous, event cannot be found using <code>from</code> filter.\nConstant function.\nContract constructor.\nOthers are just plain data.\nDecodes ABI compliant vector of bytes into vector of …\nDecodes the given bytes output for the contract function\nParses the ABI function input to a list of tokens.\nDecodes ABI compliant vector of bytes into vector of …\nEncodes vector of tokens into ABI compliant vector of …\nPrepares ABI error with given input params.\nContract errors, maps signature to error.\nContract events, maps signature to event.\nContract has fallback function.\nReturns the argument unchanged.\nContract functions.\nIndexed flag. If true, param is used to build block bloom.\nConstructor input.\nError input.\nEvent input.\nFunction input.\nAdditional Internal type.\nAdditional Internal type.\nCalls <code>U::from(self)</code>.\nParam type.\nParam type.\nParam type.\nReturns the full Keccak-256 hash of the signature of the …\nError name.\nEvent name.\nParam name.\nFunction name.\nDecoded log name.\nParam name.\nParam name.\nFunction output.\nFunction and event param types.\nLog params.\nparse the associated <code>Log</code> type from a <code>RawLog</code>\nContract has receive function.\nReturns the first four bytes of the Keccak-256 hash of the …\nError signature\nWhether the function reads or modifies blockchain state\nABI param and parsing for it.\nTopic.\nUsually (for not-anonymous transactions) the first topic …\nTopic.\nSecond topic.\nTopic.\nThird topic.\nFourth topic.\nIndexed event params are represented as log topics.\nDecoded log value.\nMatch any log parameters.\nBloom hash type with 256 bytes (2048 bits) size.\nConversion from decimal string error\nThe error type for parsing numbers from strings.\nA list of error categories encountered when parsing …\nFixed-size uninterpreted hash type with 16 bytes (128 …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nA character in the input string is not valid for the given …\nChar not from range 0-9\nThe input length is not valid for the given radix.\nValue does not fit into type\nMaximum value.\nMaximum value.\nMaximum value.\nMaximum value.\nLittle-endian large integer type 128-bit unsigned integer.\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nLittle-endian large integer type Unsigned 64-bit integer.\nThe given radix is not supported.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nMultiplies two 128-bit integers to produce full 256-bit …\nMultiplies two 256-bit integers to produce full 512-bit …\nConditional compilation depending on whether …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nWhether this is zero.\nWhether this is zero.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the corresponding <code>FromStrRadixErrKind</code> for this …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nAddress.\nArray of unknown size.\nBoolean.\nBytes.\nArray with fixed size.\nVector of bytes with fixed size.\nSigned integer.\nFunction and event param types.\nUsed to convert param type represented as a string to rust …\nString.\nTuple containing different types\nUnsigned integer.\nOutput formatter for param type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts string to param type.\nReturns string which is a formatted represenation of param.\nIf <code>serialize_tuple_contents</code> is <code>true</code>, tuples will be …\nAddress.\nArray of params with unknown size.\nBoolean value.\nVector of bytes of unknown size.\nArray with known size.\nVector of bytes with known size.\nSigned integer.\nTries to parse string as a token. Does not require string …\nTries to parse string as a token. Require string to …\nString.\nEthereum ABI params.\nThis trait should be used to parse string values as tokens.\nTuple of params of variable types.\nUnsigned integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to parse a string as a token of given type.\nTries to parse a value as an address.\nTries to parse a value as a vector of tokens.\nTries to parse a value as a bool.\nTries to parse a value as bytes.\nTries to parse a value as a vector of tokens of fixed size.\nTries to parse a value as bytes.\nTries to parse a value as signed integer.\nTries to parse a value as a string.\nTried to parse a struct as a vector of tokens\nTries to parse a value as unsigned integer.\nRepresents elementary types, see <code>ParamType</code>\nA field declaration inside a struct\nA field declaration inside a struct\nMapping\nRepresents a solidity struct\nA non elementary type field, treated as user-defined struct\nRepresents a elementary field declaration inside a struct …\nRepresents the type of a field in a struct\nHow the type of a struct field is referenced\nA non elementary type field, represents a user defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this field is an elementary <code>ParamType</code>.\nWhether this field is a mapping.\nWhether this field is a user-defined struct.\nParse a struct field declaration\nsecp256k1 curve point expressed in affine coordinates.\nCompressed SEC1-encoded secp256k1 (K-256) curve point.\nSEC1-encoded secp256k1 (K-256) curve point.\nsecp256k1 (K-256) field element serialized as bytes.\nBase point of secp256k1.\nBase point of secp256k1.\nAdditive identity of the group: the point at infinity.\nAdditive identity of the group: the point at infinity.\nNon-zero secp256k1 (K-256) scalar field element.\nMultiplicative identity.\nA point on the secp256k1 curve in projective coordinates.\nsecp256k1 (K-256) public key.\nScalars are elements in the finite field modulo n.\nsecp256k1 (K-256) elliptic curve.\nsecp256k1 (K-256) secret key.\n256-bit unsigned big integer.\nBytes used by a wide reduction: twice the width of …\nZero scalar.\nReturns self + rhs mod n.\nDoubles this point.\nElliptic Curve Digital Signature Algorithm (ECDSA).\nCalculates SECP256k1 endomorphism: <code>self * lambda</code>.\nCheck whether <code>self</code> is equal to an affine point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns a (nearly) uniformly-random scalar, generated in …\nReturns a uniformly-random scalar, generated using …\nReturns the base point of secp256k1.\nReturns the base point of SECP256k1.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of SECP256k1, also known as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the scalar.\nFast variable-time inversion using Stein’s algorithm.\nIs this point the identity point?\nChecks if the scalar is zero.\nModulo multiplies two scalars.\nCalculates <code>k * G</code>, where <code>G</code> is the generator.\nNegates the scalar.\nTaproot Schnorr signatures as defined in BIP340.\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nModulo squares the scalar.\nReturns self - rhs mod n.\nReturns the affine representation of this point.\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. “recid”.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …\nPreferred digest to use when computing ECDSA signatures …\nBind a preferred <code>Digest</code> algorithm to an elliptic curve …\nTry to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined …\nSign a prehashed message digest using the provided secret …\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically …\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA …\nVerify the prehashed message against the provided ECDSA …\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nVerify the provided signature for the given prehashed …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …\nCompress remaining data after padding it with <code>delim</code>, zeros …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nReturns the argument unchanged.\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nReturns the argument unchanged.\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nType aliases for many constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned …\nInstantiates a singleton representing this unsigned …\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the OID associated with this value.\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive …\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAlgorithm <code>ObjectIdentifier</code> for elliptic curve public key …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nHow many bits of information can be reliably stored in the …\nElliptic curve.\nElliptic curve with an arithmetic implementation.\nPrime order elliptic curve group.\nGenerator of the <code>t-order</code> multiplicative subgroup.\nContains the error value\nElliptic curve errors.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a …\nTrait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …\nSize of serialized field elements of this elliptic curve.\nSize of a serialized field element in bytes.\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nScalar modulus.\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nNon-zero scalar type.\nThe one element of the field, the multiplicative identity.\nMultiplicative identity.\nOrder of this elliptic curve, i.e. number of elements in …\nContains the success value\nThe output of the batch normalization; a container of …\nMarker trait for elliptic curves with prime order.\nPrime order elliptic curve with projective arithmetic …\nThis represents an element of a non-binary prime field.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nElliptic curve public keys.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nResult type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalar field element for a particular elliptic curve.\nScalars modulo the order of this group’s scalar field.\nScalar field modulo this curve’s order.\nGeneric scalar type with primitive functionality.\nElliptic curve secret keys.\nInverse of $2$ in the field.\nInteger type used to represent field elements of this …\nThe zero element of the field, the additive identity.\nZero scalar.\nBorrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.\nBorrow the inner limbs as a slice.\nBorrow the inner secret <code>ScalarPrimitive</code> value.\nBorrow the inner <code>C::Uint</code>.\nPerform a batched conversion to affine representation on a …\nCubes this element.\nDecode unsigned integer from serialized field element.\nDoubles this element.\nDoubles this element.\nEncode unsigned integer into serialized field element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>AffinePoint</code> into a <code>PublicKey</code>\nDecode <code>ScalarPrimitive</code> from a serialized field element\nDeserialize secret key from an encoded secret scalar.\nInitialize <code>PublicKey</code> from an <code>EncodedPoint</code>\nAttempts to convert a byte representation of a field …\nDecode a <code>NonZeroScalar</code> from a big endian-serialized field …\nAttempts to convert a byte representation of a field …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDeserialize secret key encoded in the SEC1 ASN.1 DER …\nCompute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …\nDecode <code>ScalarPrimitive</code> from a big endian byte slice.\nDeserialize secret key from an encoded secret scalar …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nCreate a <code>NonZeroScalar</code> from a <code>C::Uint</code>.\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nIs this <code>ScalarPrimitive</code> value even?\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nIs this <code>ScalarPrimitive</code> value odd?\nReturns true iff this element is zero.\nIs this <code>ScalarPrimitive</code> value equal to zero?\nReturns true iff this element is zero.\nCreate a <code>NonZeroScalar</code> from a scalar.\nCreate a new scalar from <code>Curve::Uint</code>.\nCreate a new secret key from a scalar value.\nTraits for arithmetic operations on elliptic curve field …\nTraits for elliptic curve points.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nGet the <code>PublicKey</code> which corresponds to this secret key\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nGenerate a random <code>NonZeroScalar</code>.\nGenerate a random <code>ScalarPrimitive</code>.\nGenerate a random <code>SecretKey</code>.\nScalar types.\nSupport for SEC1 elliptic curve encoding formats.\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nEncode <code>ScalarPrimitive</code> as a serialized field element.\nSerialize raw secret scalar as a big endian integer.\nSerialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …\nConvert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …\nGet the secret <code>NonZeroScalar</code> value for this key.\nConvert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …\nConverts an element of the prime field into the standard …\nConvert this <code>PublicKey</code> into the …\nSerialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …\nConvert to a <code>C::Uint</code>.\nComplete projective formulas for prime order elliptic …\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nSize of the inner integer in bits.\nTotal size of the represented integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nSize of the inner integer in bytes.\nTotal size of the represented integer in bytes.\nIntegers whose representation takes a bounded amount of …\nAlias for a byte array whose size is defined by …\nSize of a byte array which encodes a big integer.\nProvides intentionally-checked arithmetic on <code>T</code>.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nA boolean value returned by constant-time <code>const fn</code>s.\nEncoding support.\nThe falsy value.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nThe number of limbs used on this platform.\nBig integers are represented as an array of smaller CPU …\nMaximum value this integer can express.\nMaximum value this <code>Limb</code> can express.\nMaximum value this integer can express.\nMaximum value this <code>Uint</code> can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nWrapper type for non-zero integers.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nA pre-calculated reciprocal for division by a single limb.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe truthy value.\n1024-bit unsigned big integer.\n128-bit unsigned big integer.\n1280-bit unsigned big integer.\n1536-bit unsigned big integer.\n16384-bit unsigned big integer.\n1792-bit unsigned big integer.\n192-bit unsigned big integer.\n2048-bit unsigned big integer.\n256-bit unsigned big integer.\n3072-bit unsigned big integer.\n320-bit unsigned big integer.\n32768-bit unsigned big integer.\n3584-bit unsigned big integer.\n384-bit unsigned big integer.\n4096-bit unsigned big integer.\n4224-bit unsigned big integer.\n4352-bit unsigned big integer.\n448-bit unsigned big integer.\n512-bit unsigned big integer.\n576-bit unsigned big integer.\n6144-bit unsigned big integer.\n64-bit unsigned big integer.\n640-bit unsigned big integer.\n704-bit unsigned big integer.\n768-bit unsigned big integer.\n8192-bit unsigned big integer.\n832-bit unsigned big integer.\n896-bit unsigned big integer.\n960-bit unsigned big integer.\nStack-allocated big unsigned integer.\nWide integer type: double the width of <code>Word</code>.\nUnsigned integer type that the <code>Limb</code> newtype wraps.\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nZero values.\nComputes <code>self + rhs + carry</code>, returning the result along …\nComputes <code>a + b + carry</code>, returning the result along with …\nCompute <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code> for the special modulus …\nBorrow the limbs of this <code>Uint</code>.\nBorrow the limbs of this <code>Uint</code> mutably.\nBorrow the inner limbs as an array of <code>Word</code>s.\nBorrow the inner limbs as a mutable array of <code>Word</code>s.\nGet the value of the bit at position <code>index</code>, as a truthy or …\nReturns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …\nCalculates <code>a &amp; b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculates <code>a | b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculates <code>a ^ b</code>.\nComputes bitwise <code>a ^ b</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …\nPerform checked division, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …\nPerform checked reduction, returning a <code>CtOption</code> which …\nSee <code>Self::checked_sqrt_vartime</code>.\nPerform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …\nPerform a comparison of the inner value in variable-time.\nReturns the Ordering between <code>self</code> and <code>rhs</code> in variable time.\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConst-friendly assertion that two values are equal.\nConst-friendly assertion that two values are NOT equal.\nCreates a new non-zero integer in a const context. The …\nCreates a new non-zero limb in a const context. The second …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nCreates a <code>Residue</code> with the given value for a specific …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPre-calculates a reciprocal for a known divisor, to be …\nReturns a default instance of this object. It is a …\nComputes self / rhs, returns the quotient, remainder.\nComputes <code>self</code> / <code>rhs</code>, returns the quotient (q) and …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPerforms an equality check in variable-time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize from a big-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from big endian bytes.\nDecode from big endian bytes.\nCreate a new <code>Uint</code> from the provided big endian hex string.\nCreate a new <code>Uint</code> from the provided big endian bytes.\nDeserialize from a little-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from little endian bytes.\nDecode from little endian bytes.\nCreate a new <code>Uint</code> from the provided little endian hex …\nCreate a new <code>Uint</code> from the provided little endian bytes.\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU128</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u128</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u16</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u16</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u32</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u32</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u64</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u64</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u8</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>Uint</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>WideWord</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>Word</code> (const-friendly)\nCreate a <code>Uint</code> from an array of <code>Word</code>s (i.e. word-sized …\nImplements a modulus with the given name, type, and value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>. …\nComputes 1/<code>self</code> mod <code>2^k</code>.\nComputes 1/<code>self</code> mod <code>2^k</code>. This method is constant-time …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nIs this limb an odd number?\nDetermine if this value is equal to zero.\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nComputes <code>self + (b * c) + carry</code>, returning the result …\nImplements modular arithmetic for constant moduli.\nMultiply <code>self</code> by <code>rhs</code>, returning a concatenated “wide” …\nCompute <code>self * rhs mod p</code>.\nComputes <code>self * rhs mod p</code> for the special modulus …\nCompute “wide” multiplication, with a product twice …\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nComputes <code>-a mod p</code>. Assumes <code>self</code> is in <code>[0, p)</code>.\nComputes <code>-a mod p</code> for the special modulus <code>p = MAX+1-c</code> …\nCreate a new checked arithmetic wrapper for the given …\nCreate a new non-zero integer.\nA non-const-fn version of <code>new_const()</code>, wrapping the result …\nConst-friendly <code>Uint</code> constructor.\nCalculate the number of limbs required to represent the …\nCalculates <code>!a</code>.\nComputes bitwise <code>!a</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nImport prelude for this crate: includes important traits.\nGenerate a cryptographically secure random value.\nGenerate a random <code>NonZero&lt;T&gt;</code>.\nGenerate a cryptographically secure random <code>Uint</code>.\nGenerate a cryptographically secure random number which is …\nGenerate a cryptographically secure random <code>Uint</code> which is …\nComputes self % rhs, returns the remainder.\nComputes <code>self</code> % 2^k. Faster than reduce since its a power …\nConstruct a <code>Uint&lt;T&gt;</code> from the unsigned integer value, …\nPerform saturating addition.\nPerform saturating addition, returning <code>MAX</code> on overflow.\nPerform saturating multiplication.\nPerform saturating multiplication, returning <code>MAX</code> on …\nPerform saturating subtraction.\nPerform saturating subtraction, returning <code>ZERO</code> on …\nComputes <code>self - (rhs + borrow)</code>, returning the result along …\nComputes <code>a - (b + borrow)</code>, returning the result along with …\nComputes <code>self &lt;&lt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; shift</code>.\nComputes a left shift on a wide input as <code>(lo, hi)</code>.\nComputes <code>self &gt;&gt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &gt;&gt; n</code>.\nComputes a right shift on a wide input as <code>(lo, hi)</code>.\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nSee <code>Self::sqrt_vartime</code>.\nComputes √(<code>self</code>) Uses Brent &amp; Zimmermann, Modern …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nSquare self, returning a concatenated “wide” result.\nSquare self, returning a “wide” result in two parts as …\nCompute <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code> for the special modulus …\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nConvert this <code>Uint</code> into its inner limbs.\nCreate an array of <code>Word</code>s (i.e. word-sized unsigned …\nCalculate the number of trailing ones the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nPerform wrapping addition, discarding overflow.\nPerform wrapping addition, discarding overflow.\nPerform wrapping bitwise <code>AND</code>.\nWrapped division is just normal division i.e. <code>self</code> / <code>rhs</code> …\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping negation.\nPerform wrapping negation.\nPerform wrapping bitwise <code>OR</code>.\nWrapped (modular) remainder calculation is just <code>self</code> % <code>rhs</code>.\nSee <code>Self::wrapping_sqrt_vartime</code>.\nWrapped sqrt is just normal √(<code>self</code>) There’s no way …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping bitwise `XOR``.\nThe original type.\nA generalization for numbers kept in optimized …\nImplements <code>Residue</code>s, supporting modular arithmetic with a …\nAlgorithm 14.32 in Handbook of Applied Cryptography …\nConvert the number back from the optimized representation.\nImplements <code>DynResidue</code>s, supporting modular arithmetic with …\nNumber of limbs required to encode a residue\nThe constant modulus\nThe lowest limbs of -(MODULUS^-1) mod R\nThe representation of 1 mod <code>MOD</code>.\nParameter used in Montgomery reduction\nR^2, used to move into Montgomery form\nR^3, used to perform a multiplicative inverse\nA residue mod <code>MOD</code>, represented using <code>LIMBS</code> limbs. The …\nThe parameters to efficiently go to and from the …\nThe representation of 0 mod <code>MOD</code>.\nAdds <code>rhs</code>.\nAccess the <code>Residue</code> value in Montgomery form.\nMutably access the <code>Residue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nCreate a <code>Residue</code> from a value in Montgomery form.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>Residue</code> in Montgomery form.\nA residue represented using <code>LIMBS</code> limbs. The odd modulus …\nThe parameters to efficiently go to and from the …\nAdds <code>rhs</code>.\nAccess the <code>DynResidue</code> value in Montgomery form.\nMutably access the <code>DynResidue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynResidue</code> from a value in Montgomery form.\nCreate <code>DynResidueParams</code> corresponding to a <code>ResidueParams</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nReturns the modulus which was used to initialize these …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents 1.\nReturns the parameter struct used to initialize this …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>DynResidue</code> in Montgomery form.\nInstantiates a new <code>Residue</code> that represents zero.\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nIntegers whose representation takes a bounded amount of …\nSize of a byte array which encodes a big integer.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nEncoding support.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nMaximum value this integer can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe value <code>0</code>.\nZero values.\nCompute <code>self + rhs mod p</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nDeserialize from a big-endian byte array.\nDecode from big endian bytes.\nDeserialize from a little-endian byte array.\nDecode from little endian bytes.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nDetermine if this value is equal to zero.\nCompute <code>self * rhs mod p</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nGenerate a cryptographically secure random value.\nGenerate a cryptographically secure random number which is …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nCompute <code>self - rhs mod p</code>.\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nWrapper type which implements an optimization barrier for …\nThe <code>Choice</code> struct represents a choice for use in …\nA type which can be conditionally negated in constant time.\nA type which can be conditionally selected in constant …\nAn <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.\nA type which can be compared in some manner and be …\nA type which can be compared in some manner and be …\nThe <code>CtOption&lt;T&gt;</code> type represents an optional value similar …\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nConditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.\nNegate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …\nSelect <code>a</code> or <code>b</code> according to <code>choice</code>.\nConditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …\nDetermine if two items are equal.\nTwo <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …\nDetermine whether <code>self &gt; other</code>.\nDetermine whether <code>self &lt; other</code>.\nDetermine if two items are NOT equal.\nReturns the contained value, consuming the <code>self</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the inner value, applying an optimization barrier on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, …\nReturns a true <code>Choice</code> if this value is <code>None</code>.\nReturns a true <code>Choice</code> if this value is <code>Some</code>.\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nThis method is used to construct a new <code>CtOption&lt;T&gt;</code> and …\nConstructs a new instance of <code>BlackBox</code> which will wrap the …\nReturns <code>self</code> if it contains a value, and otherwise returns …\nThis returns the underlying value but panics if it is not …\nThis returns the underlying value if it is <code>Some</code> or the …\nThis returns the underlying value if it is <code>Some</code> or the …\nUnwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.\nMarker trait for types whose <code>Default</code> is the desired …\nFallible trait for representing cases where zeroization …\nTrait for securely erasing values from memory.\nDerive the <code>Zeroize</code> trait.\nMarker trait signifying that this type will …\nDerive the <code>ZeroizeOnDrop</code> trait.\n<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMove value inside a <code>Zeroizing</code> wrapper which ensures it …\nTry to zero out this object from memory using Rust …\nZero out this object from memory using Rust intrinsics …\nZeroizes a flat type/struct. Only zeroizes the values that …\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHelper trait for scalars and arrays, but not slices.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nBit representation of a field element.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nThis represents the bits of an element of a prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nThe backing store for a bit representation of a prime …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nThe zero constant.\nA field element of small multiplicative order $N$.\nThe ordering of bits within an <code>A::Store</code> element.\nViews the type as a mutable slice of its elements.\nViews the type as a slice of its elements.\nConsumes this iterator and inverts each field element …\nReturns the bits of the field characteristic (the modulus) …\nCubes this element.\nThe wrapped data buffer.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nWraps <code>self</code> in a <code>BitArray</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into a …\nConverts an element of the prime field into the standard …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …\nThe affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nGiven a base and a number of scalars, compute a window …\nPerforms exponentiation given a base.\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nGiven a scalar, compute its wNAF representation and return …\nPerforms exponentiation given a scalar.\nConstructs new space for the window table while borrowing …\nConstructs new space for the scalar representation while …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nPerform a batched inversion on a sequence of field …\nBytes used as input to <code>Reduce::reduce_bytes</code>.\nPerform an inversion on a field element (i.e. base field …\nLinear combination.\nLinear combination (extended version).\nThe multiplication operator <code>*</code>.\nMultiplication by the generator.\nThe unary negation operator <code>-</code>.\nField element type\nThe output of batch inversion. A container of field …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nModular reduction.\nModular reduction to a non-zero output.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nInvert a batch of field elements.\nInvert a field element.\nInvert a field element in variable time.\nCalculates <code>x * k + y * l</code>.\nCalculates <code>x1 * k1 + ... + xn * kn</code>.\nPerforms the <code>*</code> operation.\nMultiply by the generator of the prime-order subgroup.\nPerforms the unary <code>-</code> operation.\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\nASN.1 DER-related errors.\nA trait which associates an OID with a type.\nParse a private key object from a PKCS#8 encoded document.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nSerialize a private key object to a PKCS#8 encoded …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a PKCS#8 document.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\n<code>AlgorithmIdentifier::parameters</code> is malformed or otherwise …\nPKCS#8 <code>PrivateKeyInfo</code>.\nPublic key errors propagated from the <code>spki::Error</code> type.\nResult type\nSecret <code>Document</code> type.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nDenotes PKCS#8 v1: no public key field.\nDenotes PKCS#8 v2: <code>OneAsymmetricKey</code> with public key field.\nVersion identifier for PKCS#8 documents.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the private key type.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nGet the ASN.1 DER-encoded bytes of this document.\nBorrow the inner serialized bytes of this document.\nTry to decode the inner ASN.1 DER message contained in this\nTry to decode the inner ASN.1 DER message as the given …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode the provided type as ASN.1 DER, storing the …\nEncode the provided type as ASN.1 DER.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>SubjectPublicKeyInfoOwned</code> from any object that …\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize object from ASN.1 DER-encoded […\nIs this version expected to have a public key?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>SecretDocument</code>.\nConvert to an ASN.1 DER-encoded byte vector.\nGet the length of the encoded ASN.1 DER in bytes.\nGet the length of the encoded ASN.1 DER in bytes.\nCreate a new PKCS#8 <code>PrivateKeyInfo</code> message.\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm <code>parameters</code>.\nPrivate key data.\nPublic key data, optionally available if version is V2.\nRead ASN.1 DER document from a file.\nRead ASN.1 DER document from a file.\nLoad PKCS#8 private key from an ASN.1 DER-encoded file on …\nLoad public key object from an ASN.1 DER-encoded file on …")