searchState.loadedDescShard("safe_regex", 0, "crates.io version license: Apache 2.0 unsafe forbidden …\nProvides an <code>is_match</code> function.\nA compiled regular expression with no capturing groups.\nA compiled regular expression with 1 capturing groups.\nA compiled regular expression with 10 capturing groups.\nA compiled regular expression with 2 capturing groups.\nA compiled regular expression with 3 capturing groups.\nA compiled regular expression with 4 capturing groups.\nA compiled regular expression with 5 capturing groups.\nA compiled regular expression with 6 capturing groups.\nA compiled regular expression with 7 capturing groups.\nA compiled regular expression with 8 capturing groups.\nA compiled regular expression with 9 capturing groups.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nReturns <code>true</code> if <code>data</code> matches the regular expression, …\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nExecutes the regular expression against the byte slice <code>data</code>…\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nThis is used internally by the <code>regex!</code> macro.\nCompiles a regular expression into a Rust type.")