searchState.loadedDescShard("penumbra_sdk_keys", 0, "Payment address facilities.\nHardcoded test keys used by the <code>Default</code> genesis state and …\nThe length of an <code>Address</code> in bytes.\nNumber of bits in the address short form divided by the …\nA valid payment address.\nA view of a Penumbra address, either an opaque payment …\nReturns a reference to the clue key.\nCompat (bech32 non-m) address format\nShort form suitable for displaying in a UI.\nReturns a reference to the diversified base.\nReturns a reference to the address diversifier.\nGenerates a randomized dummy address.\nEncodes the address as a transparent address if it has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a payment address from its components.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a Noble forwarding address.\nConverts this address to a vector of bytes.\nReturns a reference to the transmission key.\nReturns a reference to the transmission key <code>s</code> value.\nRepresents a BIP44 derivation path.\nThe root viewing capability for all data related to a …\nAllows viewing incoming notes, i.e., notes sent to the …\nAllows deriving the nullifier associated with a positioned …\nRepresents the <code>NullifierKey</code> as a variable in an R1CS …\nAllows viewing outgoing notes, i.e., notes sent from the …\nA mnemonic seed phrase. Used to generate [<code>SpendSeed</code>]s.\nA key representing a single spending authority.\nA refinement type for a <code>[u8; 32]</code> indicating that it stores …\nThe hash of a full viewing key, used as an account …\nPer BIP44, account splits the key space into independent …\nAddresses are numbered starting from index 0. None if …\nReturns the index of the given address, if the address is …\nConstruct the backreference key for this full viewing key.\nChange is set to 1 to denote change addresses. None if …\nPer BIP44, coin type is a constant set for each currency.\nDerive the incoming viewing key from the nk and the ak.\nGenerate the diversified basepoint associated to this …\nDerive a transmission key from the given diversified base.\nDerive a transmission key from the given diversified base.\nDerive a random ephemeral address.\nDerive an ephemeral address for the provided account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a full viewing key from its components.\nGiven bytes of randomness, generate a <code>SeedPhrase</code>.\nDeterministically generate a <code>SpendKey</code> from a <code>SeedPhrase</code>.\nRandomly generates a 24 word BIP39 <code>SeedPhrase</code>.\nReturns the incoming viewing key for this full viewing key.\nReturns the index used to create the given diversifier (if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform key agreement with a given public key.\nNumber of words in this <code>SeedPhrase</code>.\nCreate a new BIP44 path for a Penumbra wallet.\nCreate a new generic BIP44 path.\nReturns the outgoing viewing key for this full viewing key.\nDerive a shielded payment address with the given …\nDerive a shielded payment address with the given …\nPer BIP43, purpose is typically a constant set to 44’ or …\nRandomly generates a 12 word BIP39 <code>SeedPhrase</code>.\nReturns the spend verification key contained in this full …\nGet the <code>SpendKeyBytes</code> this <code>SpendKey</code> was derived from.\nDerive the (encoding of the) transparent address for the …\nViews the structure of the supplied address with this …\nCheck whether this address is viewable by this incoming …\nHashes the full viewing key into an <code>WalletId</code>.\nRepresents a symmetric <code>ChaCha20Poly1305</code> key used for Spend …\nMemo is transaction-scoped.\nMemoKey is action-scoped.\nNote is action-scoped.\nRepresents a symmetric <code>ChaCha20Poly1305</code> key.\nRepresents encrypted key material used to reconstruct a …\nRepresents a symmetric <code>ChaCha20Poly1305</code> key.\nRepresents the item to be encrypted/decrypted with the …\nSwap is action-scoped.\nRepresents encrypted key material used to decrypt a …\nDecrypt key material using the <code>OutgoingCipherKey</code>.\nDecrypt a note, memo, or memo key using the <code>PayloadKey</code>.\nDecrypt a wrapped memo key by first deriving the …\nDecrypt a wrapped memo key using the action-specific …\nDecrypt a swap using the <code>PayloadKey</code>.\nUse Blake2b-256 to derive an encryption key <code>ock</code> from the …\nUse Blake2b-256 to derive a <code>PayloadKey</code>.\nUse Blake2b-256 to derive an encryption key from the OVK …\nEncrypt key material using the <code>OutgoingCipherKey</code>.\nEncrypt a note, memo, or memo key using the <code>PayloadKey</code>.\nEncrypt a memo key using the action-specific <code>PayloadKey</code>.\nEncrypt a swap using the <code>PayloadKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive a random <code>PayloadKey</code>. Used for memo key wrapping.\nThese addresses both correspond to the test wallet above.\nThese addresses both correspond to the test wallet above.\nThe test account’s full viewing key.\nThe test account’s full viewing key, as a string.\nThis address is for test purposes, allocations were added …\nThe test account’s spend key.")