searchState.loadedDescShard("namada_systems", 0, "Abstract interfaces for interacting with Namada systems.\nEthereum bridge abstract interfaces\nGovernance abstract interfaces\nIBC abstract interfaces\nParameters abstract interfaces\nPGF abstract interfaces\nProof-of-Stake abstract interfaces\nShielded token abstract interfaces\nTransparent token abstract interfaces\nContains the error value\nContains the success value\nAbstract governance storage read interface\nResult of a storage API call.\nAbstract governance storage write interface\nInitialize default governance parameters into storage\nCheck if an accepted proposal is being executed\nGet governance “max_proposal_period” parameter\nBalances changed by a transaction\nContains the error value\nContains the success value\nAbstract IBC storage read interface\nResult of a storage API call.\nApply relevant IBC packets to the changed balances …\nMap between MASP transparent address and Namada types\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBalances after the tx\nBalances before the tx\nExtract MASP transaction from IBC envelope\nEpoch duration. A new epoch begins as soon as both the …\nContains the error value\nAbstract parameters storage keys interface\nThe upper bound of a <code>ProposalBytes</code> value.\nContains the success value\nProtocol parameters\nConfiguration parameter for the upper limit on the number …\nAbstract parameters storage read interface\nResult of a storage API call.\nAbstract parameters storage write interface\nEpoch duration (read only)\nRead the the epoch duration parameter\nRead the number of epochs per year parameter\nExpected number of epochs per year (read only)\nReturn an estimate of the maximum time taken to decide a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas scale\nReturn the number of bytes as a <code>u64</code> value.\nImplicit accounts validity predicate WASM code hash\nKey for implicit VP\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the <code>is_native_token_transferable</code> parameter\nEnable the native token transfer if it is true\nRead MASP epoch multiplier parameter\nThe multiplier for masp epochs (it requires this amount of …\nThe gas limit for a masp transaction paying fees\nMax gas for block\nMax payload size, in bytes, for a tx batch proposal.\nMax payload size, in bytes, for a mempool tx.\nMinimum duration of an epoch\nMinimum number of blocks in an epoch\nMap of the cost per gas unit for every token allowed for …\nTry to construct a new <code>ProposalBytes</code> instance, from the …\nRead all parameters\nAllowed tx hashes (read only)\nAllowed validity predicate hashes (read only)\nWrite all parameters\nContains the error value\nContains the success value\nAbstract PoS storage read interface\nResult of a storage API call.\nGet the total bond amount, including slashes, for a given …\nReturns <code>Ok(true)</code> if the given address is a validator and it…\nCheck if the provided address is a delegator address, …\nCheck if the provided address is a validator address\nRead PoS pipeline length parameter\nRead PoS validator’s stake. For non-validators and …\nRead total active stake\nRead PoS unbonding length parameter\nAmount in micro units. For different granularity another …\nIndicates an event is to do with a finalized block.\nA change in tokens amount\nAn amount with its denomination.\nGiven a number represented as <code>M*B^D</code>, then <code>M</code> is the …\nContains the error value\nIndicates if an event is emitted do to an individual Tx or …\nAbstract token events interface\nExternal chain address.\nInternal chain address in Namada.\nAbstract token keys interface\nThe four possible u64 words in a <code>Uint</code>. Used for converting …\nMaximum decimal places in a native token <code>Amount</code> and <code>Change</code>.\nDecimal scale of a native token <code>Amount</code> and <code>Change</code>. For …\nContains the success value\nAbstract token storage read interface\nResult of a storage API call.\nIndicates an event is to do with an individual transaction.\nA user account.\nAbstract token storage write interface\nReturns the significand of this number\nKey for transparent token balance\nBurn a specified amount of tokens from some address. If …\nCheck if there are enough funds.\nFind the minimal precision that holds this value …\nGet the amount as a <code>Change</code>\nChecked addition. Returns <code>None</code> on overflow or if the …\nChecked addition. Returns <code>None</code> on overflow.\nChecked division. Returns <code>None</code> on underflow.\nDivide by <code>u64</code> with zero divisor and overflow check.\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked addition. Returns <code>None</code> on overflow or if the …\nChecked subtraction. Returns <code>None</code> on underflow.\nChecked subtraction. Returns <code>None</code> on overflow.\nCredit tokens to an account, to be used only by protocol. …\nReturns the denomination of this number\nGet the corresponding u64 word from the input uint256.\nEmit burn token event\nEmit mint token event\nEmit transfer token event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate amount from the absolute value of <code>Change</code>.\nGiven a u64 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a i128 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a string and a denomination, parse an amount from …\nConvert to an <code>Amount</code> under the assumption that the input …\nConvert a <code>u128</code> to an <code>Amount</code>.\nConvert a <code>u64</code> to an <code>Amount</code>.\nAttempt to convert an unsigned integer to an <code>Amount</code> with …\nGet the effective circulating total supply of native …\nAttempt to increase the precision of an amount. Can fail …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given storage key is for total supply of a …\nCheck if the given storage key is a balance key for an …\nReturns the owner address if the given storage key is a …\nCheck if <code>Amount</code> is greater than zero.\nCheck if <code>Amount</code> is zero.\nCheck if the inner <code>Amount</code> is zero.\nIterator over the possible denominations\nIterate over all words in this <code>Amount</code>.\nCreate a new amount with the maximum value\nCreate a new amount with the maximum signed value\nObtain a storage key for the minted multitoken balance.\nObtain a storage key for the multitoken minter.\nMultiply by a decimal <code>Dec</code> with the result rounded up. …\nMultiply by a decimal <code>Dec</code> with the result rounded down. …\nReturn a denominated native token amount.\nReturn a denominated native token amount.\nCreate a new amount of native token from whole number of …\nMake a new denominated amount representing amount*…\nObtain a storage key prefix for token parameters.\nGet the raw <code>Uint</code> value, which represents namnam\nRead the balance of a given token and owner.\nRead the denomination of a given token, if any. Note that …\nReceive a given amount.\nCreate a new <code>DenominatedAmount</code> with the same underlying …\nMultiply this number by 10^denom and return the computed …\nSpend a given amount.\nSum with overflow check\nGet a string representation of a native token amount.\nA precise string representation. The number of decimal …\nTransfer <code>token</code> from <code>src</code> to <code>dest</code>. Returns an <code>Err</code> if <code>src</code> has …\nA combination of Euclidean division and fractions: x*(a,b) …\nZero <code>Amount</code>.")