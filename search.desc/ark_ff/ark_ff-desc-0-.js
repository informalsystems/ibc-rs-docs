searchState.loadedDescShard("ark_ff", 0, "Defines a multiplicative identity element for <code>Self</code>.\nTypes that can be converted to a vector of <code>F</code> elements. …\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nTakes as input a sequence of structs, and converts them to …\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nThis defines a <code>BigInteger</code>, a smart wrapper around a …\nNumber of limbs.\nAdd another representation to this one, returning the …\nPerforms a rightwise bitshift of this number, effectively …\nPerforms a rightwise bitshift of this number by some …\nReturns the windowed non-adjacent form of <code>self</code>, for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the big integer representation of a given big …\nReturns the big integer representation of a given little …\nCompute the <code>i</code>-th bit of <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true iff this number is even.\nReturns true iff this number is odd.\nReturns true iff this number is zero.\nPerforms a leftwise bitshift of this number, effectively …\nPerforms a leftwise bitshift of this number by some amount.\nCompute the number of bits needed to encode this number. …\nReads a big endian integer occupying (<code>num_bits</code> / 8) bytes …\nSubtract another representation from this one, returning …\nReturns the bit representation in a big endian boolean …\nReturns the bit representation in a little endian boolean …\nReturns the byte representation in a big endian byte array,\nReturns the byte representation in a little endian byte …\nWrites this <code>BigInteger</code> as a big endian integer. Always …\nReads <code>Self</code> from <code>reader</code>.\nSerializes <code>self</code> into <code>writer</code>.\nIterates over a slice of <code>u64</code> in <em>big-endian</em> order.\nIterates over a slice of <code>u64</code> in <em>little-endian</em> order.\nThe number of bits that can be reliably stored. (Should …\nThe interface for fields that are able to be used in FFTs.\nA trait that defines parameters for a field that can be …\nThe interface for a generic field.\nA trait that defines parameters for a prime field.\nA multiplicative generator of the field. <code>Self::GENERATOR</code> …\nINV = -MODULUS^{-1} mod 2^64\nGENERATOR^((MODULUS-1) / (2^s * …\nThe modulus of the field.\nThe number of bits needed to represent the <code>Self::MODULUS</code>.\n(Self::MODULUS - 1) / 2\nThe interface for a prime field.\nLet <code>M</code> be the power of 2^64 nearest to <code>Self::MODULUS_BITS</code>. …\nR2 = R^2 % Self::MODULUS\nThe number of bits that must be shaved from the beginning …\nAn integer <code>b</code> such that there exists a multiplicative …\nThe integer <code>k</code> such that there exists a multiplicative …\nThe interface for a field that supports an efficient …\nt for 2^s * t = MODULUS - 1, and t coprime to 2.\nLet <code>N</code> be the size of the multiplicative group defined by …\n2^s root of unity computed by GENERATOR^t\n(t - 1) / 2\nReturns the characteristic of the field, in little-endian …\nReturns <code>self + self</code>.\nDoubles <code>self</code> in place.\nReturns the extension degree of this field with respect to …\nExponentiates this element by a power of the base prime …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a slice of base prime field elements into a field …\nReads bytes in big-endian, and converts them to a field …\nReads bytes in little-endian, and converts them to a field …\nReturns a field element if the set of bytes forms a valid …\nReturns a field element with an extra sign bit used for …\nReturns a prime field element from its underlying …\nReturns the root of unity of order n, if one exists. If no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying representation of the prime field …\nComputes the multiplicative inverse of <code>self</code> if <code>self</code> is …\nReturns the 2^s * …\nReturns a <code>LegendreSymbol</code>, which indicates whether this …\nReturns the modulus minus one divided by two.\nReturns the multiplicative generator of <code>char()</code> - 1 order.\nExponentiates this element by a number represented with <code>u64</code>…\nExponentiates a field element <code>f</code> by a number represented …\nReturn the QNR^t, for t defined by <code>2^s * t = MODULUS - 1</code>, …\nReturns the field size in bits.\nReturns the square root of self, if it exists.\nSets <code>self</code> to be the square root of <code>self</code>, if it exists.\nReturns <code>self * self</code>.\nSquares <code>self</code> in place.\nReturns the trace.\nReturns the trace minus one divided by two.\nReturns the 2^s root of unity.\nConstruct an iterator that automatically skips any leading …\nConstruct an iterator that automatically skips any …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nRepresents an element of the prime field F_p, where …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nReturns <code>self * other.inverse()</code> if <code>other.inverse()</code> is <code>Some</code>, …\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nThe Frobenius map has no effect in a prime field.\nReturns the argument unchanged.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nReturns the argument unchanged.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nReturns the argument unchanged.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nInterpret a string of numbers as a (congruent) prime field …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe base field that this field is a cubic extension of.\nThe prime field that this cubic extension is eventually an …\nThe degree of the extension over the base prime field.\nCoefficients for the Frobenius automorphism.\nThe type of the coefficients for an efficient …\nThe cubic non-residue used to construct the extension.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA specializable method for multiplying an element of the …\nA specializable method for multiplying an element of the …\nCalculate the norm of an element with respect to the base …\nReturns the value of QNR^T.\nCoefficients for the Frobenius automorphism.\nThis <em>must</em> equal (0, 1, 0); see [DESD06, Section 6.1].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiply by quadratic nonresidue v.\nCoefficients for the Frobenius automorphism.\nA specializable method for computing …\nA specializable method for computing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn <code>fe * Self::NONRESIDUE</code>.\nA specializable method for computing …\nt-th power of a quadratic nonresidue in Fp3.\np^3 - 1 = 2^s * t, where t is odd.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the Legendre symbol.\nReturns the value of QNR^T.\nReturns the square root of self, if it exists.\nSets <code>self</code> to be the square root of <code>self</code>, if it exists.\nCoefficients for the Frobenius automorphism. …\nThis <em>must</em> equal (0, 1); see [DESD06, Section 5.1].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoefficients for the Frobenius automorphism.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoefficients for the Frobenius automorphism.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base field that this field is a quadratic extension of.\nThe prime field that this quadratic extension is …\nThe degree of the extension over the base prime field.\nCoefficients for the Frobenius automorphism.\nThe type of the coefficients for an efficient …\nThe quadratic non-residue used to construct the extension.\nAn element of a quadratic extension field F_p[X]/(X^2 - …\nDefines a Quadratic extension field from a quadratic …\nA specializable method for computing x + …\nA specializable method for computing x + …\nThis is only to be used when the element is <em>known</em> to be in …\nA specializable method for exponentiating that is to be …\nThis is only to be used when the element is <em>known</em> to be in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA specializable method for multiplying an element of the …\nA specializable method for multiplying an element of the …\nNorm of QuadExtField over <code>P::BaseField</code>:…\nA specializable method for computing x - …\nCalculates the k-adicity of n, i.e., the number of …\nDefines a multiplicative identity element for <code>Self</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer, or …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a clone-on-write slice into a vector.\nConverts a boxed slice into a vector by transferring …\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nReturns the argument unchanged.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element in a vector if the …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\n“Best effort” zeroization for <code>Vec</code>.")