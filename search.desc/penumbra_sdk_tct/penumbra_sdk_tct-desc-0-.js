searchState.loadedDescShard("penumbra_sdk_tct", 0, "The tiered commitment tree for Penumbra.\nThe domain separator used for leaves in the tree, and used …\nWhen inserting a <code>Commitment</code> into a <code>Tree</code>, this flag …\nA version tracking when a particular piece of the tree was …\nWhen inserting a <code>Commitment</code> into a <code>Tree</code>, this flag …\nThe index of a [<code>Commitment</code>] within a <code>Tree</code>.\nA proof of the inclusion of some [<code>Commitment</code>] in a <code>Tree</code> …\nThe root hash of a <code>Tree</code>.\nA commitment to a note or swap.\nA sparse merkle tree witnessing up to 65,536 epochs of up …\nWhen inserting a <code>Commitment</code> into a <code>Tree</code>, should we <code>Keep</code> it …\nGet the authentication path for this proof, order from …\nThe index of the block to which this <code>Position</code> refers …\nBuilders for individual epochs and blocks: useful when …\nGet the commitment whose inclusion is witnessed by the …\nThe index of the [<code>Commitment</code>] to which this <code>Position</code> …\nGet an iterator over all commitments currently witnessed …\nGet an iterator over all commitments currently witnessed …\nGet the root hash of the most recent block in the most …\nGet the root hash of the most recent epoch in this <code>Tree</code>.\nGenerate a dummy <code>Proof</code> for a given commitment.\nExplicitly mark the end of the current block in this tree, …\nExplicitly mark the end of the current epoch in this tree, …\nThe index of the epoch to which this <code>Position</code> refers …\nErrors that can occur when inserting into a <code>Tree</code>, …\nForget about the witness for the given [<code>Commitment</code>].\nThe count of how many commitments have been forgotten …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a tree from a <code>storage::AsyncRead</code> of its …\nDeserialize a tree from a <code>storage::Read</code> of its contents, …\nAdd a new [<code>Commitment</code>] to the most recent block of the …\nAdd a new block all at once to the most recently inserted …\nAdd a new epoch all at once to this <code>Tree</code>, returning the …\nThe internal implementation of the tree, exposed here for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this <code>Tree</code> is empty.\nCheck if this is the root of an empty tree.\nDeserialize a tree using externally driven iteration, …\nConstruct a new <code>Proof</code> of inclusion for a given [<code>Commitment</code>]…\nCreate a new empty <code>Tree</code> for storing all commitments to the …\nParse a hex string as a [<code>Commitment</code>].\nGet the position of the witnessed commitment.\nThe position in this <code>Tree</code> at which the next [<code>Commitment</code>] …\nGet the position in this <code>Tree</code> of the given [<code>Commitment</code>], …\nThis module defines how to verify TCT auth paths in a …\nGenerate a random [<code>Commitment</code>].\nGenerate a random <code>Root</code>.\nGet the root of the tree from which the proof was …\nGet the root hash of this <code>Tree</code>.\nIncremental serialization and non-incremental …\nA dynamic representation of nodes within the internal tree …\nGet a dynamic representation of the internal structure of …\nSerialize the tree incrementally from the last stored …\nSerialize the tree incrementally from the last stored …\nSerialize the tree incrementally from the last stored …\nValidation checks to ensure that <code>Tree</code>s are well-formed.\nVerify a <code>Proof</code> of inclusion against the <code>Root</code> of a <code>Tree</code>.\nGet a <code>Proof</code> of inclusion for the commitment at this index …\nThe number of [<code>Commitment</code>]s currently witnessed in this …\nBuild individual blocks to insert into <code>epoch::Builder</code>s or …\nBuild individual epochs to insert into <code>Tree</code>s.\nA sparse merkle tree to witness up to 65,536 individual […\nA finalized block builder, ready to be inserted into an …\nThe root hash of a block.\nFinalize this block builder returning a finalized block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a new [<code>Commitment</code>] to this <code>block::Builder</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is the root of an empty finalized block.\nCheck if this is the root of an empty unfinalized block.\nCreate a new empty <code>block::Builder</code>.\nGenerate a random <code>block::Root</code>.\nGet the root hash of this block builder.\nGet the root hash of this finalized block.\nA sparse merkle tree to witness up to 65,536 blocks, each …\nA finalized epoch builder, ready to be inserted into a <code>Tree</code>…\nThe root hash of an epoch.\nExplicitly mark the end of the current block in this …\nFinalize this epoch builder, returning a finalized epoch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a new [<code>Commitment</code>] to the most recent block of this …\nInsert a block into this epoch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is the root of an empty finalized block.\nCheck if this is the root of an empty unfinalized block.\nCreate a new empty <code>epoch::Builder</code>.\nGenerate a random <code>epoch::Root</code>.\nGet the root hash of this epoch builder.\nGet the root hash of this finalized epoch.\nThe most recent block of the most recent epoch of the <code>Tree</code> …\nThe most recent epoch of the <code>Tree</code> was full.\nThe most recent epoch of the <code>Tree</code> was full.\nThe <code>Tree</code> was full.\nThe <code>Tree</code> was full.\nAn error occurred when trying to insert a block into the …\nThe <code>Tree</code> was full when trying to insert an epoch into it.\nAn error occurred when trying to insert a [<code>Commitment</code>] …\nAn error occurred when decoding a tree root from bytes.\nErrors for <code>block</code> builders.\nErrors for <code>epoch</code> builders.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors from deserializing or verifying inclusion proofs.\nWhen inserting into a <code>block::Builder</code>, this error is …\nAn error occurred when decoding a <code>block::Root</code> from bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe most recent block in the <code>epoch::Builder</code> was full.\nThe <code>epoch::Builder</code> was full.\nThe <code>epoch::Builder</code> was full when attempting to insert a …\nA [<code>Commitment</code>] could not be inserted into the …\nAn error occurred when decoding an <code>epoch::Root</code> from bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen deserializing a proof, it was malformed.\nWhen deserializing an authentication path, it was …\nA proof of inclusion did not verify against the provided …\n<code>Complete</code> things are sparse representations of only the …\n<code>Frontier</code> things can be inserted into and updated, always …\nThe core <code>Hash</code> type, which is used internally to represent …\nType level machinery used to statically determine the …\nThis module contains trait definitions for the entire …\nAuthentication paths into the tree, generically for trees …\nTransparent merkle inclusion proofs defined generically …\nA wrapper around <code>Vec</code> for vectors whose length is at most 3 …\nMarker trait for a type which is the frozen completion of …\nThe corresponding <code>Focus</code> of this <code>Complete</code> (i.e. the type …\nForget about the authentication path to a given index, …\nA witnessed hash of a commitment at the true leaf of a …\nA complete, witnessed leaf of a tree.\nAn eight-deep complete tree with the given item at each …\nA complete sparse node in a tree, storing only the …\nA complete tier of the tiered commitment tree, being an …\nA complete top-level tier of the tiered commitment tree, …\nGet the children of this node as an array of either …\nRemove the witness for the given index and summarize the …\nGet the forgotten versions of the children.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Item</code> from a <code>Hash</code>.\nCreate a new complete leaf from the item stored in the …\nThe <code>Complete</code> of this <code>Frontier</code>.\nA type which can be the focus of an <code>Frontier</code> tree: it can …\nForget about the authentication path to a given index.\nA frontier of a tree supporting the insertion of new …\nThe result of <code>Frontier::insert_owned</code> when the <code>Frontier</code> is …\nGet the position of the next insertion into the tree.\nThe hash of an item: when inserting, don’t keep this …\nA mutable reference to the hash of the item.\nEither an item or just its hash, to be used when inserting …\nThe mutable-reference version of an <code>Insert&lt;T&gt;</code>, distinct …\nThe hash of the most-recently-inserted item, stored at the …\nThe type of item to persist in each witnessed leaf of the …\nAn item unto itself: when inserting, keep this witnessed …\nA mutable reference to the item.\nThe frontier (rightmost) leaf in a frontier of a tree.\nDo not keep track of what things are forgotten.\nA frontier of a node in a tree, into which items can be …\nA frontier of a tier of the tiered commitment tree, being …\nThe frontier of the top level of some part of the …\nWhether or not to track forgotten elements of the tree.\nDo keep track of what things are forgotten.\nMap a function returning an <code>Insert&lt;U&gt;</code> over the <code>Insert::Keep</code>…\nMap a function returning an <code>Insert&lt;U&gt;</code> over the …\nTransform a <code>&amp;mut Insert&lt;T&gt;</code> into a <code>Insert&lt;&amp;mut T&gt;</code>.\nTransform a <code>&amp;Insert&lt;T&gt;</code> into a <code>Insert&lt;&amp;T&gt;</code>.\nTransform a <code>&amp;InsertMut&lt;T&gt;</code> into a <code>InsertMut&lt;&amp;T&gt;</code>.\nThe completed structure, which has no more room for any …\nFinalize this tier so that it is internally marked as …\nFinalize the top tier into either a summary root hash or a …\nTransition from an <code>Frontier</code> to being <code>Complete</code>.\nGet a reference to the focused <code>Insert&lt;Self::Item&gt;</code> (i.e. …\nGet the focused element of this tier, if one exists.\nGet a reference to the focused <code>Insert&lt;Item&gt;</code>, if there is …\nRemove the witness for the given index. If a forgotten …\nForgot the commitment at the given index.\nCount the number of times something has been forgotten …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert an item or its hash into this frontier tier.\nInsert an item or its hash into this frontier tier.\nInsert a new <code>Hash</code> or <code>Self::Item</code> into this <code>Frontier</code>, …\nInsertion into a leaf always fails, causing the tree above …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this top-level tier is empty.\nCheck whether this tier has been finalized.\nCheck whether this frontier is full.\nCheck whether this tier is full.\nCheck whether this top-level tier is full.\nTest if this <code>Insert</code> is a <code>Insert::Hash</code>.\nTest if this <code>InsertMut</code> is a <code>InsertMut::Hash</code>.\nTest if this <code>Insert</code> is a <code>Insert::Keep</code>.\nTest if this <code>InsertMut</code> is a <code>InsertMut::Keep</code>.\nThe original hash or item that could not be inserted.\nGet the kept <code>T</code> out of this <code>Insert&lt;T&gt;</code> or return <code>None</code>.\nGet the kept <code>T</code> out of this <code>Insert&lt;T&gt;</code> or return <code>None</code>.\nMap a function over the <code>Insert::Keep</code> part of an <code>Insert&lt;T&gt;</code>.\nMap a function over the <code>InsertMut::Keep</code> part of an …\nMake a new <code>Frontier</code> containing a single <code>Hash</code> or <code>Self::Item</code>.\nCreate a new tier from a single item which will be its …\nCreate a new top-level frontier tier.\nThe position of the next insertion into the tree.\nUpdate the currently focused <code>Insert&lt;Self::Item&gt;</code> (i.e. the …\nUpdate the focused element of this tier using a function.\nUpdate the currently focused <code>Item</code> (i.e. the most-recently-…\nAn <code>Mutex</code>-based cache for hashes, to prevent repeated …\nThe domain separator used for leaves in the tree, and used …\nA version tracking when a particular piece of the tree was …\nA type which can be transformed into a <code>Hash</code>, either by …\nThe hash of an individual [<code>Commitment</code>] or internal node in …\nA representation of <code>Option&lt;Hash&gt;</code> without the tag bytes …\nGet the hash of this item, only if the hash is already …\nReset the cached hash to empty.\nIf there is a hash cached, clear the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a hash from bytes representing it\nGet the cached hash, or return <code>None</code> if it is not yet set.\nGet the hash of this item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the hash is one.\nChecks if the hash is zero.\nCreate a hash from an arbitrary <code>Fq</code>.\nGet the next forgotten-version after this one.\nConstruct a hash for an internal node of the tree, given …\nHash an individual commitment to be inserted into the tree.\nThe one hash, used for padding of complete nodes.\nGenerate a random <code>Hash</code>.\nIf the cache is empty, set its value using the closure, …\nGet an array of bytes representing the hash\nThe zero hash, used for padding of frontier nodes.\nThe number for this height.\nTrait identifying the statically-known height of a given …\nThe height of this type above the leaves of the tree.\nThe constant <code>u8</code> associated with each unary height.\nHeight <code>N + 1</code>.\nHeight zero.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker trait for a type which is the frozen completion of …\nThe <code>Complete</code> of this <code>Frontier</code>.\nA type which can be the focus of an <code>Frontier</code> tree: it can …\nThe corresponding <code>Focus</code> of this <code>Complete</code> (i.e. the type …\nForget about the authentication path to a given index.\nForget about the authentication path to a given index, …\nA frontier of a tree supporting the insertion of new …\nThe result of <code>Frontier::insert_owned</code> when the <code>Frontier</code> is …\nGet the position of the next insertion into the tree.\nThe type of item to persist in each witnessed leaf of the …\nWitness an authentication path into a tree, or remove a …\nThe completed structure, which has no more room for any …\nTransition from an <code>Frontier</code> to being <code>Complete</code>.\nGet a reference to the focused <code>Insert&lt;Self::Item&gt;</code> (i.e. …\nRemove the witness for the given index. If a forgotten …\nRemove the witness for the given index and summarize the …\nInsert a new <code>Hash</code> or <code>Self::Item</code> into this <code>Frontier</code>, …\nCheck whether this frontier is full.\nThe original hash or item that could not be inserted.\nMake a new <code>Frontier</code> containing a single <code>Hash</code> or <code>Self::Item</code>.\nThe position of the next insertion into the tree.\nUpdate the currently focused <code>Insert&lt;Self::Item&gt;</code> (i.e. the …\nWitness an authentication path to the given index in the …\nAn authentication path into a <code>Tree</code>.\nThe empty authentication path, for the zero-height tree.\nThe left (1st) child.\nThe leftmost (0th) child.\nThe authentication path for a node, whose height is always …\nIdentifies the unique type representing an authentication …\nThe authentication path for this height.\nWhen deserializing an authentication path, it was …\nThe right (2nd) child.\nThe rightmost (3rd) child.\nAn enumeration of the different ways a path can go down a …\nGiven a height and an index of a leaf, determine which …\nThe authentication path for the witnessed child.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a 3-element array, insert an item into the array in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a 4-element array, pick out the item in the array …\nCalculate the root hash for a path leading to a leaf with …\nThe sibling hashes of the child.\nA proof of inclusion for a single <code>Commitment</code> commitment in …\nWhen deserializing a proof, it was malformed.\nA proof of inclusion did not verify against the provided …\nGet the <code>AuthPath</code> of this proof, representing the path from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the index of the item this proof claims to witness.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the root of the tree from which the proof was …\nGet the root hash against which the proof failed to verify.\nVerify a <code>Proof</code> of inclusion against the root <code>Hash</code> of a …\nAll the possible cases of the elements in a <code>Three</code>, by …\nAll the possible cases of the elements in a <code>Three</code>, by …\nAll the possible cases of the elements in a <code>Three</code>, by …\nA vector capable of storing at most 3 elements.\nZero elements.\nZero elements.\nZero elements.\nOne element.\nOne element.\nOne element.\nTwo elements.\nTwo elements.\nTwo elements.\nThree elements.\nThree elements.\nThree elements.\nGet an enumeration of the elements of this <code>Three</code> by …\nGet an enumeration of the elements of this <code>Three</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>Three</code> into an enumeration of its elements.\nDetermine if this <code>Three</code> is empty.\nDetermine if this <code>Three</code> is full.\nGet an iterator over the elements of the <code>Three</code>.\nGet an iterator over mutable elements of the <code>Three</code>.\nGet the number of elements in this <code>Three</code>.\nCreate a new <code>Three</code> with no elements, but the capacity for …\nPush a new item into this <code>Three</code>, or return exactly four …\nPush a new item into this <code>Three</code>, or panic if it would …\nThis represents the TCT’s auth path in R1CS.\nRepresents the position of a leaf in the TCT represented …\nRepresents a state commitment in R1CS.\nRepresents the different paths a quadtree node can take.\nGiven a height and an index of a leaf, determine which …\nBits\nWitness the block.\nWitness the commitment index by taking the last 16 bits of …\nWitness the epoch by taking the first 16 bits of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash a node given the children at the given height.\nAccess the inner <code>FqVar</code>.\nThe <code>FqVar</code> representing the state commitment.\nInsert the provided node into the quadtree at the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe FqVar representing the leaf.\nCertify an auth path given a provided anchor, position, …\nAn <code>async</code> storage backend capable of reading stored <code>Hash</code>es …\nAn <code>async</code> storage backend capable of writing <code>Hash</code>es and […\nThe type of iterator returned when reading commitments …\nThe type of stream returned by <code>AsyncRead::commitments</code>.\nAn update to the underlying storage that constitutes …\nDelete a range of hashes and commitments from the tree.\nThe error returned when something goes wrong in a request.\nThe error returned when something goes wrong in a request.\nThe tree is full.\nThe type of iterator returned when reading hashes from the …\nThe type of stream returned by <code>AsyncRead::hashes</code>.\nBuilder for loading commitments to create a <code>Tree</code>.\nBuilder for loading hashes to create a <code>Tree</code>.\nThe tree has the given position.\nA synchronous storage backend capable of reading stored …\nSet the forgotten version of the tree.\nSet the position of the tree.\nAn update to the underlying storage that constitutes …\nAdd a commitment to the tree.\nAn update to the underlying storage that constitutes …\nAdd a hash to the tree.\nA stored position for the tree: either the position of the …\nA single update to the underlying storage, as a data type.\nA collection of updates to the underlying storage.\nA synchronous storage backend capable of writing <code>Hash</code>es …\nWrite a single commitment into storage.\nWrite a single commitment into storage.\nWrite a single hash into storage.\nWrite a single hash into storage.\nThe height strictly below which hashes should be deleted.\nFetch a specific commitment at the given position, if it …\nFetch the commitment at the given position, if it exists.\nThe commitment itself.\nGet the full list of all commitments stored, indexed by …\nGet the full list of all commitments stored, indexed by …\nDelete every stored <code>Hash</code> whose height is less than …\nDelete every stored <code>Hash</code> whose height is less than …\nThe ranges of hashes and commitments to delete.\nWhether the hash is essential to store, or can be dropped …\nFinish loading the tree.\nFetch the current forgotten version.\nFetch the current forgotten version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch a specific hash at the given position and height, if …\nFetch the hash at the given position and height, if it …\nThe hash itself.\nGet the full list of all internal hashes stored, indexed …\nGet the full list of all internal hashes stored, indexed …\nThe height of the hash.\nAn in-memory storage backend, useful for testing.\nInsert a commitment at a given position.\nInsert a hash at a given position and height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart loading the hashes for the inside of the tree.\nFetch the current position stored.\nFetch the current position stored.\nThe position of the hash.\nThe position of the commitment.\nThe half-open range of positions within which hashes and …\nSet the forgotten version of the tree.\nSet the forgotten version of the tree.\nThe new forgotten version to set, if any.\nSet the stored position of the tree.\nSet the stored position of the tree.\nThe new position to set, if any.\nThe new commitments to store.\nThe new hashes to store.\nA write was attempted over an existing commitment.\nAn error which can occur when using the in-memory storage …\nA hash was marked essential, but it still had children.\nThe forgotten version was set, but it did not increase.\nAn in-memory storage backend, useful for testing.\nA hash was overwritten with a different hash.\nThe position was set, but it did not increase.\nAn unnecessary write was performed.\nGet an iterator of all the commitments stored.\nGet the forgotten version of the stored tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an iterator of all the hashes stored.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new in-memory storage backend.\nCreate a new in-memory storage backend that only stores …\nGet the position of the stored tree.\nThe height of the hash.\nThe height of the hash.\nThe height of the hash.\nThe new position.\nThe new forgotten version.\nThe position of the existing commitment.\nThe position of the hash.\nThe position of the hash.\nThe position of the hash.\nThe previous position.\nThe previous forgotten version.\nThe node is not on the frontier.\nA version tracking when a particular piece of the tree was …\nThe node is on the frontier.\nThe hash of an individual [<code>Commitment</code>] or internal node in …\nAn internal node within the tree.\nThe kind of a node.\nA leaf node at the bottom of the tree.\nAn arbitrary node somewhere within a tree.\nThe place a node is located in a tree: whether it is on …\nThe cached hash at this node, if any.\nThe children of this node.\nThe most recent time something underneath this node was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe global position of the tree inside of which this node …\nThe hash of this node.\nThe height of this node above the base of the tree.\nThe index of this node from the left of the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of the node: either a <code>Kind::Internal</code> with a …\nThe place on the tree where this node occurs.\nThe position of the node (the vertical extension of the …\nThe range of positions that could occur beneath this node …\nThe distance between positions of nodes at this height.\nThe witnessed commitment at this leaf, or <code>None</code> if this …\nThe height of this internal node.\nA commitment in the index points to a leaf with a …\nA commitment in the index doesn’t match the hash in the …\nAn error occurred when verifying the tree’s index.\nThe index for the tree contained at least one error.\nAn mismatch between a cached hash and the hash it ought to …\nThe tree contained at least one internal cached hash that …\nThe tree contained at least one discrepancy in the …\nA mismatch between the expected maximum forgotten version …\nThe proof produced by the tree does not verify against the …\nAt least one proof generated by the tree failed to verify …\nThe index is missing a position.\nThe index contains a commitment that is not witnessed.\nAn error occurred when verifying the tree’s contained …\nThe actual maximum forgotten version.\nVerify that every witnessed commitment can be used to …\nThe previous cached hash at that location.\nVerify that every internally cached hash matches what it …\nThe errors found in the index.\nThe errors found.\nThe errors found in the tree.\nThe errors found in the tree.\nThe expected maximum forgotten version.\nVerify that the internal forgotten versions are consistent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the node with the error.\nThe height of the node with the error.\nVerify that the inner index of the tree is correct with …\nThe index of the node with the error.\nThe index of the node with the error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of the node with the error.\nThe kind of the node with the error.\nThe place of the node with the error.\nThe place of the node with the error.\nThe recomputed hash that should have been there.\nThe root of the tree at which the errors were found.\nThe commitment that was found.\nThe commitment which should have the found hash.\nThe commitment that was expected.\nThe expected hash value of that commitment.\nThe hash found at that position.\nThe actual hash found in the tree structure at the …\nThe position expected to be present in the index.\nThe position of the leaf that was found to have the wrong …\nThe position that commitment maps to in the index.\nThe commitment that was not present in the tree.\nThe position at which it was supposed to appear.\nThe proof which failed to verify.")