searchState.loadedDescShard("clru", 0, "Another LRU cache implementation in rust. It has two main …\nA weighted LRU cache with mostly¹ constant time …\nA configuration structure used to create an LRU cache.\nAn owning iterator over the elements of a <code>CLruCache</code>.\nAn iterator over the entries of a <code>CLruCache</code>.\nAn iterator over mutables entries of a <code>CLruCache</code>.\nTrait used to retrieve the weight of a key-value pair.\nA scale that always return 0.\nReturns the value corresponding to the least recently used …\nReturns the value corresponding to the least recently used …\nReturns the capacity of the cache. It serves as a limit for\nClears the contents of the cache.\nReturns a bool indicating whether the given key is in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value corresponding to the most recently used …\nReturns the value corresponding to the most recently used …\nReturns a reference to the value of the key in the cache …\nReturns a mutable reference to the value of the key in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the cache into an iterator yielding elements by …\nReturns a bool indicating whether the cache is empty or …\nReturns a bool indicating whether the cache is full or not.\nReturns an iterator visiting all entries in order. The …\nReturns an iterator visiting all entries in order, giving …\nReturns the number of key-value pairs that are currently …\nCreates a new configuration that will create an LRU cache …\nCreates a new LRU cache that holds at most <code>capacity</code> …\nReturns a reference to the value corresponding to the key …\nReturns a mutable reference to the value corresponding to …\nRemoves and returns the value corresponding to the key …\nRemoves and returns the key and value corresponding to the …\nRemoves and returns the key and value corresponding to the …\nPuts a key-value pair into cache. If the key already …\nPuts a new key-value pair or modify an already existing …\nPuts a key-value pair into cache taking it’s weight into …\nResizes the cache. If the new capacity is smaller than the …\nRetains only the elements specified by the predicate. In …\nRetains only the elements specified by the predicate. In …\nPuts a new key-value pair or modify an already existing …\nReturns the weight of a key-value pair.\nReturns the total weight of the elements in the cache.\nCreates a new LRU cache using the provided configuration.\nConfigure the provided hash builder.\nCreates a new LRU cache that holds at most <code>capacity</code> …\nConfigure the amount of pre-allocated memory in order to …\nCreates a new LRU cache that holds at most <code>capacity</code> …\nConfigure the provided scale.\nCreates a new LRU cache that holds at most <code>capacity</code> …")