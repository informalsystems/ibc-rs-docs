searchState.loadedDescShard("namada_ibc", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to parse an IBC <code>Packet</code> from a set of event …\nIBC event types.\nUpdate client.\nGovernance parameter structure\nDefault supply limit of each token\nDefault per-epoch throughput limit of each token\nReturns the argument unchanged.\nInitialize IBC parameters into storage\nCalls <code>U::from(self)</code>.\nTimestamp is not set\ndate out of range\nparsing u64 integer from string error: <code>{0}</code>\nRepresents the address of the signer of the current …\nA newtype wrapper over <code>PrimitiveDateTime</code> which serves as …\nTimestamp overflow when modifying with duration\nTypes that implement this trait can be converted to a raw …\nConvenient trait for converting types to a raw Protobuf …\nerror converting integer to <code>Timestamp</code>: <code>{0}</code>\nContains various internally used utilities.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nAn ordered map based on a B-Tree.\nA pointer type that uniquely owns a heap allocation of …\nA common trait for the ability to explicitly duplicate an …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nDerive macro generating an impl of the trait <code>Hash</code>.\nA value-to-value conversion that consumes the input value. …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nThe returned type after the call operator is used.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nTypes that do not require any pinning guarantees.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nTests if every element of the iterator matches a predicate.\nAttribute macro applied to a function to register it as a …\nReturns a reference to the underlying allocator.\nReturns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nTests if any element of the iterator matches a predicate.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns a byte slice of this <code>String</code>’s contents.\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts this type into a mutable reference of the …\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a mutable slice of the contained value, if any. If …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nConverts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.\nConverts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts this type into a shared reference of the (usually …\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nReturns a slice of the contained value, if any. If this is …\nExtracts a string slice containing the entire <code>String</code>.\nAsserts that a boolean expression is <code>true</code> at runtime.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nAttribute macro applied to a function to turn it into a …\nBorrows an iterator, rather than consuming it.\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nReturns this <code>String</code>’s capacity, in bytes.\nEvaluates boolean combinations of configuration flags at …\nKeeps the item it’s applied to if the passed path is …\nExpands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …\nTakes two iterators and creates a new iterator over both …\nRestrict a value to a certain interval.\nClears the map, removing all elements.\nTruncates this <code>String</code>, removing all contents.\nReturns a copy of the value.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nPerforms copy-assignment from <code>source</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nUses borrowed data to replace owned data, usually by …\nCreates an iterator which <code>clone</code>s all of its elements.\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nConcatenates identifiers into one identifier.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an iterator which copies all of its elements.\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nReturns the “default value” for a type.\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>String</code>.\nReturns <code>None</code>.\nUnstable placeholder for deref patterns.\nAttribute macro used to apply derive macros.\nAttribute macro used to apply derive macros for …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nRemoves the specified range from the string in bulk, …\nDisposes of a value.\nExecutes the destructor for this type.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which gives the current iteration …\nInspects an environment variable at compile time.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nExtends a collection with the contents of an iterator.\nCopies elements from <code>src</code> range to the end of the string.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator that visits all elements (key-value …\nExpands to the file name in which it was invoked.\nCreates an iterator which uses a closure to determine if …\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nConverts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nCreates a <code>String</code> using interpolation of runtime …\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nConverts to this type from the input type.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nReturns the argument unchanged.\nCreates a boxed <code>Path</code> from a reference.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a vector into a boxed slice.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nConverts a clone-on-write string to an owned instance of …\nAllocates an owned <code>String</code> from a single character.\nReturns the argument unchanged.\nConvert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, …\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nMoves <code>val</code> into a new <code>Some</code>.\nConvert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is <code>None</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates a new <code>String</code> from a pointer, a length and a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nCreates an iterator which ends after the first <code>None</code>.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nInserts <code>value</code> into the option if it is <code>None</code>, then returns …\nInserts the default value into the option if it is <code>None</code>, …\nInserts a value computed from <code>f</code> into the option if it is …\nAttribute macro applied to a static to register it as a …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nDetermines if the elements of this <code>Iterator</code> are …\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nInserts a character into this <code>String</code> at a byte position.\nInserts <code>value</code> into the option, then returns a mutable …\nInserts a string slice into this <code>String</code> at a byte position.\nDoes something with each element of an iterator, passing …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nReturns the contained <code>Err</code> value, but never panics.\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates an iterator from a value.\nGets an owning iterator over the entries of the map, …\nReturns a consuming iterator over the possibly contained …\nReturns a consuming iterator over the possibly contained …\nCreates a consuming iterator visiting all the keys, in …\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nReturns the contained <code>Ok</code> value, but never panics.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nDecomposes a <code>String</code> into its raw components: …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nCreates a consuming iterator visiting all the values, in …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> or the value inside …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nChecks if the elements of this iterator are partitioned …\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> and the value inside …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nGets an iterator over the entries of the map, sorted by …\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nGets a mutable iterator over the entries of the map, …\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nGets an iterator over the keys of the map, in sorted order.\nConsumes the iterator, returning the last element.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nDetermines if the elements of this <code>Iterator</code> are …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the map.\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nReturns the exact remaining length of the iterator.\nExpands to the line number on which it was invoked.\nPrints passed tokens into the standard output.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nMaps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default result (if none), or applies …\nReturns the provided default (if <code>Err</code>), or applies a …\nComputes a default function result (if none), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nCompares and returns the maximum of two values.\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nExpands to a string that represents the current module …\nTests for <code>!=</code>. The default implementation is almost always …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAllocates memory on the heap and then places <code>x</code> into it.\nMakes a new, empty <code>BTreeMap</code>.\nCreates a new empty <code>String</code>.\nAllocates memory in the given allocator then places <code>x</code> into …\nMakes a new empty BTreeMap with a reasonable choice for B.\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nOptionally inspects an environment variable at compile …\nReturns the option if it contains a value, otherwise …\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nReturns the option if it contains a value, otherwise calls …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nRemoves the last character from the string buffer and …\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nSearches for an element in an iterator, returning its …\nIterates over the entire iterator, multiplying all the …\nTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nReduces the elements to a single one, by repeatedly …\nRemoves a key from the map, returning the value at the key …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemoves a key from the map, returning the stored key and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nReplaces the actual value in the option by the value given …\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nReturns the bounds on the remaining length of the iterator.\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nSplits the collection into two at the given key. Returns …\nSplits the string into two at the given byte index.\nCreates an iterator starting at the same point, but …\nUtilities for the <code>str</code> primitive type.\nStringifies its arguments.\nSums the elements of an iterator.\nTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nCreates an iterator that yields the first <code>n</code> elements, or …\nTakes the value out of the option, leaving a <code>None</code> in its …\nTakes the value out of the option, but only if the …\nCreates an iterator that yields elements based on a …\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nCreates owned data from borrowed data, usually by cloning.\nConverts the given value to a <code>String</code>.\nEnables or disables tracing functionality used for …\nTransposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturn <code>Ok(())</code> if <code>Ok(true)</code>, <code>Err(error)</code> if <code>Ok(false)</code> or pass …\nReturn <code>Ok(())</code> if <code>Ok(true)</code>, <code>Err(handle_err())</code> if <code>Ok(false)</code> …\nShortens this <code>String</code> to the specified length.\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nTries to insert a key-value pair into the map, and returns …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nReduces the elements to a single one by repeatedly …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nCreates a new empty <code>String</code> with at least the specified …\nUnstable placeholder for type ascription.\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Some</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Some</code> value or a default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Some</code> value or computes it from a …\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value,\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nConverts an iterator of pairs into a pair of containers.\nUnzips an option containing a tuple of two options.\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nCreates a new empty <code>String</code> with at least the specified …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nReturns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …\nUnlike <code>Vec</code>, <code>Box&lt;[Z]&gt;</code> cannot reallocate, so we can be sure …\n‘Zips up’ two iterators into a single iterator of …\nZips <code>self</code> with another <code>Option</code>.\nZips <code>self</code> and another <code>Option</code> with function <code>f</code>.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nProvides more information about the failure:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a boxed slice of bytes to a boxed string slice …\nCreates a <code>&amp;str</code> from a pointer and a length.\nCreates a <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid sequence that caused a failure.\nReturns the byte position of the next character, or the …\nThe string Pattern API.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns the remaining lines of the split string.\nReturns remainder of the split string\nReturns remainder of the split string.\nReturns the next validated UTF-8 substring.\nReturns the index in the given string up to which valid …\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for the underlying string to be searched in\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the vector’s buffer, or …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>vec::IntoIter</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nEmit a batch of events.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nTurns a non-empty list into a Vec.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a boxed slice into a vector by transferring …\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nConverts a clone-on-write slice into a vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert base32 to base256, removes null-padding if …\nConvert base32 to base256, removes null-padding if …\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nKeep unyielded elements in the source <code>Vec</code>.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element in a vector if the …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\n“Best effort” zeroization for <code>Vec</code>.\n<code>Any</code> contains an arbitrary serialized protocol buffer …\nA Duration represents a signed, fixed-length span of time …\nAllows for easy Google Protocol Buffers encoding and …\nA Timestamp represents a point in time independent of any …\nConstructor that attempts to decode an instance from a …\nConstructor that attempts to decode a length-delimited …\nConstructor that attempts to decode a Protobuf-encoded …\nConstructor that attempts to decode a Protobuf-encoded …\nEncode into a buffer in Protobuf format.\nEncode with a length-delimiter to a buffer in Protobuf …\nEncode with a length-delimiter to a <code>Vec&lt;u8&gt;</code> …\nEncodes into a Protobuf-encoded <code>Vec&lt;u8&gt;</code>.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNon-negative fractions of a second at nanosecond …\nSigned fractions of a second at nanosecond resolution of …\nNormalizes the timestamp to a canonical format.\nNormalizes the duration to a canonical format.\nRepresents seconds of UTC time since Unix epoch …\nSigned seconds of the span of time. Must be from …\nA URL/resource name that uniquely identifies the type of …\nMust be a valid serialized protocol buffer of the above …\nA slice type that implements the <code>Display</code> trait to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPretty printing utilities.\nA slice type that implements the <code>Display</code> trait to …\nContains the error value\nContains the success value\nResult of a storage API call.\nReturns a key for the ack\nBurn tokens, and emit an IBC token burn event.\nReturns a key of the IBC channel counter\nReturns a key for the channel end\nReturns a key for the connection list\nReturns a key of the IBC client counter\nReturns a client ID from the given client key …\nReturns a key for the client state\nReturns a key for the timestamp for the client update\nReturns a key for the timestamp for the client update\nReturns a key for the commitment\nReturns a key of the IBC connection counter\nReturns a connection ID from the given connection key …\nReturns a key for the connection end\nReturns the height from the given consensus state key …\nReturns a key for the consensus state\nReturns a key prefix for the consensus state\nReturns a key of the per-epoch deposit for the token\nReturns a prefix of the per-epoch deposit\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nReturns the argument unchanged.\nGet the mint limit and the throughput limit for the token. …\nReturns a key of the IBC-related data\nThe storage key to get the denom name with the hashed IBC …\nThe storage key prefix to get the denom/class name with …\nCalls <code>U::from(self)</code>.\nChecks if the key is an IBC commitment key\nReturns true if the given key is for an IBC counter for …\nReturns true if the given key is for IBC\nReturns the owner and the token hash if the given key is …\nReturns a key of the IBC mint amount for the token\nReturns a key of the mint limit for the token\nMint IBC tokens. This function doesn’t emit event (see …\nMint tokens, and emit an IBC token mint event.\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nReturns a key for nextSequenceAck\nReturns a key for nextSequenceRecv\nReturns a key for nextSequenceSend\nReturns a key for the NFT class\nReturns a key for the NFT metadata\nReturns a key of IBC parameters\nReturns a pair of port ID and channel ID from the given …\nReturns a tuple of port ID, channel ID and Sequence from …\nReturns a port ID from the given port key …\nReturns a key for the port\nReturns a key for the receipt\nReturns a key of the per-epoch throughput limit for the …\nReturns a key for the upgraded client state\nReturns a key for the upgraded consensus state\nReturns a key of the per-epoch withdraw for the token\nReturns a prefix of the per-epoch withdraw\nWrap another <code>std::error::Error</code> with a static message.\nHash the denom\nHash the denom\nConvert the given IBC trace to <code>Address</code>\nObtain the IbcToken with the hash from the given denom\nObtain the IbcToken with the hash from the given NFT class …\nObtain the IBC trace from the given NFT class ID and NFT ID\nReturns the trace path and the token string if the denom …\nReturns the trace path and the token string if the trace …\nReturns true if the denomination originally came from the …\nReturns true if the denomination originally came from the …\nContains the error value\nIBC VP\nContains the success value\nIBC functions result\nGeneric types for DI\nContexts for IBC validity predicate\nContext to interact with the host structures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate IBC VP\nRetrieve the validation params\nContains the error value\nContains the success value\nPseudo execution environment context for ibc native vp\nPseudo execution environment context storage for ibc …\nResult of a storage API call.\nIbc native vp validation context\nIBC event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogging\nGenerate new pseudo execution context\nGenerate a new ibc vp validation context\nExecution context and storage\nToken type")