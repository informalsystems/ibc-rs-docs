searchState.loadedDescShard("namada_ibc", 0, "IBC library code\nThe commitment prefix for the ICS23 commitment proof\nThe event type defined in ibc-rs for receiving an NFT\nThe event type defined in ibc-rs for receiving a token\nIbc Envelop\nThe escrow address for IBC transfer\nIBC actions to handle IBC operations\nThe different variants of an Ibc message\nShielding data in IBC packet memo\nIBC token hash derived from a denomination.\nIBC transaction data section hash\nGeneric message sent over IBC.\nIBC NFT transfer message with <code>Transfer</code>\nIBC transfer message with <code>Transfer</code>\nMemo data serialized as a JSON object included in IBC …\nData included in a Namada memo.\nNFT class\nNFT metadata\nNFT transfer\nOsmosis swap message.\nOsmosis swap memo data.\nOsmosis swap inner memo data.\nThe target of a PGF payment\nProofSpec defines what the expected parameters are for a …\nIBC storage <code>Keys/Read/Write</code> implementation\nIbc transaprent transfer\nMarker trait that denotes whether an IBC memo is valid in …\nAdd a transfer module to the router\nThe amount of token to fund the target address\nRe-exports implementations of various IBC applications.\nChannel ID to fund\nNFT class data\nNFT class ID\nNFT class ID\nNFT class URI\nRe-exports implementations of IBC light clients.\nIBC Contexts\nGet IBC memo string from MASP transaction for receiving\nRe-exports implementations of all the IBC core (TAO) …\nRe-exports Cosmos-specific utility types, traits, and …\nDecode IBC shielding data from the string\nTries to decode transaction data to an <code>IbcMessage</code>\nRe-exports convenient derive macros from <code>ibc-derive</code> crate.\nIBC event related types\nExecute according to the message in an IBC transaction or …\nExtract MASP transaction from IBC envelope\nExtract MASP transaction from IBC packet memo\nUpdate IBC-related data when finalizing block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the last sequence send\nInitialize storage in the genesis block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck the result of receiving the packet by checking the …\nany field in the ExistenceProof must be the same as in …\nmax_depth (if &gt; 0) is the maximum number of InnerOps …\nIBC transfer message\nIBC NFT transfer message\nmin_depth (if &gt; 0) is the minimum number of InnerOps …\nThe inner memo data.\nMake new IBC actions\nThe inner memo data.\nThe receiver of the difference between the transferred …\nIBC system parameters\nPort ID to fund\nprehash_key_before_comparison is a flag that indicates …\nRe-exports primitive types and traits from the …\nGet the IbcToken from the source/destination ports and …\nSet the validation parameters\nThe amount that is shielded onto the MASP. Corresponds to …\nShielding transfer data. Hex encodes the borsh serialized …\nFunctions for IBC-related data to access the storage\nThe target address on the target chain\nNFT data\nNFT ID\nNFT URI\nFunctions for IBC token\nShieleded transfer for MASP transaction\nShieleded transfer for MASP transaction\nTransfer tokens over IBC\nValidate according to the message in IBC VP\nIBC integration as a native validity predicate\nThe receiver of the difference between the transferred …\nThe amount that is shielded onto the MASP. Corresponds to …\nShielding transfer data. Hex encodes the borsh serialized …\nRe-exports the implementation of the IBC Non-Fungible Token\nRe-exports the implementation of the IBC fungible token …\nDefines the required context traits for ICS-721 to …\nImplements IBC handlers responsible for processing …\nProvides IBC module callbacks implementation for the …\nRe-exports the implementation of the IBC Non-Fungible Token\nNative chain account id.\nRead-write methods required in NFT transfer execution …\nRead-only methods required in NFT transfer validation …\nExecutes burning of the NFT in a user account.\nValidates the sender account and the coin input before …\nReturns Ok() if the host chain supports receiving NFTs.\nReturns Ok() if the host chain supports sending NFTs.\nCreates a new NFT Class identified by classId. If the …\nValidates that the NFT can be created or updated …\nExecutes the escrow of the NFT in a user account.\nValidates that the tokens can be escrowed successfully.\nGet the class ID of the token\nGet the token Data\nGet the class Data\nGet the token ID\nGet the class ID\nReturns the NFT\nReturns the NFT class\nget_port returns the portID for the transfer module.\nGet the token URI\nGet the class URI\nExecutes minting of the NFT in a user account.\nValidates the receiver account and the NFT input\nAttempt to convert a <code>Signer</code> to a native chain receiver …\nAttempt to convert a <code>Signer</code> to a native chain sender …\nReturns a hash of the prefixed class ID and the token ID. …\nExecutes the unescrow of the NFT in a user account.\nValidates that the NFT can be unescrowed successfully.\nThis function handles the transfer receiving logic.\nInitiate a token transfer. Equivalent to calling …\nExecutes the token transfer. A prior call to …\nValidates the NFT transfer\nThe successful string, used for creating an …\nClass data for an NFT\nClass ID for an NFT\nClass URI for an NFT\nModule identifier for the ICS-721 application.\nRepresents the token transfer memo\nThe port identifier that the ICS-721 applications …\nPrefixed class to trace sources like ICS-20 PrefixedDenom\nToken data for an NFT\nToken ID for an NFT\nToken URI for an NFT\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nICS-721 application current version.\nReturns a successful acknowledgement status for the NFT …\nAdds the specified prefix to the path.\nAdds the specified prefix to the trace path.\nBase class of the relayed non-fungible token.\nReturn empty trace path\nDefines the Non-Fungible Token Transfer (ICS-721) error …\nDefines Non-Fungible Token Transfer (ICS-721) event types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe parsing logic is same as <code>FromStr</code> impl of <code>PrefixedDenom</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the path is empty and false otherwise.\nReturns true if the class ID originally came from the …\nReturns true if the class ID originally came from the …\nDefines the Non-Fungible Token Transfer (ICS-721) message …\nContains the <code>PacketData</code> type that defines the structure of …\nParses the data in the format specified by ICS-721.\nRe-exports ICS-721 NFT transfer proto types from the …\nRemoves the specified prefix from the path if there is a …\nRemoves the specified prefix from the trace path if there …\nReturns true iff this path starts with the specified prefix\nReturns a string slice with <code>TracePrefix</code> removed.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns a string slice with <code>TracePath</code> or all <code>TracePrefix</code>es …\nchannel error: {0}\ndecoding error: {0}\nfailed to deserialize acknowledgement\nfailed to deserialize packet data\nhost error: {0}\ninvalid channel state: cannot be closed\nmismatched channel orders: expected <code>{expected}</code>, actual …\nmismatched number of token IDs: expected <code>{expected}</code>, …\nmismatched port IDs: expected <code>{expected}</code>, actual <code>{actual}</code>\nmissing destination channel <code>{channel_id}</code> on port <code>{port_id}</code>\nmissing token ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the Non-Fungible Token Transfer message type\nMessage used to build an ICS-721 Non-Fungible Token …\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNFT transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms the basic validation of the packet data fields.\nClassTrace contains the base classID for ICS721 …\nGenesisState defines the ibc-nft-transfer genesis state\nMsgTransfer defines a msg to transfer non fungible tokens …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nNonFungibleTokenPacketData defines a struct for the packet …\nParams defines the set of IBC nft-transfer parameters. …\nQueryClassHashRequest is the request type for the …\nQueryClassHashResponse is the response type for the …\nQueryClassTraceRequest is the request type for the …\nQueryClassTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryClassTracesResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is request type for the Query/Params …\nQueryParamsResponse is response type for the Query/Params …\nauthority is the address that controls the module …\nbase classID of the relayed non-fungible token.\nunique channel identifier\nthe class_data of class to be transferred\nthe class_id of tokens to be transferred\nthe class_id of class to be transferred\nclass_trace returns the requested class trace information.\nclass_traces returns all class trace information.\nthe class_uri of class to be transferred\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or classID (full classID with ibc …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\noptional memo\nGenerated client implementations.\nGenerated server implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the nft-transfer parameters to update.\nparams holds all the parameters of this module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nGenerated client implementations.\nGenerated server implementations.\nreceive_enabled enables or disables all cross-chain nft …\nthe recipient address on the destination chain\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain nft …\nthe sender address\nthe sender address\nsequence number of the transfer packet sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe non fungible tokens’s data to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens’s uri to be transferred\nThe class trace <code>([port_id]/[channel_id])+/[class]</code>\nMsg defines the ibc/nft-transfer Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a governance operation for updating …\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/nft-transfer Msg service.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a governance operation for updating …\nQuery provides defines the gRPC querier service.\nEnable decompressing responses.\nClassHash queries a class hash information.\nClassTrace queries a class trace information.\nClassTraces queries all class traces.\nAttempt to create a new client by connecting to a given …\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the nft-transfer module.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service.\nEnable decompressing requests with the given encoding.\nClassHash queries a class hash information.\nClassTrace queries a class trace information.\nClassTraces queries all class traces.\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the nft-transfer module.\nCompress responses with the given encoding, if the client …\nDefines the main context traits and IBC module callbacks\nImplements the processing logic for ICS20 (token transfer) …\nRe-exports the implementation of the IBC fungible token …\nNative chain account id.\nMethods required in token transfer execution, to be …\nMethods required in token transfer validation, to be …\nExecutes burning of the tokens in a user account.\nValidates the sender account and the coin input before …\nReturns Ok() if the host chain supports receiving coins.\nReturns Ok() if the host chain supports sending coins.\nReturns a hash of the prefixed denom. Implement only if …\nExecutes the escrow of the tokens in a user account.\nValidates that the tokens can be escrowed successfully.\nget_port returns the portID for the transfer module.\nExecutes minting of the tokens in a user account.\nValidates the receiver account and the coin input\nAttempt to convert a <code>Signer</code> to a native chain receiver …\nAttempt to convert a <code>Signer</code> to a native chain sender …\nExecutes the unescrow of the tokens in a user account.\nValidates that the tokens can be unescrowed successfully.\nThis function handles the transfer receiving logic.\nInitiate a token transfer. Equivalent to calling …\nExecutes the token transfer. A prior call to …\nValidates the token transfer. If this succeeds, then it is …\nThe successful string, used for creating an …\nA type for representing token transfer amounts.\nA <code>Coin</code> type with an unprefixed denomination.\nThe “base” of a denomination.\nCoin defines a token with a denomination and an amount.\nMaximum value.\nModule identifier for the ICS20 application.\nRepresents the token transfer memo\nThe port identifier that the ICS20 applications typically …\nA <code>Coin</code> type with fully qualified <code>PrefixedDenom</code>.\nA type that contains the base denomination for ICS20 and …\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nLittle-endian large integer type 256-bit unsigned integer.\nICS20 application current version.\nComputes the absolute difference between self and other.\nReturns a successful acknowledgement status for the token …\nAdds the specified prefix to the trace path.\nAmount\nAmount\nAmount\nAmount\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nBase denomination of the relayed fungible token.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte. Byte 0 is the least significant …\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nDenomination\nDenomination\nDenomination\nDenomination\nReturns a pair <code>(self / other, self % other)</code>.\nDefines the token transfer error type\nDefines all token transfer event types\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nInitializes a <code>PrefixedDenom</code> from a string that adheres to …\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the denomination originally came from the …\nReturns true if the denomination originally came from the …\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nDefines the token transfer message type\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nContains the <code>PacketData</code> type that defines the structure of …\nFast exponentiation by squaring …\nRe-exports ICS-20 token transfer proto types from the …\nRemoves the specified prefix from the trace path if there …\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nConvert to big-endian bytes.\nConvert to little-endian bytes.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns the number of trailing zeros in the binary …\nWrite to the slice in big-endian format.\nZero (additive identity) of this type.\nchannel error: {0}\ndecoding error: {0}\nfailed to deserialize acknowledgement\nfailed to deserialize packet data\nhost error: {0}\ninvalid channel state: cannot be closed\nmismatched channel orders: expected <code>{expected}</code>, actual …\nmismatched port IDs: expected <code>{expected}</code>, actual <code>{actual}</code>\nmissing destination channel <code>{channel_id}</code> on port <code>{port_id}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the token transfer message type\nMessage used to build an ICS20 token transfer packet.\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntoken transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocation defines the spend limit for a particular port …\nDenomTrace contains the base denomination for ICS20 …\nGenesisState defines the ibc-transfer genesis state\nMsgTransfer defines a msg to transfer fungible tokens (i.e …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nParams defines the set of IBC transfer parameters. NOTE: …\nQueryDenomHashRequest is the request type for the …\nQueryDenomHashResponse is the response type for the …\nQueryDenomTraceRequest is the request type for the …\nQueryDenomTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryConnectionsResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is the request type for the …\nQueryParamsResponse is the response type for the …\nQueryTotalEscrowForDenomRequest is the request type for …\nQueryTotalEscrowForDenomResponse is the response type for …\nTransferAuthorization allows the grantee to spend up to …\nport and channel amounts\nallow list of receivers, an empty allow list permits any …\nallow list of packet data keys, an empty list prohibits …\nbase denomination of the relayed fungible token.\nunique channel identifier\ndenom_trace returns the requested denomination trace …\ndenom_traces returns all denominations trace information.\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or denom (full denom with ibc prefix) …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\nGenerated client implementations.\nGenerated server implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the transfer parameters to update.\nparams defines the parameters of the module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nGenerated client implementations.\nGenerated server implementations.\nreceive_enabled enables or disables all cross-chain token …\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain token …\nthe sender address\nsequence number of the transfer packet sent\nsigner address\nthe channel by which the packet will be sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nthe port on which the packet will be sent\nspend limitation on the channel\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe tokens to be transferred\ntotal_escrowed contains the total amount of tokens escrowed\nThe denomination trace <code>([port_id]/[channel_id])+/[denom]</code>\nMsg defines the ibc/transfer Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a rpc handler for MsgUpdateParams.\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/transfer Msg service.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a rpc handler for MsgUpdateParams.\nQuery provides defines the gRPC querier service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nDenomHash queries a denomination hash information.\nDenomTrace queries a denomination trace information.\nDenomTraces queries all denomination traces.\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the ibc-transfer module.\nCompress requests with the given encoding.\nTotalEscrowForDenom returns the total amount of tokens in …\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service.\nEnable decompressing requests with the given encoding.\nDenomHash queries a denomination hash information.\nDenomTrace queries a denomination trace information.\nDenomTraces queries all denomination traces.\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the ibc-transfer module.\nCompress responses with the given encoding, if the client …\nTotalEscrowForDenom returns the total amount of tokens in …\nFungibleTokenPacketData defines a struct for the packet …\nthe token amount to be transferred\nthe token denomination to be transferred\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\noptional memo\nthe recipient address on the destination chain\nthe sender address\nRe-exports implementations of ICS-07 Tendermint light …\nRe-exports implementations of ICS-08 Wasm light client …\nThis module includes trait implementations for the …\nThis module includes trait implementations for the …\nRe-exports Tendermint light client data structures from the\nNewtype wrapper around the <code>ClientState</code> type, imported from …\nCheck for misbehaviour on the client state as part of the …\nChecks for misbehaviour upon receiving a new consensus …\nCheck that the subject and substitute client states match …\nDetermines the <code>Status</code>, whether it is <code>Active</code> or <code>Expired</code>, of …\nReturns the argument unchanged.\nSeed the host store with initial client and consensus …\nCalls <code>U::from(self)</code>.\nRemoves consensus states from the client store whose …\nQuery the status of the client state.\nCommit a frozen client state, which was frozen as a result …\nUpdate the <code>client_state</code>’s ID, trusting period, latest …\nCommit the new client state and consensus state to the …\nUpdate the host store with a new client state, pruning old …\nValidate the given proof height against the client state’…\nVerify the client message as part of the client state …\nThe default verification logic exposed by ibc-rs simply …\nVerify an <code>Any</code> consensus state by attempting to convert it …\nVerify membership of the given value against the client’…\nDetermines if two conflicting headers at the same height …\nVerify that the given value does not belong in the client…\nPerform client-specific verifications and check all data …\nNewtype wrapper around the <code>ConsensusState</code> type imported …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines data structure for Tendermint client state.\nDefines the Tendermint light client’s consensus state\nTendermint consensus header\nTendermint light client’s misbehaviour type\nConstant for a trust threshold of 1/3.\nConstant for a trust threshold of 2/3.\n<code>TrustThreshold</code> defines the level of trust that a client has\nConstant for a trust threshold of 0/0.\nHelper method to produce a <code>Options</code> struct for use in …\n<code>header.trusted_next_validator_set</code> was given to us by the …\nReturns the tendermint <code>ClientType</code>\nThe denominator of the fraction underlying this trust …\nDefines the Tendermint light client’s error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Tendermint <code>ClientState</code> by given …\nInstantiate a TrustThreshold with the given denominator and\nThe numerator of the fraction underlying this trust …\nRe-exports ICS-07 Tendermint light client from <code>ibc-proto</code> …\nGet the refresh time to ensure the state does not expire\nReturns the timestamp of the consensus state as a …\nChecks if the fields of a given header are consistent with …\ndecoding error: {0}\nfailed to verify header: {0}\ninsufficient misbehaviour header height: header1 height …\ninsufficient trusting period <code>{trusting_period:?}</code>; should …\ninsufficient validator overlap <code>{0}</code>\ninvalid header height <code>{0}</code>\ninvalid max clock drift; must be greater than 0\ninvalid client proof specs <code>{0}</code>\ninvalid timestamp <code>{0}</code>\ninvalid client state trust threshold: {description}\nmismatched header chain ids: expected <code>{expected}</code>, actual …\nmismatched revision heights: expected <code>{expected}</code>, actual …\nmismatched validator hashes: expected <code>{expected}</code>, actual …\nmissing client state upgrade-path key\nThe main error type for the Tendermint light client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientState from Tendermint tracks the current validator …\nConsensusState defines the consensus state from Tendermint.\nFraction defines the protobuf message type for …\nHeader defines the Tendermint client consensus Header. It …\nMisbehaviour is a wrapper over two conflicting Headers …\nallow_update_after_expiry is deprecated\nallow_update_after_misbehaviour is deprecated\nClientID is deprecated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock height when the client was frozen due to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatest height the client was updated to\ndefines how much new (untrusted) header’s Time can drift …\nProof specifications used in verifying counterparty state\ncommitment root (i.e app hash)\ntimestamp that corresponds to the block height in which …\nduration of the period since the LastestTimestamp during …\nduration of the staking unbonding period\nPath at which next upgraded client will be committed. Each …\nDefines the client message type for the ICS-08 Wasm light …\nDefines the client state type for the ICS-08 Wasm light …\nReturns the wasm <code>ClientType</code>\nDefines the consensus state type for the ICS-08 Wasm light …\nContains definitions of message types for the ICS-08 Wasm …\nRe-exports ICS-08 Wasm light client proto types from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for migrating a Wasm contract on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for removing a checksum from the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for storing the Wasm byte code on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecksums defines a list of all checksums that are stored\nWasm light client message (either header(s) or …\nWasm light client’s Client state\nWasm light client’s ConsensusState\nContract stores contract code\nGenesisState defines 08-wasm’s keeper genesis state\nMsgMigrateContract defines the request type for the …\nMsgMigrateContractResponse defines the response type for …\nMsgRemoveChecksum defines the request type for the …\nMsgStoreChecksumResponse defines the response type for the …\nMsgStoreCode defines the request type for the StoreCode …\nMsgStoreCodeResponse defines the response type for the …\nQueryChecksumsRequest is the request type for the …\nQueryChecksumsResponse is the response type for the …\nQueryCodeRequest is the request type for the Query/Code …\nQueryCodeResponse is the response type for the Query/Code …\nchecksum is the sha256 hash of the stored code\nchecksum is the sha256 hash to be removed from the store\nchecksum is the sha256 hash of the new wasm byte code for …\nchecksum is a hex encoded string of the code stored.\nchecksums is a list of the hex encoded checksums of all …\nthe client id of the contract\ncontract byte code\nuploaded light client wasm contracts\nbytes encoding the client state of the underlying light …\nbytes encoding the consensus state of the underlying light …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe json encoded message to be passed to the contract on …\nGenerated client implementations.\nGenerated server implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nGenerated client implementations.\nGenerated server implementations.\nsigner address\nsigner address\nsigner address\nwasm byte code of light client contract. It can be raw or …\nMsg defines the ibc/08-wasm Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nMigrateContract defines a rpc handler method for …\nRemoveChecksum defines a rpc handler method for …\nCompress requests with the given encoding.\nStoreCode defines a rpc handler method for MsgStoreCode.\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/08-wasm Msg service.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nMigrateContract defines a rpc handler method for …\nRemoveChecksum defines a rpc handler method for …\nCompress responses with the given encoding, if the client …\nStoreCode defines a rpc handler method for MsgStoreCode.\nQuery service for wasm module\nEnable decompressing responses.\nGet all Wasm checksums\nGet Wasm code for given checksum\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery service for wasm module\nEnable decompressing requests with the given encoding.\nGet all Wasm checksums\nGet Wasm code for given checksum\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIBC context to handle IBC-related data\nParameters for validation\nMarker for DI types\nChain ID\nAnyClientState and AnyConsensusState for IBC context\nIbcCommonContext implementation for IBC\nExecutionContext implementation for IBC\nReturns the argument unchanged.\nReturns the argument unchanged.\nContext\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMiddleware entry points on Namada.\nMake new IBC context\nIBC Non-Fungible token transfer context\nIBC module for token transfer\nIBC proof specs\nFunctions to handle IBC modules\nIBC storage context\nIBC token transfer context\nIBC module for token transfer\nUnbonding period\nReturns the host upgrade path. May be empty.\nUpgrade path\nValidationContext implementation for IBC\nValidation parameters for IBC VP\nClientState for light clients\nConsensusState for light clients\nTendermint client state\nTendermint consensus state\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContext to handle typical IBC data\nContains the success value\nResult of IBC common function call\nAppend the connection ID to the connection list of the …\nGet the ChannelEnd\nGet the ClientState\nGet the client update time\nGet the ConnectionEnd\nGet the ConsensusState\nGet heights of all consensus states\nDecode ConsensusState from bytes\nDelete the ConsensusState\nDelete the packet acknowledgement\nDelete the packet commitment\nDelete the client update time and height\nRead the per-epoch deposit of the given token\nGet the NextSequenceAck\nGet the NextSequenceRecv\nGet the NextSequenceSend\nGet the consensus state of this chain\nGet the timestamp on this chain\nIncrement the counter\nReturn true if the NFT is owned by the owner\nRead the mint amount of the given token\nGet the next consensus state after the given height\nGet the NFT class\nGet the NFT metadata\nGet the packet acknowledgement\nGet the packet commitment\nGet the packet receipt\nGet the previous consensus state before the given height\nRead a counter\nRead and decode the IBC sequence\nStore the ChannelEnd\nStore the ClientState\nStore the ConnectionEnd\nStore the ConsensusState\nWrite the per-epoch deposit of the given token\nWrite the IBC trace. The given address could be a …\nWrite the mint amount of the given token\nStore the NextSequenceAck\nStore the NextSequenceRecv\nStore the NextSequenceSend\nStore the NFT class\nStore the NFT metadata\nStore the packet acknowledgement\nStore the packet commitment\nStore the packet receipt\nStore the sequence\nStore the client update time and height\nWrite the per-epoch withdraw of the given token\nRead the per-epoch withdraw of the given token\nThe stack of middlewares of the transfer module.\nCreate a new instance of <code>TransferMiddlewares</code>\nImplementation of Packet Forward Middleware on top of the …\nThis middleware is to handle automatically shielding the …\nA wrapper around an IBC transfer module necessary to build …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe main module\nA middleware for handling IBC pockets received after a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe next middleware module\nNFT transfer context to handle tokens\nValidates that the NFT can be created or updated …\nSet to enable a shielded transfer\nReturns the argument unchanged.\nReturns the NFT\nReturns the NFT class\nCalls <code>U::from(self)</code>.\nMake new NFT transfer context\nExecutes the unescrow of the NFT in a user account.\nIBC module for NFT transfer\nIBC actions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake a new module\nIBC router\nAdd TokenTransfer route\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake new Router\nIBC context trait to be implemented in integration that …\nProofSpec defines what the expected parameters are for a …\nStorage read/write type\nBurn token\nEmit an IBC event\nInsert the verifier\nany field in the ExistenceProof must be the same as in …\nLogging\nmax_depth (if &gt; 0) is the maximum number of InnerOps …\nmin_depth (if &gt; 0) is the minimum number of InnerOps …\nMint token\nprehash_key_before_comparison is a flag that indicates …\nRead-only storage access\nRead/write storage access\nTransfer token\nToken transfer context to handle tokens\nDisable parsing ibc signers as the governance address\nEnable parsing ibc signers as the governance address\nSet to enable a shielded transfer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMake new token transfer context\nIBC module wrapper for getting the reference of the module\nIBC module for token transfer\nReference of the module\nMutable reference of the module\nIBC actions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the module ID\nMake a new module\nGet the port ID\nRe-exports ICS-04 implementation from the <code>ibc-core-channel</code> …\nRe-exports ICS-02 implementation from the <code>ibc-core-client</code> …\nRe-exports ICS-23 data structures from the …\nRe-exports ICS-03 implementation from the …\nRe-exports convenient derive macros from <code>ibc-derive</code> crate.\nRe-exports IBC handler entrypoints from the …\nRe-exports ICS-25 implementation from the <code>ibc-core-handler</code> …\nRe-exports ICS-24 implementation from the <code>ibc-core-host</code> …\nRe-exports IBC primitive types from the <code>ibc-primitives</code> …\nRe-exports ICS-26 implementation from the <code>ibc-core-router</code> …\nICS4 (channel) context.\nThis module implements the processing logic for ICS4 …\nRe-exports ICS-04 data structures from the …\nMethods required in send packet execution, to be …\nMethods required in send packet validation, to be …\nReturns the ChannelEnd for the given <code>port_id</code> and <code>chan_id</code>.\nReturns the ConnectionState for the given identifier …\nIbc events\nRetrieve the context that implements all clients’ …\nLogging facility\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSend the given packet, including all necessary validation.\nSend the packet without any validation.\nValidate that sending the given packet would succeed.\nThe version field for a <code>ChannelEnd</code>.\nDefines acknowledgment types used by various IBC messages …\nImplementation of IBC channels, as described in ICS-04.\nTypes and utilities related to packet commitments.\nDefines the main channel, port, and packet error types\nTypes for the IBC events emitted from Tendermint Websocket …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMessage definitions for all ICS4 domain types: channel …\nDefines the packet type\nRe-exports ICS-04 proto types from the <code>ibc-proto</code> crate\nA generic Acknowledgement type that modules may interpret …\nDefines a convenience type for IBC applications to …\nError Acknowledgement e.g. …\nA wrapper type that guards variants of …\nSuccessful Acknowledgement e.g. <code>{&quot;result&quot;:&quot;AQ==&quot;}</code>\nCreates an error acknowledgement status with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the acknowledgement status is successful.\nConstructs a new instance of <code>StatusValue</code> if the given …\nCreates a success acknowledgement status with the given …\nOne end of a channel\nA <code>ChannelEnd</code> along with its ID and the port it is bound to\nRepresents the channel ordering\nRepresents the state of a <code>ChannelEnd</code>\nYields the Order as a string\nYields the state as a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>ChannelEnd</code> is in state <code>State::Open</code>.\nReturns if this channel state is <code>Open</code>.\nReturns if the channel with this state has progressed less …\nCreates a new <code>ChannelEnd</code> with performing basic validation …\nHelper function to compare the order of this end with …\nUpdates the ChannelEnd to assume a new State ‘s’.\nChecks if the <code>connection_hops</code> has a length of <code>expected</code>.\nChecks if the counterparty of this channel end matches …\nChecks if the state of this channel end is not closed.\nChecks if the state of this channel end matches the …\nAcknowledgement of commitment to be stored\nPacket commitment\nCompute the commitment for an acknowledgement.\nCompute the commitment for a packet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\napplication specific error: <code>{description}</code>\nErrors that arise from the ICS04 Channel module\nclient error: {0}\nconnection error: {0}\ndecoding error: {0}\npacket acknowledgment for sequence <code>{0}</code> already exists\nexpired packet timestamp: should be greater than chain …\nhost error: {0}\ninsufficient packet timeout height: should have …\npacket timeout height <code>{timeout_height}</code> &gt; chain height …\ninvalid connection hops length: expected <code>{expected}</code>, …\ninvalid channel state: expected <code>{expected}</code>, actual <code>{actual}</code>\nmismatched counterparty: expected <code>{expected}</code>, actual …\nmismatched packet commitments: expected <code>{expected:?}</code>, …\nmismatched packet sequence: expected <code>{expected}</code>, actual …\nmissing acknowledgment status\nmissing counterparty\nmissing timeout\ntimestamp error: {0}\nunsupported version: expected <code>{expected}</code>, actual <code>{actual}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>ChannelClosed</code> event is emitted when a channel is closed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll channel messages\nMessage definition for packet acknowledgements.\nMessage definition for the second step in the channel …\nMessage definition for the first step in the channel close …\nMessage definition for the third step in the channel open …\nMessage definition for the fourth step in the channel open …\nMessage definition for the first step in the channel open …\nMessage definition for the second step in the channel open …\nMessage definition for the “packet receiving” datagram.\nMessage definition for packet timeout domain type, which …\nMessage definition for packet timeout domain type.\nAll packet messages\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe packet to be received\nProof of packet acknowledgement on the receiving chain\nProof of packet commitment on the sending chain\nHeight at which the commitment proof in this message were …\nHeight at which the commitment proof in this message was …\nThe signer of the message\nChecks if the <code>connection_hops</code> has a length of <code>expected</code>.\nChecks if the <code>connection_hops</code> has a length of <code>expected</code>.\nAllow a relayer to specify a particular version by …\nOnly kept here for proper conversion to/from the raw type\nThe packet type; this is what applications send to one …\nEnumeration of proof carrying ICS4 message, helper for …\nThe packet state type.\nPacket receipt, used over unordered channels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether a packet from a <code>SendPacket</code> event is …\nAcknowledgement is the recommended acknowledgement format …\nChannel defines pipeline for exactly-once packet delivery …\nA channel has been closed and can no longer be used to …\nCounterparty defines a channel end counterparty\nErrorReceipt defines a type which encapsulates the upgrade …\nThe message was executed unsuccessfully\nA channel has just completed flushing any in-flight …\nA channel has just accepted the upgrade handshake attempt …\nGenesisState defines the ibc channel submodule’s genesis …\nIdentifiedChannel defines a channel with additional port …\nA channel has just started the opening handshake.\nMsgAcknowledgement receives incoming IBC acknowledgement\nMsgAcknowledgementResponse defines the Msg/Acknowledgement …\nMsgChannelCloseConfirm defines a msg sent by a Relayer to …\nMsgChannelCloseConfirmResponse defines the …\nMsgChannelCloseInit defines a msg sent by a Relayer to …\nMsgChannelCloseInitResponse defines the …\nMsgChannelOpenAck defines a msg sent by a Relayer to Chain …\nMsgChannelOpenAckResponse defines the Msg/ChannelOpenAck …\nMsgChannelOpenConfirm defines a msg sent by a Relayer to …\nMsgChannelOpenConfirmResponse defines the …\nMsgChannelOpenInit defines an sdk.Msg to initialize a …\nMsgChannelOpenInitResponse defines the Msg/ChannelOpenInit …\nMsgChannelOpenInit defines a msg sent by a Relayer to try …\nMsgChannelOpenTryResponse defines the Msg/ChannelOpenTry …\nMsgChannelUpgradeAck defines the request type for the …\nMsgChannelUpgradeAckResponse defines MsgChannelUpgradeAck …\nMsgChannelUpgradeCancel defines the request type for the …\nMsgChannelUpgradeCancelResponse defines the …\nMsgChannelUpgradeConfirm defines the request type for the …\nMsgChannelUpgradeConfirmResponse defines …\nMsgChannelUpgradeInit defines the request type for the …\nMsgChannelUpgradeInitResponse defines the …\nMsgChannelUpgradeOpen defines the request type for the …\nMsgChannelUpgradeOpenResponse defines the …\nMsgChannelUpgradeTimeout defines the request type for the …\nMsgChannelUpgradeTimeoutRepsonse defines the …\nMsgChannelUpgradeTry defines the request type for the …\nMsgChannelUpgradeTryResponse defines the …\nMsgPruneAcknowledgements defines the request type for the …\nMsgPruneAcknowledgementsResponse defines the response type …\nMsgRecvPacket receives incoming IBC packet\nMsgRecvPacketResponse defines the Msg/RecvPacket response …\nMsgTimeout receives timed-out packet\nMsgTimeoutOnClose timed-out packet upon counterparty …\nMsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose …\nMsgTimeoutResponse defines the Msg/Timeout response type.\nMsgUpdateParams is the MsgUpdateParams request type.\nMsgUpdateParamsResponse defines the MsgUpdateParams …\nzero-value for channel ordering\nThe message did not call the IBC application callbacks …\nA channel has completed the handshake. Open channels are …\nOrder defines if a channel is ORDERED or UNORDERED\npackets are delivered exactly in the order which they were …\nPacket defines a type that carries data across different …\nPacketId is an identifer for a unique Packet Source chains …\nPacketSequence defines the genesis type necessary to …\nPacketState defines the generic type necessary to retrieve …\nParams defines the set of IBC channel parameters.\nQueryChannelClientStateRequest is the request type for the …\nQueryChannelClientStateResponse is the Response type for …\nQueryChannelConsensusStateRequest is the request type for …\nQueryChannelClientStateResponse is the Response type for …\nQueryChannelParamsRequest is the request type for the …\nQueryChannelParamsResponse is the response type for the …\nQueryChannelRequest is the request type for the …\nQueryChannelResponse is the response type for the …\nQueryChannelsRequest is the request type for the …\nQueryChannelsResponse is the response type for the …\nQueryConnectionChannelsRequest is the request type for the …\nQueryConnectionChannelsResponse is the Response type for …\nQueryNextSequenceReceiveRequest is the request type for the\nQuerySequenceResponse is the response type for the …\nQueryNextSequenceSendRequest is the request type for the …\nQueryNextSequenceSendResponse is the request type for the …\nQueryPacketAcknowledgementRequest is the request type for …\nQueryPacketAcknowledgementResponse defines the client …\nQueryPacketAcknowledgementsRequest is the request type for …\nQueryPacketAcknowledgemetsResponse is the request type for …\nQueryPacketCommitmentRequest is the request type for the …\nQueryPacketCommitmentResponse defines the client query …\nQueryPacketCommitmentsRequest is the request type for the …\nQueryPacketCommitmentsResponse is the request type for the …\nQueryPacketReceiptRequest is the request type for the …\nQueryPacketReceiptResponse defines the client query …\nQueryUnreceivedAcks is the request type for the …\nQueryUnreceivedAcksResponse is the response type for the …\nQueryUnreceivedPacketsRequest is the request type for the …\nQueryUnreceivedPacketsResponse is the response type for the\nQueryUpgradeErrorRequest is the request type for the …\nQueryUpgradeErrorResponse is the response type for the …\nQueryUpgradeRequest is the request type for the …\nQueryUpgradeResponse is the response type for the …\nResponseResultType defines the possible outcomes of the …\nState defines if a channel is in one of the following …\nThe message was executed successfully\nTimeout defines an execution deadline structure for …\nA channel has acknowledged the handshake step on the …\nDefault State\npackets can be delivered in any order, which may differ …\nDefault zero value enumeration\nUpgrade is a verifiable type which contains the relevant …\nUpgradeFields are the fields in a channel end which may be …\nNested message and enum types in <code>Acknowledgement</code>.\npacket associated with the request fields\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nauthority is the address that controls the module …\nNOTE: the version field within the channel has been …\nchannel associated with the request identifiers\nchannel identifier\nchannel end on the counterparty chain\nchannel unique identifier.\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nchannel unique identifier\nlist of stored channels of the chain.\nlist of channels associated with a connection.\nclient ID associated with the consensus state\npacket associated with the request fields\nconnection unique identifier\nlist of connection identifiers, in order, along which …\nlist of connection identifiers, in order, along which …\nconsensus state associated with the channel\ncounterparty channel end\ncounterparty channel end\nReturns the enum value of <code>counterparty_channel_state</code>, or …\nReturns the enum value of <code>counterparty_channel_state</code>, or …\nactual opaque bytes transferred directly to the …\nembedded data that represents packet state.\nidentifies the channel end on the receiving chain.\nidentifies the port on the receiving chain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>State</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>Order</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>ResponseResultType</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nblock height after which the packet or upgrade times out\nquery block height\nquery block height\nquery block height\nquery block height\nquery block height\nquery block height\nclient state associated with the channel\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>State</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Order</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ResponseResultType</code>.\nthe error message detailing the cause of failure\nGenerated client implementations.\nGenerated server implementations.\nthe sequence for the next generated channel identifier\nnext sequence receive number\nnext sequence send number\nReturns the enum value of <code>ordering</code>, or the default if the …\nReturns the enum value of <code>ordering</code>, or the default if the …\nReturns the enum value of <code>ordering</code>, or the default if the …\nwhether the channel is ordered or unordered\nwhether the channel is ordered or unordered\nlist of acknowledgement sequences\nlist of packet sequences\nlist of packet sequences\npagination request\npagination response\npagination request\npagination response\npagination request\npagination response\npagination request\npagination response\nparams defines the channel parameters to update.\nparams defines the parameters of the module.\nport identifier\nport on the counterparty chain which owns the other end of …\nchannel port identifier.\nchannel port identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nport unique identifier\nDeprecated: this field is unused. Crossing hello’s are …\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nGenerated client implementations.\nGenerated server implementations.\nsuccess flag for if receipt exists\nresponse contains either a result or an error and must be …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nrevision height of the consensus state\nrevision number of the consensus state\nnumber corresponds to the order of sends and receives, …\npacket sequence.\npacket sequence\nthe channel upgrade sequence\npacket sequence\npacket sequence\npacket sequence\nlist of unreceived packet sequences\nlist of unreceived acknowledgement sequences\nSets <code>counterparty_channel_state</code> to the provided enum value.\nSets <code>counterparty_channel_state</code> to the provided enum value.\nSets <code>ordering</code> to the provided enum value.\nSets <code>ordering</code> to the provided enum value.\nSets <code>ordering</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>state</code> to the provided enum value.\nSets <code>state</code> to the provided enum value.\nidentifies the channel end on the sending chain.\nidentifies the port on the sending chain.\nReturns the enum value of <code>state</code>, or the default if the …\nReturns the enum value of <code>state</code>, or the default if the …\ncurrent state of the channel end\ncurrent state of the channel end\nblock height after which the packet times out\nblock timestamp (in nanoseconds) after which the packet …\nblock timestamp (in nanoseconds) after which the packet or …\nNumber of sequences pruned (includes both packet …\nNumber of sequences left after pruning.\nupgrade sequence indicates the latest upgrade attempt …\nupgrade sequence indicates the latest upgrade attempt …\nthe relative timeout after which channel upgrades will …\nopaque channel version, which is agreed upon during the …\nopaque channel version, which is agreed upon during the …\nresponse contains either a result or an error and must be …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nMsg defines the ibc/channel Msg service.\nEnable decompressing responses.\nAcknowledgement defines a rpc handler method for …\nChannelCloseConfirm defines a rpc handler method for …\nChannelCloseInit defines a rpc handler method for …\nChannelOpenAck defines a rpc handler method for …\nChannelOpenConfirm defines a rpc handler method for …\nChannelOpenInit defines a rpc handler method for …\nChannelOpenTry defines a rpc handler method for …\nChannelUpgradeAck defines a rpc handler method for …\nChannelUpgradeCancel defines a rpc handler method for …\nChannelUpgradeConfirm defines a rpc handler method for …\nChannelUpgradeInit defines a rpc handler method for …\nChannelUpgradeOpen defines a rpc handler method for …\nChannelUpgradeTimeout defines a rpc handler method for …\nChannelUpgradeTry defines a rpc handler method for …\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPruneAcknowledgements defines a rpc handler method for …\nRecvPacket defines a rpc handler method for MsgRecvPacket.\nCompress requests with the given encoding.\nTimeout defines a rpc handler method for MsgTimeout.\nTimeoutOnClose defines a rpc handler method for …\nUpdateChannelParams defines a rpc handler method for …\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/channel Msg service.\nEnable decompressing requests with the given encoding.\nAcknowledgement defines a rpc handler method for …\nChannelCloseConfirm defines a rpc handler method for …\nChannelCloseInit defines a rpc handler method for …\nChannelOpenAck defines a rpc handler method for …\nChannelOpenConfirm defines a rpc handler method for …\nChannelOpenInit defines a rpc handler method for …\nChannelOpenTry defines a rpc handler method for …\nChannelUpgradeAck defines a rpc handler method for …\nChannelUpgradeCancel defines a rpc handler method for …\nChannelUpgradeConfirm defines a rpc handler method for …\nChannelUpgradeInit defines a rpc handler method for …\nChannelUpgradeOpen defines a rpc handler method for …\nChannelUpgradeTimeout defines a rpc handler method for …\nChannelUpgradeTry defines a rpc handler method for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPruneAcknowledgements defines a rpc handler method for …\nRecvPacket defines a rpc handler method for MsgRecvPacket.\nCompress responses with the given encoding, if the client …\nTimeout defines a rpc handler method for MsgTimeout.\nTimeoutOnClose defines a rpc handler method for …\nUpdateChannelParams defines a rpc handler method for …\nQuery provides defines the gRPC querier service\nEnable decompressing responses.\nChannel queries an IBC Channel.\nChannelClientState queries for the client state for the …\nChannelConsensusState queries for the consensus state for …\nChannelParams queries all parameters of the ibc channel …\nChannels queries all the IBC channels of a chain.\nAttempt to create a new client by connecting to a given …\nConnectionChannels queries all the channels associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNextSequenceReceive returns the next receive sequence for …\nNextSequenceSend returns the next send sequence for a …\nPacketAcknowledgement queries a stored packet …\nPacketAcknowledgements returns all the packet …\nPacketCommitment queries a stored packet commitment hash.\nPacketCommitments returns all the packet commitments …\nPacketReceipt queries if a given packet sequence has been …\nCompress requests with the given encoding.\nUnreceivedAcks returns all the unreceived IBC …\nUnreceivedPackets returns all the unreceived IBC packets …\nUpgrade returns the upgrade for a given port and channel …\nUpgradeError returns the error receipt if the upgrade …\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service\nEnable decompressing requests with the given encoding.\nChannel queries an IBC Channel.\nChannelClientState queries for the client state for the …\nChannelConsensusState queries for the consensus state for …\nChannelParams queries all parameters of the ibc channel …\nChannels queries all the IBC channels of a chain.\nConnectionChannels queries all the channels associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nNextSequenceReceive returns the next receive sequence for …\nNextSequenceSend returns the next send sequence for a …\nPacketAcknowledgement queries a stored packet …\nPacketAcknowledgements returns all the packet …\nPacketCommitment queries a stored packet commitment hash.\nPacketCommitments returns all the packet commitments …\nPacketReceipt queries if a given packet sequence has been …\nCompress responses with the given encoding, if the client …\nUnreceivedAcks returns all the unreceived IBC …\nUnreceivedPackets returns all the unreceived IBC packets …\nUpgrade returns the upgrade for a given port and channel …\nUpgradeError returns the error receipt if the upgrade …\nIndicates a consensus height on the destination chain …\nIndicates a timestamp on the destination chain after which …\nRevision height to be used in packet commitment computation\nRevision number to be used in packet commitment computation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new timeout timestamp from a given nanosecond …\nCheck if a height is <em>strictly past</em> the timeout height, and …\nCheck if a timestamp is <em>strictly past</em> the timeout …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the timeout height is set.\nReturns <code>true</code> if the timeout timestamp is set.\nReturns the timestamp in nanoseconds, where 0 indicates …\nReturns a timeout timestamp that never expires.\nReturns a string formatted for an ABCI event attribute …\nRe-exports ICS-02 traits from <code>ibc-core-client-context</code> for …\nThis module implements the processing logic for ICS2 …\nRe-exports ICS-02 data structures from the …\nDefines the methods that all client <code>ExecutionContext</code>s …\nDefines the methods available to clients for validating …\nGeneral-purpose helper converter enabling <code>TryFrom</code> and <code>Into</code> …\nAn optional trait that extends the client context required …\nAn optional trait that extends the client validation …\nDefines <code>ClientState</code>, the core type to be implemented by …\nReturns the ClientState for the given identifier <code>client_id</code>.\nReturns the timestamp and height of the host when it …\nDefines the trait to be implemented by all concrete …\nRetrieve the consensus state for the given client ID at …\nReturns all the heights at which a consensus state is …\nDelete the consensus state from the store located at the …\nDelete the update time and height associated with the …\nReturns the current height of the local chain.\nReturns the current timestamp of the local chain.\nSearch for the lowest consensus state higher than <code>height</code>.\nTrait preludes for the ICS-02 client implementation.\nSearch for the highest consensus state lower than <code>height</code>.\nCalled upon successful client creation and update\nCalled upon successful client creation and update\nCalled upon successful client update.\nPrimary client trait. Defines all the methods that clients …\n<code>ClientState</code> methods needed in both validation and …\n<code>ClientState</code> methods which require access to the client’s …\n<code>ClientState</code> methods which require access to the client’s …\nChecks for evidence of a misbehaviour in Header or …\nVerifies whether the calling (subject) client state …\nType of client associated with this state (eg. Tendermint)\nInitialises the client with the initial client and …\nThe latest height the client was updated to\nSerializes a given path object into a raw path bytes.\nReturns the status of the client. Only Active clients are …\nUpdate the subject client using the <code>substitute_client_state</code>…\nUpdates and stores as necessary any associated information …\nupdate_state_on_misbehaviour should perform appropriate …\nUpdate the client state and consensus state in the store …\nValidate that the client is at a sufficient height\nverify_client_message must verify a client_message. A …\nPerforms basic validation on the <code>consensus_state</code>.\nVerifies a proof of the existence of a value at a given …\nVerifies a proof of the existence of a value at a given …\nVerifies the absence of a given proof at a given path …\nVerifies the absence of a given proof at a given raw path …\nVerify the upgraded client and consensus states and …\nDefines methods that all <code>ConsensusState</code>s should provide.\nCommitment root of the consensus state, which is used for …\nThe timestamp of the consensus state\nDefines the methods that all client <code>ExecutionContext</code>s …\nPrimary client trait. Defines all the methods that clients …\n<code>ClientState</code> methods needed in both validation and …\n<code>ClientState</code> methods which require access to the client’s …\n<code>ClientState</code> methods which require access to the client’s …\nDefines the methods available to clients for validating …\nDefines methods that all <code>ConsensusState</code>s should provide.\nGeneral-purpose helper converter enabling <code>TryFrom</code> and <code>Into</code> …\nAn optional trait that extends the client context required …\nAn optional trait that extends the client validation …\nChecks for evidence of a misbehaviour in Header or …\nVerifies whether the calling (subject) client state …\nReturns the ClientState for the given identifier <code>client_id</code>.\nType of client associated with this state (eg. Tendermint)\nReturns the timestamp and height of the host when it …\nRetrieve the consensus state for the given client ID at …\nReturns all the heights at which a consensus state is …\nDelete the consensus state from the store located at the …\nDelete the update time and height associated with the …\nReturns the current height of the local chain.\nReturns the current timestamp of the local chain.\nInitialises the client with the initial client and …\nThe latest height the client was updated to\nSearch for the lowest consensus state higher than <code>height</code>.\nSearch for the highest consensus state lower than <code>height</code>.\nCommitment root of the consensus state, which is used for …\nSerializes a given path object into a raw path bytes.\nReturns the status of the client. Only Active clients are …\nCalled upon successful client creation and update\nCalled upon successful client creation and update\nCalled upon successful client update.\nThe timestamp of the consensus state\nUpdate the subject client using the <code>substitute_client_state</code>…\nUpdates and stores as necessary any associated information …\nupdate_state_on_misbehaviour should perform appropriate …\nUpdate the client state and consensus state in the store …\nValidate that the client is at a sufficient height\nverify_client_message must verify a client_message. A …\nPerforms basic validation on the <code>consensus_state</code>.\nVerifies a proof of the existence of a value at a given …\nVerifies a proof of the existence of a value at a given …\nVerifies the absence of a given proof at a given path …\nVerifies the absence of a given proof at a given raw path …\nVerify the upgraded client and consensus states and …\nThe client is active and allowed to be used\nThe client is expired and not allowed to be used\nThe client is frozen and not allowed to be used\nThe core IBC height type, which represents the height of a …\nRepresents the status of a client\nthis is the scenario where misbehaviour is submitted to …\nUnauthorized indicates that the client type is not …\nthis is the typical scenario where a new header is …\n<code>UpdateKind</code> represents the 2 ways that a client can be …\nDefines the client error type\nTypes for the IBC events emitted from Tendermint Websocket …\nDefines the client message types that are sent to the …\nRe-exports ICS-02 proto types from the <code>ibc-proto</code> crate for …\nEncodes all the possible client errors\nclient-specific error: {description}\ndecoding error: {0}\ndecoding error: <code>{0}</code>\nduplicate client state <code>{0}</code>\nfailed ICS23 verification: {0}\nfailed to handle misbehaviour: {description}\nfailed to verify client recovery states\nfailed to verify header: {description}\nhost error : {0}\nhost chain error: <code>{0}</code>\ninsufficient proof height; expected <code>{actual}</code> &gt;= <code>{expected}</code>\ninsufficient upgrade client height <code>{upgraded_height}</code>; must …\ninvalid client recovery heights: expected substitute …\ninvalid client state type <code>{0}</code>\ninvalid consensus state timestamp <code>{0}</code>\ninvalid header type <code>{0}</code>\ninvalid height; cannot be zero or negative\ninvalid status <code>{0}</code>\ninvalid trust threshold <code>{numerator}</code>/<code>{denominator}</code>\ninvalid update client message\ninvalid proof for the upgraded client state: <code>{0}</code>\ninvalid proof for the upgraded consensus state: <code>{0}</code>\ninvalid upgrade path: <code>{description}</code>\ninvalid upgrade proposal: <code>{description}</code>\nmissing local consensus state at <code>{0}</code>\nmissing upgrade path\ntimestamp error: {0}\nupgrade client error: {0}\nEncodes all the possible upgrade client errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe content of the <code>key</code> field for the attribute containing …\nThe content of the <code>key</code> field for the attribute containing …\nThe content of the <code>key</code> field for the attribute containing …\nThe content of the <code>key</code> field for the attribute containing …\nClient event types\nClientMisbehaviour event signals the update of an on-chain …\nCreateClient event signals the creation of a new on-chain …\nThe content of the <code>key</code> field for the header in update …\nUpdateClient event signals a recent update of an on-chain …\nSignals a recent upgrade of an on-chain client (IBC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new UpdateClient event.\nEncodes all the different client messages\nA type of message that triggers the creation of a new …\nDefines the message used to recover a frozen or expired …\nA type of message that submits client misbehaviour proof.\nRepresents the message that triggers the update of an …\nA type of message that triggers the upgrade of an on-chain …\nclient unique identifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmisbehaviour, used for freezing the light client\nsigner address\nThe address of the signer who serves as the authority for …\nClient identifier of the client to be updated if the …\nClient identifier of the client that will replace the …\nClientConsensusStates defines all the stored consensus …\nClientUpdateProposal is a legacy governance proposal. If …\nConsensusStateWithHeight defines a consensus state with an …\nGenesisMetadata defines the genesis type for metadata that …\nGenesisState defines the ibc client submodule’s genesis …\nHeight is a monotonically increasing data type that can be …\nIdentifiedClientState defines a client state with an …\nIdentifiedGenesisMetadata has the client metadata with the …\nMsgCreateClient defines a message to create an IBC client\nMsgCreateClientResponse defines the Msg/CreateClient …\nMsgIBCSoftwareUpgrade defines the message used to schedule …\nMsgIBCSoftwareUpgradeResponse defines the …\nMsgRecoverClient defines the message used to recover a …\nMsgRecoverClientResponse defines the Msg/RecoverClient …\nMsgSubmitMisbehaviour defines an sdk.Msg type that submits …\nMsgSubmitMisbehaviourResponse defines the …\nMsgUpdateClient defines an sdk.Msg to update a IBC client …\nMsgUpdateClientResponse defines the Msg/UpdateClient …\nMsgUpdateParams defines the sdk.Msg type to update the …\nMsgUpdateParamsResponse defines the MsgUpdateParams …\nMsgUpgradeClient defines an sdk.Msg to upgrade an IBC …\nMsgUpgradeClientResponse defines the Msg/UpgradeClient …\nParams defines the set of IBC light client parameters.\nQueryClientParamsRequest is the request type for the …\nQueryClientParamsResponse is the response type for the …\nQueryClientStateRequest is the request type for the …\nQueryClientStateResponse is the response type for the …\nQueryClientStatesRequest is the request type for the …\nQueryClientStatesResponse is the response type for the …\nQueryClientStatusRequest is the request type for the …\nQueryClientStatusResponse is the response type for the …\nQueryConsensusStateHeightsRequest is the request type for …\nQueryConsensusStateHeightsResponse is the response type …\nQueryConsensusStateRequest is the request type for the …\nQueryConsensusStateResponse is the response type for the …\nQueryConsensusStatesRequest is the request type for the …\nQueryConsensusStatesResponse is the response type for the …\nQueryUpgradedClientStateRequest is the request type for the\nQueryUpgradedClientStateResponse is the response type for …\nQueryUpgradedConsensusStateRequest is the request type for …\nQueryUpgradedConsensusStateResponse is the response type …\nUpgradeProposal is a gov Content type for initiating an …\nallowed_clients defines the list of allowed client state …\nclient identifier\nclient identifier\nclient unique identifier\nclient unique identifier\nclient unique identifier\nclient state unique identifier\nclient identifier\nclient identifier\nclient identifier\nclient unique identifier\nclient message to update the light client\nclient state\nlight client state\nupgraded client state\nclient state associated with the request identifier\nlist of stored ClientStates of the chain.\nclient states with their corresponding identifiers\nconsensus states from each client\nmetadata from each client\nconsensus state\nconsensus state associated with the client that …\nupgraded consensus state, only contains enough information …\nconsensus state associated with the client identifier at …\nconsensus state heights\nconsensus states and their heights associated with the …\nconsensus states associated with the identifier\nDeprecated: create_localhost has been deprecated. The …\nthe description of the proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconsensus state height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstore key of metadata without clientID-prefix\nlatest_height overrrides the height field and queries the …\nmisbehaviour used for freezing the light client\nGenerated client implementations.\nGenerated server implementations.\nthe sequence for the next generated client identifier\npagination request\npagination response\npagination request\npagination response\npagination request\npagination response\nparams defines the client parameters to update.\nparams defines the parameters of the module.\nmerkle proof of existence\nmerkle proof of existence\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nproof that old chain committed to new client\nproof that old chain committed to new consensus state\nGenerated client implementations.\nGenerated server implementations.\nthe height within the given revision\nconsensus state revision height\nthe revision that the client is currently on\nconsensus state revision number\nsigner address\nsigner address\nsigner address\nsigner address\nsigner address\nsigner address\nsigner address\nthe client identifier for the client to be updated if the …\nthe client identifier for the client to be updated if the …\nthe substitute client identifier for the client standing …\nthe substitute client identifier for the client which will …\nthe title of the update proposal\nAn UpgradedClientState must be provided to perform an IBC …\nAn UpgradedClientState must be provided to perform an IBC …\nclient state associated with the request identifier\nConsensus state associated with the request identifier\nmetadata value\nMsg defines the ibc/client Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nCreateClient defines a rpc handler method for …\nReturns the argument unchanged.\nIBCSoftwareUpgrade defines a rpc handler method for …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRecoverClient defines a rpc handler method for …\nCompress requests with the given encoding.\nSubmitMisbehaviour defines a rpc handler method for …\nUpdateClient defines a rpc handler method for …\nUpdateClientParams defines a rpc handler method for …\nUpgradeClient defines a rpc handler method for …\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/client Msg service.\nEnable decompressing requests with the given encoding.\nCreateClient defines a rpc handler method for …\nReturns the argument unchanged.\nIBCSoftwareUpgrade defines a rpc handler method for …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRecoverClient defines a rpc handler method for …\nCompress responses with the given encoding, if the client …\nSubmitMisbehaviour defines a rpc handler method for …\nUpdateClient defines a rpc handler method for …\nUpdateClientParams defines a rpc handler method for …\nUpgradeClient defines a rpc handler method for …\nQuery provides defines the gRPC querier service\nEnable decompressing responses.\nClientParams queries all parameters of the ibc client …\nClientState queries an IBC light client.\nClientStates queries all the IBC light clients of a chain.\nStatus queries the status of an IBC client.\nAttempt to create a new client by connecting to a given …\nConsensusState queries a consensus state associated with a …\nConsensusStateHeights queries the height of every …\nConsensusStates queries all the consensus state associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nUpgradedClientState queries an Upgraded IBC light client.\nUpgradedConsensusState queries an Upgraded IBC consensus …\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service\nEnable decompressing requests with the given encoding.\nClientParams queries all parameters of the ibc client …\nClientState queries an IBC light client.\nClientStates queries all the IBC light clients of a chain.\nStatus queries the status of an IBC client.\nConsensusState queries a consensus state associated with a …\nConsensusStateHeights queries the height of every …\nConsensusStates queries all the consensus state associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nUpgradedClientState queries an Upgraded IBC light client.\nUpgradedConsensusState queries an Upgraded IBC consensus …\nProtocol logic specific to processing ICS2 messages of …\nProtocol logic for processing ICS02 messages of type …\nProtocol logic specific to processing ICS2 messages of …\nProtocol logic specific to processing ICS2 messages of …\nExecutes the steps needed to recover the subject client, …\nPerforms the validation steps associated with the client …\nThe client is active and allowed to be used\nThe client is expired and not allowed to be used\nThe client is frozen and not allowed to be used\nThe core IBC height type, which represents the height of a …\nRepresents the status of a client\nthis is the scenario where misbehaviour is submitted to …\nUnauthorized indicates that the client type is not …\nthis is the typical scenario where a new header is …\n<code>UpdateKind</code> represents the 2 ways that a client can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the status is active; returns <code>Err</code> if not.\nChecks whether the client is either frozen or expired; …\nDefines core commitment types\nDefines the commitment error type\nMerkle proof utilities\nRe-exports ICS-23 proto types from the <code>ibc-proto</code> crate, …\nDefines proof specs, which encode the structure of proofs\nDefines a store prefix of the commitment proof.\nDemonstrates membership or non-membership for an element …\nEncodes a commitment root; most often a Merkle tree root …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndecoding error: {0}\nfailed to verify membership\ninvalid merkle proof\ninvalid range [<code>{min}</code>, <code>{max}</code>]\nmismatched number of proofs: expected <code>{expected}</code>, actual …\nmissing commitment prefix\nmissing commitment root\nmissing merkle proof\nmissing merkle root\nmissing proof specs\nmissing verified value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper type representing a Merkle path, consisting of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>MerklePath</code> from a given <code>Vec&lt;PathBytes&gt;</code>.\nUse BatchEntry not CommitmentProof, to avoid recursion\nBatchProof is a group of multiple proof types than can be …\nripemd160(sha256(x))\nCommitmentProof is either an ExistenceProof or a …\nUse BatchEntry not CommitmentProof, to avoid recursion\nContains the error value\nExistenceProof takes a key and a value and a set of steps …\nFIXED32_BIG uses big-endian encoding of the length as a 32 …\nFIXED32_LITTLE uses little-endian encoding of the length …\nFIXED64_BIG uses big-endian encoding of the length as a 64 …\nFIXED64_LITTLE uses little-endian encoding of the length …\nIf this is to be executed in a blockchain context, then we …\nInnerOp represents a merkle-proof step that is not a leaf. …\nInnerSpec contains all store-specific structure info to …\nLeafOp represents the raw key-value data we wish to prove, …\nLengthOp defines how to process the key and value of the …\nNO_HASH is the default if no data passed. Note this is an …\nNO_PREFIX don’t include any length info\nNonExistenceProof takes a proof of two neighbors, one left …\nContains the success value\nProofSpec defines what the expected parameters are for a …\nREQUIRE_32_BYTES is like NONE, but will fail if the input …\nREQUIRE_64_BYTES is like NONE, but will fail if the input …\nVAR_PROTO uses protobuf (and go-amino) varint encoding of …\nVAR_RLP uses rlp int encoding of the length\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNested message and enum types in <code>BatchEntry</code>.\nBLAKE2b-512 hash function.\nBLAKE2s-256 hash function.\nBLAKE3 hash function.\nChild order is the ordering of the children node, must …\nNested message and enum types in <code>CommitmentProof</code>.\nNested message and enum types in <code>CompressedBatchEntry</code>.\nempty child is the prehash image that is used when one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>HashOp</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>LengthOp</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nReturns the enum value of <code>hash</code>, or the default if the …\nReturns the enum value of <code>hash</code>, or the default if the …\nReturns the enum value of <code>hash</code>, or the default if the …\nhash is the algorithm that must be used for each InnerOp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>HashOp</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>LengthOp</code>.\nThe Keccak-256 hash function.\nTODO: remove this as unnecessary??? we prove a range\nTODO: remove this as unnecessary??? we prove a range\nany field in the ExistenceProof must be the same as in …\nReturns the enum value of <code>length</code>, or the default if the …\nmax_depth (if &gt; 0) is the maximum number of InnerOps …\nmin_depth (if &gt; 0) is the minimum number of InnerOps …\nthese are indexes into the lookup_inners table in …\nprefix is a fixed bytes that may optionally be included at …\nReturns the enum value of <code>prehash_key</code>, or the default if …\nprehash_key_before_comparison is a flag that indicates …\nReturns the enum value of <code>prehash_value</code>, or the default if …\nThe Ripemd160 hash function.\nSets <code>hash</code> to the provided enum value.\nSets <code>hash</code> to the provided enum value.\nSets <code>hash</code> to the provided enum value.\nSets <code>length</code> to the provided enum value.\nSets <code>prehash_key</code> to the provided enum value.\nSets <code>prehash_value</code> to the provided enum value.\nThe SHA-256 hash algorithm\nThe SHA-512 hash algorithm\nThe SHA-512 hash algorithm with its output truncated to …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nMerklePath is the path used to verify commitment proofs, …\nMerklePrefix is merkle path prefixed to the key. The …\nMerkleProof is a wrapper type over a chain of …\nMerkleRoot defines a merkle root hash. In the Cosmos SDK, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn array of proof specifications.\nReturns the specification for Cosmos-SDK proofs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRe-exports ICS-03 data structures from the …\nProtocol logic specific to processing ICS3 messages of …\nProtocol logic specific to processing ICS3 messages of …\nProtocol logic specific to ICS3 messages of type …\nProtocol logic specific to processing ICS3 messages of …\nYields the State as a string.\nGetter for the client id on the local party of this …\nGetter for the client id.\nHelper function to compare the client id of this end with …\nGetter for connection id.\nGetter for the counterparty.\nHelper function to compare the counterparty of this end …\nGetter for the delay_period field. This represents the …\nDefines the connection error type\nTypes for the IBC events emitted from Tendermint Websocket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the State out from an i32.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to determine whether the connection is …\nReturns if this connection state is <code>Open</code>.\nHelper function to determine whether the connection is …\nReturns if this connection with this state has progressed …\nMessage definitions for the connection handshake datagrams.\nRe-exports ICS-03 proto types from the <code>ibc-proto</code> crate for …\nSetter for the <code>counterparty</code> field.\nSetter for the <code>state</code> field.\nSetter for the <code>version</code> field.\nGetter for the state of this connection end.\nChecks if the state of this connection end matches with an …\nDefines connection versioning type and functions\nGetter for the list of versions in this connection end.\nclient error: {0}\ndecoding error: {0}\nhost error: {0}\ninsufficient blocks elapsed: current height …\ninsufficient consensus height <code>{current_height}</code> for host …\ninsufficient time elapsed: current timestamp …\ninvalid counterparty\ninvalid connection state: {description}\nmismatched connection states: expected <code>{expected}</code>, actual …\nmissing common version\nmissing counterparty\nmissing supported features\ntimestamp error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe content of the <code>key</code> field for the attribute containing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer our convention, this event is generated on chain A.\nPer our convention, this event is generated on chain B.\nPer our convention, this event is generated on chain A.\nPer our convention, this event is generated on chain B.\nEnumeration of all possible messages that the ICS3 …\nPer our convention, this message is sent to chain A. The …\nPer our convention, this message is sent to chain B. The …\nPer our convention, this message is sent to chain A. The …\nPer our convention, this message is sent to chain B. The …\nClientId on chain A that the connection is being opened for\nClientId on B that the connection is being opened for\nClientState of client tracking chain A on chain B\nClientState of client tracking chain B on chain A\nConnectionId that chain A has chosen for its ConnectionEnd\nConnectionId that chain B has chosen for its ConnectionEnd\nConnectionId that chain B has chosen for its ConnectionEnd\nheight of latest header of chain A that updated the client …\nheight of latest header of chain A that updated the client …\nClientId, ConnectionId and prefix of chain A\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly kept here for proper conversion to/from the raw type\nproof of ClientState tracking chain A on chain B\nproof that chain A has stored ClientState of chain B on …\nproof of ConnectionEnd stored on Chain A during …\nproof of ConnectionEnd stored on Chain A during …\nproof of ConnectionEnd stored on Chain B during ConnOpenTry\noptional proof of host state machines (chain A) that are …\nproof that chain B has stored ConsensusState of chain A on …\noptional proof of host state machines (chain B) that are …\nproof that chain A has stored ConsensusState of chain B on …\nHeight at which <code>proof_conn_end_on_a</code> in this message was …\nHeight at which all proofs in this message were taken\nHeight at which all proofs in this message were taken\nVersions supported by chain A\nClientPaths define all the connection paths for a client …\nConnectionEnd defines a stateful object on a chain …\nConnectionPaths define all the connection paths for a …\nCounterparty defines the counterparty chain associated …\nGenesisState defines the ibc connection submodule’s …\nIdentifiedConnection defines a connection with additional …\nA connection end has just started the opening handshake.\nMsgConnectionOpenAck defines a msg sent by a Relayer to …\nMsgConnectionOpenAckResponse defines the …\nMsgConnectionOpenConfirm defines a msg sent by a Relayer …\nMsgConnectionOpenConfirmResponse defines the …\nMsgConnectionOpenInit defines the msg sent by an account …\nMsgConnectionOpenInitResponse defines the …\nMsgConnectionOpenTry defines a msg sent by a Relayer to …\nMsgConnectionOpenTryResponse defines the …\nMsgUpdateParams defines the sdk.Msg type to update the …\nMsgUpdateParamsResponse defines the MsgUpdateParams …\nA connection end has completed the handshake.\nParams defines the set of Connection parameters.\nQueryClientConnectionsRequest is the request type for the …\nQueryClientConnectionsResponse is the response type for the\nQueryConnectionClientStateRequest is the request type for …\nQueryConnectionClientStateResponse is the response type …\nQueryConnectionConsensusStateRequest is the request type …\nQueryConnectionConsensusStateResponse is the response type …\nQueryConnectionParamsRequest is the request type for the …\nQueryConnectionParamsResponse is the response type for the …\nQueryConnectionRequest is the request type for the …\nQueryConnectionResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryConnectionsResponse is the response type for the …\nState defines if a connection is in one of the following …\nA connection end has acknowledged the handshake step on …\nDefault State\nVersion defines the versioning scheme used to negotiate …\nString value of the enum field names used in the ProtoBuf …\nclient associated with this connection.\nclient associated with this connection.\nidentifies the client on the counterparty chain associated …\nclient state unique identifier\nclient identifier associated with a connection\nclient ID associated with the consensus state\nconnection associated with the request identifier\nidentifies the connection end on the counterparty chain …\nconnection unique identifier\nconnection identifier\nconnection identifier\nslice of all the connection paths associated with a client.\nlist of stored connections of the chain.\nconsensus state associated with the channel\ncounterparty chain associated with this connection.\ncounterparty chain associated with this connection.\ndelay period that must pass before a consensus state can …\ndelay period associated with this connection.\nlist of features compatible with the specified identifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>State</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nquery block height\noptional proof data for host state machines that are …\noptional proof data for host state machines that are …\nconnection identifier.\nclient state associated with the channel\nunique version identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>State</code>.\nmaximum expected time per block (in nanoseconds), used to …\nGenerated client implementations.\nGenerated server implementations.\nthe sequence for the next generated connection identifier\npagination response\nparams defines the connection parameters to update.\nparams defines the parameters of the module.\nlist of connection paths\nlist of connection paths\ncommitment merkle prefix of the counterparty chain.\nDeprecated: this field is unused. Crossing hellos are no …\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nproof for the change of the connection state on Chain A: …\nproof of client state included in message\nproof of client state included in message\nproof of client consensus state\nproof of client consensus state\nheight at which the proof was retrieved\nheight at which the proof was generated\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nproof of the initialization the connection on Chain A: …\nproof of the initialization the connection on Chain B: …\nGenerated client implementations.\nGenerated server implementations.\nSets <code>state</code> to the provided enum value.\nSets <code>state</code> to the provided enum value.\nsigner address\nReturns the enum value of <code>state</code>, or the default if the …\nReturns the enum value of <code>state</code>, or the default if the …\ncurrent state of the connection end.\ncurrent state of the connection end.\nIBC version which can be utilised to determine encodings …\nIBC version which can be utilised to determine encodings …\nMsg defines the ibc/connection Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nConnectionOpenAck defines a rpc handler method for …\nConnectionOpenConfirm defines a rpc handler method for …\nConnectionOpenInit defines a rpc handler method for …\nConnectionOpenTry defines a rpc handler method for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nUpdateConnectionParams defines a rpc handler method for …\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/connection Msg service.\nEnable decompressing requests with the given encoding.\nConnectionOpenAck defines a rpc handler method for …\nConnectionOpenConfirm defines a rpc handler method for …\nConnectionOpenInit defines a rpc handler method for …\nConnectionOpenTry defines a rpc handler method for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nUpdateConnectionParams defines a rpc handler method for …\nQuery provides defines the gRPC querier service\nEnable decompressing responses.\nClientConnections queries the connection paths associated …\nAttempt to create a new client by connecting to a given …\nConnection queries an IBC connection end.\nConnectionClientState queries the client state associated …\nConnectionConsensusState queries the consensus state …\nConnectionParams queries all parameters of the ibc …\nConnections queries all the IBC connections of a chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service\nEnable decompressing requests with the given encoding.\nClientConnections queries the connection paths associated …\nConnection queries an IBC connection end.\nConnectionClientState queries the client state associated …\nConnectionConsensusState queries the consensus state …\nConnectionParams queries all parameters of the ibc …\nConnections queries all the IBC connections of a chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nStores the identifier and the features supported by a …\nReturns the lists of supported versions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates over the descending ordered set of compatible IBC …\nChecks whether the given feature is supported in this …\nChecks whether the version has a matching version …\nEntrypoint which performs both validation and message …\nEntrypoint which only performs message execution\nEntrypoint which only performs message validation\nRe-export IBC handler types from <code>ibc-core-handler-types</code> …\nEntrypoint which performs both validation and message …\nEntrypoint which only performs message execution\nEntrypoint which only performs message validation\nDefines the handler error type\nDefines events emitted during handling of IBC messages\nICS04 Channel error: {0}\nICS02 Client error: {0}\nICS03 Connection error: {0}\nTop-level type that surfaces errors from the core ibc-rs …\nICS26 Routing error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvents created by the IBC component of a chain, destined …\nAn event type that is emitted by the Cosmos SDK.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ABCI event attribute has only one attribute, with key …\nEnumeration of all messages that the local ICS26 module is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvenient type alias for <code>ClientStateMut</code>, providing access …\nConvenient type alias for <code>ClientStateRef</code>, providing access …\nConvenient type alias for <code>ConsensusStateRef</code>, providing …\nContext to be implemented by the host that provides all “…\nThe client state type for the host chain.\nThe consensus state type for the host chain.\nContext to be implemented by the host that provides all “…\nCalculates the block delay period using the connection’s …\nReturns a counter on the number of channel ids have been …\nReturns the <code>ChannelEnd</code> for the given <code>port_id</code> and <code>chan_id</code>.\nReturns a natural number, counting how many clients have …\nReturns the prefix that the local chain uses in the KV …\nReturns a counter on how many connections have been …\nReturns the ConnectionEnd for the given identifier <code>conn_id</code>.\nDeletes the packet acknowledgement at the given store path\nDeletes the packet commitment at the given store path\nEmit the given IBC event\nRetrieve the context that implements all clients’ …\nRetrieve the context that implements all clients’ …\nFunction required by ICS-03. Returns the list of all …\nReturns the sequence number for the next packet to be …\nReturns the sequence number for the next packet to be …\nReturns the sequence number for the next packet to be sent …\nReturns the packet acknowledgement for the given store path\nReturns the packet commitment for the given store path\nReturns the packet receipt for the given store path. This …\nReturns the <code>ConsensusState</code> of the host (local) chain at a …\nReturns the current height of the local chain.\nReturns the current timestamp of the local chain.\nCalled upon channel identifier creation (Init or Try …\nCalled upon client creation. Increases the counter, that …\nCalled upon connection identifier creation (Init or Try …\nLog the given message.\nReturns the maximum expected time per block\nFunction required by ICS-03. Returns one version out of …\nStores the given channel_end at a path associated with the …\nStores the given connection_end at path\nStores the given connection_id at a path associated with …\nStores the given <code>nextSequenceAck</code> number at the given store …\nStores the given <code>nextSequenceRecv</code> number at the given …\nStores the given <code>nextSequenceSend</code> number at the given …\nStores the given packet acknowledgement at the given store …\nStores the given packet commitment at the given store path\nStores the given packet receipt at the given store path\nRe-exports ICS-24 data structures from <code>ibc-core-host-types</code> …\nValidates the <code>signer</code> field of IBC messages, which …\nValidates the <code>ClientState</code> of the host chain stored on the …\nFoundational error types that are applicable across …\nDefines identifier types\nDefines all store paths used by IBC\nbase64 decoding error: {0}\nErrors that occur during the process of decoding, …\nfailed to parse: <code>{description}</code>\nfailed to retrieve from store: <code>{description}</code>\nfailed to update store: <code>{description}</code>\nErrors that originate from host implementations.\nidentifier error: {0}\nErrors that arise when parsing identifiers.\nid <code>{0}</code> can only contain alphanumeric characters or <code>.</code>, <code>_</code>, <code>+</code>…\ninvalid JSON data: <code>{description}</code>\nid <code>{actual}</code> has invalid length; must be between [<code>{min}</code>,…\ninvalid prefix <code>{0}</code>\ninvalid raw data: <code>{description}</code>\ninvalid state: <code>{description}</code>\nmismatched resource name: expected <code>{expected}</code>, actual …\nmissing raw data: <code>{description}</code>\nmissing state: <code>{description}</code>\nother error: <code>{description}</code>\noverflowed revision number\ninteger parsing error: {0}\nprost decoding error: {0}\nprotobuf decoding error: {0}\nutf-8 str decoding error: {0}\nutf-8 String decoding error: {0}\ninteger TryFrom error: {0}\nunknown type URL <code>{0}</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the domain type for chain identifiers.\nType of the client, depending on the specific consensus …\nThe sequence number of a packet enforces ordering among …\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet a reference to the underlying string.\nGet this identifier as a borrowed <code>&amp;str</code>")