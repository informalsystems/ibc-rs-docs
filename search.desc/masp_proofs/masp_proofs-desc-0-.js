searchState.loadedDescShard("masp_proofs", 0, "<em>MASP circuits and proofs.</em>\nThe paths to the Sapling parameter files.\nMASP Sapling groth16 circuit parameters.\nThe MASP convert parameters file name.\nThe MASP output parameters file name.\nThe MASP spend parameters file name.\nImplementations of the MASP circuits and personalized …\nVarious constants used for the MASP proofs.\nThe path to the MASP convert parameter file.\nReturns the default folder that the MASP proving …\nDownload the MASP parameters if needed, and store them in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAbstraction over a reader which hashes the data being read.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the specified parameters, checking the sizes and …\nThe path to the MASP output parameter file.\nParse Bls12 keys from bytes as serialized by …\nAbstractions over the proving system and parameters for …\nHelpers for creating MASP Sapling proofs.\nThe path to the MASP spend parameter file.\nThe Convert circuit.\nGadgets implementing Jubjub elliptic curve operations.\nGadget for Zcash’s Pedersen hash.\nThe MASP Spend and Output circuits.\nThis is an instance of the <code>Convert</code> circuit.\nThe anchor of the allowable convert-and-mints; the root of …\nThe authentication path of the commitment in the tree\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMinting value commitment\nPerforms an affine point addition, not defined for points …\nPerform addition between any two points\nReturns <code>self</code> if condition is true, and the neutral element …\nPerform a fixed-base scalar multiplication with <code>by</code> being …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterprets an (x, y) pair as a point in Montgomery, does …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an element in the prime order subgroup into a …\nPerforms a scalar multiplication of this twisted Edwards …\nThis converts the point into a representation.\nThis ‘witnesses’ a point inside the constraint system. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is an output circuit instance.\nThis is an instance of the <code>Spend</code> circuit.\nThe anchor; the root of the tree. If the note being spent …\nRe-randomization of the public key\nAsset Type (256 bit identifier)\nThe authentication path of the commitment in the tree\nThe randomness of the note commitment\nThe randomness used to hide the note commitment data\nThe ephemeral secret key for DH with recipient\nExposes a Pedersen commitment to the value as an input to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe payment address associated with the note\nThe payment address of the recipient\nKey required to construct proofs for spending notes for a …\nPedersen commitment to the value being spent\nPedersen commitment to the value being spent\nReference to a circuit version of a generator for …\nCircuit version of a generator for fixed-base salar …\nThe pre-computed window tables <code>[-4, 3, 2, 1, 1, 2, 3, 4]</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the 3-bit window table <code>[0, 1, ..., 8]</code> for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbstraction over a reader which hashes the data being read.\nReturn the number of bytes read so far.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDestroy this reader and return the hash of what was read.\nConstruct a new <code>HashReader</code> given an existing <code>reader</code> by …\nAn implementation of <code>TxProver</code> using Sapling Spend and …\nReturns the argument unchanged.\nCreates a <code>LocalTxProver</code> using parameters specified as byte …\nCalls <code>U::from(self)</code>.\nCreates a <code>LocalTxProver</code> using parameters from the given …\nAttempts to create a <code>LocalTxProver</code> using parameters from …\nBatch validation context for MASP/Sapling.\nA context object for creating the Sapling components of a …\nA context object for verifying the Sapling components of a …\nA context object for verifying the Sapling components of a …\nCreate the bindingSig for a Sapling transaction. All calls …\nChecks the bundle against Sapling-specific consensus …\nPerform consensus checks on a Sapling SpendDescription, …\nPerform consensus checks on a Convert SpendDescription, …\nPerform consensus checks on a Sapling OutputDescription, …\nPerform consensus checks on a Sapling OutputDescription, …\nPerform consensus checks on a Sapling SpendDescription, …\nPerform consensus checks on a Sapling SpendDescription, …\nCreate the value commitment and proof for a …\nPerform consensus checks on the valueBalance and …\nPerform consensus checks on the valueBalance and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new context to be used with a single …\nConstruct a new context to be used with a single …\nConstructs a new batch validation context.\nConstruct a new context to be used with a single …\nCreate the value commitment and proof for a Sapling …\nCreate the value commitment, re-randomized key, and proof …\nBatch-validates the accumulated bundles.")