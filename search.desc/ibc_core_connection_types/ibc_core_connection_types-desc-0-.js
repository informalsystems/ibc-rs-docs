searchState.loadedDescShard("ibc_core_connection_types", 0, "Implementation of the Connection Semantics (ICS-03) data …\nYields the State as a string.\nGetter for the client id on the local party of this …\nGetter for the client id.\nHelper function to compare the client id of this end with …\nGetter for connection id.\nGetter for the counterparty.\nHelper function to compare the counterparty of this end …\nGetter for the delay_period field. This represents the …\nDefines the connection error type\nTypes for the IBC events emitted from Tendermint Websocket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the State out from an i32.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to determine whether the connection is …\nReturns if this connection state is <code>Open</code>.\nHelper function to determine whether the connection is …\nReturns if this connection with this state has progressed …\nMessage definitions for the connection handshake datagrams.\nRe-exports ICS-03 proto types from the <code>ibc-proto</code> crate for …\nSetter for the <code>counterparty</code> field.\nSetter for the <code>state</code> field.\nSetter for the <code>version</code> field.\nGetter for the state of this connection end.\nChecks if the state of this connection end matches with an …\nDefines connection versioning type and functions\nGetter for the list of versions in this connection end.\nclient error: {0}\ndecoding error: {0}\nhost error: {0}\ninsufficient blocks elapsed: current height …\ninsufficient consensus height <code>{current_height}</code> for host …\ninsufficient time elapsed: current timestamp …\ninvalid counterparty\ninvalid connection state: {description}\nmismatched connection states: expected <code>{expected}</code>, actual …\nmissing common version\nmissing counterparty\nmissing supported features\ntimestamp error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe content of the <code>key</code> field for the attribute containing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer our convention, this event is generated on chain A.\nPer our convention, this event is generated on chain B.\nPer our convention, this event is generated on chain A.\nPer our convention, this event is generated on chain B.\nEnumeration of all possible messages that the ICS3 …\nPer our convention, this message is sent to chain A. The …\nPer our convention, this message is sent to chain B. The …\nPer our convention, this message is sent to chain A. The …\nPer our convention, this message is sent to chain B. The …\nClientId on chain A that the connection is being opened for\nClientId on B that the connection is being opened for\nClientState of client tracking chain A on chain B\nClientState of client tracking chain B on chain A\nConnectionId that chain A has chosen for its ConnectionEnd\nConnectionId that chain B has chosen for its ConnectionEnd\nConnectionId that chain B has chosen for its ConnectionEnd\nheight of latest header of chain A that updated the client …\nheight of latest header of chain A that updated the client …\nClientId, ConnectionId and prefix of chain A\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly kept here for proper conversion to/from the raw type\nproof of ClientState tracking chain A on chain B\nproof that chain A has stored ClientState of chain B on …\nproof of ConnectionEnd stored on Chain A during …\nproof of ConnectionEnd stored on Chain A during …\nproof of ConnectionEnd stored on Chain B during ConnOpenTry\noptional proof of host state machines (chain A) that are …\nproof that chain B has stored ConsensusState of chain A on …\noptional proof of host state machines (chain B) that are …\nproof that chain A has stored ConsensusState of chain B on …\nHeight at which <code>proof_conn_end_on_a</code> in this message was …\nHeight at which all proofs in this message were taken\nHeight at which all proofs in this message were taken\nVersions supported by chain A\nClientPaths define all the connection paths for a client …\nConnectionEnd defines a stateful object on a chain …\nConnectionPaths define all the connection paths for a …\nCounterparty defines the counterparty chain associated …\nGenesisState defines the ibc connection submodule’s …\nIdentifiedConnection defines a connection with additional …\nA connection end has just started the opening handshake.\nMsgConnectionOpenAck defines a msg sent by a Relayer to …\nMsgConnectionOpenAckResponse defines the …\nMsgConnectionOpenConfirm defines a msg sent by a Relayer …\nMsgConnectionOpenConfirmResponse defines the …\nMsgConnectionOpenInit defines the msg sent by an account …\nMsgConnectionOpenInitResponse defines the …\nMsgConnectionOpenTry defines a msg sent by a Relayer to …\nMsgConnectionOpenTryResponse defines the …\nMsgUpdateParams defines the sdk.Msg type to update the …\nMsgUpdateParamsResponse defines the MsgUpdateParams …\nA connection end has completed the handshake.\nParams defines the set of Connection parameters.\nQueryClientConnectionsRequest is the request type for the …\nQueryClientConnectionsResponse is the response type for the\nQueryConnectionClientStateRequest is the request type for …\nQueryConnectionClientStateResponse is the response type …\nQueryConnectionConsensusStateRequest is the request type …\nQueryConnectionConsensusStateResponse is the response type …\nQueryConnectionParamsRequest is the request type for the …\nQueryConnectionParamsResponse is the response type for the …\nQueryConnectionRequest is the request type for the …\nQueryConnectionResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryConnectionsResponse is the response type for the …\nState defines if a connection is in one of the following …\nA connection end has acknowledged the handshake step on …\nDefault State\nVersion defines the versioning scheme used to negotiate …\nString value of the enum field names used in the ProtoBuf …\nclient associated with this connection.\nclient associated with this connection.\nidentifies the client on the counterparty chain associated …\nclient state unique identifier\nclient identifier associated with a connection\nclient ID associated with the consensus state\nconnection associated with the request identifier\nidentifies the connection end on the counterparty chain …\nconnection unique identifier\nconnection identifier\nconnection identifier\nslice of all the connection paths associated with a client.\nlist of stored connections of the chain.\nconsensus state associated with the channel\ncounterparty chain associated with this connection.\ncounterparty chain associated with this connection.\ndelay period that must pass before a consensus state can …\ndelay period associated with this connection.\nlist of features compatible with the specified identifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>State</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nquery block height\noptional proof data for host state machines that are …\noptional proof data for host state machines that are …\nconnection identifier.\nclient state associated with the channel\nunique version identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>State</code>.\nmaximum expected time per block (in nanoseconds), used to …\nGenerated client implementations.\nGenerated server implementations.\nthe sequence for the next generated connection identifier\npagination response\nparams defines the connection parameters to update.\nparams defines the parameters of the module.\nlist of connection paths\nlist of connection paths\ncommitment merkle prefix of the counterparty chain.\nDeprecated: this field is unused. Crossing hellos are no …\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nmerkle proof of existence\nproof for the change of the connection state on Chain A: …\nproof of client state included in message\nproof of client state included in message\nproof of client consensus state\nproof of client consensus state\nheight at which the proof was retrieved\nheight at which the proof was generated\nheight at which the proof was retrieved\nheight at which the proof was retrieved\nproof of the initialization the connection on Chain A: …\nproof of the initialization the connection on Chain B: …\nGenerated client implementations.\nGenerated server implementations.\nSets <code>state</code> to the provided enum value.\nSets <code>state</code> to the provided enum value.\nsigner address\nReturns the enum value of <code>state</code>, or the default if the …\nReturns the enum value of <code>state</code>, or the default if the …\ncurrent state of the connection end.\ncurrent state of the connection end.\nIBC version which can be utilised to determine encodings …\nIBC version which can be utilised to determine encodings …\nMsg defines the ibc/connection Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nConnectionOpenAck defines a rpc handler method for …\nConnectionOpenConfirm defines a rpc handler method for …\nConnectionOpenInit defines a rpc handler method for …\nConnectionOpenTry defines a rpc handler method for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nUpdateConnectionParams defines a rpc handler method for …\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/connection Msg service.\nEnable decompressing requests with the given encoding.\nConnectionOpenAck defines a rpc handler method for …\nConnectionOpenConfirm defines a rpc handler method for …\nConnectionOpenInit defines a rpc handler method for …\nConnectionOpenTry defines a rpc handler method for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nUpdateConnectionParams defines a rpc handler method for …\nQuery provides defines the gRPC querier service\nEnable decompressing responses.\nClientConnections queries the connection paths associated …\nAttempt to create a new client by connecting to a given …\nConnection queries an IBC connection end.\nConnectionClientState queries the client state associated …\nConnectionConsensusState queries the consensus state …\nConnectionParams queries all parameters of the ibc …\nConnections queries all the IBC connections of a chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery provides defines the gRPC querier service\nEnable decompressing requests with the given encoding.\nClientConnections queries the connection paths associated …\nConnection queries an IBC connection end.\nConnectionClientState queries the client state associated …\nConnectionConsensusState queries the consensus state …\nConnectionParams queries all parameters of the ibc …\nConnections queries all the IBC connections of a chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nStores the identifier and the features supported by a …\nReturns the lists of supported versions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates over the descending ordered set of compatible IBC …\nChecks whether the given feature is supported in this …\nChecks whether the version has a matching version …")