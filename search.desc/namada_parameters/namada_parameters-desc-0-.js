searchState.loadedDescShard("namada_parameters", 0, "Protocol parameters\nThe internal address for storage keys representing …\nEpoch duration. A new epoch begins as soon as both the …\nContains the error value\nAbstract parameters storage keys interface\nThe upper bound of a <code>ProposalBytes</code> value.\nContains the success value\nProtocol parameters\nConfiguration parameter for the upper limit on the number …\nConfiguration parameter for the upper limit on the number …\nAbstract parameters storage read interface\nResult of a storage API call.\nParameters storage <code>Keys/Read/Write</code> implementation\nAbstract parameters storage write interface\nEpoch duration (read only)\nRead the the epoch duration parameter\nRead the number of epochs per year parameter\nExpected number of epochs per year (read only)\nReturn an estimate of the maximum time taken to decide a …\nReturn an estimate of the maximum time taken to decide a …\nReturn an estimate of the maximum time taken to decide a …\nReturn an estimate of the maximum time taken to decide a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas scale\nReturn the number of bytes as a <code>u64</code> value.\nImplicit accounts validity predicate WASM code hash\nKey for implicit VP\nInitialize parameters in storage in the genesis block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the <code>is_native_token_transferable</code> parameter\nEnable the native token transfer if it is true\nCheck if the given tx code <code>Hash</code> is in the allowlist. When …\nCheck if the given VP code <code>Hash</code> is in the allowlist. When …\nRead MASP epoch multiplier parameter\nThe multiplier for masp epochs (it requires this amount of …\nThe gas limit for a masp transaction paying fees\nMax gas for block\nMax payload size, in bytes, for a tx batch proposal.\nMax payload size, in bytes, for a mempool tx.\nMinimum duration of an epoch\nMinimum number of blocks in an epoch\nMap of the cost per gas unit for every token allowed for …\nStorage key for the Ethereum address of wNam.\nTry to construct a new <code>ProposalBytes</code> instance, from the …\nRead all the parameters from storage. Returns the …\nRead all parameters\nRead the epoch duration parameter from store\nRead the number of epochs per year parameter\nRead the epochs per year parameter from store\nRead the cost per unit of gas for the provided token\nRead the masp epoch multiplier parameter from store\nRetrieve the <code>max_proposal_bytes</code> consensus parameter from …\nParameters storage\nAllowed tx hashes (read only)\nUpdate the epoch parameter in storage. Returns the …\nUpdate the epochs_per_year parameter in storage. Returns …\nUpdate the implicit VP parameter in storage. Return the …\nUpdate the tx allowlist parameter in storage. Returns the …\nUpdate the vp allowlist parameter in storage. Returns the …\nValidate the size of a tx.\nVP for protocol parameters\nAllowed validity predicate hashes (read only)\nWrite all parameters\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the address from the first key segment if it’s …\nReturn the segment at the index parameter\nStorage key used for epoch parameter.\nStorage key used for epochs_per_year parameter.\nStorage key used for the gas cost table\nHelper function to retrieve the <code>gas_scale</code> protocol …\nStorage key used for the gas scale\nStorage key used for implicit VP parameter.\nStorage key used for masp_epoch_multiplier parameter.\nStorage key used for the fee unshielding gas limit\nHelper function to retrieve the <code>max_block_gas</code> protocol …\nStorage key used for the max block gas.\nStorage key used for the max proposal bytes.\nStorage key used for the max tx bytes.\nStorage key used for the flag to enable the native token …\nStorage key used for tx allowlist parameter.\nStorage key used for vp allowlist parameter.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the key is empty\nReturns if the key is an epoch storage key.\nReturns if the key is the epoch_per_year key.\nReturns if the key is the implicit VP key.\nReturns if the key is the max proposal bytes key.\nReturns if the key is the max tx bytes key.\nHelper function to retrieve the …\nReturns if the key is a parameter key.\nReturns if the key is a protocol parameter key.\nReturns if the key is the tx_allowlist key.\nCheck if the given key is a key to a validity predicate. …\nReturns if the key is the vp_allowlist key.\nIterates over all addresses in the key segments\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nReturns the length\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nReturns a new key with segments of <code>Self</code> and the given …\nThe segments of the key in the original (left-to-right) …\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nReturns a sub key without the first segment\nReturns a key of the validity predicate of the given …\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nParameters VP\nGeneric types for VP context and DI\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun the validity predicate")