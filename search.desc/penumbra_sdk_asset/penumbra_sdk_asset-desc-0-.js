searchState.loadedDescShard("penumbra_sdk_asset", 0, "An equivalent value in terms of a different numeraire.\nThe estimated price of one asset in terms of another.\nRepresents a value of a known or unknown denomination.\nIf nonzero, gives some idea of when the equivalent value …\nIf nonzero, gives some idea of when the price was …\nAsset types and identifiers.\nGet the <code>Id</code> of the underlying <code>Value</code>, without having to …\nThe equivalent amount of the parent [<code>Value</code>] in terms of …\nUse the provided <code>Cache</code> to format this value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata describing the numeraire.\nThe numeraire that the price is being expressed in.\nMultiply units of the priced asset by this number to get …\nThe asset that is being priced.\nConvert this <code>ValueView</code> down to the underlying <code>Value</code>.\nConvert this <code>Value</code> into a <code>ValueView</code> using the given <code>Cache</code>\nConvert this <code>Value</code> into a <code>ValueView</code> with the given <code>Denom</code>.\nUse the provided extended metadata to add extended …\nUse the provided <code>EstimatedPrice</code>s and asset metadata <code>Cache</code> …\nOn-chain data structures only record a fixed-size <code>Id</code>, so …\nAn asset denomination.\nAn identifier for an IBC asset type.\nAn asset denomination’s metadata.\nA fixed registry of known asset families.\nA registry of known assets, providing metadata related to …\nA unit of some asset denomination.\nThe domain separator used to hash asset ids to value …\nReturns the base (smallest) unit for this denomination.\nReturns the “best” unit for the given amount …\nReturns the default (largest) unit for this denomination.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the IBC transfer path and base denom if this is an …\nReturn the <code>Id</code> associated with this denomination.\nReturn the <code>Id</code> associated with this denomination.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to parse the provided <code>raw_denom</code> as a base …\nParses the provided <code>raw_unit</code>, determining whether it is a …\nReturns the base64 encoded string of the inner bytes.\nConvert the asset ID to bytes.\nReturn a list of display units for this denomination, in …\nCreate a value of this denomination.\nCreate a value of this unit, applying the correct exponent.\nCreate a value of this denomination.\nCompute the value generator for this asset, used for …\nA <code>Balance</code> is a “vector of <code>Value</code>s”, where some values …\nRepresents a balance in a rank 1 constraint system.\nCommit to a <code>Balance</code> using a provided blinding factor.\nCommit to a <code>BalanceVar</code> using a provided blinding factor.\nFind out how many distinct assets are represented in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a balance from a negated <code>ValueVar</code>.\nCreate a balance from a positive <code>ValueVar</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this balance is zero.\nIterate over all the requirements of the balance, as <code>Value</code>…\nMake a new, zero balance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")