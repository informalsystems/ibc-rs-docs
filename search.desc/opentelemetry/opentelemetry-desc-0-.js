searchState.loadedDescShard("opentelemetry", 0, "OpenTelemetry provides a single set of APIs, libraries, …\nA Value::Array containing homogeneous values.\nArray of homogeneous values\nArray of bools\nbool values\nAn execution-scoped collection of values.\nA guard that resets the current context to the prior …\nMarker trait for errors returned by exporters\nArray of floats\nf64 values\nArray of integers\ni64 values\nInformation about a library or crate providing …\nThe key part of attribute KeyValue pairs.\nA key-value pair describing an attribute.\nArray of strings\nString values\nWrapper for string-like values\nThe value part of attribute KeyValue pairs.\nCreate a <code>KeyValue</code> pair for arrays.\nReturns a reference to the underlying key name\nString representation of the <code>Value</code>\nReturns a string slice to this value\nReplaces the current context on this thread with this …\nOpenTelemetry Attributes\nPrimitives for sending name/value data across system …\nCreate a <code>KeyValue</code> pair for <code>bool</code> values.\nReturns an immutable snapshot of the current thread’s …\nReturns a clone of the current thread’s context with the …\nThe name of exporter that returned this error\nCreate a <code>KeyValue</code> pair for <code>f64</code> values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>String</code> to a <code>Key</code>.\nConvert a <code>&amp;str</code> to a <code>Key</code>.\nConvert a <code>String</code> to a <code>Key</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new const <code>Key</code>.\nReturns a reference to the entry for the corresponding …\nUtilities for working with global telemetry primitives\nCreate a <code>KeyValue</code> pair for <code>i64</code> values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe attribute name\nOpenTelemetry Metrics API\nThe library name.\nCreates an empty <code>Context</code>.\nCreate a new <code>Key</code>.\nCreate a new <code>KeyValue</code> pair.\nCreate an new instrumentation library.\nOpenTelemetry Propagator interface\nProvides an abstraction of several async runtimes\nSchema url used by this library.\nOpenTelemetry SDK\nCreate a <code>KeyValue</code> pair for string-like values.\nAPI for tracing applications and libraries.\nThe attribute value\nThe library version.\nReturns a copy of the context with the new value included.\nAn immutable set of distinct attributes.\nDefault attribute encoding strategy\nEncoder is a mechanism for serializing an attribute set …\nEncoderID is used to identify distinct Encoder …\nAn iterator over the entries of a <code>Set</code>.\nMerge two iterators, sorting by key\nBuild a new default encoder\nEncode returns the serialized encoding of the attribute …\nEncode the attribute set with the given encoder and cache …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new attribute set form a distinct set of …\nImpl of Hash for <code>KeyValue</code>\nA value that is unique for each class of attribute …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the set of attributes are empty.\nCheck if the id is valid\nIterate over the attribute key value pairs.\nThe attribute set length.\nMerge two iterators, yielding sorted results\nBuild a new encoder id\nA set of name/value pairs describing user-defined …\nMethods for sorting and retrieving baggage data in a …\nAn optional property set that can be added to <code>Baggage</code> …\nAn iterator over the entries of a <code>Baggage</code>.\n<code>Baggage</code> name/value pairs with their associated metadata.\nReturn underlying string\nReturns a reference to this context’s baggage, or the …\nReturns a clone of the current context with the included …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value associated with a given …\nReturns a reference to the value and metadata associated …\nInserts a name/value pair into the baggage.\nInserts a name/value pair into the baggage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the baggage contains no items.\nGets an iterator over the baggage items, sorted by name.\nDimension or event key\nReturns the number of attributes for this baggage\nMetadata associate with this key value pair\nCreates an empty <code>Baggage</code>.\nCreate a new <code>KeyValue</code> pair with metadata\nRemoves a name from the baggage, returning the value …\nDimension or event value\nReturns a clone of the given context with the included …\nReturns a clone of the given context with the included …\nWraps the <code>BoxedTracer</code>’s <code>Span</code> so it can be used …\nWraps the <code>GlobalTracerProvider</code>’s <code>Tracer</code> so it can be …\nWrapper for error from both tracing and metrics part of …\nRepresents the globally configured <code>MeterProvider</code> instance …\nRepresents the globally configured <code>TracerProvider</code> instance …\nAn issue raised by the metrics module.\nAllows a specific <code>Tracer</code> to be used generically by …\nAllows a specific <code>TracerProvider</code> to be used generically by …\nOther types of failures not covered by the variants above.\nFailed to export traces.\nRecords events at a specific time in the context of a …\nCreate a span from a <code>SpanBuilder</code>\nReturns a trait object so the underlying implementation …\nReturns a trait object so the underlying implementation …\nFinishes the span with given timestamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes a closure with a reference to the current global …\nHandle error using the globally configured error handler.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Span</code> is recording information like …\nCreates a named <code>Meter</code> via the configured …\nReturns an instance of the currently configured global …\nCreates a <code>Meter</code> with the name, version and schema url.\nCreate a new global meter provider\nSets a single <code>Attribute</code> where the attribute properties are …\nSet global error handler.\nSets the given <code>MeterProvider</code> instance as the current …\nSets the status of the <code>Span</code>. If used, this will override …\nSets the given <code>TextMapPropagator</code> propagator as the current …\nSets the given <code>TracerProvider</code> instance as the current …\nShut down the current tracer provider. This will invoke …\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nCreates a named instance of <code>Tracer</code> via the configured …\nReturns an instance of the currently configured global …\nUpdates the <code>Span</code>’s name.\nCreate a versioned tracer using the global provider.\nCreates a versioned named tracer instance that is a trait …\nReturn a versioned boxed tracer\nAn SDK implemented async instrument that records …\nAn SDK implemented instrument that records independent …\nAn SDK implemented async instrument that records …\nAn instrument that records increasing values.\nContains the error value\nFail to export metrics\nAn instrument that records a distribution of values.\nErrors when merging aggregators of incompatible types.\nErrors when processor logic is incorrect\nConfiguration for building an instrument.\nSDK implemented trait for creating instruments\nInvalid instrument configuration such invalid instrument …\nErrors when requesting quantiles out of the 0-1 range.\nProvides access to instrument instances for recording …\nReturns named meter instances\nErrors when registering to instruments with the same name …\nErrors returned by the metrics API.\nErrors when recording nan values.\nErrors when recording negative values in monotonic sums.\nErrors when requesting data when no data has been collected\nErrors when aggregator cannot subtract\nAn async instrument that records increasing values.\nAn instrument that records independent readings.\nAn async instrument that records increasing or decreasing …\nContains the success value\nOther errors not covered by specific cases.\nA specialized <code>Result</code> type for metric operations.\nAn SDK implemented instrument that records increasing …\nAn SDK implemented instrument that records a distribution …\nAn SDK implemented instrument that records increasing or …\nUnits denote underlying data units tracked by <code>Meter</code>s.\nAn instrument that records increasing or decreasing values.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nView unit as &amp;str\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value via …\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nCreates a new instrument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a named <code>Meter</code> instance.\nCreate a new observable counter.\nCreate a new counter.\nCreate a new gauge\nCreate a new histogram.\nCreate a new up down counter.\nCreate a new observable up down counter.\nCreate a new named meter from an instrumentation provider\nCreate a new <code>Unit</code> from an <code>Into&lt;String&gt;</code>\nNo-op OpenTelemetry Metrics Implementation\nRecords an increment to the counter.\nRecords the state of the instrument.\nRecords the increment or decrement to the counter.\nRecords an increment to the counter.\nRecords the state of the instrument.\nRecords the increment or decrement to the counter.\nAdds an additional value to the distribution.\nAdds an additional value to the distribution.\nCaptures the function that will be called during data …\nCaptures the function that will be called during data …\nValidate the instrument configuration and creates a new …\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\nCreates an implementation of the <code>Meter</code> interface.\nSet the description for this instrument\nSet the unit for this instrument.\nA no-op async instrument.\nA no-op instance of a <code>Meter</code>\nA no-op instance of a <code>MetricProvider</code>\nA no-op sync instrument\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new no-op meter provider.\nCreate a new no-op meter core.\nCreate a new no-op sync instrument\nCreate a new no-op async instrument\nExtractor provides an interface for removing fields from …\nInjector provides an interface for adding fields from an …\nMethods to inject and extract a value as text into …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nReturns iter of fields used by <code>TextMapPropagator</code>\nGet a value from a key from the underlying data.\nProperly encodes the values of the current <code>Context</code> and …\nProperly encodes the values of the <code>Context</code> and injects …\nCollect all the keys from the underlying data.\nAdd a key and value to the underlying data.\nText Propagator\nAn iterator over fields of a <code>TextMapPropagator</code>\nMethods to inject and extract a value as text into …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nReturns iter of fields used by <code>TextMapPropagator</code>\nReturns the argument unchanged.\nProperly encodes the values of the current <code>Context</code> and …\nProperly encodes the values of the <code>Context</code> and injects …\nCalls <code>U::from(self)</code>.\nCreate a new <code>FieldIter</code> from a slice of propagator fields\nA future, which resolves after a previously specified …\nA future stream, which returns items in a previously …\nA runtime is an abstraction of an async runtime like Tokio …\nReturn a new future, which resolves after the specified …\nCreate a Stream, which returns a new item every Duration.\nSpawn a new task or thread, which executes the given …\nInformation about a library or crate providing …\nAn immutable representation of the entity producing …\nCreates an empty resource.\nEncoded attributes\nMetrics Export\nReturns the argument unchanged.\nCreate a new <code>Resource</code> from resource detectors.\nCreate a new <code>Resource</code> from a key value pairs and schema url…\nRetrieve the value from resource associate with given key.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the resource contains no attributes.\nGets an iterator over the attributes of this resource, …\nReturns the number of attributes for this resource\nCreate a new <code>Resource</code> by combining two resources.\nOpenTelemetry Metrics SDK\nThe library name.\nCreate a new <code>Resource</code> from key value pairs.\nOpenTelemetry Propagators\nRepresentations of entities producing telemetry.\nProvides an abstraction of several async runtimes\nReturn the schema url of the resource. If the resource …\nSchema url used by this library.\nOpenTelemetry Trace SDK\nThe library version.\nMarker trait for errors returned by exporters\nThe name of exporter that returned this error\nMetrics Export\nTrace exporters\nA container for the exported data for a single metric …\nAggregatorSelector supports selecting the kind of …\nA utility extension to allow upcasting.\nThe interface used to create checkpoints.\nAn interface for producing configured <code>Checkpointer</code> …\nIndividually exported metric\nA number exported as debug for serialization\nInstrumentationLibraryReader is an interface for exporters …\nThe interface used by a controller to coordinate the …\nMetric data processor.\nA container for the common elements for exported metric …\nExporter handles presentation of the checkpoint of …\nProcessor is responsible for deciding which kind of …\nReader allows a controller to access a complete checkpoint …\nA container for the exported data for a single metric …\nAn OpenTelemetry metric exporter that transmits telemetry …\nConfiguration for a given stdout exporter.\nAllows <code>Accumulator</code> implementations to construct new …\nMetrics aggregation\nThe checkpointed aggregator for this metric.\nThe aggregator for this metric\nThis allocates a variable number of aggregators of a kind …\nAggregatorSelector is responsible for selecting the …\nCreate an <code>Arc&lt;dyn Processor&gt;</code> from an impl of <code>Processor</code>.\nThe attributes associated with the instrument and the …\nThe attributes associated with the instrument and the …\nThe attributes associated with the instrument and the …\nBuild a new push controller, returning errors if they …\nSynchronizes the checkpoint process and allows a single …\nCreates a new configured checkpointer.\nA description of the metric instrument being exported.\nA description of the metric instrument being exported.\nA description of the metric instrument being exported.\nThe end time of the interval covered by this aggregation.\nExport is called immediately after completing a collection …\nends a collection interval.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npopulated if using last value aggregator\nmetric name\nCreate a new <code>Record</code> instance.\nCreate a new <code>Metadata</code> instance.\nProcess is called by the SDK once per internal record, …\nProcesses metric data for export.\nReader returns the current data set.\nAllows <code>Processor</code> implementations to construct export …\nbegins a collection interval.\nThe start time of the interval covered by this aggregation.\nCreate a new stdout exporter builder with the …\npopulated if using sum aggregator\nThe temporality selector for this exporter\nmetric timestamp\nForEach calls the passed function once per instrumentation …\nForEach iterates over aggregated checkpoints for all …\nSet the attribute encoder that this exporter will use.\nHide the timestamps from exported results\nSet a formatter for serializing export batch data\nSet the writer that this exporter will use.\nAn interface returned by an <code>Aggregator</code> containing an …\nA short name for the <code>Aggregator</code> that produces an …\nBuckets represent histogram buckets boundaries and counts.\nCount returns the number of values that were aggregated.\nIndicates that an Exporter expects a Cumulative …\nIndicates that an Exporter expects a Delta Aggregation.\nAggregations that return a distribution\nHistogram returns the count of events in pre-determined …\nAggregations that return only the latest value.\nLastValue returns the latest value that was aggregated.\nAggregations that return a minimum.\nAggregations that return a minimum.\nSum returns an aggregated max.\nSum returns an aggregated min.\nAggregations that return an aggregated sum.\nSum returns an aggregated sum.\nTemporality indicates the temporal aggregation exported by …\nTemporalitySelector is a sub-interface of Exporter used to …\nBoundaries of the histogram buckets\nReturns an <code>TemporalitySelector</code> that returns a constant …\nThe count of the currently aggregated metrics\nCounts of the histogram buckets\nReturns an <code>TemporalitySelector</code> that always returns …\nReturns an <code>TemporalitySelector</code> that always returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuckets for this histogram.\nTests whether <code>kind</code> includes a specific kind of exporter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA short identifying string to identify the <code>Aggregator</code> that …\nThe last value of the currently aggregated metrics\nThe max of the currently aggregated metrics\nReturns whether a temporality of this kind requires memory …\nThe min of the currently aggregated metrics\nCreate new buckets\nCreate a new custom aggregation kind\nReturns a <code>TemporalitySelector</code> that always returns the …\nThe sum of the currently aggregated metrics\nTemporalityFor should return the correct Temporality that …\nContains the error value\nDescribes the result of an export.\nContains the success value\n<code>SpanData</code> contains all the information collected by a <code>Span</code> …\n<code>SpanExporter</code> defines the interface that protocol-specific …\nSpan attributes\nSpan end time\nSpan events\nExports a batch of readable spans. Protocol exporters that …\nThis is a hint to ensure that the export of any Spans the …\nReturns the argument unchanged.\nInstrumentation library that produced this span\nCalls <code>U::from(self)</code>.\nSpan Links\nSpan name\nSpan parent id\nResource contains attributes representing an entity that …\nShuts down the exporter. Called when SDK is shut down. …\nExportable <code>SpanContext</code>\nSpan kind\nSpan start time\nSpan status\nStdout Span Exporter\nA <code>SpanExporter</code> that writes to <code>Stdout</code> or other configured …\nPipeline builder\nReturn the default pipeline builder.\nExport spans to stdout\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstall the stdout exporter pipeline with the recommended …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new stdout <code>Exporter</code>.\nCreate a new stdout exporter pipeline builder.\nSpecify the pretty print setting.\nAssign the SDK trace configuration.\nSpecify the writer to use.\nAccumulator implements the OpenTelemetry Meter API. The …\nCreates a new accumulator builder\nMetric Aggregators\nTraverses the list of active records and observers and …\nSDK Metrics Controllers\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMetric Processors\nMetrics Registry API\nSDK API\nAggregator Selectors\nAggregator implements a specific aggregation behavior, …\nThis aggregator observes events and counts them in …\nAggregates last value events.\nAn aggregator for counter events.\nThe interface to access the current state of this …\nReturns the implementing aggregator as <code>Any</code> for downcasting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new histogram for the given descriptor with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LastValueAggregator</code>\nThis combines the checkpointed state from the argument …\nRangeTest is a common routine for testing for valid input …\nCreate a new sum aggregator.\nThis method is called during collection to finish one …\nUpdate receives a new measured value and incorporates it …\nOrganizes and synchronizes collection of metric data in …\nOptions for configuring a <code>BasicController</code>\nReturns a new builder using the provided checkpointer …\nCreates a new basic controller.\nRequests a collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if the controller was started via <code>start</code>, indicating …\nGet a reference to the current resource.\nThis begins a ticker that periodically collects and …\nThis waits for the background worker to return and then …\nSets the interval between calls to <code>collect</code> a checkpoint.\nSets the timeout of the <code>collect</code> and subsequent observer …\nSets the exporter used for exporting metric data.\nSets push controller timeout when a exporter is configured.\nSets the <code>Resource</code> used for this controller.\nBasic metric integration strategy\nCreate a new basic processor\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn extension trait that allows meters to be downcast\nImplements the <code>MeterCore</code> interface, adding uniqueness …\nReturns the current type as <code>Any</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>UniqueInstrumentMeterCore</code> from a …\nA utility extension to allow upcasting.\nAn implementation-level interface to an asynchronous …\nAn atomic version of <code>Number</code>\nA synchronous per-request part of a monotonic sum.\nAn asynchronous per-interval recorder of a monotonic sum.\nDescriptor contains all the settings that describe an …\nA Number that stores <code>f64</code> values.\nA gauge observer instrument\nA histogram instrument\nA Number that stores <code>i64</code> values.\nA common interface for synchronous and asynchronous …\nKinds of OpenTelemetry metric instruments\nThe interface an SDK must implement to supply a Meter …\nNumber represents either an integral or a floating point …\nA descriptor for the encoded data type of a <code>Number</code>\nThe implementation-level interface to a generic …\nA Number that stores <code>u64</code> values.\nA synchronous per-request part of a non-monotonic sum.\nAn asynchronous per-interval recorder of a non-monotonic …\nWhether this kind of instrument adds its inputs (as …\nReturns self as any\nCreate an <code>Arc&lt;dyn InstrumentCore&gt;</code> from an impl of …\nWhether this is a synchronous kind of instrument.\nThe pre-computed hash of the descriptor data\nA human-readable description of the metric instrument.\nDescription of the instrument’s descriptor\nAdds to the current number. Both numbers must be of the …\nSets the number to the new maximum.\nSets the number to the new minimum.\nSubtracts from the current number. Both numbers must be of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this kind of instrument groups its inputs (as …\nThe specific kind of instrument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this value ia an f64 nan value. Do not use on …\n<code>true</code> if the actual value is less than zero.\nLoads the current <code>Number</code>.\nReturns the max value for each kind\nReturns the min value for each kind\nWhether this kind of instrument exposes a non-decreasing …\nThe metric instrument’s name.\nCreate a new descriptor\nCreate a new asynchronous instrument implementation.\nCreate a new synchronous instrument implementation.\nNumberKind returns whether this instrument is declared …\nCaptures a single asynchronous metric event.\nCompares this number to the given other number. Both …\nWhether this kind of instrument receives precomputed sums.\nCapture a single synchronous metric event.\nRegister a batch observer\nAssign a new description\nStores a <code>Number</code> into the atomic number.\nWhether this is a synchronous kind of instrument.\nCreate an atomic version of the current number\nReturn loaded data for debugging purposes\nCasts the number to <code>f64</code>. May result in data/precision loss.\nCasts the number to <code>i64</code>. May result in data/precision loss.\nCasts the number to <code>u64</code>. May result in data/precision loss.\nUnit describes the units of the metric instrument.\nwraps impl to be a full implementation of a Meter.\nReturns the zero value for each kind\nSimple Metric Selectors\nA simple aggregator selector that uses histogram …\nThis selector is faster and uses less memory than the …\nPropagates name-value pairs in W3C Baggage format.\nComposite propagator\nPropagates <code>SpanContext</code>s in W3C TraceContext format.\nExtracts a <code>Context</code> with baggage values from a <code>Extractor</code>.\nRetrieves encoded <code>Context</code> information using the <code>Extractor</code>. …\nRetrieves encoded <code>SpanContext</code>s using the <code>Extractor</code>. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEncodes the values of the <code>Context</code> and injects them into …\nEncodes the values of the <code>Context</code> and injects them into …\nProperly encodes the values of the <code>SpanContext</code> and injects …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new baggage propagator.\nConstructs a new propagator out of instances of …\nCreate a new <code>TraceContextPropagator</code>.\nResource detector implements ResourceDetector and is used …\nAn owned iterator over the entries of a <code>Resource</code>.\nAn iterator over the entries of a <code>Resource</code>.\nDetect runtime operating system information.\nDetect process information.\nAn immutable representation of the entity producing …\nResourceDetector detects OpenTelemetry resource information\nThere are attributes which MUST be provided by the SDK as …\nDetect the telemetry SDK information used to capture data …\ndetect returns an initialized Resource based on gathered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>EnvResourceDetector</code> instance.\nA future, which resolves after a previously specified …\nA future stream, which returns items in a previously …\nA runtime is an abstraction of an async runtime like Tokio …\nReturn a new future, which resolves after the specified …\nCreate a Stream, which returns a new item every Duration.\nSpawn a new task or thread, which executes the given …\nNever sample the trace\nAlways sample the trace\nBatch span processor configuration\nMessages sent between application thread and batch span …\nA <code>SpanProcessor</code> that asynchronously buffers finished spans …\nA builder for creating <code>BatchSpanProcessor</code> instances.\nBuilder for provider attributes.\nTracer configuration\nA hash map with a capped number of attributes that retains …\nThis queue maintains an ordered list of elements, and a …\nExport spans, usually called when span ends\nFlush the current buffer to the backend, it can be …\nInterface for generating IDs\nRespects the parent span’s sampling decision or …\nDefault <code>IdGenerator</code> implementation.\nA future stream to receive the batch messages from …\nDefault Sampling options\nA batch messages sender that could be sent across thread …\nThe <code>ShouldSample</code> interface allows implementations to …\nShut down the worker thread, push all spans in buffer to …\nA <code>SpanProcessor</code> that exports synchronously when spans are …\nSingle operation within a trace.\nSpan limit configuration to keep attributes, events and …\n<code>SpanProcessor</code> is an interface which allows hooks for span …\nSample a given fraction of traces. Fractions &gt;= 1 will …\nTrace runtime is an extension to <code>Runtime</code>. Currently it …\n<code>Tracer</code> implementation to create and manage spans\nCreator and registry of named <code>Tracer</code> instances.\nTrySend is an abstraction of sender that is capable to …\nGenerates AWS X-Ray compliant Trace and Span ids.\nRecords events at a specific time in the context of a …\nMoves all the elements of other into self, leaving other …\nReturn the sender and receiver used to send batch message …\nCreate a new provider from this configuration.\nBuild a batch processor\nStarts a span from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nCreate a new batch processor builder\nCreate a new <code>TracerProvider</code> builder.\nDefault trace configuration\nConfig associated with this tracer\nCreate default global sdk configuration.\nReport span on inner drop\nReturns the dropped attribute count\nCount of dropped attributes\nFinishes the span with given timestamp.\nConvert information in this span into …\nFormats the <code>Tracer</code> using the given formatter. Omitting …\nForce the spans lying in the cache to be exported.\nForce flush all remaining spans in span processors and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key …\nThe id generator that the sdk should use\nInserts a key-value pair into the map.\nInstrumentation library information of this tracer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map is empty.\nReturns <code>true</code> if the <code>EvictedQueue</code> is empty.\nReturns true if this <code>Span</code> is recording information like …\nReturns a front-to-back iterator.\nReturns a front-to-back iterator.\nReturns the number of elements in the map.\nReturns the number of elements in the <code>EvictedQueue</code>.\nThe max attributes that can be added into an <code>Event</code>\nThe max attributes that can be added into a <code>Link</code>\nThe max attributes that can be added to a <code>Span</code>.\nThe max events that can be added to a <code>Span</code>.\nThe max links that can be added to a <code>Span</code>.\nCreate a new <code>EvictedHashMap</code> with a given max length and …\nCreate a new <code>EvictedQueue</code> with a given max length.\nGenerate a new <code>SpanId</code>\nGenerates a new <code>SpanId</code> that can be converted to an X-Ray …\nGenerate a new <code>TraceId</code>\nGenerates a new <code>TraceId</code> that can be converted to an X-Ray …\n<code>on_end</code> is called after a <code>Span</code> is ended (i.e., the end …\n<code>on_start</code> is called when a <code>Span</code> is started.  This method is …\nTracerProvider associated with this tracer.\nContains attributes representing an entity that produces …\nThe sampler that the sdk should use\nSets a single <code>Attribute</code> where the attribute properties are …\nSets the status of this <code>Span</code>.\nReturns the <code>SamplingDecision</code> for a <code>Span</code> to be created.\nShuts down the processor. Called when SDK is shut down. …\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nspan limits\nSpan processors associated with this provider\nTry to send one batch message to worker thread.\nUpdates the <code>Span</code>’s name.\nCreate a new versioned <code>Tracer</code> instance.\nReturn a versioned boxed tracer\nSet the BatchConfig for BatchSpanProcessorBuilder\nThe <code>SpanExporter</code> setup using a default <code>BatchSpanProcessor</code> …\nThe sdk <code>crate::trace::Config</code> that this provider will use.\nSpecify the id generator to be used.\nSpecify the number of attributes one event can have.\nSpecify the number of attributes one link can have.\nSpecify the number of attributes to be recorded per span.\nSet max_concurrent_exports for <code>BatchConfig</code>. It’s the …\nSet the maximum number of concurrent exports\nSpecify the number of events to be recorded per span.\nSet max_export_batch_size for <code>BatchConfig</code>. It’s the …\nSet max export size for batches, should always less than …\nSet max_export_timeout for <code>BatchConfig</code>. It’s the maximum …\nSpecify the number of events to be recorded per span.\nSet max_queue_size for <code>BatchConfig</code>. It’s the maximum …\nSet max queue size for batches\nSet max timeout for exporting.\nSpecify the attributes representing the entity that …\nSpecify the sampler to be used.\nSet scheduled_delay_duration for <code>BatchConfig</code>. It’s the …\nSet scheduled delay for batches\nThe <code>SpanExporter</code> that this provider should use.\nSpecify all limit via the span_limits\nThe <code>SpanProcessor</code> that this provider should use.\nIndicates that the span describes a request to some remote …\nIndicates that the span describes a child of an …\nSpan will not be recorded and all events and attributes …\nContains the error value\nThe operation contains an error.\nEvents record things that happened during a <code>Span</code>’s …\nExport failed with the error returned by the exporter\nExport failed to finish after certain period and processor …\nExtension trait allowing futures, streams, and sinks to be …\nInvalid trace id\nInvalid span id\nDefault value.\nLink is the relationship between two Spans.\nContains the success value\nThe operation has been validated by an application …\nA hash table implementation that preserves insertion order …\nOther errors propagated from trace SDK that weren’t …\nIndicates that the span describes the initiators of an …\nSpan data will be recorded and exported.\nSpan data wil be recorded, but not exported.\nTrace flags with the <code>sampled</code> flag set to <code>1</code>.\nDecision about whether or not to sample\nThe result of sampling logic for a given span.\nIndicates that the span covers server-side handling of a …\nThe interface for a single operation within a trace.\nThe <code>Span</code> type used by this tracer.\n<code>SpanBuilder</code> allows span attributes to be configured before …\nImmutable portion of a <code>Span</code> which can be serialized and …\nAn 8-byte value which identifies a given span.\n<code>SpanKind</code> describes the relationship between the <code>Span</code>, its …\nA reference to the currently active span in this context.\nThe status of a <code>Span</code>.\nMethods for storing and retrieving trace data in a <code>Context</code>.\nErrors returned by the trace API.\nFlags that can be set on a <code>SpanContext</code>.\nA 16-byte value which identifies a given trace.\nDescribe the result of operations in tracing API.\nTraceState carries system-specific configuration data, …\nThe interface for constructing <code>Span</code>s.\nThe <code>Tracer</code> type that this provider will return.\nTypes that can create instances of <code>Tracer</code>.\nThe default status.\nA future, stream, or sink that has an associated context.\nRecord an event in the context this span.\nRecord an event in the context this span.\nRecord an event with a timestamp in the context this span.\nRecord an event with a timestamp in the context this span.\nSpan attributes\nExtra attributes to be added to the span by the sampler\nAttributes that describe this event.\nAttributes that describe this link.\nStart a <code>Span</code> from a <code>SpanBuilder</code>.\nStart a span from a <code>SpanBuilder</code> with a parent context.\nComputes in <strong>O(1)</strong> time.\nRemove all key-value pairs in the map, while preserving …\nReturn <code>true</code> if an equivalent to <code>key</code> exists in the map.\nReturns a clone of the current context with the included …\nThe decision about whether or not to sample.\nReturn an empty <code>OrderMap</code>\nRemoves the given key-value pair from the <code>TraceState</code>. If …\nClears the <code>IndexMap</code> in the given index range, returning …\nThe number of attributes that were above the configured …\nThe number of attributes that were above the configured …\nCreate an invalid empty span context\nSignals that the operation described by this span has now …\nSignals that the operation described by this span has now …\nSpan end time\nSignals that the operation described by this span ended at …\nSignals that the operation described by this span ended at …\nGet the given key’s corresponding entry in the map for …\nCreate a new error status with a given description.\nSpan events\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nGet the first key-value pair\nGet the first key-value pair, with mutable access to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a trace id from its representation as a byte array.\nCreate a span id from its representation as a byte array.\nConverts a string in base 16 to a trace id.\nConverts a string in base 16 to a span id.\nCreate an <code>OrderMap</code> from the sequence of key-value pairs in …\nCreate an <code>OrderMap</code> from the sequence of key-value pairs in …\nCreates a new <code>TraceState</code> from the given key-value …\nCreate a new span builder from a span name\nReturn a reference to the value stored for <code>key</code>, if it is …\nRetrieves a value for a given key from the <code>TraceState</code> if …\nExecutes a closure with a reference to this thread’s …\nReturn item index, key and value\nReturn a mutable reference to the element pointed at by <code>key</code>…\nGet a key-value pair by index\nGet a key-value pair by index\nReturn item index, if it exists in the map\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturn a mutable reference to the element pointed at by <code>key</code>…\nReturns whether or not an active span has been set.\nReturn a reference to the map’s <code>BuildHasher</code>.\nCreates a new <code>TraceState</code> header string, delimiting each …\nCreates a new <code>TraceState</code> header string, with the given …\nStart a new span and execute the given closure with …\nReturns a reference to the value at the supplied <code>index</code>.\nReturns a reference to the value corresponding to the …\nReturns a mutable reference to the value at the supplied …\nReturns a mutable reference to the value corresponding to …\nInsert a key-value pair in the map.\nInserts the given key-value pair into the <code>TraceState</code>. If a …\nInsert a key-value pair in the map, and get their index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an owning iterator over the keys of the map, in …\nReturn an owning iterator over the values of the map, in …\nReturns true if the map contains no elements.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if the span context was propagated from a …\nReturns <code>true</code> if the <code>sampled</code> flag is set\nReturns <code>true</code> if the <code>sampled</code> trace flag is set.\nReturns <code>true</code> if the span context has a valid (non-zero) …\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the keys of the map, in their order\nGet the last key-value pair\nGet the last key-value pair, with mutable access to the …\nReturn the number of key-value pairs in the map.\nSpan Links\nMark a given <code>Span</code> as active.\nSpan name\nThe name of this event.\nCreate a new map. (Does not allocate)\nConstruct new trace flags\nConstruct a new <code>SpanContext</code>\nCreate new <code>Event</code>\nCreate a new link.\nNo-op trace impls\nRemove the last key-value pair\nRecord an error as an event for this span.\nRecord an error as an event for this span.\nReserve capacity for <code>additional</code> more key-value pairs.\nScan through each key-value pair in the map and keep those …\nSampling result\nSet an attribute of this span.\nSet an attribute of this span.\nSet multiple attributes of this span.\nSet multiple attributes of this span.\nSets the status of this <code>Span</code>.\nSets the status of this <code>Span</code>.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the key-value pair by index\nShrink the capacity of the map as much as possible.\nReturns a reference to this context’s span, or the …\nCreates a span builder.\nA reference to the <code>SpanContext</code> for this span.\nA reference to the <code>SpanContext</code> for this span.\nThe span context of the linked span.\nThe <code>SpanId</code> for this span context.\nSpan id, useful for integrations with external tracing …\nSpan kind\nSplits the collection into two at the given index.\nStarts a new <code>Span</code>.\nBuilds a span with the given tracer from this …\nSpan start time\nStarts a new <code>Span</code> with a given context.\nBuilds a span with the given tracer from this …\nSpan status\nThe time at which this event occurred.\nReturn the representation of this trace id as a byte array.\nReturn the representation of this span id as a byte array.\nReturns the flags as a <code>u8</code>\nReturns details about the trace.\nThe <code>TraceId</code> for this span context.\nTrace id, useful for integrations with external tracing …\nA reference to the span context’s <code>TraceState</code>.\nTrace state from parent context, may be modified by …\nReturns a new tracer with the given name.\nShortens the map, keeping the first <code>len</code> elements and …\nUpdates the span’s name.\nUpdates the span’s name.\nReturn an iterator over the values of the map, in their …\nReturn an iterator over mutable references to the values …\nReturns a new versioned tracer with a given name.\nAssign span attributes from an iterable.\nAssign span attributes.\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nAssign span end time\nAssign events\nCreate a new map with <code>hash_builder</code>.\nAssign span kind\nAssign links\nCreate new <code>Event</code> with a given name.\nReturns a copy of this context with the span context …\nReturns copy of the current flags with the <code>sampled</code> flag …\nAssign sampling result\nReturns a clone of this context with the included span.\nAssign span id\nAssign span start time\nAssign status code\nSpecify trace id to use if no parent context exists\nThe description of the error\nA no-op instance of a <code>Span</code>.\nA no-op instance of an <code>TextMapPropagator</code>.\nA no-op instance of a <code>Tracer</code>.\nA no-op instance of a <code>TracerProvider</code>.\nIgnores all events\nIgnores all events with timestamps\nBuilds a <code>NoopSpan</code> from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nIgnores <code>Span</code> endings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns false, signifying that this span is never …\nCreate a new no-op tracer provider\nCreates a new <code>NoopSpan</code> instance.\nCreate a new no-op tracer\nCreate a new noop text map propagator\nIgnores all attributes\nIgnores status\nReturns an invalid <code>SpanContext</code>.\nIgnores name updates\nReturns a new <code>NoopTracer</code> instance.\nReturn a versioned boxed tracer")