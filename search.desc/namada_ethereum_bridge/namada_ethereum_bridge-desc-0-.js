searchState.loadedDescShard("namada_ethereum_bridge", 0, "Ethereum bridge\nInternal Eth bridge address\nEthereum Bridge transaction events.\nEthereum bridge oracle\nEthereum bridge protocol transactions and validation.\nFunctionality for accessing the storage subspace\nNative validity predicates for the Namada Ethereum bridge. …\nStatus of some Bridge pool transfer.\nBridge pool transfer status update event.\nHash of bridge pool transaction\nEthereum bridge events on Namada’s event log.\nThe transfer has expired.\nThe transfer has been relayed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new Bridge pool expired transfer event.\nReturn a new Bridge pool relayed transfer event.\nEthereum bridge event types.\nStatus of the Bridge pool transfer.\nHash of the Bridge pool transfer.\nBridge pool expiration event.\nBridge pool relay event.\nConfiguration for an oracle.\nConfiguration for an oracle.\nThe status of the Ethereum bridge (active / inactive)\nThe Ethereum address of the current bridge contract.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum number of block confirmations an Ethereum …\nThe earliest Ethereum block from which events may be …\nThis module contains functionality for handling protocol …\nValidation logic for Ethereum bridge protocol actions.\nThe keys changed while applying a protocol transaction.\nFunctions dealing with bridge pool root hash.\nCode for handling Ethereum events protocol txs.\nCode for handling validator set update protocol txs.\nLogic and data types relating to tallying validators’ …\nApplies a tally of signatures on over the Ethereum bridge …\nSign the latest Bridge pool root, and return the associated\nApplies derived state changes to storage, based on …\nSign the given Ethereum events, and return the associated …\nAggregate validators’ votes\nSign the next set of validators, and return the associated …\nThe voting power behind a tally aggregated over multiple …\nExtension methods for <code>EpochedVotingPower</code> instances.\nRepresents all the information needed to tally a piece of …\nThe addresses of validators that voted for something, and …\nCalculate a new <code>Tally</code> based on some validators’ …\nDeterministically constructs a <code>Votes</code> map from a set of …\nQuery the stake of the most secure <code>Epoch</code> referenced by an …\nFetch the sum of the stake tallied on an <code>EpochedVotingPower</code>…\nReturns the argument unchanged.\nCheck if the <code>Tally</code> associated with an <code>EpochedVotingPower</code> …\nCalls <code>U::from(self)</code>.\nWhether this event has been acted on or not - this should …\nThe votes which have been counted towards <code>voting_power</code>. …\nFetch the sum of the stake tallied on an <code>EpochedVotingPower</code>…\nThe total voting power that’s voted for this event …\nThe error yielded from validating faulty vote extensions.\nBridge pool roots validation.\nEthereum events validation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidator set update validation.\nValidates a vote extension issued at the provided block …\nValidates an Ethereum events vote extension issued at the …\nValidates a validator set update vote extension issued at …\nA key for storing the active / inactive status of the …\nStorage key for the Ethereum address of the bridge …\nTools for accessing the storage subspaces of the Ethereum …\nThe key to the escrow of the VP.\nStorage queries for ethereum bridge.\nKey for storing the initial Ethereum block height when …\nCheck if the given <code>key</code> contains an Ethereum bridge address …\nReturns whether a key belongs to this account or not\nStorage key for the minimum confirmations parameter.\nStorage key for the Ethereum address of wNam.\nParameters for configuring the Ethereum bridge\nKey prefix for the storage subspace\nProofs over some arbitrary data.\nFunctionality for accessing keys to do with tallying votes\nValidity predicate storage\nERC20 token whitelist storage data.\nFunctionality for accessing the multitoken subspace\nThe main address of the Ethereum bridge pool\nA simple Merkle tree for the Ethereum bridge pool\nParse the key to ensure it is of the correct type.\nDelete a key from storage and update the root\nReturns the argument unchanged.\nGet the height at which the key was inserted\nGet the storage key for the transfers using the hash\nCreate a batched membership proof for the provided keys\nGet the storage key for the batch nonce of the bridge …\nGet the storage key for the transfers in the pool\nGet the storage key for the root of the Merkle tree …\nUpdate the tree with a new value.\nCalls <code>U::from(self)</code>.\nCheck if a key belongs to the bridge pools sub-storage\nCheck if a key is for a pending transfer\nCreate a new merkle tree for the Ethereum bridge pool\nParse a db key to see if it is valid for the bridge pool.\nReturn the root as a <code>Hash</code> type.\nGet a reference to the backing store\nRecomputes the root and check if it matches the …\nBridge is enabled from this epoch onwards. a validator set …\nBridge is enabled from genesis\nCheck if it is possible to send a validator set update …\nThe bridge is disabled\nThe bridge is enabled\nNumber of tokens to mint after receiving a “transfer to …\nEnum indicating if the bridge was initialized at genesis …\nMethods used to query blockchain Ethereum bridge related …\nA handle to <code>EthBridgeQueries</code>.\nAn enum indicating if the Ethereum bridge is enabled.\nCheck if it is possible to send a validator set update …\nThis enum is used as a parameter to …\nThe underlying storage type.\nCheck if the bridge is disabled, enabled, or scheduled to …\nCheck if the bridge is disabled, enabled, or scheduled to …\nAmount of wrapped ERC20s to mint.\nReturn a handle to <code>EthBridgeQueries</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the latest nonce for the Ethereum bridge pool.\nGet the nonce at a particular block height.\nGet the latest root of the Ethereum bridge pool Merkle …\nGet the root of the Ethereum bridge pool Merkle tree at a …\nQuery the Bridge <code>ValidatorSetArgs</code> at the given <code>Epoch</code>. Also …\nExtension of …\nFor a given Namada validator, return its corresponding …\nReturn the number of ERC20 and NUT assets to be minted, …\nFor a given Namada validator, return its corresponding …\nFor a given Namada validator, return its corresponding …\nQuery the Governance <code>ValidatorSetArgs</code> at the given <code>Epoch</code>. …\nGet the nonce of the next transfers to Namada event to be …\nGet a quorum of validator signatures over the …\nFetch the token cap of the asset associated with the given …\nFetch the token supply of the asset associated with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean indicating whether the bridge is …\nReturns a boolean indicating whether the bridge is …\nBehaves exactly like <code>Self::is_bridge_active</code>, but performs …\nCheck if the Ethereum Bridge has been enabled at compile …\nCheck if the token at the given <code>EthAddress</code> is whitelisted.\nGiven a <code>TransferToEthereum</code> event, look-up the corresponding\nDetermines if it is possible to send a validator set …\nAmount of NUTs to mint.\nCheck if ERC20s should be minted.\nCheck if NUTs should be minted.\nReturn a handle to the inner <code>WlState</code>.\nValdidate an <code>EthereumEvent</code>’s nonce against the current …\nCheck if a validator set update proof is available for the …\nRepresents a configuration value for the version of a …\nRepresents all the Ethereum contracts that need to be …\nAn ERC20 token whitelist entry.\nRepresents chain parameters for the Ethereum bridge.\nSubset of <code>EthereumBridgeParams</code>, containing only Ethereum …\nRepresents a configuration value for the minimum number of …\nRepresents an Ethereum contract that may be upgraded.\nThe Ethereum address of the contract.\nThe Ethereum address of the bridge contract.\nThe addresses of the Ethereum contracts that need to be …\nThe addresses of the Ethereum contracts that need to be …\nList of ERC20 token types whitelisted at genesis time.\nInitial Ethereum block height when events will first be …\nInitial Ethereum block height when events will first be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the Ethereum bridge parameters in storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum number of confirmations needed to trust an …\nMinimum number of confirmations needed to trust an …\nThe Ethereum address of the ERC20 contract that represents …\nReads the latest <code>EthereumOracleConfig</code> from storage. If it …\nGet the Ethereum address for wNam from storage, if possible\nThe address of the whitelisted ERC20 token.\nThe token cap of the whitelisted ERC20 token.\nThe version of the contract. Starts from 1.\nEthereum bridge pool root proof.\nEthereum proofs contain the <code>secp256k1</code> signatures of …\nAdd a new signature to this <code>EthereumProof</code>.\nAdd a new batch of signatures to this <code>EthereumProof</code>.\nThe signed data.\nThe signed data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap a function over the inner data of this <code>EthereumProof</code>.\nReturn an incomplete <code>EthereumProof</code>.\nThe signatures contained in the proof.\nThe signatures contained in the proof.\nSort signatures based on voting powers in descending order.\nA list of all storage keys\nStorage sub-key space reserved to keeping track of the …\nA wrapper struct for managing keys related to tracking …\nStorage sub-key space reserved to keeping track of the …\nGenerator for the keys under which details of votes for …\nStorage segments of <code>Keys</code>.\nStorage sub-key space reserved to keeping track of the …\nStorage keys values\nGet the <code>body</code> key - there should be a Borsh-serialized <code>T</code> …\nThe data being voted on, corresponding to the <code>T</code> type …\nGet the Keys from the storage key. It returns None if the …\nGet the key prefix corresponding to the storage location of\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the storage key is a key to store the epoch\nReturn true if the storage key is a key to store the <code>seen</code>\nThe prefix under which the details of a piece of data for …\nGet the <code>seen</code> key - there should be a <code>bool</code> stored here.\nWhether more than two thirds of voting power across …\nGet the <code>seen_by</code> key - there should be a <code>BTreeSet&lt;Address&gt;</code> …\nThe validators who have voted on <code>body</code>.\nReturn the storage key segments to be stored under <code>Keys</code>.\nGet the key prefix corresponding to the storage location …\nGet the <code>voting_power</code> key - there should be an …\nThe total voting power behind <code>body</code>.\nGet the <code>voting_started_epoch</code> key - there should be an <code>Epoch</code>…\nThe epoch when voting on <code>body</code> started.\nEthereum bridge pool VP storage\nEthereum bridge VP storage\nInitialize the storage owned by the Bridge Pool VP.\nInitialize the storage owned by the Ethereum Bridge VP.\nThe token cap of an ERC20 asset.\nThe denomination of the ERC20 asset.\nWhitelisted ERC20 token storage sub-space.\nRepresents the type of a key relating to whitelisted ERC20.\nWhether an ERC20 asset is whitelisted or not.\nThe current supply of a wrapped ERC20 asset, circulating …\nThe specific ERC20 as identified by its Ethereum address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if some <code>storage::Key</code> is an Ethereum bridge whitelist …\nThe type of this key.\nThe key holds a wrapped ERC20 balance\nRepresents a key relating to a wrapped ERC20\nRepresents the type of a key relating to a wrapped ERC20\nA type of key which tracks the total supply of some …\nThe specific ERC20 as identified by its Ethereum address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the given key has an ERC20 token\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a NUT token address from an ERC20 address.\nThe type of this key\nConstruct a token address from an ERC20 address.\nThe owner of the balance\nValidity predicate for the Ethereum bridge\nValidity predicate for the Ethereum bridge\nValidity predicate for non-usable tokens.\nGeneric types for DI\nGeneric types for DI\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the validity predicate\nValidate that a wasm transaction is permitted to change …\nRun the validity predicate")