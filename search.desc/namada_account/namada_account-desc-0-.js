searchState.loadedDescShard("namada_account", 0, "Support for signature based authorization of actions on a …\nAccount data\nHolds the public key map data as a bimap for efficient …\nAn account’s address\nAn established address is generated on-chain\nA hash, typically a sha-2 hash of a tx\nAn implicit address is derived from a cryptographic key\nA tx data type to initialize a new established account\nAn internal address represents a module with a native VP\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nA tx data type to update an account’s validity predicate\nAn address of the account\nThe address corresponding to the account owner\nReturn the inner pointer to the hash data.\nClear the public keys account subtorage space\nCryptographic keys\nGiven hashes A and B, compute Sha256(A||B), but if one …\nDecode an address from Bech32m encoding\nEncode an address with Bech32m encoding\nCheck if a user account exists in storage\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a value from an iterator.\nReturns the address from the first key segment if it’s …\nGet all public keys of the account\nReturn the segment at the index parameter\nRetrieve the index of a public key\nRetrieve the index of a public key\nRetrieve a public key from the index\nRetrieve a public key from the index\nHashmap from index key to public key\nIndex the given set of secret keys\nInit the subspace of a new account\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the key is empty\nIf the address established?\nIf the address implicit?\nIf the address internal?\nCheck if the given storage key is a public key. If it is, …\nCheck if the given storage key is a public key. If it is, …\nCheck if the given storage key is a threshol key.\nCheck if the given key is a key to a validity predicate. …\nCheck if the hash is all zeros\nIterates over all addresses in the key segments\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nReturn the length of the hash.\nReturns the length\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nHashmap from public key to index\nLazyMap handler for the user’s public key subspace\nObtain a storage key for user’s public key.\nObtain a storage key for user’s protocol public key.\nGet the public keys associated with an account\nPublic keys to be written into the account’s storage. …\nPublic keys to be written into the account’s storage. …\nGet the public key index map associated with an account\nThe map between indexes and public keys for an account\nReturns a new key with segments of <code>Self</code> and the given …\nTry to get a raw hash of an address, only defined for …\nReveal a PK of an implicit account - the PK is written …\nThe segments of the key in the original (left-to-right) …\nSet public key at specific index\nCompute sha256 of some bytes\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nReturns a sub key without the first segment\nGet the threshold associated with an account\nThe account signature threshold\nThe account signature threshold\nThe account signature threshold\nObtain the storage key for a user threshold\nPrint the type of the address and its bech32m encoded value\nConvert this <code>Hash</code> to a <code>Vec</code>.\nReturns a key of the validity predicate of the given …\nThe VP code hash\nThe new VP code hash\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nReturn zeros\nPublic key\nSignature\nString decoding error\nEncapsulate Ed25519 public keys\nEncapsulate Ed25519 signatures\nEncapsulate Ed25519 public keys\nEncapsulate Ed25519 secret keys\nEncapsulate Ed25519 signatures\nPublic key\nEncapsulate Secp256k1 public keys\nEncapsulate Secp256k1 signatures\nEncapsulate Secp256k1 public keys\nEncapsulate Secp256k1 secret keys\nEncapsulate Secp256k1 signatures\nSecret key\nAn implementation of the common signature scheme\nSignature\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive public key from this secret key")