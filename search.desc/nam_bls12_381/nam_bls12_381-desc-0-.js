searchState.loadedDescShard("nam_bls12_381", 0, "<code>bls12_381</code>\nA <code>pairing::Engine</code> for BLS12-381 pairing operations.\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_1$ represented in the …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nThis structure contains cached computations pertaining to …\nThis is an element of $\\mathbb{G}_2$ represented in the …\nThis is an element of $\\mathbb{G}_T$, the target group of …\nRepresents results of a Miller loop, one of the most …\nRepresents an element of the scalar field $\\mathbb{F}_q$ …\nAdds <code>rhs</code> to <code>self</code>, returning the result.\nAdds this point to another point.\nAdds this point to another point.\nAdds this point to another point in the affine model.\nAdds this point to another point in the affine model.\nConverts a batch of <code>G1Projective</code> elements into <code>G1Affine</code> …\nConverts a batch of <code>G2Projective</code> elements into <code>G2Affine</code> …\nMultiplies by $(1 - z)$, where $z$ is the parameter of …\nClears the cofactor, using Budroni-Pintore. This is …\nDoubles this field element.\nComputes the doubling of this point.\nComputes the doubling of this point.\nDoubles this group element.\nThis performs a “final exponentiation” routine to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to convert a little-endian byte representation of …\nConverts a 512-bit little endian integer into a <code>Scalar</code> by …\nAttempts to deserialize a compressed element. See …\nAttempts to deserialize a compressed element. See …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nConverts from an integer represented in little endian into …\nAttempts to deserialize an uncompressed element. See …\nAttempts to deserialize an uncompressed element. See …\nAttempts to deserialize an uncompressed element, not …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns a fixed generator of the group. See <code>notes::design</code> …\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the identity of the group: the point at infinity.\nReturns the group identity, which is $1$.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this element is the identity (the point at …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is on the curve. This should …\nReturns true if this point is free of an $h$-torsion …\nReturns true if this point is free of an $h$-torsion …\nMultiplies <code>rhs</code> by <code>self</code>, returning the result.\nComputes $$\\sum_{i=1}^n \\textbf{ML}(a_i, b_i)$$ given a …\nNegates <code>self</code>.\nNotes about how the BLS12-381 elliptic curve is designed, …\nReturns one, the multiplicative identity.\nInvoke the pairing function without the use of …\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nExponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …\nSquares this element.\nSubtracts <code>rhs</code> from <code>self</code>, returning the result.\nConverts an element of <code>Scalar</code> into a byte representation in\nSerializes this element into compressed form. See …\nSerializes this element into compressed form. See …\nSerializes this element into uncompressed form. See …\nSerializes this element into uncompressed form. See …\nReturns zero, the additive identity.\nDesign of BLS12-381\nBLS12-381 serialization")