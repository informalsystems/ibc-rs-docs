searchState.loadedDescShard("ibc_middleware_packet_forward", 0, "Rust implementation of the IBC packet forwarding …\nDuration type whose serialization routines are compatible …\nError returned by fallible operations.\nMetadata included in ICS-20 packet memos, related with the …\nPacket that is currently being transmitted to a destination\n<code>InFlightPacket</code> data to facilitate its storage in a …\nPacket forward middleware entrypoint, which intercepts …\nMetadata included in ICS-20 packet memos.\nContext data required by the <code>PacketForwardMiddleware</code>.\nType alias for an <code>InFlightPacket</code>, to enhance code …\nDestination channel.\nChannel of the transfer through the current chain.\nDelete an in-flight packet from storage.\nPacket forward middleware metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize a new <code>Duration</code>.\nGet the denomination of <code>source_denom</code> for this chain, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an immutable ref to the next middleware.\nThe memo of the next forward transfer. This might be …\nReturn a mutable ref to the next middleware.\nSender of the packet on the source chain.\nSender of the packet on the source chain.\nGet an escrow account that will receive funds to be …\nData of the source packet.\nData of the source packet.\nChannel on the sending chain.\nChannel on the sending chain.\nPort on the sending chain.\nPort on the sending chain.\nTimeout height of the original packet.\nTimeout height of the original packet.\nTimeout timestamp of the original packet.\nTimeout timestamp of the original packet.\nDestination port (usually the <code>transfer</code> port).\nPort of the transfer through the current chain.\nHandle receiving a refund from the next hop. This involves …\nReceiver account on the destination chain.\nChannel where the packet was received in the current chain.\nChannel where the packet was received in the current chain.\nPort where the packet was received in the current chain.\nPort where the packet was received in the current chain.\nSequence number of the source packet.\nSequence number of the source packet.\nThe number of retries before a packet is invalidated.\nNumber of retries remaining before the packet is refunded.\nNumber of retries remaining before the packet is refunded.\nRetrieve an in-flight packet from storage.\nHandle sending a refund back to the previous hop. This …\nExecute an ICS-20 transfer. This method returns the …\nSequence number of the packet traversing the <code>port/channel</code> …\nStores an in-flight packet (i.e. a packet that is …\nTimeout duration, relative to some instant (usually a …\nPacket timeout duration.\nTimeout duration, relative to some instant (usually a …\nGiven a timeout duration, return a <code>TimeoutTimestamp</code>, to be …\nWrap an existing middleware in the PFM.\nWrite the <code>acknowledgement</code> of <code>packet</code>, and emit events.")