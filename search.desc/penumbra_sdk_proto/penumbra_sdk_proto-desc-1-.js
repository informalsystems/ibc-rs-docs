searchState.loadedDescShard("penumbra_sdk_proto", 1, "Filters in an <code>AuctionsRequest</code> will be combined using <code>AND</code> …\nRequests <code>ValueView</code>s of delegation tokens for the given …\nContains a <code>ValueView</code> of delegation tokens for the …\nRequests the current FMD parameters from the view service.\nRequests the current gas prices from the view service.\nRequests the latest swaps controlled by the user’s …\nA query for notes to be used for voting on a proposal.\nA query for notes known by the view service.\nA note plaintext with associated metadata about its status.\nRequests sync status of the view service.\nReturns the status of the view service and whether it is …\nRequests streaming updates on the sync height until the …\nA streaming sync status update\nThere’s only one transparent address per wallet, so this …\nRequests unbonding tokens for a given address index, with …\nReturns unbonding tokens for the given address index, …\nDeprecated: use <code>account_address</code> instead.\nThe default address for the account.\nIf present, filter balances to only include the account …\nIf present, filter balances to only include the account …\nIf present, filter balances to only include the account …\nThe raw (binary) transparent address\nWill be absent if given an address not viewable by this …\nIf set, only return notes with the specified address …\nIf set, only return notes with the specified asset id.\nA precomputed decryption of the note’s address …\nThe address index to fetch delegation balances for.\nThe address index to fetch unbonding tokens for.\nIf present, limit the responses to activity that occured …\nOther gas prices for other accepted tokens.\nIf set, stop returning notes once the total exceeds this …\nIf set, only return notes with the specified asset id.\nThe asset id to request information on.\nIf present, filter balances to only include the specified …\nThe state of the returned auction.\nIf present, filter to only include auctions whose IDs are …\nNested message and enum types in <code>AuthorizeAndBuildResponse</code>.\nIf true, wait for the view service to detect the …\nIf set to true, waits to return until the requested note …\nIf set to true, waits to return until the requested swap …\nDeprecated: use <code>balance_view</code> instead.\nThe account’s balance, with metadata.\nThe block height at which this swap occurred.\nNested message and enum types in …\nWhether the view service is catching up with the chain …\nWhether the unbonding token is currently claimable. This …\nNested message and enum types in …\nIf present, information on the requested asset.\nThe t-address encoding of the transparent address\nIf present, return only transactions before this height.\nThe epoch of the transaction being planned.\nThe epoch index of the transaction being planned.\nThe expiry height for the requested TransactionPlan\nSpecifies either that the planner should compute fees …\nReturns the enum value of <code>filter</code>, or the default if the …\nReturns the enum value of <code>filter</code>, or the default if the …\nIf set to false (default), returns all assets, regardless …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height the view service has synchronized to so far …\nThe height the view service has synchronized to so far …\nThe current gas prices, in the preferred (native) token.\nThe height the transaction was included in a block, if …\nThe height at which the note was created.\nRecords whether the note was spent (and if so, at what …\nThe transaction hash to query for.\nThe hash of the transaction.\nThe hash of the transaction that was broadcast.\nInclude all delegation tokens, to any validator, in the …\nIf present, include inactive auctions as well as active …\nInclude all LP NFTs in the response.\nInclude all proposal NFTs in the response.\nInclude these specific denominations in the response.\nIf set, return spent notes as well as unspent notes.\nInclude all unbonding tokens, from any validator, in the …\nInclude all voting receipt tokens in the response.\nThe input value for the swap.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe latest known block height\nThe sequence number of the auction state <em>as known to the </em>…\nThe memo for the requested TransactionPlan. The memo must …\nThe note plaintext itself.\nThe note commitment, identifying the note.\nThe note recording the auction NFT.\nThe note’s nullifier.\nThe output value received from the swap.\nRequest contents\nIf present, filter balances to only include trading …\nThe trading pair involved in this swap.\nThe height the view service has synchronized to so far …\nThe height the view service has synchronized to so far …\nThe transaction perspective, as seen by this view server.\nThe note position.\nIf present, return only positions with this position state.\nThe state of any DEX positions relevant to the returned …\nIf set, query a fullnode for the current state of the …\nLimit the response to the last entries within …\nThe sender’s return address, if known.\nSets <code>filter</code> to the provided enum value.\nSets <code>filter</code> to the provided enum value.\nIf present, only spends funds from the given account.\nThe source of the note\nIf present, return only transactions after this height.\nIf present, return only positions for this subaccount …\nThe subaccount this position belongs to.\nIf present, return only positions for this trading pair.\nThe transaction to broadcast.\nThe transaction data itself.\nThe transaction plan to authorize and build.\nThe transaction plan to witness\nNested message and enum types in <code>TransactionPlannerRequest</code>.\nNested message and enum types in …\nA <code>ValueView</code> representing the amount of the given unbonding …\nA precomputed transaction view of <code>transaction</code> from …\nGenerated client implementations.\nGenerated server implementations.\nThe starting height of the proposal.\nNested message and enum types in <code>WitnessAndBuildResponse</code>.\nSignals that building is in progress.\nSignals that the transaction is complete.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAn approximate progress of the build, from 0 to 1.\nThe finished transaction.\nSignals that the transaction was broadcast successfully …\nSignals that the transaction has been confirmed on-chain …\nThe height in which the transaction was detected as …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the transaction that was broadcast.\nThe hash of the transaction that was broadcast.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturn delegations for all validators, whether active or …\nReturns only delegations to active validators that the …\nBy default, returns delegations for all active validators. …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Filter</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Filter</code>.\nAutomatically compute a fee based on gas use.\nSpecifies either that the planner should compute fees …\nA manually set fee, rather than automatically computing a …\nRequest message subtypes\nThe address to which Output will be sent.\nThe source address from which the Spend will be sent.\nThe unique id of the auction to close.\nThe auction to withdraw funds from.\nThe address to which swap claim output will be sent.\nThe description of the auction to schedule.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nThe pre-paid fee to be paid for claiming the Swap outputs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe penalty applied to undelegation, in bps^2 (10e-8). In …\nContains the data defining the position, sufficient to …\nThe position to close.\nThe position to withdraw.\nThe proposal being voted on.\nThe validators rate data for the proposal.\nThe position’s final reserves.\nThe sequence number of the withdrawal.\nThe block height at which the proposal started voting.\nThe epoch in which unbonding began, used to verify the …\nThe position of the state commitment tree at which the …\nSwapCommitment to identify the Swap to be claimed. Use the …\nThe denomination to be received as a Output of the Swap.\nThe trading pair of the position.\nThe amount of unbonding tokens to claim. This is a bare …\nThe height at which unbonding began.\nThe identity key of the validator to finish undelegating …\nThe amount and denomination in which the Output is issued.\nThe input amount and denomination in which the Spend is …\nThe input amount and denomination to be traded in the Swap.\nThe vote.\nReturn all unbonding tokens that are currently claimable. …\nReturn all unbonding tokens that are not yet claimable, …\nReturn all unbonding tokens, regardless of whether they’…\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Filter</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Filter</code>.\nThe view RPC is used by a view client, who wants to do some\nEnable decompressing responses.\nQuery for an address given an address index\nQuery for the current app parameters.\nQuery for metadata about a specific asset, by asset ID.\nQueries for metadata about known assets. Returns a stream …\nGets the auctions controlled by the user’s wallet.\nAuthorize a transaction plan and build the transaction.\nQuery for balance of a given address. Returns a stream of …\nBroadcast a transaction to the network, optionally waiting …\nAttempt to create a new client by connecting to a given …\nGet delegation tokens for a given address index. Each …\nQuery for an ephemeral address\nQuery for the current FMD parameters.\nReturns the argument unchanged.\nQuery for the current gas prices.\nQuery for an address given an address index\nCalls <code>U::from(self)</code>.\nGets the latest swaps controlled by the user’s wallet.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nQuery for a note by its note commitment, optionally …\nQueries for notes that have been accepted by the chain. …\nReturns a stream of <code>NotesForVotingResponse</code>s.\nQuery for whether a nullifier has been spent, optionally …\nQuery for owned position IDs for the given trading pair …\nCompress requests with the given encoding.\nGet current status of chain sync\nStream sync status updates until the view service has …\nQuery for a swap by its swap commitment, optionally …\nQuery for the full transactions in the given range of …\nQuery for a given transaction by its hash.\nTranslates a high-level intent (“send X funds to Y …\nReturns the transparent address for the user’s wallet.\nGet unbonding tokens for the given address index, …\nQuery for all unclaimed swaps.\nQuery for wallet id\nReturns authentication data for the given transaction plan.\nLike <code>Witness</code>, but immediately uses the witness data to …\nServer streaming response type for the Assets method.\nServer streaming response type for the Auctions method.\nServer streaming response type for the AuthorizeAndBuild …\nServer streaming response type for the Balances method.\nServer streaming response type for the …\nServer streaming response type for the …\nServer streaming response type for the LatestSwaps method.\nServer streaming response type for the NotesForVoting …\nServer streaming response type for the Notes method.\nServer streaming response type for the OwnedPositionIds …\nGenerated gRPC service name\nServer streaming response type for the StatusStream method.\nServer streaming response type for the TransactionInfo …\nServer streaming response type for the …\nServer streaming response type for the UnclaimedSwaps …\nGenerated trait containing gRPC methods that should be …\nThe view RPC is used by a view client, who wants to do some\nServer streaming response type for the WitnessAndBuild …\nEnable decompressing requests with the given encoding.\nQuery for an address given an address index\nQuery for the current app parameters.\nQuery for metadata about a specific asset, by asset ID.\nQueries for metadata about known assets. Returns a stream …\nGets the auctions controlled by the user’s wallet.\nAuthorize a transaction plan and build the transaction.\nQuery for balance of a given address. Returns a stream of …\nBroadcast a transaction to the network, optionally waiting …\nGet delegation tokens for a given address index. Each …\nQuery for an ephemeral address\nQuery for the current FMD parameters.\nReturns the argument unchanged.\nQuery for the current gas prices.\nQuery for an address given an address index\nCalls <code>U::from(self)</code>.\nGets the latest swaps controlled by the user’s wallet.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nQuery for a note by its note commitment, optionally …\nQueries for notes that have been accepted by the chain. …\nReturns a stream of <code>NotesForVotingResponse</code>s.\nQuery for whether a nullifier has been spent, optionally …\nQuery for owned position IDs for the given trading pair …\nCompress responses with the given encoding, if the client …\nGet current status of chain sync\nStream sync status updates until the view service has …\nQuery for a swap by its swap commitment, optionally …\nQuery for the full transactions in the given range of …\nQuery for a given transaction by its hash.\nTranslates a high-level intent (“send X funds to Y …\nReturns the transparent address for the user’s wallet.\nGet unbonding tokens for the given address index, …\nQuery for all unclaimed swaps.\nQuery for wallet id\nReturns authentication data for the given transaction plan.\nLike <code>Witness</code>, but immediately uses the witness data to …\nSignals that building is in progress.\nSignals that the transaction is complete.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAn approximate progress of the build, from 0 to 1.\nThe finished transaction.\nBech32 serializers. Because Bech32 is parameterized by the …\nThe original Bech32 described in BIP-0173\nThe improved Bech32m variant described in BIP-0350\nUsed for encode/decode operations for the two variants of …\nConvenience method for (general-purpose) Bech32 decoding.\nConvenience method for (general-purpose) Bech32 encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Bech32 prefix used for addresses.\nThe Bech32 prefix used for asset IDs.\nThe Bech32 prefix used for Auction IDs.\nThe Bech32 prefix used for compat addresses (Bech32, not …\nThe Bech32 prefix used for full viewing keys.\nThe Bech32 prefix used for LP IDs.\nThe Bech32 prefix used for spend keys.\nThe Bech32 prefix used for validator governance keys.\nThe Bech32 prefix used for validator identity keys.\nThe Bech32 prefix used for wallet ids.\nGets a value from the verifiable key-value store as a …\nGets a value from the verifiable key-value store as a …\nGets a value from the verifiable key-value store as a …\nGets a value from the verifiable key-value store as a …\nGets a value from the nonverifiable key-value store as a …\nGets a value from the nonverifiable key-value store as a …\nGets a value from the nonverifiable key-value store as a …\nGets a value from the nonverifiable key-value store as a …\nRetrieve all values for keys matching a prefix from …\nRetrieve all values for keys matching a prefix from …\nRetrieve all values for keys matching a prefix from the …\nRetrieve all values for keys matching a prefix from the …\nPuts a domain type into the nonverifiable key-value store …\nPuts a domain type into the nonverifiable key-value store …\nPuts a proto type into the verifiable key-value store with …\nPuts a proto type into the verifiable key-value store with …\nRetrieve all values for keys matching a prefix from …\nRetrieve all values for keys matching a prefix from …\nRetrieve all values for keys matching a prefix from the …\nRetrieve all values for keys matching a prefix from the …\nPuts a domain type into the verifiable key-value store …\nPuts a domain type into the verifiable key-value store …\nPuts a proto type into the verifiable key-value store with …\nPuts a proto type into the verifiable key-value store with …\nRecords a Protobuf message as a typed ABCI event.\nRecords a Protobuf message as a typed ABCI event.\nA future that resolves to a domain type.\nA future that resolves to a protobuf message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent allows application developers to attach additional …\nEventAttribute is a single key-value pair, associated with …\nApplies a snapshot chunk\nlists available snapshots\nloads a snapshot chunk\noffers a snapshot to the application\nnondeterministic\nTxResult contains results of executing the transaction.\nValidator\nValidatorUpdate\nVoteInfo\nGenerated client implementations.\nGenerated server implementations.\nThe first 20 bytes of SHA256(public key)\nlight client-verified app hash for snapshot height\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNumber of chunks in the snapshot\nreserve 1\nnondeterministic\nThe application-specific snapshot format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>CheckTxType</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>MisbehaviorType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nhash is the merkle root hash of the fields of the proposed …\nArbitrary snapshot hash, equal only if identical\nThe height when the offense occurred\nThe height at which the snapshot was taken\nnondeterministic\nnondeterministic\nnondeterministic\nnondeterministic\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>CheckTxType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MisbehaviorType</code>.\nbytes data = 2; // use “value” instead.\nnondeterministic\nnondeterministic\nthe modified transactions cannot exceed this size.\nmempool_error is set by CometBFT. ABCI applictions …\nArbitrary application metadata\nPubKey pub_key = 2 [(gogoproto.nullable)=false];\naddress of the public key of the validator proposing the …\naddress of the public key of the original proposer of the …\nChunks to refetch and reapply\nChunk senders to reject and ban\nNested message and enum types in <code>Request</code>.\nNested message and enum types in <code>Response</code>.\nNested message and enum types in <code>ResponseApplySnapshotChunk</code>…\nNested message and enum types in <code>ResponseOfferSnapshot</code>.\nNested message and enum types in <code>ResponseProcessProposal</code>.\nReturns the enum value of <code>result</code>, or the default if the …\nReturns the enum value of <code>result</code>, or the default if the …\nThe round at which the block proposer decided in the …\nSets <code>result</code> to the provided enum value.\nSets <code>result</code> to the provided enum value.\nSets <code>status</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nsnapshot offered by peers\nReturns the enum value of <code>status</code>, or the default if the …\nThe corresponding time where the offense occurred\nTotal voting power of the validator set in case the ABCI …\ntxs is an array of transactions that will be included in a …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nThe offending validator\nReserved for future use\nList of validators’ addresses in the last validator set …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAbort all snapshot restoration\nChunk successfully accepted\nReject this snapshot, try others\nRetry chunk (combine with refetch and reject)\nRetry snapshot (combine with refetch and reject)\nUnknown result, abort all snapshot restoration\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Result</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Result</code>.\nAbort all snapshot restoration\nSnapshot accepted, apply chunks\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nUnknown result, abort all snapshot restoration\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Result</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Result</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ProposalStatus</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ProposalStatus</code>.\nProofOp defines an operation used for calculating Merkle …\nProofOps is Merkle proof defined by the list of ProofOps\nPublicKey defines the keys available for use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncoded in ProofOp.Key.\nTo encode in ProofOp.Data\nNested message and enum types in <code>PublicKey</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlockID\nBlockIdFlag indicates which BlcokID the signature is for\nBlockParams contains limits on the block size.\nCommit contains the evidence that a block was committed by …\nCommitSig is a part of the Vote included in a Commit.\nConsensusParams contains consensus critical parameters …\nData contains the set of transactions included in the block\nDuplicateVoteEvidence contains evidence of a validator …\nEvidenceParams determine how we handle evidence of …\nHashedParams is a subset of ConsensusParams.\nHeader defines the structure of a block header.\nLightClientAttackEvidence contains evidence of a set of …\nPartsetHeader\nVotes\nProposals\nSignedMsgType is a type of signed message in the consensus.\nTxProof represents a Merkle proof of the presence of a …\nValidatorParams restrict the public key types validators …\nVersionParams contains the ABCI application version.\nVote represents a prevote, precommit, or commit vote from …\nstate after txs from the previous block\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nzero if vote is nil.\nReturns the enum value of <code>block_id_flag</code>, or the default if …\nconsensus params for current block\ntransactions\nNested message and enum types in <code>Evidence</code>.\nconsensus info\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BlockIdFlag</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>SignedMsgType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BlockIdFlag</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SignedMsgType</code>.\nprev block info\nhashes of block data\nroot hash of all results from the txs from the previous …\nMax age of evidence, in time.\nMax age of evidence, in blocks.\nMax block size, in bytes. Note: must be greater than 0\nThis sets the maximum size of total evidence in bytes that …\nMax gas per block. Note: must be greater or equal to -1\nvalidators for the next block\noriginal proposer of the block\nSets <code>block_id_flag</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nTxs that will be applied by state @ block.Height+1. NOTE: …\nReturns the enum value of <code>type</code>, or the default if the …\nReturns the enum value of <code>type</code>, or the default if the …\nhashes from the app output from the prev block\nbasic block info\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nApp includes the protocol and software version for the …\nConsensus captures the consensus rules for processing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")