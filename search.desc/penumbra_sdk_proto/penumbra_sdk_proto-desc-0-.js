searchState.loadedDescShard("penumbra_sdk_proto", 0, "Protobuf definitions for Penumbra.\nA marker type that captures the relationships between a …\nA Protocol Buffers message.\nSimple name for this <code>Message</code>. This name is the same as it …\nAssociate a type name with a <code>Message</code> type.\nPackage name this message type is contained in. They are …\nClears the message, resetting all fields to their default.\nDecodes an instance of the message from a buffer.\nDecode this domain type from a byte buffer, via proto type …\nDecode this domain type from a byte buffer, via proto type …\nDecodes a length-delimited instance of the message from …\nEncodes the message to a buffer.\nEncodes the message with a length-delimiter to a buffer.\nEncodes the message with a length-delimiter to a newly …\nEncodes the message to a newly allocated buffer.\nEncode this domain type to a byte vector, via proto type <code>P</code>.\nEncode this domain type to a byte vector, via proto type <code>P</code>.\nReturns the encoded length of the message without a length …\nHelper trait for using Protobuf messages as ABCI events.\nFully-qualified unique name for this <code>Message</code>. It’s …\nDecodes an instance of the message from a buffer, and …\nDecodes a length-delimited instance of the message from …\nHelper methods used for shaping the JSON (and other Serde) …\nConvert this domain type to the associated proto type.\nConvert this domain type to the associated proto type.\nType URL for this <code>Message</code>, which by default is the full …\nA type-erased gRPC service.\nA type-erased gRPC response <code>Body</code>.\nConnects to the provided tonic <code>Endpoint</code>, returning a …\nConstructs a <code>BoxGrpcService</code> by erasing the type of an <code>S</code>…\nBaseAccount defines a base account type. It contains all …\nModuleAccount defines an account for modules that holds …\nModuleCredential represents a unclaimable pubkey for base …\nParams defines the parameters for the auth module.\nderivation_keys is for deriving a module account address …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmodule_name is the name of the module used for address …\nDenomOwner defines structure representing an account that …\nDenomUnit represents a struct that describes a given …\nInput models transaction input.\nMetadata represents a struct that describes a basic token.\nOutput models transaction outputs.\nParams defines the parameters for the bank module.\nQueryBalanceRequest is the request type for the …\nQueryAllBalancesResponse is the response type for the …\nQueryBalanceRequest is the request type for the …\nQueryBalanceResponse is the response type for the …\nQueryDenomMetadataRequest is the request type for the …\nQueryDenomMetadataResponse is the response type for the …\nQueryDenomOwnersRequest defines the request type for the …\nQueryDenomOwnersResponse defines the RPC response of a …\nQueryDenomsMetadataRequest is the request type for the …\nQueryDenomsMetadataResponse is the response type for the …\nQueryParamsRequest defines the request type for querying …\nQueryParamsResponse defines the response type for querying …\nQuerySendEnabledRequest defines the RPC request for …\nQuerySendEnabledResponse defines the RPC response of a …\nQuerySpendableBalanceByDenomRequest defines the gRPC …\nQuerySpendableBalanceByDenomResponse defines the gRPC …\nQuerySpendableBalancesRequest defines the gRPC request …\nQuerySpendableBalancesResponse defines the gRPC response …\nQuerySupplyOfRequest is the request type for the …\nQuerySupplyOfResponse is the response type for the …\nQueryTotalSupplyRequest is the request type for the …\nQueryTotalSupplyResponse is the response type for the …\nSendEnabled maps coin denom to a send_enabled status …\nSupply represents a struct that passively keeps track of …\naddress is the address to query balances for.\naddress is the address to query balances for.\naddress is the address to query spendable balances for.\naddress is the address to query balances for.\naddress defines the address that owns a particular …\naliases is a list of string aliases for the given denom\namount is the supply of the coin.\nbalance is the balance of the coin.\nbalance is the balance of the coin.\nbalance is the balance of the denominated coin for an …\nbalances is the balances of all the coins.\nbalances is the spendable balances of all the coins.\nbase represents the base denom (should be the DenomUnit …\ndenom represents the string name of the given denom unit …\ndenom is the coin denom to query balances for.\ndenom is the coin denom to query balances for.\ndenom is the coin denom to query balances for.\ndenom is the coin denom to query the metadata for.\ndenom defines the coin denomination to query all account …\ndenom_units represents the list of DenomUnit’s for a …\ndenoms is the specific denoms you want look up. Leave …\ndisplay indicates the suggested denom that should be …\nexponent represents power of 10 exponent that one must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmetadata describes and provides all the client information …\nmetadata provides the client information for all the …\nname defines the name of the token (eg: Cosmos Atom)\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\npagination defines an optional pagination for the request. …\npagination defines the pagination in the response. This …\nGenerated client implementations.\nGenerated server implementations.\nresolve_denom is the flag to resolve the denom into a …\nDeprecated: Use of SendEnabled in params is deprecated. …\nsupply is the supply of the coins\nsymbol is the token symbol usually shown on exchanges (eg: …\nURI to a document (on or off-chain) that contains …\nURIHash is a sha256 hash of a document pointed by URI. It…\nQuery defines the gRPC querier service.\nEnable decompressing responses.\nAllBalances queries the balance of all coins for a single …\nBalance queries the balance of a single coin for a single …\nAttempt to create a new client by connecting to a given …\nDenomsMetadata queries the client metadata of a given coin …\nDenomOwners queries for all account addresses that own a …\nDenomsMetadata queries the client metadata for all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries the parameters of x/bank module.\nCompress requests with the given encoding.\nSendEnabled queries for SendEnabled entries.\nSpendableBalanceByDenom queries the spendable balance of a …\nSpendableBalances queries the spendable balance of all …\nSupplyOf queries the supply of a single coin.\nTotalSupply queries the total supply of all coins.\nGenerated trait containing gRPC methods that should be …\nQuery defines the gRPC querier service.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nAllBalances queries the balance of all coins for a single …\nBalance queries the balance of a single coin for a single …\nDenomsMetadata queries the client metadata of a given coin …\nDenomOwners queries for all account addresses that own a …\nDenomsMetadata queries the client metadata for all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries the parameters of x/bank module.\nCompress responses with the given encoding, if the client …\nSendEnabled queries for SendEnabled entries.\nSpendableBalanceByDenom queries the spendable balance of a …\nSpendableBalances queries the spendable balance of all …\nSupplyOf queries the supply of a single coin.\nTotalSupply queries the total supply of all coins.\nABCIMessageLog defines a structure containing an indexed …\nAttribute defines an attribute wrapper where the key and …\nGasInfo defines tx execution gas context.\nMsgData defines the data returned in a Result object …\nResult is the union of ResponseFormat and ResponseCheckTx.\nSearchBlocksResult defines a structure for querying blocks …\nSearchTxsResult defines a structure for querying txs …\nSimulationResponse defines the response generated when a …\nStringEvent defines en Event object wrapper where all the …\nTxMsgData defines a list of MsgData. A transaction will …\nTxResponse defines a structure containing relevant tx data …\nList of blocks in current page\nResponse code.\nNamespace for the Code\nCount of txs in current page\nCount of blocks in current page\nResult bytes, if any.\nData is any data returned from message or handler …\ndata field is deprecated and not populated.\nEvents defines all the events emitted by processing a …\nEvents contains a slice of Event objects that were emitted …\nEvents contains a slice of Event objects that were emitted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of gas consumed by transaction.\nGasUsed is the amount of gas actually consumed.\nAmount of gas requested for transaction.\nGasWanted is the maximum units of work we allow this tx to …\nThe block height\nAdditional information. May be non-deterministic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax count txs per page\nMax count blocks per page\nLog contains the log information from message or handler …\nThe output of the application’s logger (typed). May be …\nmsg_responses contains the Msg handler responses type …\nmsg_responses contains the Msg handler responses packed …\nIndex of current page, start from 1\nIndex of current page, start from 1\nCount of total pages\nCount of total pages\nThe output of the application’s logger (raw string). May …\nTime of the previous block. For heights &gt; 1, it’s the …\nCount of all txs\nCount of all blocks\nThe request transaction bytes.\nThe transaction hash.\nList of txs in current page\nPageRequest is to be embedded in gRPC request messages for …\nPageResponse is to be embedded in gRPC response messages …\ncount_total is set to true  to indicate that the result …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey is a value returned in PageResponse.next_key to begin …\nlimit is the total number of results to be returned in the …\nnext_key is the key to be passed to PageRequest.key to …\noffset is a numeric offset that can be used when key is …\nreverse is set to true if results are to be returned in …\ntotal is total number of results available if …\nCoin defines a token with a denomination and an amount.\nDecCoin defines a token with a denomination and a decimal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompactBitArray is an implementation of a space efficient …\nMultiSignature wraps the signatures from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfig is the config object of the x/auth/tx package.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nskip_ante_handler defines whether the ante handler …\nskip_post_handler defines whether the post handler …\nSIGN_MODE_DIRECT specifies a signing mode which uses …\nSIGN_MODE_DIRECT_AUX specifies a signing mode which uses …\nSIGN_MODE_EIP_191 specifies the sign mode for EIP 191 …\nSIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility …\nSignMode represents a signing mode with its own security …\nSignatureDescriptor is a convenience type which represents …\nSignatureDescriptors wraps multiple SignatureDescriptor’…\nSIGN_MODE_TEXTUAL is a future signing mode that will …\nSIGN_MODE_UNSPECIFIED specifies an unknown signing mode …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SignMode</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SignMode</code>.\npublic_key is the public key of the signer\nsequence is the sequence of the account, which describes …\nNested message and enum types in <code>SignatureDescriptor</code>.\nsignatures are the signature descriptors\nData represents signature data\nNested message and enum types in <code>Data</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsum is the oneof that specifies whether this represents …\nMulti is the signature data for a multisig public key\nmulti represents a multisig signer\nSingle is the signature data for a single signer\nsingle represents a single signer\nsum is the oneof that specifies whether this represents …\nbitarray specifies which keys within the multisig are …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the enum value of <code>mode</code>, or the default if the …\nmode is the signing mode of the single signer\nSets <code>mode</code> to the provided enum value.\nsignature is the raw signature bytes\nsignatures is the signatures of the multi-signature\nORDER_BY_ASC defines ascending order\nBROADCAST_MODE_ASYNC defines a tx broadcasting mode where …\nAuthInfo describes the fee and signer modes that are used …\nAuxSignerData is the intermediary format that an auxiliary …\nDEPRECATED: use BROADCAST_MODE_SYNC instead, …\nBroadcastMode specifies the broadcast mode for the …\nBroadcastTxRequest is the request type for the …\nBroadcastTxResponse is the response type for the …\nORDER_BY_DESC defines descending order\nFee includes the amount of coins paid in fees and the …\nGetBlockWithTxsRequest is the request type for the …\nGetBlockWithTxsResponse is the response type for the …\nGetTxRequest is the request type for the Service.GetTx RPC …\nGetTxResponse is the response type for the Service.GetTx …\nGetTxsEventRequest is the request type for the …\nGetTxsEventResponse is the response type for the …\nModeInfo describes the signing mode of a single or nested …\nOrderBy defines the sorting order\nSignDoc is the type used for generating sign bytes for …\nSignDocDirectAux is the type used for generating sign …\nSignerInfo describes the public key and signing mode of a …\nSimulateRequest is the request type for the …\nSimulateResponse is the response type for the …\nBROADCAST_MODE_SYNC defines a tx broadcasting mode where …\nTip is the tip used for meta-transactions.\nTx is the standard type used for broadcasting transactions.\nTxBody is the body of a transaction that all signers sign …\nTxDecodeAminoRequest is the request type for the …\nTxDecodeAminoResponse is the response type for the …\nTxDecodeRequest is the request type for the …\nTxDecodeResponse is the response type for the …\nTxEncodeAminoRequest is the request type for the …\nTxEncodeAminoResponse is the response type for the …\nTxEncodeRequest is the request type for the …\nTxEncodeResponse is the response type for the …\nTxRaw is a variant of Tx that pins the signer’s exact …\nORDER_BY_UNSPECIFIED specifies an unknown sorting order. …\nzero-value for mode ordering\naccount_number is the account number of the account in …\naccount_number is the account number of the account in …\naddress is the bech32-encoded address of the auxiliary …\namount is the amount of coins to be paid as a fee\namount is the amount of the tip\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nauth_info is the authorization related content of the …\nauth_info_bytes is a protobuf serialization of an AuthInfo …\nauth_info_bytes is a protobuf serialization of an AuthInfo …\nbody is the processable content of the transaction\nbody_bytes is a protobuf serialization of a TxBody that …\nbody_bytes is protobuf serialization of a TxBody that …\nbody_bytes is protobuf serialization of a TxBody that …\nchain_id is the unique identifier of the chain this …\nchain_id is the identifier of the chain this transaction …\nevents is the list of transaction event type. Deprecated …\nextension_options are arbitrary options that can be added …\nFee is the fee and gas limit for the transaction. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>OrderBy</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>BroadcastMode</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\ngas_info is the information about gas used in the …\ngas_limit is the maximum gas that can be used in …\nif set, the fee payer (either the first signer or the …\nhash is the tx hash to query, encoded as a hex string.\nheight is the height of the block to query.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>OrderBy</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BroadcastMode</code>.\nlimit is the total number of results to be returned in the …\nmemo is any arbitrary note/comment to be added to the …\nmessages is a list of messages to be executed. The …\nReturns the enum value of <code>mode</code>, or the default if the …\nReturns the enum value of <code>mode</code>, or the default if the …\nmode is the signing mode of the single signer.\nNested message and enum types in <code>ModeInfo</code>.\nmode_info describes the signing mode of the signer and is …\nextension_options are arbitrary options that can be added …\nReturns the enum value of <code>order_by</code>, or the default if the …\npage is the page number to query, starts at 1. If not …\npagination defines a pagination for the request. …\npagination defines a pagination for the response. …\npagination defines a pagination for the request.\npagination defines a pagination for the response.\nif unset, the first signer is responsible for paying the …\npublic_key is the public key of the signing account.\npublic_key is the public key of the signer. It is optional …\nquery defines the transaction event query that is proxied …\nresult is the result of the simulation.\nsequence is the sequence number of the signing account.\nsequence is the sequence of the account, which describes …\nGenerated client implementations.\nGenerated server implementations.\nSets <code>mode</code> to the provided enum value.\nSets <code>mode</code> to the provided enum value.\nSets <code>order_by</code> to the provided enum value.\nsig is the signature of the sign doc.\nsign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the …\nsignatures is a list of signatures that matches the length …\nsignatures is a list of signatures that matches the length …\nsigner_infos defines the signing modes for the required …\nsum is the oneof that specifies whether this represents a …\ntimeout is the block height after which this transaction …\nTip is the optional tip used for transactions fees paid in …\nTip is the optional tip used for transactions fees paid in …\ntipper is the address of the account paying for the tip\ntotal is total number of results available\ntx is the transaction to simulate. Deprecated. Send raw tx …\ntx is the queried transaction.\ntx is the decoded transaction.\ntx is the transaction to encode.\ntx_bytes is the raw transaction.\ntx_bytes is the raw transaction.\ntx_bytes is the raw transaction.\ntx_bytes is the encoded transaction bytes.\ntx_response is the queried TxResponses.\ntx_response is the queried TxResponses.\ntx_responses is the list of queried TxResponses.\ntxs is the list of queried transactions.\ntxs are the transactions in the block.\nMulti is the mode info for a multisig public key\nmulti represents a nested multisig signer\nSingle is the mode info for a single signer. It is …\nsingle represents a single signer\nsum is the oneof that specifies whether this represents a …\nbitarray specifies which keys within the multisig are …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the enum value of <code>mode</code>, or the default if the …\nmode is the signing mode of the single signer\nmode_infos is the corresponding modes of the signers of …\nSets <code>mode</code> to the provided enum value.\nService defines a gRPC service for interacting with …\nEnable decompressing responses.\nBroadcastTx broadcast transaction.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nGetBlockWithTxs fetches a block with decoded txs.\nGetTx fetches a tx by hash.\nGetTxsEvent fetches txs by event.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nSimulate simulates executing a transaction for estimating …\nTxDecode decodes the transaction.\nTxDecodeAmino decodes an Amino transaction from encoded …\nTxEncode encodes the transaction.\nTxEncodeAmino encodes an Amino transaction from JSON to …\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nService defines a gRPC service for interacting with …\nEnable decompressing requests with the given encoding.\nBroadcastTx broadcast transaction.\nReturns the argument unchanged.\nGetBlockWithTxs fetches a block with decoded txs.\nGetTx fetches a tx by hash.\nGetTxsEvent fetches txs by event.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nSimulate simulates executing a transaction for estimating …\nTxDecode decodes the transaction.\nTxDecodeAmino decodes an Amino transaction from encoded …\nTxEncode encodes the transaction.\nTxEncodeAmino encodes an Amino transaction from JSON to …\nAn extension trait allowing for easy conversion from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nGenerated client implementations.\nGenerated server implementations.\nNested message and enum types in <code>RegisterAccountMemo</code>.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCore protocol structures.\nCryptography primitives used by Penumbra.\nCustody protocol structures.\nView protocol structures.\nTop-level structures for the Penumbra application.\nComponents of the Penumbra application.\nTransaction structures.\nRequests the global configuration data for the app.\nRequests the list of all transactions that occurred within …\nA transaction that appeared within a given block.\nAuction component genesis state.\nAuction module parameters.\nThe block height to retrieve.\nThe block height.\nThe chain identifier.\nThe initial chain identifier.\nCommunity Pool module genesis state.\nCommunity Pool module parameters.\nDEX component genesis state.\nDEX module parameters.\nDistributions module genesis state.\nDistributions module parameters.\nFee module genesis state.\nFee module parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunding module genesis state.\nFunding module parameters.\nNested message and enum types in <code>GenesisAppState</code>.\nGovernance module genesis state.\nGovernance module parameters.\nIBC module genesis state.\nIBC module parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nSct module genesis state.\nSct module parameters.\nShielded pool module genesis state.\nShielded pool module parameters.\nStake module genesis state.\nStake module parameters.\nThe transactions.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nQuery operations for the overall Penumbra application.\nEnable decompressing responses.\nGets the app parameters.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nReturns the CometBFT transactions that occurred during a …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the overall Penumbra application.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nGets the app parameters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the CometBFT transactions that occurred during a …\nA Penumbra asset ID.\nAn image related to an asset.\nDenomUnit represents a struct that describes a given …\nAn “equivalent” value to a given value, in terms of a …\nThe estimated price of one asset in terms of a numeraire.\nDescribes metadata about a given asset.\nRepresents a value of a known or unknown denomination.\naliases is a list of string aliases for the given denom\nAlternatively, a base denomination string which should be …\nAlternatively, a Bech32m-encoded string representation of …\nIf set, gives some idea of when the price was estimated.\nIf set, gives some idea of when the price/equivalence was …\nNested message and enum types in <code>AssetImage</code>.\nAssociated icons for asset. For ibc assets, usually an …\nNested message and enum types in <code>Balance</code>.\nbase represents the base denom (should be the DenomUnit …\nCoingecko ID for the asset.\ndenom represents the string name of the given denom unit …\ndenom_units represents the list of DenomUnit’s for a …\ndisplay indicates the suggested denom that should be …\nThe equivalent amount of the parent Value in terms of the …\nexponent represents power of 10 exponent that one must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bytes of the asset ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname defines the name of the token (eg: Cosmos Atom)\nMetadata describing the numeraire.\nMultiply units of the priced asset by this value to get …\nthe asset ID on Penumbra for this denomination.\nThe URI of the image in PNG format.\nAn optional “score” used to prioritize token lists.\nThe URI of the image in SVG format.\nsymbol is the token symbol usually shown on exchanges (eg: …\nNested message and enum types in <code>ValueView</code>.\nRepresents the vector of ’Value’s in the balance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShould be in hex format, <code>^#\\[0-9a-fA-F\\]{6}$</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA value whose asset ID is known and has metadata.\nA value whose asset ID is unknown, with no metadata.\nThe amount of the value.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nOptionally, a list of equivalent values in other …\nOptionally, extended, dynamically-typed metadata about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe asset metadata describing the asset of the value.\nTerminate the auction associated with the specified …\nInitiates a Dutch auction using protocol-controlled …\nAn <code>ActionDutchAuctionSchedule</code> augmented with additional …\nWithdraw funds from the ended auction associated with the …\nA plan to a <code>ActionDutchAuctionWithdraw</code> which contains both …\nAn <code>ActionDutchAuctionWithdraw</code> augmented with additional …\nA unique identifier for an auction, obtained from hashing …\nA bearer NFT tracking ownership of an auction and its …\nThe configuration parameters for the auction component.\nDescribes a Dutch auction using programmatic liquidity on …\nA message emitted when value flows <em>into</em> the auction …\nA message emitted when value flows <em>out</em> of the auction …\nGenesis data for the auction component.\nThe asset ID being deposited into the Auction component.\nThe asset ID being deposited into the Auction component.\nIf present, the state of the auction. If not present, no …\nThe state of the returned auction.\nThe auction to end.\nThe auction to withdraw funds from.\nIf present, the current position controlled by this …\nThe immutable data describing the auction and its auction …\nThe block height at which the auction ends.\nNested message and enum types in <code>EventDutchAuctionEnded</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe auction IDs to request. Only known IDs will be …\nThe auction ID of the returned auction.\nThe value the seller wishes to auction.\nThe amount of the input asset directly owned by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum output the seller can receive.\nThe minimum output the seller is willing to receive.\nThe new balance of the asset in the Auction component.\nThe new balance of the asset in the Auction component.\nIf present, the next trigger height to step down the price.\nA random nonce used to allow identical auctions to have …\nThe asset ID of the target asset the seller wishes to …\nThe amount of the output asset directly owned by the …\nThe configuration parameters for the auction component at …\nThe state of any DEX positions relevant to the returned …\nThe state of any DEX positions relevant to the returned …\nThe previous balance of the asset in the Auction component.\nThe previous balance of the asset in the Auction component.\nGenerated client implementations.\nGenerated server implementations.\nReturns the enum value of <code>reason</code>, or the default if the …\nA sequence of values that sum together to the provided …\nA transparent (zero blinding factor) commitment to the …\nThe sequence number of the auction state.\nThe sequence number of the withdrawal.\nSets <code>reason</code> to the provided enum value.\nThe block height at which the auction begins.\nThe mutable data describing the auction’s execution.\nThe number of discrete price steps to use for the auction.\nThe auction ended was terminated by the initiator.\nThe auction ended due to reaching its terminal height.\nThe auction ran out of reserves.\nThe reason the auction ended.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Reason</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Reason</code>.\nQuery operations for the auction component.\nEnable decompressing responses.\nGet the current state of an auction by ID.\nGet the current state of a group of auctions by ID.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nServer streaming response type for the AuctionStateByIds …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the auction component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nGet the current state of an auction by ID.\nGet the current state of a group of auctions by ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nRequests the list of all asset balances associated with …\nThe Community Pool’s balance of a single asset.\nCommunityPool parameter data.\nCommunityPool genesis state.\n(Optional): The specific asset balances to retrieve, if …\nThe balance for a single asset.\nCommunityPool parameters.\nWhether Community Pool spend proposals are enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initial balance of the Community Pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nQuery operations for the community_pool component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nServer streaming response type for the …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the community_pool component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nContains the minimum data needed to update client state.\nRequests a range of compact block data.\nAn encrypted payload, corresponding to a single commitment …\nUpdated gas prices for alternative fee tokens, if they …\nIndicates updated app parameters.\nThe block root of this block.\nThe end height of the range, defaults to the latest block …\nThe epoch index\nThe epoch root of this epoch (only present when the block …\nLatest Fuzzy Message Detection parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdated gas prices, if they have changed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf set, keeps the connection alive past <code>end_height</code>, …\nNullifiers identifying spent notes.\nIf a proposal started voting in this block, this is set to …\nGenerated client implementations.\nGenerated server implementations.\nThe source of the payload, if known.\nThe start height of the range.\nNested message and enum types in <code>StatePayload</code>.\nThe state payload itself.\nState payloads describing new state fragments.\nPrice data for swaps executed in this block.\nQuery operations for the compact block component.\nEnable decompressing responses.\nReturns a single compact block at a specific height.\nReturns a stream of compact blocks, optionally keeping the …\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nServer streaming response type for the CompactBlockRange …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the compact block component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns a single compact block at a specific height.\nReturns a stream of compact blocks, optionally keeping the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nThe state payload itself.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe minimum amount of data describing a trading function.\nRecords the result of a batch swap on-chain.\nRequests batch swap data associated with a given height …\nEncodes a trading pair starting from asset <code>start</code> and …\nEmitted whenever there’s non-empty candlestick data for …\nIndicates that value was added to the DEX.\nIndicates that value is leaving the DEX.\nAn LPNFT tracking both ownership and state of a position.\nData identifying a position.\nA transaction action that closes a position.\nA hash of a <code>Position</code>.\nA transaction action that opens a new position.\nDeprecated.\nDeprecated.\nThe state of a position.\nA transaction action that withdraws funds from a closed …\nContains private and public data for withdrawing funds …\nThe reserves of a position.\nA transaction action that submits a swap to the dex.\nThe authorized data of a Swap transaction.\nA transaction action that obtains assets previously …\nEncapsulates the authorized fields of the SwapClaim …\nContains the entire execution of a particular swap.\nThe trading function for a specific pair. For a pair …\nHolds two asset IDs. Ordering doesn’t reflect trading …\nA Penumbra ZK swap claim proof.\nA Penumbra ZK swap proof.\nAlternatively, a Bech32m-encoded string representation of …\nAn approximation of the effective price when trading 1 =&gt; …\nAn approximation of the effective price when trading 2 =&gt; …\nThe first asset of the pair.\nThe second asset of the pair.\nThe asset ID being deposited into the DEX.\nThe asset ID being deposited into the DEX.\nThe BatchSwapOutputData containing the results of the …\nThe best position when trading 1 =&gt; 2.\nThe best position when trading 2 =&gt; 1.\nEncapsulates the authorized fields of the Swap action, …\nEncapsulates the authorized fields of the SwapClaim …\nAddress that will claim the swap outputs via SwapClaim.\nPre-paid fee to claim the swap\nThe last observed price during the block execution.\n/ If set to true, the position is a limit-order and will …\nContext: the end-to-end route that was being traversed …\nThe candlestick data points.\nThe candlestick data point.\nThe total amount of asset 1 that was input to the batch …\nThe amount for asset 1.\nInput amount of asset 1\nThe amount for asset 1.\nThe total amount of asset 2 that was input to the batch …\nThe amount for asset 2.\nInput amount of asset 2\nThe amount for asset 2.\nThe initial parameters for the DEX.\nThe volume that traded “directly”, during individual …\nThe end asset of the pair.\nIf present, only return swap executions occurring before …\nIf present, only return arb executions occurring before …\nThe epoch duration of the chain when the swap claim took …\nThe epoch duration, used in proving.\nThe starting block height of the epoch for which the batch …\nThe fee allows <code>SwapClaim</code> without an additional <code>Spend</code>.\nThe blinding factor for the fee commitment. The fee in the …\nA commitment to a prepaid fee for the future SwapClaim. …\nThe list of fixed candidates for routing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height for which the batch swap data is valid.\nThe height at which the arb execution occurred.\nThe height of the candlestick data.\nThe highest observed price during the block execution.\nIf true, include closed and withdrawn positions.\nThe bytes of the position ID.\nThe total input amount for this execution.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the DEX is enabled.\nThe total amount of asset 1 that was output from the batch …\nThe total amount of asset 2 that was output from the batch …\nThe maximum number of positions to return.\nThe maximum number of candlestick data points to return.\nThe lowest observed price during the block execution.\nThe maximum number of routing and execution steps to be …\nThe number of hops to traverse while routing from A to B.\nThe maximum number of positions per trading pair. If this …\nThe new balance of the asset in the DEX.\nThe new balance of the asset in the DEX.\nA random value used to disambiguate different positions …\nThe nullifier for the Swap commitment to be consumed.\nThe nullifier for the swap commitment.\nThe first observed price during the block execution.\nThe total output amount for this execution.\nNote output for asset 1.\nNote commitment for the first asset.\nNote output for asset 2.\nNote commitment for the second asset.\nInput and output amounts, and asset IDs for the assets in …\nInput and output amounts for the Swap.\nThis is not actually an amount, it’s an integer the same …\nThe pair the candlestick is for.\nThe directed trading pair to request candlestick data for.\nThe directed trading pair to subscribe to.\nThe swap commitment and encryption of the swap data.\nThe position of the swap commitment.\nContains the data defining the position, sufficient to …\nThe full position.\nPosition ID.\nThe ID of the closed position\nThe ID of the position queued that is closed for closure.\nThe ID of the withdrawn position.\nThe ID of the position executed against.\nNested message and enum types in <code>PositionState</code>.\nThe reserves of asset 1 of the position before execution.\nThe reserves of asset 2 of the position before execution.\nThe previous balance of the asset in the DEX.\nThe previous balance of the asset in the DEX.\nContains the Swap proof.\nContains the SwapClaim proof.\nThe first blinding factor to use for the ZK swap proof.\nThe first blinding factor to use for the ZK swap claim …\nThe second blinding factor to use for the ZK swap proof.\nThe second blinding factor to use for the ZK swap claim …\nThis is not actually an amount, it’s an integer the same …\nGenerated client implementations.\nGenerated server implementations.\nThe amount for asset 1.\nThe reserves of asset 1 of the withdrawn position.\nThe reserves of asset 1 of the position after execution.\nThe amount for asset 2.\nThe reserves of asset 2 of the withdrawn position.\nThe reserves of asset 2 of the position after execution.\nA transparent (zero blinding factor) commitment to the …\nAny accumulated rewards assigned to this position.\nSwap rseed (blinding factors are derived from this)\nThe prefix (epoch, block) of the position where this batch …\nOnly meaningful if <code>state</code> is <code>POSITION_STATE_ENUM_WITHDRAWN</code>.\nThe sequence number of the withdrawal.\nThe sequence number of the withdrawal.\nThe sequence number of the withdrawal.\nSets <code>state</code> to the provided enum value.\nNested message and enum types in <code>SimulateTradeRequest</code>.\nGenerated client implementations.\nGenerated server implementations.\nThe start asset of the pair.\nIf present, only return swap executions occurring after …\nIf present, only return arb executions occurring after the …\nThe height to start the query from.\nReturns the enum value of <code>state</code>, or the default if the …\nThe candlestick for this particular pair.\nNested message and enum types in <code>SwapClaimView</code>.\nThe swap commitment.\nNested message and enum types in <code>SwapExecution</code>.\nThe record of execution for the arb execution.\nThe record of execution for the batch swap in the 1 -&gt; 2 …\nThe record of execution for the batch swap in the 2 -&gt; 1 …\nThe plaintext version of the swap to be performed.\nThe plaintext version of the swap to be performed.\nNested message and enum types in <code>SwapView</code>.\nThe volume that traded as part of swaps, which could have …\nThe trading fee for the position, expressed in basis …\nThe trading pair to swap.\nThe trading pair to swap.\nThe trading pair associated with the batch swap.\nIf present, filter swap executions by the given trading …\nThe directed trading pair to request positions for\nThe trading pair to swap.\nThe trading pair that is subject of the swap claim.\nThe trading pair to open.\nThe trading pair of the withdrawn position.\nThe trading pair of the position executed against.\nEstimated input amount that will not be swapped due to …\nThe total amount of asset 1 that was returned unfilled …\nThe total amount of asset 2 that was returned unfilled …\nDeprecated.\nThe position has been closed, is inactive and can no …\nThe position has been opened, is active, has reserves and …\nThe final reserves and accumulated fees have been …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>PositionStateEnum</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PositionStateEnum</code>.\nQuery operations for the DEX component.\nEnable decompressing responses.\nGet the precise execution used to perform on-chain …\nStream all arbitrage executions over a range of heights, …\nGet the batch clearing prices for a specific block height …\nGet historical candlestick data for a given trading pair.\nSubscribe to candlestick data updates.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery liquidity positions by ID.\nQuery all liquidity positions on the DEX.\nQuery multiple liquidity positions by ID.\nQuery liquidity positions on a specific pair, sorted by …\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGet the current (direct) spread on a trading pair.\nGet the precise swap execution used for a specific batch …\nStream all swap executions over a range of heights, …\nServer streaming response type for the ArbExecutions …\nServer streaming response type for the …\nServer streaming response type for the …\nServer streaming response type for the …\nServer streaming response type for the LiquidityPositions …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the DEX component.\nGenerated gRPC service name\nServer streaming response type for the SwapExecutions …\nEnable decompressing requests with the given encoding.\nGet the precise execution used to perform on-chain …\nStream all arbitrage executions over a range of heights, …\nGet the batch clearing prices for a specific block height …\nGet historical candlestick data for a given trading pair.\nSubscribe to candlestick data updates.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery liquidity positions by ID.\nQuery all liquidity positions on the DEX.\nQuery multiple liquidity positions by ID.\nQuery liquidity positions on a specific pair, sorted by …\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nGet the current (direct) spread on a trading pair.\nGet the precise swap execution used for a specific batch …\nStream all swap executions over a range of heights, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Routing</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nSimulation for the DEX component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nSimulate routing and trade execution.\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nSimulation for the DEX component.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nSimulate routing and trade execution.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nOptionally, a transaction hash for the transaction that …\nContains all individual steps consisting of a trade trace.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEach step in the trade trace.\nOptionally, metadata about asset 1 in the <code>swap</code>’s trading …\nOptionally, metadata about asset 1 in the <code>swap</code>’s trading …\nOptionally, metadata about asset 2 in the <code>swap</code>’s trading …\nOptionally, metadata about asset 2 in the <code>swap</code>’s trading …\nOptionally, if the swap has been confirmed, the batch …\nOptionally, if the swap has been confirmed, the batch …\nOptionally, a transaction hash for the transaction that …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nOptionally, if the swap has been confirmed, the output …\nOptionally, if the swap has been confirmed, the output …\nOptionally, if the swap has been confirmed, the output …\nOptionally, if the swap has been confirmed, the output …\nThe underlying Swap action being viewed.\nThe plaintext of the encrypted swap.\nDistribution configuration data.\nGenesis data for the distributions module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of staking token issued per block.\nEmitted as a summary of fees in the block.\nEmitted during fee payment.\nSpecifies fees paid by a transaction.\nFee component configuration data.\nGas usage for a transaction.\nFee-specific genesis content.\nOther gas prices for other accepted tokens.\nThe amount of the token used to pay fees.\nIf present, the asset ID of the token used to pay fees. If …\nThe asset ID of the fee token these prices are for.\nThe base fee that was required.\nThe amount of block space used.\nThe price per unit block space in terms of the staking …\nThe amount of compact block space used.\nThe price per unit compact block space in terms of the …\nThe amount of execution cost used.\nThe price per unit execution cost in terms of the staking …\nThe fee paid.\nThe FeeParameters present at genesis.\nNested message and enum types in <code>FeeTier</code>.\nReturns the enum value of <code>fee_tier</code>, or the default if the …\nThe selected fee tier.\nFixed gas prices in other tokens used to compute …\nFixed gas prices in the native token used to compute …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe current gas prices, in the preferred (native) token.\nThe gas used to compute the base fee.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nSets <code>fee_tier</code> to the provided enum value.\nThe total base fees, after swapping to the native token.\nThe total fees, after swapping to the native token.\nThe total tips, after swapping to the native token.\nThe tip that was paid to the proposer.\nThe amount of verification cost used.\nThe price per unit verification cost in terms of the …\nThe tier for the fee.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Tier</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Tier</code>.\nQuery operations for the fee component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nGet the current gas prices.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery operations for the fee component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nGet the current gas prices.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nIndicates that a funding stream reward was paid.\nFunding component configuration data.\nGenesis data for the funding component.\nThe epoch for which the reward was paid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe recipient of the funding stream reward. This is a …\nThe amount of the reward, in staking tokens.\nDEPRECATED\nDEPRECATED\nGovernance genesis state.\nGovernance configuration data.\nA proposal to be voted upon.\nAll the different kinds of proposals.\nRequests the list of all proposals.\nThe data for a single proposal.\nThe outcome of a concluded proposal.\nRequests the validator rate data for a proposal.\nThe rate data for a single validator.\nThe current state of a proposal.\nThe ratio between two numbers, used in governance to …\nA tally of votes on a proposal.\nTo make the linter happy\nRequests the list of all validator votes for a given …\nThe data for a single validator vote.\nA vote on a proposal.\nA Penumbra ZK delegator vote proof.\nThe number of abstentions.\nThe address to send the output to.\nString value of the enum field names used in the ProtoBuf …\nAuction module parameters.\nThe vote authorization signature is authorizing data.\nThe vote authorization signature is authorizing data.\nThe effecting data for the vote.\nThe effecting data for the vote.\nCommunity Pool module parameters.\nThe component name in the <code>AppParameters</code>.\nNested message and enum types in <code>DelegatorVoteView</code>.\nThe denominator.\nThe amount of the proposal deposit.\nThe expected deposit amount.\nThe deposit claim body.\nA natural-language description of the effect of the …\nDEX component parameters\nDistributions module parameters.\nThe block height at which the proposal ends voting.\nThe block height at which the proposal ends voting.\nThe end height for the proposal.\nFee module parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ProposalKind</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nFunding module parameters.\nThe validator governance key.\nGovernance parameters.\nGovernance module parameters.\nIBC module parameters.\nThe unique identifier of the proposal.\nThe validator identity.\nThe validator identity.\nThe validator identity key to request information on.\nThe validator identity associated with the tally.\nWhether to include proposals that are no longer active.;\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ProposalKind</code>.\nThe parameter key in the component parameters.\nThe new set of parameters the proposal is trying to enact.\nThe next proposal ID.\nThe number of votes against the proposal.\nThe nullifier of the input note.\nThe numerator.\nThe set of app parameters at the time the proposal was …\nThe outcome of the proposal.\nThe proposal’s payload.\nThe vote proof is authorizing data.\nThe first blinding factor to use for the ZK delegator vote …\nThe second blinding factor to use for the ZK delegator …\nNested message and enum types in <code>Proposal</code>.\nThe proposal to be submitted.\nThe proposal to be withdrawn.\nThe proposal to claim the deposit for.\nThe proposal being voted on.\nThe proposal being voted on.\nThe proposal to vote on.\nThe proposal metadata.\nThe proposal metadata.\nThe passed proposal.\nThe failed proposal.\nThe slashed proposal.\nThe deposit amount paid for the proposal.\nThe deposit required to create a proposal.\nThe proposal id to request information on.\nThe proposal id to request information on.\nThe proposal id to request information on.\nThe proposal id to request information on.\nThe proposal id to request information on.\nThe proposal id to request information on.\nNested message and enum types in <code>ProposalOutcome</code>.\nThe threshold for a proposal to pass voting, as a ratio of …\nThe threshold for a proposal to be slashed, regardless of …\nNested message and enum types in <code>ProposalState</code>.\nThe quorum required for a proposal to be considered valid, …\nThe number of blocks during which a proposal is voted on.\nGenerated client implementations.\nGenerated server implementations.\nThe randomizer to use for the proof of spend capability.\nThe reason for the proposal being withdrawn.\nA justification of the vote.\nThe randomized validating key for the spend authorization …\nSct module parameters.\nSets <code>vote</code> to the provided enum value.\nShielded pool module parameters\nStake module parameters.\nThe delegation note to prove that we can vote.\nThe position of that delegation note.\nThe block height at which the proposal started voting.\nThe block height at which the proposal started voting.\nThe block height at which the proposal started voting.\nThe start height for the proposal.\nThe start position of the proposal in the TCT.\nThe start position of the proposal in the TCT.\nThe position of the state commitment tree at which the …\nThe position of the state commitment tree at which the …\nThe position of the state commitment tree at which the …\nThe state of the proposal.\nThe current state of the proposal.\nThe current state of the proposal.\nDetails on the submitted proposal.\nThe tally of delegator votes for a given validator for the …\nA short title for the proposal.\nThe amount of the delegation note, in unbonded penumbra.\nThe unbonded amount equivalent to the delegation note.\nThe corresponding validator’s identity key.\nThe value of the delegation note.\nThe value to deposit into the Community Pool.\nThe value to spend from the Community Pool.\nThe value to output from the Community Pool.\nThe parameter value.\nNested message and enum types in <code>Vote</code>.\nReturns the enum value of <code>vote</code>, or the default if the …\nThe vote.\nThe vote.\nThe vote to cast.\nThe vote.\nThe vote.\nThe delegator vote.\nThe validator vote.\nThe voting power for the given identity key at the start …\nThe validator’s voting power at the time of the proposal…\nDetails on the withdrawn proposal.\nThe number of votes in favor of the proposal.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA Community Pool spend proposal describes zero or more …\nAn emergency proposal can be passed instantaneously by a …\nFreeze an existing IBC client. Like <code>Emergency</code> proposals, …\nA parameter change proposal describes a replacement of the …\nThe proposal’s payload.\nA signaling proposal is meant to register a vote on-chain, …\nUnfreeze an existing IBC client. Like <code>Emergency</code> proposals, …\nAn upgrade plan describes a candidate upgrade to be …\nA list of encoded changes to the application parameters.\nThe commit to be voted upon, if any is relevant.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf <code>true</code>, the chain will halt immediately when the proposal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDEPRECATED\nDEPRECATED\nA list of encoded preconditions for the parameter change: …\nThe transaction plan to be executed at the time the …\nThe proposal did not pass.\nThe proposal was passed.\nThe proposal did not pass, and was slashed.\nWhether or not the proposal was withdrawn.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe reason for withdrawing the proposal during the voting …\nPresent if the proposal was withdrawn during the voting …\nPresent if the proposal was withdrawn during the voting …\nThe voting period has ended, and the original proposer has …\nThe voting period has ended, and the proposal has been …\nThe state of the proposal.\nVoting is in progress and the proposal has not yet …\nThe proposal has been withdrawn but the voting period is …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe reason for the withdrawal.\nQuery operations for the governance component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nUsed for computing voting power ?\nCompress requests with the given encoding.\nServer streaming response type for the …\nServer streaming response type for the ProposalList method.\nServer streaming response type for the ProposalRateData …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the governance component.\nGenerated gRPC service name\nServer streaming response type for the ValidatorVotes …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nUsed for computing voting power ?\nCompress responses with the given encoding, if the client …\nA vote.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Vote</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Vote</code>.\nFungibleTokenPacketData defines a struct for the packet …\nIBC genesis state.\nIBC configuration data.\nA Penumbra transaction action requesting an ICS20 transfer.\nthe token amount to be transferred\nNOTE: left as Any to allow us to add more client types …\nthe token denomination to be transferred\nthe address on the destination chain to send the transfer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether IBC (forming connections, processing IBC packets) …\nIBC parameters.\nArbitrary string data to be included in the <code>memo</code> field of …\nWhether inbound ICS-20 transfers are enabled\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\nWhether outbound ICS-20 transfers are enabled\nthe recipient address on the destination chain\na “sender” penumbra address to use to return funds …\nthe return address\nThe source channel used for the withdrawal\nThe height on the counterparty chain at which this …\nThe timestamp, in epoch time, after which this transfer …\nWhether to use a “compat” (bech32, non-m) address for …\nWhether to use a transparent address (bech32, 32-byte) for …\nMetadata describing the source of a commitment in the …\nAn epoch is a sequentially numbered collection of …\nEvent recording an SCT anchor (global root).\nEvent recording an SCT block root.\nEvent recording a new commitment added to the SCT.\nEvent recording an SCT epoch root.\nSct-specific genesis content.\nRecords information about what transaction spent a …\nConfiguration data for the SCT component.\nNested message and enum types in <code>CommitmentSource</code>.\nThe default duration of each epoch, in number of blocks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique index of the epoch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nThe SctParameters present at genesis.\nThe starting height for the epoch.\nThe commitment was created through a <code>CommunityPoolOutput</code> …\nThe commitment was created through a validator’s funding …\nThe state commitment was included in the genesis state.\nThe commitment was created by an inbound ICS20 transfer.\nThe commitment was created by a transaction.\nThe channel id the transfer happened on\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nThe epoch index the rewards were issued in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe transaction ID, if specified.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe sequence number of the packet that triggered the …\nThe sender address on the counterparty chain\nQuery operations for the SCT component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery operations for the SCT component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nRequests information on an asset by asset id\nRequests information on an asset by multiple asset ids\nABCI Event recording a clue.\nABCI Event recording an output.\nABCI Event recording a spend.\nThe parameters which control how the FMD parameters evolve …\nUsed to potentially store state for the FMD Meta …\nParameters for Fuzzy Message Detection\nMetadata about the packet associated with the transfer.\nGenesis data for the shielded pool component.\nAn encrypted note. 176 = 80(address) + 16(amount) + …\nThe body of an output description, including only the …\nCreates a new shielded note.\nThe body of an output description, containing only the …\nConfiguration data for the shielded pool component.\nSpends a shielded note.\nThe body of a spend description, containing only the …\nA Penumbra ZK nullifier derivation proof.\nA Penumbra ZK output proof.\nA Penumbra ZK spend proof.\nThe algorithm governing how the parameters change.\nThe allocations present at genesis\nThe asset id to request information on.\nThe asset IDs to request information on. Note that node is …\nThe authorizing signature for the spend.\nA commitment to the value of the input note.\nA commitment to the value of the output note. 32 bytes.\nThe effecting data of the spend.\nThe effecting data for the output.\nThe identifier for the channel on <em>this</em> chain.\nIf present, information on the requested asset.\nA single asset metadata streamed from the node.\nThe destination address to send it to.\nAn encryption of the commitment of the input note to the …\nAn encryption of the newly created note. 176 = 80(address) …\nThe encoding of an ephemeral public key. 32 bytes.\nNested message and enum types in …\nHow much time users have to transition to new parameters.\nNested message and enum types in <code>FmdMetaParameters</code>.\nNested message and enum types in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNested message and enum types in <code>GenesisContent</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis will be the metadata for the packet for the transfer …\nThe plaintext note we plan to spend.\nThe note commitment for the output note. 32 bytes.\nThe minimal data required to scan and process the new …\nThe nullifier of the input note.\nNested message and enum types in <code>OutputView</code>.\nThe key material used for note encryption, wrapped in …\nThe position of the note we plan to spend.\nThe proof that the spend is well-formed is authorizing …\nThe output proof is authorizing data.\nThe first blinding factor to use for the ZK spend proof.\nThe first blinding factor to use for the ZK output proof.\nThe second blinding factor to use for the ZK spend proof.\nThe second blinding factor to use for the ZK output proof.\nGenerated client implementations.\nGenerated server implementations.\nThe randomizer to use for the spend.\nReturns the enum value of <code>reason</code>, or the default if the …\nWhy the refund is happening.\nThe receiving address, which we don’t assume anything …\nThe address that attempted to receive the funds.\nThe receiver on this chain.\nThe randomized validating key for the spend authorization …\nThe rseed to use for the new note.\nThe sending address on chain.\nThe sender being refunded.\nThe sender on the counterparty chain.\nSequence number for the packet.\nSets <code>reason</code> to the provided enum value.\nNested message and enum types in <code>SpendView</code>.\nThe value to send to this output.\nThe value being transferred out of the chain.\nThe value being refunded.\nThe value being transferred in.\nThe blinding factor to use for the value commitment.\nThe blinding factor to use for the value commitment.\nAn encrypted key for decrypting the memo.\nThe transfer was acknowledged with an error.\nThe transfer timed out.\nNo particular reason.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Reason</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Reason</code>.\nThe algorithm governing how the parameters change.\nA sliding window algorithm for updating the parameters.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe number of detections we aim to see per window.\nThe window size, in terms of the number of update periods.\nThe state used for the fixed algorithm.\nThe state used for the sliding window algorithm.\nThe number of clues previously observed, approximately.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nQuery operations for the shielded pool component.\nEnable decompressing responses.\nRequests a stream of asset metadata, given an array of …\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nServer streaming response type for the AssetMetadataByIds …\nGenerated trait containing gRPC methods that should be …\nQuery operations for the shielded pool component.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nRequests a stream of asset metadata, given an array of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDescribes the base reward and exchange rates in some epoch.\nDescribes the unbonding state of a validator’s stake …\nTracks our view of Tendermint’s view of the validator …\nA transaction action adding stake to a validator’s …\nA list of pending delegations and undelegations.\nIndicates a slashing penalty was applied to a validator’…\nA portion of a validator’s commission.\nGenesis data for the staking component.\nRequests information about a specific validator.\nTracks slashing penalties applied to a validator in some …\nDescribes the reward and exchange rates and voting power …\nStaking configuration data.\nA transaction action withdrawing stake from a validator’…\nA transaction action finishing an undelegation, converting …\nTrack’s a validator’s uptime.\nDescribes a validator’s configuration data.\nA transaction action (re)defining a validator.\nCombines all validator info into a single packet.\nRequests information on the chain’s validators.\nFor storing the list of keys of known validators.\nRequests the compounded penalty for a validator over a …\nDescribes the state of a validator\nDescribes the current state of a validator on-chain\nA Penumbra ZK undelegate claim proof.\nThe maximum number of validators in the consensus set.\nThe validator’s Comet address.\nThe amount of stake delegated, in the staking token.\nThe amount of stake undelegated, in the staking token.\nA signature by the validator’s identity key over the …\nThe blinding factor to use for the balance commitment.\nThe action’s contribution to the transaction’s value …\nThe base reward rate, expressed in basis points of basis …\nNested message and enum types in <code>BondingState</code>.\nThe new bonding state of the validator.\nThe validator’s consensus pubkey for use in Tendermint …\nThe height at which the evidence was processed.\nThe amount of delegation tokens produced by this action.\nThe amount of delegation tokens consumed by this action.\nThe validator’s description.\nWhether the validator is enabled or not.\nThe index of the epoch in which this delegation was …\nThe epoch in which the penalty was applied.\nThe height at which the offense occurred.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe epoch in which this delegation was performed.\nNested message and enum types in <code>FundingStream</code>.\nA list of funding streams describing the validator’s …\nThe validator’s governance key.\nThe validator’s identity verification key.\nThe identity key of the validator.\nThe validator identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nThe validator’s identity key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum amount of stake required for a validator to be …\nThe maximum number of blocks in the window each validator …\nThe validator’s (human-readable) name.\nThe penalty amount after slashing.\nThe penalty applied to undelegation, in bps^2 (10e-8). In …\nThe penalty applied to undelegation, in bps^2 (10e-8). In …\nThe first blinding factor to use for the ZK undelegate …\nThe second blinding factor to use for the ZK undelegate …\nGenerated client implementations.\nGenerated server implementations.\nThe new rate data.\nThe recipient of the funding stream.\nThe sequence number determines which validator data takes …\nSets <code>state</code> to the provided enum value.\nSets <code>state</code> to the provided enum value.\nWhether or not to return inactive validators\nThe number of blocks in the window to check for downtime.\nThe penalty for slashing due to downtime.\nThe penalty for slashing due to misbehavior.\nThe configuration parameters for the staking component …\nThe index of the epoch in which this undelegation was …\nThe epoch in which unbonding began, used to verify the …\nThe epoch in which unbonding began, used to verify the …\nReturns the enum value of <code>state</code>, or the default if the …\nReturns the enum value of <code>state</code>, or the default if the …\nThe new state of the validator.\nThe delegation amount, in units of unbonded stake. TODO: …\nThe amount to undelegate, in units of unbonding tokens.\nThe amount of unbonding tokens to claim. This is a bare …\nThe number of blocks that must elapse before an unbonding …\nThe number of epochs an unbonding note for before being …\n/ The starting height of the epoch during which unbonding …\nThe height during which unbonding began.\nThe configuration data for the validator.\nThe validator definition.\nThe validator exchange rate between delegation tokens and …\nThe identity key of the validator to delegate to.\nThe identity key of the validator to undelegate from.\nThe identity key of the validator to finish undelegating …\nThe identity key of the validator to finish undelegating …\nNested message and enum types in <code>ValidatorState</code>.\nThe list of validators present at genesis.\nThe voting power for the validator.\nThe new voting power of the validator.\nThe validator’s website.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BondingStateEnum</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BondingStateEnum</code>.\nThe recipient of the funding stream.\nThe destination address for the funding stream.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe portion of the staking reward for the entire …\nThe portion of the staking reward for the entire …\nQuery operations for the staking component.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nQueries for information about a specific validator.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nQueries the current validator set, with filtering.\nGenerated trait containing gRPC methods that should be …\nQuery operations for the staking component.\nGenerated gRPC service name\nServer streaming response type for the ValidatorInfo …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nQueries for information about a specific validator.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nQueries the current validator set, with filtering.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ValidatorStateEnum</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ValidatorStateEnum</code>.\nA Penumbra address. An address in Penumbra is a …\nA validator’s governance key (decaf377-rdsa spendauth …\nA validator’s identity key (decaf377-rdsa spendauth …\nNested message and enum types in <code>AddressView</code>.\nAlternatively, a Bech32m-encoded string representation of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bytes of the address. Must be represented as a series …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA decoded address, with information about the address …\nAn opaque address, with no information about the address …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe quantity of a particular Asset. Represented as a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA state change performed by a transaction.\nDescribes a planned transaction action.\nA view of a specific state change action performed by a …\nThe data required to authorize a transaction plan.\nDescribes a plan for forming a <code>Clue</code>.\nDetection data used by a detection server performing Fuzzy …\nThe encrypted memo data describing information about the …\nThe plaintext describing information about the purpose of …\nDescribes a plan for forming the transaction memo.\nA Penumbra transaction.\nThe body of a transaction.\nThe parameters determining if a transaction should be …\nA transaction perspective is a bundle of key material and …\nDescribes a planned transaction. Permits clients to …\nRepresents a transaction summary containing multiple …\nView of a Penumbra transaction.\nThe data required for proving when building a transaction …\nNested message and enum types in <code>Action</code>.\nNested message and enum types in <code>ActionPlan</code>.\nNested message and enum types in <code>ActionView</code>.\nA list views into of actions (state changes) performed by …\nA list of actions (state changes) performed by this …\nThe sequence of actions planned for this transaction.\nThe address.\nAny relevant address views.\nThe openings of note commitments referred to in the …\nThe root of some previous state of the state commitment …\nThe root of some previous state of the state commitment …\nThe anchor for the state transition proofs.\nAny relevant BatchSwapOutputData to the transaction.\nThe binding signature is stored separately from the …\nThe binding signature is stored separately from the …\nView of the transaction body\nThe chain this transaction is intended for.  Including …\nThe required delegator vote authorizations, returned in …\nAny relevant denoms for viewed assets.\nDetection data for use with Fuzzy Message Detection\nThe detection data in this transaction, only populated if …\nDetection data for use with Fuzzy Message Detection\nThe computed auth hash for the approved transaction plan.\nThe maximum height that this transaction can be included …\nAny relevant extended metadata, indexed by asset id.\nThe transaction fee.\nA list of clues for use with Fuzzy Message Detection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe encrypted data. 528 bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key to use to encrypt the memo.\nThe encrypted memo for this transaction.\nThe memo plan for this transaction.\nNested message and enum types in <code>MemoView</code>.\nAn optional view of a transaction memo. It will only be …\nThe plaintext.\nThe bits of precision.\nAny relevant estimated prices\nThe sender’s return address.\nThe random seed to use for the clue plan.\nThe required spend authorizations, returned in the same …\nThe auth paths for the notes the transaction spends, in the\nFree-form text, up to 432 bytes long.\nThe transaction ID associated with this …\nParameters determining if a transaction should be accepted …\nTransaction parameters.\nParameters determining if a transaction should be accepted …\nNested message and enum types in <code>TransactionPerspective</code>.\nNested message and enum types in <code>TransactionSummary</code>.\nDutch auctions\nCommunity Pool\n(un)delegation\nPositions\nGovernance:\nCommon actions have numbers &lt; 15, to save space.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDutch auctions\nCommunity Pool\nWe don’t need any extra information (yet) to understand …\nThis is just a message relayed to the chain.\nThe position withdraw/reward claim actions require balance …\nGovernance:\nWe don’t need any extra information (yet) to understand …\nThis is just a message relayed to the chain.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDutch auctions\nCommunity Pool\nGovernance:\nAction types with visible/opaque variants\nTODO: we have no way to recover the opening of the …\nAction types without visible/opaque variants\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAssociates a nullifier with the transaction ID that …\nAssociates a commitment with the transaction ID that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents an individual effect of a transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe hash of a Penumbra transaction’s <em>effecting data</em>, …\nA transaction ID, the Sha256 hash of a transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA clue for use with Fuzzy Message Detection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe public package sent in round 1 of the DKG protocol.\nThe per-participant package sent in round 2 of the DKG …\nRepresents a commitment to a nonce value.\nA share of the final signature. These get aggregated to …\nRepresents the commitments to nonces needed for signing.\nA share of the final signing key.\nA commitment to a polynomial, as a list of group elements.\nAnother to bind them.\nA commitment to the polynomial for secret sharing.\nThese bytes should be a valid group element.\nEach of these bytes should be the serialization of a group …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOne nonce to hide them.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA proof of knowledge of the underlying secret being shared.\nThese bytes should be a valid scalar.\nThese bytes should be a valid scalar.\nThis is the share we’re sending to that participant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set of 3 sibling hashes in the auth path for some note …\nAn authentication path from a state commitment to the root …\nalways length 24\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message the coordinator sends in round 1 of the …\nThe message the coordinator sends in round 2 of the …\nThe first message we broadcast in the DKG protocol.\nThe second message we broadcast in the DKG protocol.\nThe first message the followers send back to the …\nThe second message the followers send back to the …\nA signature proving that a message was created by the …\nA key one can use to verify signatures.\nNested message and enum types in <code>CoordinatorRound1</code>.\nNested message and enum types in <code>CoordinatorRound2</code>.\nNested message and enum types in <code>DKGRound2</code>.\nAn encryption key for the second round.\nNested message and enum types in <code>FollowerRound1</code>.\nNested message and enum types in <code>FollowerRound2</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA commitment to a share of the nullifier-deriving key\nThe verification key identifying the sender.\nThe verification key identifying the sender.\nThe package we’re sending to other people\nA signature over the proto-encoded bytes of inner.\nA signature over the proto-encoded bytes of inner.\nA signature over the proto-encoded inner message.\nThe underlying signing packages being sent to the …\nA verification key establishing an identity for the sender …\nThe verification key identifying the sender.\nThe plan that the coordinator would like the followers to …\nThe validator definition the coordinator would like the …\nThe validator vote the coordinator would like the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA commitment along with a FROST identifier.\nA FROST signing package without a message.\nThe commitments this person has produced for this round of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe serialization of a FROST identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn inner message that will be signed.\nA round2 package, encrypted, along with an identifier for …\nThe ciphertext of an encrypted frost package for round 2.\nEncrypted packages for each recipient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn opening of the share of the nullifier-deriving key …\nA verification key identifying the recipient.\nThe inner message that will be signed by the follower.\nOne signing commitment pair for each signature requested …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe inner message that will be signed by the follower.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne share for each signature requested by the plan, in …\nA pre-authorization packet.  This allows a custodian to …\nGenerated client implementations.\nGenerated server implementations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full viewing key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transaction plan to authorize.\nNested message and enum types in <code>PreAuthorization</code>.\nOptionally, pre-authorization data, if required by the …\nOptionally, pre-authorization data, if required by the …\nOptionally, pre-authorization data, if required by the …\nThe validator definition to authorize.\nThe authorization signature for the validator definition.\nThe validator vote to authorize.\nThe authorization signature for the validator vote.\nThe custody protocol is used by a wallet client to request …\nEnable decompressing responses.\nRequests authorization of the transaction with the given …\nRequests authorization of the given validator definition …\nRequests authorization of the given validator vote.\nDisplays an address to a user for confirmation.\nAttempt to create a new client by connecting to a given …\nRequests the full viewing key from the custodian.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nThe custody protocol is used by a wallet client to request …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nRequests authorization of the transaction with the given …\nRequests authorization of the given validator definition …\nRequests authorization of the given validator vote.\nDisplays an address to a user for confirmation.\nRequests the full viewing key from the custodian.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nAn Ed25519-based preauthorization, containing an Ed25519 …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe Ed25519 signature over the <code>TransactionPlan</code>.\nThe Ed25519 verification key used to verify the signature.\nGenerated client implementations.\nGenerated server implementations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>ParticipateRequest</code>.\nNested message and enum types in <code>ParticipateResponse</code>.\nRuns a Phase 2 MPC ceremony with dynamic slot allocation.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nThe protocol used to participate in the ceremony.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nRuns a Phase 2 MPC ceremony with dynamic slot allocation.\nServer streaming response type for the Participate method.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nThe protocol used to participate in the ceremony.\nCompress responses with the given encoding, if the client …\nSent by the participant after getting a <code>ContributeNow</code> …\nSent at the beginning of the connection to identify the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nSent to the participant to confim their contribution was …\nSent to the participant to inform them that they should …\nStreamed to the participant to inform them of their …\nThe total number of participants in the queue.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bid for the most recently executed contribution slot.\nDecodes an instance of the message from a buffer, and …\nThe most recent CRS, which the participant should update.\nThe position of the participant in the queue.\nThe participant’s current bid.\nABCIQueryRequest defines the request structure for the …\nABCIQueryResponse defines the response structure for the …\nBroadcastTxAsyncRequest is the request type for the …\nBroadcastTxAsyncResponse is the response type for the …\nBroadcastTxSyncRequest is the request type for the …\nBroadcastTxSyncResponse is the response type for the …\nGetBlockByHeightRequest is the request type for the …\nGetBlockByHeightResponse is the response type for the …\nGetStatusRequest is the request type for the …\nGetStatusResponse is the response type for the …\nGetTxRequest is the request type for the GetTx RPC method.\nGetTxResponse is the response type for the GetTx RPC …\nThese are implemented in tendermint, but not in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of transaction to retrieve\nHash of transaction\nnondeterministic\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnondeterministic\nInclude proofs of the transaction’s inclusion in the …\nGenerated client implementations.\nGenerated server implementations.\nDefines the gRPC query service for proxying requests to an …\nABCIQuery defines a query handler that supports ABCI …\nEnable decompressing responses.\nBroadcast a transaction asynchronously.\nBroadcast a transaction synchronously.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nGetBlockByHeight queries block for given height.\nStatus queries the current status.\nFetch a transaction by hash.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\nDefines the gRPC query service for proxying requests to an …\nABCIQuery defines a query handler that supports ABCI …\nEnable decompressing requests with the given encoding.\nBroadcast a transaction asynchronously.\nBroadcast a transaction synchronously.\nReturns the argument unchanged.\nGetBlockByHeight queries block for given height.\nStatus queries the current status.\nFetch a transaction by hash.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nRequests the current app parameters from the view service.\nRequests information on an asset by asset id\nRequests all assets known to the view service.\nRequests all assets known to the view service.")