searchState.loadedDescShard("namada_shielded_token", 0, "Namada shielded token.\nA representation of a leaf in the conversion tree\nA representation of the conversion state\nA 256 bit number with <code>POS_DECIMAL_PRECISION</code> number of Dec …\nContains the error value\nA MASP ExtendedSpendingKey\nA MASP FullViewingKey\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nWrapper type around <code>Epoch</code> for type safe operations …\nA MASP transaction.\nWrapper for masp_primitive’s TxId\nRepresents any MASP value\nContains the success value\nAn extension to <code>Option</code> to allow turning <code>None</code> case to an …\nA MASP PaymentAddress\nStorage read prefix iterator\nResult of a storage API call.\nResult extension to easily wrap custom errors into <code>Error</code>.\nToken parameters for each kind of asset held on chain\nCommon storage read interface\nCommon storage write interface\nAble to borrow mutable conversion state.\nGet the absolute value of self as integer\nGet the non-negative difference between two <code>Dec</code>s.\nMap assets to their latest conversion and position in …\nReturn the integer value of a <code>Dec</code> by rounding up.\nDo addition of two <code>Dec</code>s\nChecked division\nChecked multiplication. Return <code>None</code> if overflow. This …\nChecked negation\nDo subtraction of two <code>Dec</code>s\nMASP rewards conversions\nThe actual conversion and generator\nBorrow mutable conversion state\nDelete a value at the given key from storage.\nDelete all key-vals with a matching prefix.\nThe denomination associated with the above toke\nThe digit position covered by this asset type\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nThe masp epoch of the asset type\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the address from the first key segment if it’s …\nReturn the segment at the index parameter\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGet the height of the first block of the current epoch.\nGiven the epoch at the given block height.\nGet the height of the first block of the given epoch.\nGet the native token address\nGiven the information about predecessor block epochs\nGet the transaction index.\nStorage <code>has_key</code> in. It will try to read from the storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>std::result::Result</code> into storage_api <code>Result</code>.\nReturns <code>true</code> if the key is empty\nReturn if the <code>Dec</code> is negative\nCheck if the given key is a key to a validity predicate. …\nCheck if value is zero\nIterates over all addresses in the key segments\nStorage prefix iterator. It will try to read from the …\nStorage prefix iterator ordered by the storage keys. It …\nReturns a new key with segments of <code>Self</code> and the given key\nShielded Pool nominal derivative gain\nShielded Pool nominal proportional gain for the given token\nReturns the last segment of the key, or <code>None</code> if it is …\nThe position of this leaf in the conversion tree\nReturns the length\nTarget amount for the given token that is locked in the …\nMASP verification wrappers.\nMaximum reward rate\nMint MASP rewards tokens and increment the stored total …\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate a new <code>Dec</code> using a mantissa and a scale.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nChange to the next masp epoch.\nThe last amount of the native token distributed\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T&gt;</code>, mapping [<code>Some(v)</code>…\nThe representation of 1\nThe representation of 1 / 3\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nChange to the previous masp epoch.\nReturns a new key with segments of <code>Self</code> and the given …\nStorage read Borsh encoded value. It will try to read from …\nStorage read raw bytes. It will try to read from the …\nRead the masp token map.\nRead the total rewards minted by MASP.\nThe segments of the key in the original (left-to-right) …\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nShielded token storage keys\nReturns a sub key without the first segment\nConvert the Dec type into a I256 with truncation\nConvert the Dec type into a Uint with truncation\nThe token associated with this asset type\nThe tree currently containing all the conversions\nPerforms division with truncation.\nConverts and <code>Epoch</code> into a <code>MaspEpoch</code> based on the provided …\nThe representation of 2\nThe representation of 2 / 5\nThe representation of 2 / 3\nMASP utilities\nMASP verification wrappers.\nReturns a key of the validity predicate of the given …\nMASP native VP\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nWrap another <code>std::error::Error</code> with a static message.\nAdd a static message to a possible error in <code>Result</code>.\nWrite a value to be encoded with Borsh at the given key to …\nWrite a value as bytes at the given key to storage.\nInitialize parameters for the token in storage during the …\nWrite a new masp token map.\nThe representation of 0\nReturns a 0 masp epoch\nCompute the MASP rewards by applying the PD-controller to …\nCompute the precision of MASP rewards for the given token. …\nCompute shielded token inflation amount\nUpdate the MASP’s allowed conversions\nBuild error for masp errors\nThe context contains data that has been confirmed by the …\nThe possible sync states of the shielded context\nRepresents the amount used of different conversions\nShielded sync message dispatcher.\nShielded sync cache.\nRandomness seed for MASP integration tests to build proofs …\nGeneric error\nInsufficient funds error\na masp amount\na masp change\nData to log the error of a batch of masp transactions\nData to log the error of a single masp transaction\nThe data for a masp fee payment\nA task env whose backing thread-pool uses a no-op panic …\nThe data for a masp transfer relative to a given source\nThe data for a masp transfer relative to a given target\nShielded pool data for a token\nThe data for a single masp transfer\nThe network to use for MASP\nMaps a shielded tx to the index of its first output note.\nA configuration used to tune the concurrency parameters of …\nShielded transfer\nAbstracts platform specific details away from the logic of …\nThe context possibly contains that that has not yet been …\nA type tracking the notes used to construct a shielded …\nRepresents the changes that were made to a list of …\nRepresents the changes that were made to a list of …\nA return type for gen_shielded_transfer\nFreeze a Builder into the format necessary for inclusion …\nMaps the note index (in the commitment tree) to a witness\nthe token address\nThe error batch\nCreate a builder for building <code>ShieldedSyncConfig</code>. On the …\nShielded transfer builder\nLoad a cache of data as part of shielded sync if that …\nSave a cache of data as part of shielded sync if that …\nthe change in the token\nRetrieve the <code>Dispatcher</code> used to run shielded sync.\nEpoch in which the transaction was created\nGenerate a valid diversifier, i.e. one that has a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation of MASP functionality depending on a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad up the currently saved ShieldedContext\nGet a MASP transaction prover\nMASP transaction\nMetadata\ncreate a new <code>MaspLocalTaskEnv</code>\nRun the dispatcher\nSave the given ShieldedContext for future loads\nThe shielded wallet implementation\nHow many tokens are missing.\nMake a ViewingKey that can view notes encrypted by given …\nToken to be spent.\nHelper functions and types\nBuilder error returned from the masp library\nAn implementation of ShieldedUtils for standard filesystems\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to load the last saved shielded context from the given …\nInitialize a shielded transaction context that identifies …\nSave this confirmed shielded context into its associated …\nThe methods of the shielded wallet that depend on the …\nA trait that allows downstream types specify how a …\nRepresents the current state of the shielded pool from the …\nAdd the necessary transaction inputs to the builder.\nAdd the necessary transaction outputs to the builder\nMaps asset types to their decodings\nCollect enough unspent notes in this context to exceed the …\nComputes added_amt - required_amt taking care of …\nConvert the given amount into the latest asset types …\nCompute the total unspent notes associated with the …\nCompute the total unspent notes associated with the …\nConvert Namada amount and token type to MASP equivalents\nQuery the ledger for the decoding of the given asset type …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nMaps note positions to the diversifier of their payment …\nWe estimate the total rewards accumulated by the assets …\nReturns the argument unchanged.\nMake shielded components to embed within a Transfer …\nGet the asset type with the given epoch, token, and …\nEither get the denomination from the cache or query it\nCalls <code>U::from(self)</code>.\nDetermine if using the current note would actually bring …\nTry to load the last saved shielded context from the given …\nTry to load the last saved confirmed shielded context from …\nMaps note positions to their corresponding memos\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\nMaps viewing keys to applicable note positions\nUpdates the internal state with the data of the newly …\nUse the addresses already stored in the wallet to …\nQuery the ledger for the conversion that is allowed for …\nGet the last block height\nQuery for converting assets across epochs\nQuery the denomination of a token type\nQuery the MASP epoch\nGet the upper limit on the time to make a new block\nGet the address of the native token\nGroup all the information for every source/token and …\nSave this shielded context into its associated context …\nThe set of note positions that have been spent\nSync the current state of the multi-asset shielded pool in …\nThe sync state of the context\nThe commitment tree produced by scanning all transactions …\nLocation where this shielded context is saved\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nMaps note positions to their witness (used to make merkle …\nThe masp client implementation is capable of not only …\nType alias for a successful note decryption.\nError type returned by the methods of this trait\nA cache of fetched indexed transactions.\nAlways retry\nType alias for convenience and profit\nType alias for the entries of <code>IndexedNoteData</code> iterators\nBorrowed version of an <code>IndexedNoteEntry</code>\nThis abstracts away the implementation details of how …\nEnumerates the capabilities of a <code>MaspClient</code> implementation.\nThe masp client implementation is only capable of fetching …\nWhen retrying to fetch all notes in a loop, this dictates …\nLimit number of retries to a fixed number\nCache of decrypted notes.\nGiven a block height range we wish to request and a cache …\nReturn the capabilities of this client.\nCheck if this cache has already been populated for a given …\nAppend elements to the cache from an iterator.\nFetch the commitment tree of height <code>height</code>.\nFetch the tx notes map of height <code>height</code>.\nFetch shielded transfers from blocks heights in the range …\nFetch the witness map of height <code>height</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nCache <code>notes</code> decrypted with <code>vk</code>, indexed at <code>itx</code>.\nAdd a single entry to the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if empty\nCheck if empty\nIterates over the fetched transactions in the order they …\nReturn the last block height we can retrieve data from.\nCheck the length of the fetched cache\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if retries are exhausted.\nCheck if the lack of one or more capabilities in the masp …\nReturns the number of successful trial decryptions in …\nTake cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nIterates over the fetched transactions in the order they …\nThe key for the asset map\nKey segment prefix for the convert anchor\nThe key for the nominal derivative gain of a shielded pool …\nThe key for the nominal proportional gain of a shielded …\nLast calculated inflation value handed out\nThe last locked amount\nThe key for the locked amount target for a given asset\nThe key for the max reward rate for a given asset\nKey segment prefix for the note commitment anchor\nKey segment prefix for the note commitment merkle tree\nKey segment prefix for the nullifiers\nThe key for the token map\nThe key for the total inflation rewards minted by MASP\nCheck if the given storage key is MASP transparent balance …\nCheck if the given key is a masp commitment anchor\nCheck if the given storage key is a masp key\nCheck if the given storage key is a masp nullifier key\nCheck if the given storage key is a masp token map key\nCheck if the given storage key is allowed to be touched by …\nGet the key for the masp assets’ hash\nGet a key for a masp commitment tree anchor\nGet the key for the masp commitment tree\nGet the key for the masp convert tree anchor\nObtain the nominal derivative key for the given token\nObtain the nominal proportional key for the given token\nObtain the storage key for the last inflation of a token\nObtain the storage key for the last locked amount of a …\nObtain the locked target amount key for the given token\nThe max reward rate key for the given token\nGet a key for a masp nullifier\nGet the key for the masp token map\nThe max reward rate key for the given token\nHandle a MASP transaction.\nCheck if a transaction is a MASP transfer transaction.\nAppends the note commitments of the provided transaction …\nConvert circuit name\nEnv var to point to a dir with MASP parameters. When not …\nOutput circuit name\nMASP verifying keys\nRepresents an authorization where the Sapling bundle is …\nSpend circuit name\nconvert verifying key\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the path to MASP parameters from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noutput verifying key\nPartially deauthorize the transparent bundle\nMake sure the MASP params are present and load verifying …\nspend verifying key\nVerify a shielded transaction.\nMASP VP\nGeneric types for DI\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn if the parameter change was done via a governance …\nRun the validity predicate")