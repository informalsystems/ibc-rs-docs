searchState.loadedDescShard("namada_vm", 0, "Virtual machine modules for running transactions and …\nReference to host environment data, to be used from wasm …\nRead-only access to host data.\n<code>HostRef</code> with read-only access.\nRead and write access to host data.\n<code>HostRef</code> with read-write access.\nWASM Cache access level, used to limit dry-ran …\nRestricted read-only access for dry-ran transactions\nRegular read/write caches access\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference from the VM environment.\nGet a reference from the VM environment.\nGet a mutable reference from the VM environment.\nVirtual machine’s host environment exposes functions …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs access read/write?\nVirtual machine’s memory.\nWrap a reference to the VM environment.\nWrap a mutable reference to the VM environment.\nVM types can be passed between the host and guest via wasm …\nValidate an untrusted wasm code with restrictions that we …\nWASM compilation cache access\nDB type\nContains the error value\nContains the error value\nRecursive VP evaluator type\nStorage hasher type\nContains the success value\nContains the success value\nResult of a storage API call.\nA transaction’s host context\nResult of a tx host env fn call\nThese runtime errors will abort tx WASM execution …\nA transaction’s host environment\nA validity predicate’s host context\nA Validity predicate runner for calls from the <code>vp_eval</code> …\nA validity predicate’s host environment\nThe address of the account that owns the VP\nTo avoid unused parameter without “wasm-runtime” …\nTo avoid unused parameter without “wasm-runtime” …\nThe commitments inside the transaction\nThe commitments inside the transaction\nThe tx context contains references to host structures.\nThe VP context contains references to host structures.\nRead-only access to DB.\nRead-only access to DB.\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nEvaluate a given validity predicate code with the given …\nThe runner of the <code>vp_eval</code> function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse gas meter\nVP gas meter. In  <code>RefCell</code> to charge gas in read-only fns.\nTransaction gas meter. In  <code>RefCell</code> to charge gas in …\nUse gas meter and sentinel\nRead-only access to in-memory state.\nRead-only access to in-memory state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage prefix iterators.\nStorage prefix iterators.\nThe storage keys that have been changed. Used for calls to …\nThe VM memory for bi-directional data passing\nThe VM memory for bi-directional data passing\nCreate a new environment for transaction execution.\nCreate a new environment for validity predicate execution.\nCreate a new context for validity predicate execution.\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nCache for 2-step reads from host environment.\nCache for 2-step reads from host environment.\nTransaction sentinel. In  <code>RefCell</code> to charge gas in …\nAccess state from within a tx\nAccess state from within a VP\nAccess state from within a VP\nAccess state from within a tx\nThe transaction code is used for signature verification\nThe transaction code is used for signature verification\nAdd a gas cost incured in a transaction\nStorage delete function exposed to the wasm VM Tx …\nExpose the functionality to emit events to the wasm VM’s …\nGetting the block epoch function exposed to the wasm VM Tx …\nGetting the block header function exposed to the wasm VM …\nGetting the block height function exposed to the wasm VM Tx\nGetting the chain ID function exposed to the wasm VM Tx …\nExpose the functionality to query events from the wasm VM…\nGet the native token’s address\nGet predecessor epochs function exposed to the wasm VM Tx …\nGetting the transaction index function exposed to the wasm …\nStorage <code>has_key</code> function exposed to the wasm VM Tx …\nThe transaction index is used to identify a shielded …\nThe transaction index is used to identify a shielded …\nInitialize a new account established address.\nVerifier insertion function exposed to the wasm VM Tx …\nStorage prefix iterator next function exposed to the wasm …\nStorage prefix iterator function exposed to the wasm VM Tx …\nLog a string from exposed to the wasm VM Tx environment. …\nStorage read function exposed to the wasm VM Tx …\nRead temporary value (not committed to storage) from the …\nThis function is a helper to handle the first step of …\nSet the sentinel for an invalid tx section commitment\nAppends the new note commitments to the tree in storage\nUpdate a validity predicate function exposed to the wasm …\nVerify a transaction signature\nStorage write function exposed to the wasm VM Tx …\nTemporary storage write function exposed to the wasm VM Tx …\nYield a byte array value from the guest.\nThe verifiers whose validity predicates should be …\nThe verifiers whose validity predicates should be …\nCalled from VP wasm to request to use the given gas amount\nEvaluate a validity predicate with the given input data.\nGetting the block epoch function exposed to the wasm VM VP …\nGetting the block header function exposed to the wasm VM …\nGetting the block height function exposed to the wasm VM VP\nGetting the chain ID function exposed to the wasm VM VP …\nExpose the functionality to query events from the wasm VM…\nGet the native token’s address\nGet predecessor epochs function exposed to the wasm VM VP …\nGetting the transaction hash function exposed to the wasm …\nGetting the block height function exposed to the wasm VM VP\nStorage <code>has_key</code> in posterior state (after tx execution) …\nStorage <code>has_key</code> in prior state (before tx execution) …\nStorage prefix iterator for prior or posterior state …\nStorage prefix iterator function for posterior state …\nStorage prefix iterator function for prior state (before …\nLog a string from exposed to the wasm VM VP environment. …\nStorage read posterior state (after tx execution) function …\nStorage read prior state (before tx execution) function …\nStorage read temporary state (after tx execution) function …\nThis function is a helper to handle the first step of …\nVerify a transaction signature in the host environment for …\nYield a byte array value from the guest.\nWrap another <code>std::error::Error</code> with a static message.\nRead-only access to write log.\nMutable access to write log.\nStorage for byte buffer values yielded from the guest.\nStorage for byte buffer values yielded from the guest.\nError type for the methods’ results.\nAbstract representation of virtual machine’s memory.\nReturns bytes read from memory together with the …\nReturns string read from memory together with the …\nWrite bytes to memory. Returns the gas cost.\nWrite string to memory. Returns the gas cost.\nInput for validity predicate wasm module call\nThe address of the validity predicate’s owning account\nThe input transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe storage changed keys from the write log of storage …\nThe verifiers to trigger VPs")