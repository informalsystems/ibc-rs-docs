searchState.loadedDescShard("namada_events", 0, "Events emitted by the Namada ledger.\nError resulting from an invalid encoding of an event …\nIndicates an event is to do with a finalized block.\nThe domain of the event to emit.\nUsed in sub-systems that may emit events.\nCustom events that can be queried from Tendermint using a …\nErrors to do with emitting events.\nIndicates if an event is emitted do to an individual Tx or …\nAn event to be emitted in Namada.\nABCI event type.\nBuild an <code>EventType</code> segment by segment.\nInvalid event domain.\nError when parsing an event type\nError resulting from a missing event attribute.\nError when parsing attributes from an event JSON.\nMissing event domain.\nMissing key in attributes.\nMissing value in attributes.\nIndicates an event is to do with an individual transaction.\nAppend a new segment to the final <code>EventType</code> and return a …\nReturn a reference to the event’s attributes.\nReturn a mutable reference to the event’s attributes.\nBuild the final <code>EventType</code>.\nRetrieve the domain of some event.\nCompute the gas cost of emitting this event. Returns <code>None</code> …\nEmit a single event.\nEmit a batch of events.\nInstantiate a new <code>EventType</code> in const contexts. Mostly …\nExtend events with additional fields.\nExtend this <code>Event</code> with additional data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if a certain attribute is present in the event.\nCheck if this <code>Event</code> has a subset of the keys and values in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the attributes of the event, destroying it in the …\nReturn the type of the event.\nReturn the level of the event.\nJoins the attribute sets of two <code>Event</code>\nCreate a new event type.\nCreate a new event with no attributes and the given …\nCreate a new <code>EventTypeBuilder</code> with the domain of the given …\nCreate a new <code>EventTypeBuilder</code> with the given type.\nGet the raw string value corresponding to a given …\nGet the value corresponding to a given attribute.\nGet the value corresponding to a given attribute, if it …\nRetrieve the sub-domain of some event.\nAppend a new segment to the final <code>EventType</code> and return the …\nMap of event attributes.\nExtend an <code>Event</code> with the given closure.\nProvides event composition routines.\nEvent composed of various other event extensions.\nExtend an <code>Event</code> with a new domain.\nChecks for the presence of an attribute in the provided …\nRepresents an entry in the attributes of an <code>Event</code>.\nImplement the Display and FromStr traits for any serde type\nExtend an <code>AttributesMap</code> implementation with the ability to …\nExtend an event with additional data.\nExtend an event with additional attributes.\nExternal chain address.\nExtend an <code>Event</code> with block height information.\nReference to an ibc tx data section\nA mapping between the index of a transaction in a block …\nExtend an <code>Event</code> with info data.\nInternal chain address in Namada.\nKey to read or write and event attribute to.\nExtend an <code>Event</code> with log data.\nExtend an <code>Event</code> with <code>masp_data_refs</code> data, mapping a …\nReference to a MASP section\nA type representing the possible reference to some MASP …\nA list of MASP tx references\nParsed domain of some event.\nRead a raw (string encoded) attribute from an event’s …\nRead an attribute from an event’s attributes.\nExtend an <code>Event</code> with transaction hash information.\nA user account.\nData to be stored in the given <code>KEY</code>.\nThe attribute to be read.\nIdentical to <code>Self::Value</code>, with the exception that this …\nReturn a new implementation of <code>EventAttributeChecker</code>.\nCheck if the associated attribute is present in the …\nDispatch a callback on a list of attribute kinds.\nBuild a new <code>Domain</code> to extend an event with.\nAdd additional data to the specified <code>event</code>.\nAdd additional attributes to some <code>event</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new attribute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner domain as a <code>String</code>.\nReturn the data to be stored in the given <code>KEY</code>.\nCheck for the existence of an attribute.\nCheck if the associated attribute is present in the …\nIterate over all the key value pairs.\nThe set of masp data\nCreate a new composed event.\nRead a string encoded attribute from the provided event …\nRead a string encoded attribute from the provided event …\nRead an attribute from the provided event attributes.\nRead an attribute from the provided event attributes.\nRetrieve an attribute.\nThe transaction index in the block\nCompose an event with new data.\nInsert a new attribute into a map of event attributes.")