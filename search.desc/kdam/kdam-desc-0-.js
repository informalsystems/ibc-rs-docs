searchState.loadedDescShard("kdam", 0, "A console progress bar library for Rust. (inspired by tqdm …\nAnimation styles for Bar.\nCore implemention of console progress bar.\nCreate Bar with custom configurations.\nComman progress bar functionalities shared between …\nIterable version of Bar.\nColour applicable to text.\nRowManager allows to store and update many progress bars.\nIterators decoration with BarIter.\nAnimation style to display progress bar. (default: …\nApply colour to given text.\nBuild a new Bar with custom configurations.\nCreate a new BarBuilder.\nClear current progress bar display.\nProgress bar colour (e.g. “green”, “#00ff00”). …\nReturns whether progress is completed or not.\nCreate a new Animation::Custom enum variant.\nDon’t display progress bar until few seconds have …\nPrefix for progress bar. (default: <code>&quot;&quot;</code>)\nWhether to disable the entire progress bar wrapper. …\nAutomatically adjusts miniters to correspond to mininterval…\nIf <code>true</code>, constantly alters ncols to the environment …\nSet and returns progress elapsed time.\nReturns formatted counter value.\nReturns formatted elapsed time.\nReturns formatted progress percentage.\nReturns formatted progress rate.\nReturns formatted remaining time.\nRender progress bar animation with opening and closing …\nReturns formatted total value.\nIf <code>true</code>, each progress bar update method call will be …\nFunctions for formatting values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new RowManager from terminal window size.\nReturns a mutable reference to progress bar.\nReturns whether progress is indefinite i.e. <code>total</code> is <code>0</code> or …\nThe initial counter value. (default: <code>0</code>)\nTake input via progress bar (without overlaping with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, and the number of iterations per second is less …\nIf <code>true</code>, keeps all traces of the progress bar upon …\nMinimum progress display update interval (in seconds). …\nMinimum progress display update interval (in iterations). …\nMonitor mode for progress bars.\nThe width of the entire output message. If <code>specified</code>, …\nSet and returns number of columns for bar animation with …\nCreate a new RowManager with specified number of rows.\nCreate a new Bar with a total value.\nUpdate and print the required stuff for progress bar at …\nReturns progress percentage, like <code>0.62</code>, <code>0.262</code>, <code>1.0</code>.\nSpecify the line offset to print this progress bar …\nSpecify additional stats to display at the end of the …\nPush a progress bar returning back it’s index.\nReturns progress/iterations rate.\nForce refresh current progress bar display.\nReturns remaining time (ETA) for progress completion.\nRemoves a progress bar and returns it.\nRender progress bar text.\nRender progress bar animation.\nResets counter to 0 for repeated use.\nSet/Modify description property.\nSet/Modify postfix property.\nReturns whether to trigger a display update or not.\nCreate a new Color::Solid enum variant.\nReturns extra spaces consumed by fmt_render.\nReturns whether progress is started i.e. <code>counter</code> is <code>0</code> or …\nTerminal related utilities.\nThe number of expected iterations. If <code>unspecified</code>, …\nDecorate any sized iterator to BarIter.\nDecorate any sized iterator to BarIter.\ntqdm like macro for creating Bar and BarIter.\nDecorate any sized iterator to BarIter with existing Bar.\nUnit that will be used to define the unit of each …\nDivide values by this unit_divisor. It is ignored unless …\nIf <code>true</code>, the number of iterations will be reduced/scaled …\nManually update the progress bar, useful for streams such …\nSet counter value instead of incrementing counter through …\nPrint a message via progress bar (without overlaping with …\nWrite progress bar rendered text to a writer (useful for …\nSelect writer between <code>stdout</code> and <code>stderr</code> to display …\nFormats a number of seconds as a clock time, [H:]MM:SS and …\nFormats a number (greater than unity) with SI order of …\nFormats seconds as a clock time, SSs | MMmin | Hhr | Ddays.\nMonitor mode for Bar.\nAdd ANSI colour escape codes to the given text for …\nStderr and Stdout writer.\nAdd ANSI colour escape codes to the given text.\nCreate ANSI colour escape code from primary colours, hex …\nReturns the argument unchanged.\nHide cursor.\nEnable/Disable colorization property of colorizer trait.\nCalls <code>U::from(self)</code>.\nReturns display length of string by triming ANSI escape …\nPrint text buffer in terminal followed by a flush.\nPrint text buffer in terminal followed by a flush at …\nShow cursor.\nInverse of colorize method. This method trims all ANSI …\nGet terminal width.")