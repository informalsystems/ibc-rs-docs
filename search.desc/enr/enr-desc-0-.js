searchState.loadedDescShard("enr", 0, "Ethereum Node Record (ENR)\nThe ENR, allowing for arbitrary signing algorithms.\nAn error type for handling various ENR operations.\nOwning iterator over all key/value pairs in the ENR.\nThe trait required for a key to sign and modify an ENR …\nTrait for keys that are uniquely represented\nThe trait required for a <code>PublicKey</code> to verify an ENR record.\nThe ENR is too large.\nThe entered RLP data is invalid.\nThe <code>NodeId</code> of an ENR (a 32 byte identifier).\nThe sequence number is too large.\nThere was an error with signing an ENR record.\nThe identity scheme is not supported.\nGet a <code>builder::Builder</code> with the default identity scheme.\nCompare if the content of 2 Enr’s match.\nDecode raw bytes as corresponding public key.\nGet an empty Enr for the v4 identity scheme.\nEncodes the public key to bytes in compressed form, if …\nEncodes the public key in uncompressed form.\nReturns the ENR key identifier for the public key type. …\nProvides a method to decode a raw public key from an ENR …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads a custom key from the record if it exists, decoded …\nReads a custom key from the record if it exists, decoded …\nReads a custom key from the record if it exists as raw RLP …\nThe <code>id</code> of ENR record if it is defined.\nAdds or modifies a key/value to the ENR record. A <code>EnrKey</code> …\nAdds or modifies a key/value to the ENR record. A <code>EnrKey</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IPv4 address of the ENR record if it is …\nReturns the IPv6 address of the ENR record if it is …\nReturns wether the node can be reached over TCP or not.\nReturns wether the node can be reached over UDP or not.\nReturns an iterator over all key/value pairs in the ENR.\nCreates a new node record from 32 bytes.\nThe <code>NodeId</code> for the record.\nParses a byte slice to form a node Id. This fails if the …\nReturns the public key associated with current key pair.\nReturns the public key of the ENR record.\nGenerates a random <code>NodeId</code>.\nReturns a <code>RawNodeId</code> which is a 32 byte list.\nRemoves key/value mappings and adds or overwrites …\nThe current sequence number of the ENR record.\nSets the <code>ip</code> field of the ENR. Returns any pre-existing IP …\nSets a new public key for the record.\nAllows setting the sequence number to an arbitrary value.\nSets the <code>tcp</code> field of the ENR. Returns any pre-existing …\nSets the <code>tcp6</code> field of the ENR. Returns any pre-existing …\nSets the IP and TCP port in a single update with a single …\nSets the <code>udp</code> field of the ENR. Returns any pre-existing …\nSets the <code>udp6</code> field of the ENR. Returns any pre-existing …\nSets the IP and UDP port in a single update with a single …\nPerforms ENR-specific signing for the <code>v4</code> identity scheme.\nThe signature of the ENR record.\nReturns the current size of the ENR.\nThe TCP port of ENR record if it is defined.\nProvides a socket (based on the TCP port), if the IP and …\nThe IPv6-specific TCP port of ENR record if it is defined.\nProvides a socket (based on the TCP port), if the IPv6 and …\nProvides the URL-safe base64 encoded “text” version of …\nThe UDP port of ENR record if it is defined.\nProvides a socket (based on the UDP port), if the IPv4 and …\nThe IPv6-specific UDP port of ENR record if it is defined.\nProvides a socket (based on the UDP port), if the IPv6 and …\nVerify the signature of the ENR record.\nVerify an ENR signature for the <code>v4</code> identity scheme.")