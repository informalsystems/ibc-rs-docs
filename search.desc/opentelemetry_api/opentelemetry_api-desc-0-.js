searchState.loadedDescShard("opentelemetry_api", 0, "OpenTelemetry provides a single set of APIs, libraries, …\nA Value::Array containing homogeneous values.\nArray of homogeneous values\nArray of bools\nbool values\nAn execution-scoped collection of values.\nA guard that resets the current context to the prior …\nMarker trait for errors returned by exporters\nArray of floats\nf64 values\nArray of integers\ni64 values\nInformation about a library or crate providing …\nThe key part of attribute KeyValue pairs.\nA key-value pair describing an attribute.\nArray of strings\nString values\nWrapper for string-like values\nThe value part of attribute KeyValue pairs.\nCreate a <code>KeyValue</code> pair for arrays.\nReturns a reference to the underlying key name\nString representation of the <code>Value</code>\nReturns a string slice to this value\nReplaces the current context on this thread with this …\nOpenTelemetry Attributes\nPrimitives for sending name/value data across system …\nCreate a <code>KeyValue</code> pair for <code>bool</code> values.\nReturns an immutable snapshot of the current thread’s …\nReturns a clone of the current thread’s context with the …\nThe name of exporter that returned this error\nCreate a <code>KeyValue</code> pair for <code>f64</code> values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>String</code> to a <code>Key</code>.\nConvert a <code>&amp;str</code> to a <code>Key</code>.\nConvert a <code>String</code> to a <code>Key</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new const <code>Key</code>.\nReturns a reference to the entry for the corresponding …\nUtilities for working with global telemetry primitives\nCreate a <code>KeyValue</code> pair for <code>i64</code> values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe attribute name\nOpenTelemetry Metrics API\nThe library name.\nCreates an empty <code>Context</code>.\nCreate a new <code>Key</code>.\nCreate a new <code>KeyValue</code> pair.\nCreate an new instrumentation library.\nOpenTelemetry Propagator interface\nSchema url used by this library.\nCreate a <code>KeyValue</code> pair for string-like values.\nAPI for tracing applications and libraries.\nThe attribute value\nThe library version.\nReturns a copy of the context with the new value included.\nAn immutable set of distinct attributes.\nDefault attribute encoding strategy\nEncoder is a mechanism for serializing an attribute set …\nEncoderID is used to identify distinct Encoder …\nAn iterator over the entries of a <code>Set</code>.\nMerge two iterators, sorting by key\nBuild a new default encoder\nEncode returns the serialized encoding of the attribute …\nEncode the attribute set with the given encoder and cache …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new attribute set form a distinct set of …\nImpl of Hash for <code>KeyValue</code>\nA value that is unique for each class of attribute …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the set of attributes are empty.\nCheck if the id is valid\nIterate over the attribute key value pairs.\nThe attribute set length.\nMerge two iterators, yielding sorted results\nBuild a new encoder id\nA set of name/value pairs describing user-defined …\nMethods for sorting and retrieving baggage data in a …\nAn optional property set that can be added to <code>Baggage</code> …\nAn iterator over the entries of a <code>Baggage</code>.\n<code>Baggage</code> name/value pairs with their associated metadata.\nReturn underlying string\nReturns a reference to this context’s baggage, or the …\nReturns a clone of the current context with the included …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value associated with a given …\nReturns a reference to the value and metadata associated …\nInserts a name/value pair into the baggage.\nInserts a name/value pair into the baggage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the baggage contains no items.\nGets an iterator over the baggage items, sorted by name.\nDimension or event key\nReturns the number of attributes for this baggage\nMetadata associate with this key value pair\nCreates an empty <code>Baggage</code>.\nCreate a new <code>KeyValue</code> pair with metadata\nRemoves a name from the baggage, returning the value …\nDimension or event value\nReturns a clone of the given context with the included …\nReturns a clone of the given context with the included …\nWraps the <code>BoxedTracer</code>’s <code>Span</code> so it can be used …\nWraps the <code>GlobalTracerProvider</code>’s <code>Tracer</code> so it can be …\nWrapper for error from both tracing and metrics part of …\nRepresents the globally configured <code>MeterProvider</code> instance …\nRepresents the globally configured <code>TracerProvider</code> instance …\nAn issue raised by the metrics module.\nAllows a specific <code>Tracer</code> to be used generically by …\nAllows a specific <code>TracerProvider</code> to be used generically by …\nOther types of failures not covered by the variants above.\nFailed to export traces.\nRecords events at a specific time in the context of a …\nCreate a span from a <code>SpanBuilder</code>\nReturns a trait object so the underlying implementation …\nReturns a trait object so the underlying implementation …\nFinishes the span with given timestamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes a closure with a reference to the current global …\nHandle error using the globally configured error handler.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Span</code> is recording information like …\nCreates a named <code>Meter</code> via the configured …\nReturns an instance of the currently configured global …\nCreates a <code>Meter</code> with the name, version and schema url.\nCreate a new global meter provider\nSets a single <code>Attribute</code> where the attribute properties are …\nSet global error handler.\nSets the given <code>MeterProvider</code> instance as the current …\nSets the status of the <code>Span</code>. If used, this will override …\nSets the given <code>TextMapPropagator</code> propagator as the current …\nSets the given <code>TracerProvider</code> instance as the current …\nShut down the current tracer provider. This will invoke …\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nCreates a named instance of <code>Tracer</code> via the configured …\nReturns an instance of the currently configured global …\nUpdates the <code>Span</code>’s name.\nCreate a versioned tracer using the global provider.\nCreates a versioned named tracer instance that is a trait …\nReturn a versioned boxed tracer\nAn SDK implemented async instrument that records …\nAn SDK implemented instrument that records independent …\nAn SDK implemented async instrument that records …\nAn instrument that records increasing values.\nContains the error value\nFail to export metrics\nAn instrument that records a distribution of values.\nErrors when merging aggregators of incompatible types.\nErrors when processor logic is incorrect\nConfiguration for building an instrument.\nSDK implemented trait for creating instruments\nInvalid instrument configuration such invalid instrument …\nErrors when requesting quantiles out of the 0-1 range.\nProvides access to instrument instances for recording …\nReturns named meter instances\nErrors when registering to instruments with the same name …\nErrors returned by the metrics API.\nErrors when recording nan values.\nErrors when recording negative values in monotonic sums.\nErrors when requesting data when no data has been collected\nErrors when aggregator cannot subtract\nAn async instrument that records increasing values.\nAn instrument that records independent readings.\nAn async instrument that records increasing or decreasing …\nContains the success value\nOther errors not covered by specific cases.\nA specialized <code>Result</code> type for metric operations.\nAn SDK implemented instrument that records increasing …\nAn SDK implemented instrument that records a distribution …\nAn SDK implemented instrument that records increasing or …\nUnits denote underlying data units tracked by <code>Meter</code>s.\nAn instrument that records increasing or decreasing values.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nView unit as &amp;str\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value via …\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\ncreates an instrument for recording changes of a value.\ncreates an instrument builder for recording changes of a …\nCreates a new instrument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a named <code>Meter</code> instance.\nCreates a named <code>Meter</code> instance.\nCreate a new observable counter.\nCreate a new counter.\nCreate a new gauge\nCreate a new histogram.\nCreate a new up down counter.\nCreate a new observable up down counter.\nCreate a new named meter from an instrumentation provider\nCreate a new <code>Unit</code> from an <code>Into&lt;String&gt;</code>\nNo-op OpenTelemetry Metrics Implementation\nRecords an increment to the counter.\nRecords the state of the instrument.\nRecords the increment or decrement to the counter.\nRecords an increment to the counter.\nRecords the state of the instrument.\nRecords the increment or decrement to the counter.\nAdds an additional value to the distribution.\nAdds an additional value to the distribution.\nCaptures the function that will be called during data …\nCaptures the function that will be called during data …\nValidate the instrument configuration and creates a new …\ncreates an instrument for recording increasing values.\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording a distribution of …\ncreates an instrument builder for recording a distribution …\ncreates an instrument for recording increasing values via …\ncreates an instrument builder for recording increasing …\ncreates an instrument for recording the current value via …\ncreates an instrument builder for recording the current …\nCreates an implementation of the <code>Meter</code> interface.\nSet the description for this instrument\nSet the unit for this instrument.\nA no-op async instrument.\nA no-op instance of a <code>Meter</code>\nA no-op instance of a <code>MetricProvider</code>\nA no-op sync instrument\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new no-op meter provider.\nCreate a new no-op meter core.\nCreate a new no-op sync instrument\nCreate a new no-op async instrument\nExtractor provides an interface for removing fields from …\nInjector provides an interface for adding fields from an …\nGet a value from a key from the underlying data.\nCollect all the keys from the underlying data.\nAdd a key and value to the underlying data.\nText Propagator\nAn iterator over fields of a <code>TextMapPropagator</code>\nMethods to inject and extract a value as text into …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nRetrieves encoded data using the provided <code>Extractor</code>. If no …\nReturns iter of fields used by <code>TextMapPropagator</code>\nReturns the argument unchanged.\nProperly encodes the values of the current <code>Context</code> and …\nProperly encodes the values of the <code>Context</code> and injects …\nCalls <code>U::from(self)</code>.\nCreate a new <code>FieldIter</code> from a slice of propagator fields\nIndicates that the span describes a request to some remote …\nIndicates that the span describes a child of an …\nSpan will not be recorded and all events and attributes …\nContains the error value\nThe operation contains an error.\nEvents record things that happened during a <code>Span</code>’s …\nExport failed with the error returned by the exporter\nExport failed to finish after certain period and processor …\nExtension trait allowing futures, streams, and sinks to be …\nInvalid trace id\nInvalid span id\nDefault value.\nLink is the relationship between two Spans.\nContains the success value\nThe operation has been validated by an application …\nA hash table implementation that preserves insertion order …\nOther errors propagated from trace SDK that weren’t …\nIndicates that the span describes the initiators of an …\nSpan data will be recorded and exported.\nSpan data wil be recorded, but not exported.\nTrace flags with the <code>sampled</code> flag set to <code>1</code>.\nDecision about whether or not to sample\nThe result of sampling logic for a given span.\nIndicates that the span covers server-side handling of a …\nThe interface for a single operation within a trace.\nThe <code>Span</code> type used by this tracer.\n<code>SpanBuilder</code> allows span attributes to be configured before …\nImmutable portion of a <code>Span</code> which can be serialized and …\nAn 8-byte value which identifies a given span.\n<code>SpanKind</code> describes the relationship between the <code>Span</code>, its …\nA reference to the currently active span in this context.\nThe status of a <code>Span</code>.\nMethods for storing and retrieving trace data in a <code>Context</code>.\nErrors returned by the trace API.\nFlags that can be set on a <code>SpanContext</code>.\nA 16-byte value which identifies a given trace.\nDescribe the result of operations in tracing API.\nTraceState carries system-specific configuration data, …\nThe interface for constructing <code>Span</code>s.\nThe <code>Tracer</code> type that this provider will return.\nTypes that can create instances of <code>Tracer</code>.\nThe default status.\nA future, stream, or sink that has an associated context.\nRecord an event in the context this span.\nRecord an event in the context this span.\nRecord an event in the context this span.\nRecord an event with a timestamp in the context this span.\nRecord an event with a timestamp in the context this span.\nSpan attributes\nExtra attributes to be added to the span by the sampler\nAttributes that describe this event.\nAttributes that describe this link.\nStart a <code>Span</code> from a <code>SpanBuilder</code>.\nStart a <code>Span</code> from a <code>SpanBuilder</code>.\nStart a span from a <code>SpanBuilder</code> with a parent context.\nComputes in <strong>O(1)</strong> time.\nRemove all key-value pairs in the map, while preserving …\nReturn <code>true</code> if an equivalent to <code>key</code> exists in the map.\nReturns a clone of the current context with the included …\nThe decision about whether or not to sample.\nReturn an empty <code>OrderMap</code>\nRemoves the given key-value pair from the <code>TraceState</code>. If …\nClears the <code>IndexMap</code> in the given index range, returning …\nThe number of attributes that were above the configured …\nThe number of attributes that were above the configured …\nCreate an invalid empty span context\nSignals that the operation described by this span has now …\nSignals that the operation described by this span has now …\nSignals that the operation described by this span has now …\nSpan end time\nSignals that the operation described by this span ended at …\nSignals that the operation described by this span ended at …\nGet the given key’s corresponding entry in the map for …\nCreate a new error status with a given description.\nSpan events\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nExtend the map with all key-value pairs in the iterable.\nGet the first key-value pair\nGet the first key-value pair, with mutable access to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a trace id from its representation as a byte array.\nCreate a span id from its representation as a byte array.\nConverts a string in base 16 to a trace id.\nConverts a string in base 16 to a span id.\nCreate an <code>OrderMap</code> from the sequence of key-value pairs in …\nCreate an <code>OrderMap</code> from the sequence of key-value pairs in …\nCreates a new <code>TraceState</code> from the given key-value …\nCreate a new span builder from a span name\nReturn a reference to the value stored for <code>key</code>, if it is …\nRetrieves a value for a given key from the <code>TraceState</code> if …\nExecutes a closure with a reference to this thread’s …\nReturn item index, key and value\nReturn a mutable reference to the element pointed at by <code>key</code>…\nGet a key-value pair by index\nGet a key-value pair by index\nReturn item index, if it exists in the map\nReturn references to the key-value pair stored for <code>key</code>, if …\nReturn a mutable reference to the element pointed at by <code>key</code>…\nReturns whether or not an active span has been set.\nReturn a reference to the map’s <code>BuildHasher</code>.\nCreates a new <code>TraceState</code> header string, delimiting each …\nCreates a new <code>TraceState</code> header string, with the given …\nStart a new span and execute the given closure with …\nStart a new span and execute the given closure with …\nReturns a reference to the value at the supplied <code>index</code>.\nReturns a reference to the value corresponding to the …\nReturns a mutable reference to the value at the supplied …\nReturns a mutable reference to the value corresponding to …\nInsert a key-value pair in the map.\nInserts the given key-value pair into the <code>TraceState</code>. If a …\nInsert a key-value pair in the map, and get their index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an owning iterator over the keys of the map, in …\nReturn an owning iterator over the values of the map, in …\nReturns true if the map contains no elements.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if this span is recording information.\nReturns <code>true</code> if the span context was propagated from a …\nReturns <code>true</code> if the <code>sampled</code> flag is set\nReturns <code>true</code> if the <code>sampled</code> trace flag is set.\nReturns <code>true</code> if the span context has a valid (non-zero) …\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the key-value pairs of the map, in …\nReturn an iterator over the keys of the map, in their order\nGet the last key-value pair\nGet the last key-value pair, with mutable access to the …\nReturn the number of key-value pairs in the map.\nSpan Links\nMark a given <code>Span</code> as active.\nSpan name\nThe name of this event.\nCreate a new map. (Does not allocate)\nConstruct new trace flags\nConstruct a new <code>SpanContext</code>\nCreate new <code>Event</code>\nCreate a new link.\nNo-op trace impls\nRemove the last key-value pair\nRecord an error as an event for this span.\nRecord an error as an event for this span.\nRecord an error as an event for this span.\nReserve capacity for <code>additional</code> more key-value pairs.\nScan through each key-value pair in the map and keep those …\nSampling result\nSet an attribute of this span.\nSet an attribute of this span.\nSet multiple attributes of this span.\nSet multiple attributes of this span.\nSet multiple attributes of this span.\nSets the status of this <code>Span</code>.\nSets the status of this <code>Span</code>.\nRemove the key-value pair equivalent to <code>key</code> and return its …\nRemove and return the key-value pair equivalent to <code>key</code>.\nRemove the key-value pair equivalent to <code>key</code> and return it …\nRemove the key-value pair by index\nShrink the capacity of the map as much as possible.\nReturns a reference to this context’s span, or the …\nCreates a span builder.\nCreates a span builder.\nA reference to the <code>SpanContext</code> for this span.\nA reference to the <code>SpanContext</code> for this span.\nThe span context of the linked span.\nThe <code>SpanId</code> for this span context.\nSpan id, useful for integrations with external tracing …\nSpan kind\nSplits the collection into two at the given index.\nStarts a new <code>Span</code>.\nStarts a new <code>Span</code>.\nBuilds a span with the given tracer from this …\nSpan start time\nStarts a new <code>Span</code> with a given context.\nStarts a new <code>Span</code> with a given context.\nBuilds a span with the given tracer from this …\nSpan status\nThe time at which this event occurred.\nReturn the representation of this trace id as a byte array.\nReturn the representation of this span id as a byte array.\nReturns the flags as a <code>u8</code>\nReturns details about the trace.\nThe <code>TraceId</code> for this span context.\nTrace id, useful for integrations with external tracing …\nA reference to the span context’s <code>TraceState</code>.\nTrace state from parent context, may be modified by …\nReturns a new tracer with the given name.\nReturns a new tracer with the given name.\nShortens the map, keeping the first <code>len</code> elements and …\nUpdates the span’s name.\nUpdates the span’s name.\nReturn an iterator over the values of the map, in their …\nReturn an iterator over mutable references to the values …\nReturns a new versioned tracer with a given name.\nAssign span attributes from an iterable.\nAssign span attributes.\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nCreate a new map with capacity for <code>n</code> key-value pairs. …\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the provided <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nAttaches the current <code>Context</code> to this type, returning a …\nAssign span end time\nAssign events\nCreate a new map with <code>hash_builder</code>.\nAssign span kind\nAssign links\nCreate new <code>Event</code> with a given name.\nReturns a copy of this context with the span context …\nReturns copy of the current flags with the <code>sampled</code> flag …\nAssign sampling result\nReturns a clone of this context with the included span.\nAssign span id\nAssign span start time\nAssign status code\nSpecify trace id to use if no parent context exists\nThe description of the error\nA no-op instance of a <code>Span</code>.\nA no-op instance of an <code>TextMapPropagator</code>.\nA no-op instance of a <code>Tracer</code>.\nA no-op instance of a <code>TracerProvider</code>.\nIgnores all events\nIgnores all events with timestamps\nBuilds a <code>NoopSpan</code> from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nIgnores <code>Span</code> endings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns false, signifying that this span is never …\nCreate a new no-op tracer provider\nCreates a new <code>NoopSpan</code> instance.\nCreate a new no-op tracer\nCreate a new noop text map propagator\nIgnores all attributes\nIgnores status\nReturns an invalid <code>SpanContext</code>.\nIgnores name updates\nReturns a new <code>NoopTracer</code> instance.\nReturn a versioned boxed tracer")