searchState.loadedDescShard("konst", 0, "Const equivalents of std functions and const parsing.\nConst equivalents of array functions.\nConst equivalents of <code>char</code> functions.\nconst equivalents of <code>core::ffi</code> functions\nFor loop over a range\nEmulates the inline const feature, eg: <code>const{ foo() }</code>,\nConst fn equivalents of <code>ManuallyDrop&lt;T&gt;</code> methods.\nConst fn equivalents of <code>MaybeUninit&lt;T&gt;</code> methods.\n<code>const fn</code> equivalents of <code>NonZero*</code> methods.\n<code>const</code> equivalents of <code>Option</code> methods.\n<code>const fn</code> equivalents of methods from miscelaneous standard …\nMiscelaneous items used for emulating polymorphism without …\n<code>const fn</code> equivalents of primitive type methods.\nConst equivalents of raw pointer and <code>NonNull</code> methods.\n<code>const fn</code> equivalents of range methods.\n<code>const</code> equivalents of <code>Result</code> methods.\n<code>const fn</code> equivalents of slice methods.\n<code>const fn</code> equivalents of <code>str</code> methods.\n<code>?</code>-like macro, which allows optionally mapping errors.\n<code>?</code>-like macro for <code>Option</code>s.\nConst equivalent of <code>array::from_fn</code>.\nConst equivalent of <code>array::map</code>.\nA char encoded as a utf8 string.\nGets the utf8-encoded char as a <code>&amp;[u8]</code>\nGets the utf8-encoded char as a <code>&amp;str</code>\nEncodes <code>c</code> into utf8, const analog of <code>char::encode_utf8</code>.\nReturns the argument unchanged.\nFallible conversion from <code>u32</code> to <code>char</code>, const equivalent of …\nUnsafely coerces <code>u32</code> to <code>char</code>, const equivalent of …\nCalls <code>U::from(self)</code>.\nConst equivalents of <code>CStr</code> methods\nError returned by <code>from_bytes_until_nul</code> when the input …\nError returned by <code>from_bytes_with_nul</code> when the input slice …\nConst equivalent of <code>FromBytesUntilNulError::clone</code>\nConst equivalent of <code>FromBytesWithNulError::clone</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a byte slice which contains any amount of nul …\nConverts a nul-terminated byte slice into a <code>&amp;CStr</code>. Const …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPanics with this type’s error message\nPanics with this type’s error message\nConverts this CStr to a byte slice, excluding the nul …\nConverts this CStr to a byte slice, including the nul …\nConverts this CStr to a string slice, excluding the nul …\nConst equivalent of <code>&amp;*manually_drop</code>\nGeneric constant for an uninitialized <code>MaybeUninit&lt;T&gt;</code>. …\nGeneric constant for an uninitialized <code>[MaybeUninit&lt;T&gt;; N]</code>.\nThe value that this constructs.\nThe value that this constructs.\nConst equivalent of <code>MaybeUninit::array_assume_init</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConst equivalent of <code>MaybeUninit::uninit_array</code>\nUsable to do <code>[None::&lt;T&gt;; LEN]</code> when <code>T</code> is non-<code>Copy</code>.\nThe value that this constructs.\nA const equivalent of <code>Option::and_then</code>\nA const equivalent of the <code>Option::copied</code> method.\nA const equivalent of <code>Option::filter</code>\nA const equivalent of <code>Option::flatten</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA const equivalent of <code>Option::map</code>\nA const equivalent of <code>Option::ok_or</code>\nA const equivalent of <code>Option::ok_or_else</code>\nA const equivalent of <code>Option::or_else</code>\nA const equivalent of <code>Option::unwrap</code>\nA const equivalent of <code>Option::unwrap_or</code>\nA const equivalent of <code>Option::unwrap_or_else</code>\nMarkers used to classify types, used as <code>Kind</code> associated …\nDeclares a function for converting a <code>TypeEq&lt;L, R&gt;</code> to …\nMarker for user-defined types that can be converted into …\nMarker for const iterators\nMarker for non-standard library types.\nMarker for references.\nMarker for standard library types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConst equivalent of <code>&lt;*const&gt;::as_ref</code>\nConst equivalent of <code>&lt;*const T&gt;::is_null</code>\nConst equivalents of <code>NonNull</code> methods.\nConst equivalent of <code>NonNull::as_ref</code>.\nConst equivalent of <code>&lt;NonNull&lt;T&gt; as From&lt;&amp;T&gt;&gt;::from</code> \nConst equivalent of <code>NonNull::new</code>.\nA const equivalent of <code>Result::and_then</code>\nA const equivalent of <code>Result::err</code>\nA const equivalent of <code>Result::map</code>\nA const equivalent of <code>Result::map_err</code>\nA const equivalent of <code>Result::ok</code>\nA const equivalent of <code>Result::or_else</code>\nFor unwrapping <code>Result</code>s in const contexts with some error …\nReturns the error in the <code>Err</code> variant, otherwise runs a …\nA const equivalent of <code>Result::unwrap_or</code>\nA const equivalent of <code>Result::unwrap_or_else</code>\nA byte slice pattern.\nThe error produced by trying to convert from <code>&amp;[T]</code> to …\nConst equivalent of <code>&lt;[T]&gt;::as_chunks</code>\nConst equivalent of <code>&lt;[T]&gt;::as_rchunks</code>\nWhether <code>pattern</code> is inside <code>left</code>.\nWhether <code>pattern</code> is the end of <code>left</code>.\nFinds the byte offset of <code>pattern</code> in <code>left</code>.\nAdvances <code>this</code> up to the first instance of <code>needle</code>.\nAdvances <code>this</code> past the first instance of <code>needle</code>.\nReturns whether <code>pattern</code> is contained inside <code>left</code>, …\nFinds the byte offset of <code>pattern</code> inside <code>left</code>, searching in …\nTruncates <code>this</code> to the last instance of <code>needle</code>.\nTruncates <code>this</code> to before the last instance of <code>needle</code>.\nWhether <code>pattern</code> is the start of <code>left</code>.\nRemove <code>prefix</code> from the start of <code>left</code>.\nRemove <code>suffix</code> from the end of <code>left</code>.\nRemoves ascii whitespace from the start and end of <code>this</code>.\nRemoves ascii whitespace from the end of <code>this</code>.\nRemoves all instances of <code>needle</code> from the end of <code>this</code>.\nRemoves all instances of <code>needle</code> from the start and end of …\nRemoves ascii whitespace from the start of <code>this</code>.\nRemoves all instances of <code>needle</code> from the start of <code>this</code>.\nCompares two <code>&amp;[u8]</code>, returning the order of <code>left</code> relative …\nCompares two <code>Option&lt;&amp;&#39;a [u8]&gt;</code>, returning the ordering of …\nCompares two <code>&amp;[u8]</code> for equality.\nCompares two <code>Option&lt;&amp;&#39;a [u8]&gt;</code> for equality.\nReturns the argument unchanged.\nA const equivalent of <code>slice.get(index)</code>\nA const equivalent of <code>slice.get(start..)</code>.\nA const equivalent of <code>slice.get(start..end)</code>.\nA const equivalent of <code>slice.get(..len)</code>.\nCalls <code>U::from(self)</code>.\nFor panicking with an error message.\nMacro equivalent of <code>&lt;[&amp;[T]]&gt;::concat</code>, which takes a …\nA const equivalent of <code>&amp;slice[start..]</code>.\nA const equivalent of <code>&amp;slice[start..end]</code>.\nA const equivalent of <code>&amp;slice[..len]</code>.\nA const equivalent of <code>&lt;[T]&gt;::split_at</code>\nTries to convert from <code>&amp;[T]</code> to <code>&amp;[T; N]</code>.\nA string pattern.\nWrapper around <code>core::str::Utf8Error</code> to provide a <code>panic</code> …\nChecks that the start and end are valid utf8 char …\nA const equivalent of <code>str::cmp</code>.\nA const equivalent of <code>str::contains</code> , taking a <code>Pattern</code> …\nA const equivalent of <code>str::ends_with</code> , taking a <code>Pattern</code> …\nA const equivalent of <code>&amp;str</code> equality comparison.\nA const equivalent of <code>str::find</code> , taking a <code>Pattern</code> …\nAdvances <code>this</code> up to the first instance of <code>needle</code>.\nAdvances <code>this</code> past the first instance of <code>needle</code>.\nReturns the argument unchanged.\nDelegates to <code>core::str::from_utf8</code>, wrapping the error to …\nA const equivalent of <code>string.get(from..)</code>.\nA const equivalent of <code>string.get(start..end)</code>.\nA const equivalent of <code>string.get(..len)</code>.\nCalls <code>U::from(self)</code>.\nConst equivalent of <code>str::is_char_boundary</code>.\nPanics with a <code>Display</code> formatted error message\nA const equivalent of <code>str::contains</code> , taking a <code>Pattern</code> …\nA const equivalent of <code>str::rfind</code> , taking a <code>Pattern</code> …\nTruncates <code>this</code> to the last instance of <code>needle</code>.\nTruncates <code>this</code> to before the last instance of <code>needle</code>.\nA const-equivalent of the <code>str::rsplit_once</code> method.\nA const equivalent of <code>str::split_at</code>\nA const-equivalent of the <code>str::split_once</code> method.\nA const equivalent of <code>str::starts_with</code> , taking a <code>Pattern</code> …\nMacro equivalent of <code>&lt;[&amp;str]&gt;::concat</code>, which takes a …\nA const equivalent of <code>&amp;string[start..]</code>.\nMacro equivalent of <code>&lt;[&amp;str]&gt;::join</code>, which takes constants …\nA const equivalent of <code>&amp;string[start..end]</code>.\nA const equivalent of <code>&amp;string[..len]</code>.\nA const subset of <code>str::strip_prefix</code>.\nA const subset of <code>str::strip_suffix</code>.\nA const subset of <code>str::trim</code> which only removes ascii …\nA const subset of <code>str::trim_end</code> which only removes ascii …\nA const subset of <code>str::trim_end_matches</code>.\nA const subset of <code>str::trim_matches</code>.\nA const subset of <code>str::trim_start</code> which only removes ascii …\nA const subset of <code>str::trim_start_matches</code>.")