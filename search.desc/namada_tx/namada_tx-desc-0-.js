searchState.loadedDescShard("namada_tx", 0, "Namada transaction.\nThe address of a multisignature account\nA section representing a multisig over another section\nA transaction header/protocol signature\nA transaction with the commitment to a specific inner …\nA reference to a transaction with the commitment to a …\nA section representing transaction code\nTransaction code. Sending to hardware wallets optional\nRepresents either some code bytes or their SHA-256 hash\nA section representing a multisig over another section\nA section representing transaction data\nTransaction data that needs to be sent to hardware wallets\nTransaction data that does not need to be sent to hardware …\nResult of applying hash function to bytes\nA Namada transaction header indicating where transaction …\nWrap a header with a section for the purposes of computing …\nResult of applying identity function to bytes\nRepresents the pointers to a indexed tx, which are the …\nInclusive range of <code>IndexedTx</code> entries.\nA section providing the auxiliary inputs used to construct …\nA section providing the auxiliary inputs used to construct …\nEmbedded MASP transaction section\nA memo field (bytes).\nThe public keys that constitute a signer\nLength of the transaction sections salt\nA section of a transaction. Carries an independent piece …\nTag type that indicates we should use ABI serialization to …\nSignature index within a multisig\nA generic signed data wrapper for serialize-able types.\nIndicates the list of public keys against which signatures …\nA Namada transaction is represented as a header followed …\nAn inner transaction of the batch, represented by its …\nRepresents an error in signature verification\nActions applied in a transaction.\nAdd wasm code to the tx builder\nAdd wasm code to the tx builder from hash\nAdd wasm data to the tx builder\nAdd an extra section to the tx builder by code\nAdd an extra section to the tx builder by hash\nAdd a new inner tx to the transaction. Returns <code>false</code> if the\nAdd a masp builder section to the tx builder\nAdd a masp tx section to the tx builder\nAdd a memo section to the transaction\nAdd a new section to the transaction\nAdd wasm data already serialized to the tx builder\nAdd signatures\nAdd wrapper tx to the tx builder\nThe decoded set of asset types used by the transaction. …\nWhether the inner txs should be executed atomically\nThe commitments to the transaction’s sections\nThe optional index of an inner tx within this batc\nCreates a batched tx along with the reference to the first …\nCreates a batched tx along with the reference to one or …\nCreates a batched tx from one or more inner transactions\nCreate a new <code>IndexedTxRange</code> over a range of block heights.\nThe data that was used to construct the target transaction\nThe chain which this transaction is being submitted to\nThe reference to the inner transaction\nThe reference to the inner transaction\nExtract the code from this section is possible\nGet the code designated by the transaction code hash in …\nActual transaction code\nThe SHA-256 hash of the transaction’s code section\nExtract the code from this section is possible\nGet the hash of this transaction’s code\nGet the references to the inner transactions\nCompute signatures for the given keys\nData-Types that are used in transactions.\nExtract the data from this section if possible\nGet the data designated by the transaction data hash in …\nData bytes\nArbitrary data to be signed\nThe SHA-256 hash of the transaction’s data section\nGet the transaction data hash\nThe end of the range.\nCreate an <code>IndexedTx</code> that upper bounds the entire range of …\nTransaction events.\nDecompress this signature object with respect to the given …\nThe time at which this transaction expires\nExtract the extra data from this section if possible\nExtract the extra data from this section if possible\nGet the reference to the first inner transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake a new code section with the given hash\nInstantiate from a single signature and a matching PK.\nCreate a transaction of the given type\nGet the data designated by the transaction data hash\nGet the hash of this section\nGet the hash of this section\nGet the hash of this Commitments\nGet the transaction section with the given hash\nGet a hash of this section with its signer and signatures …\nGet the transaction section with the given hash\nHash this section. Section hashes are useful for …\nGet the hash of this transaction header.\nHash this data section\nReturn the contained hash commitment\nHash this code section\nHash this signature section\nHash the commitments to the transaction’s sections\nGet the hash of this ciphertext section. This operation is …\nGet the transaction header\nType indicating how to process transaction\nGet the transaction header hash\nThe block height of the indexed tx\nReturn the result of applying identity function if there …\nIndex in multisig\nThe index in the block of the tx\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the MASP builder from this section if possible\nExtract the MASP transaction from this section if possible\nGet the memo designated by the memo hash in the header for …\nThe SHA-256 hash of the transaction’s memo section\nGet the hash of this transaction’s memo\nTrack how Info objects map to descriptors and outputs\nCreate a new <code>IndexedTxRange</code>.\nMake a new header of the given transaction type\nMake a new data section with the given bytes\nMake a new code section with the given bytes\nSign the given section hash with the given key and return …\nInitialize a new <code>Signed</code> instance.\nInitialize a new transaction builder\nInitialize a new <code>Signed</code> instance from an existing …\nGenerated protobuf tx type.\nGet the protocol header if it is present\nFilter out all the sections that must not be submitted to …\nPK that can be used to verify signature\nGets the hash of the raw transaction’s header\nSalt with additional random data (usually a timestamp)\nAdditional random data\nGet hashes of all the sections in this transaction\nAdditional details necessary to process transaction\nAdd the given code to the transaction and set code hash in …\nSet the last transaction code hash stored in the header\nAdd the given code to the transaction and set the hash in …\nSet the last transaction data hash stored in the header\nSet the last transaction memo hash stored in the header\nThe signature of the data\nAdd signing keys to the tx builder\nAdd fee payer keypair to the tx builder\nExtract the signature from this section if possible\nSignature\nThe signature over the above hash\nThe signature over the above hash\nThe public keys against which the signatures should be …\nThe public keys against which the signatures should be …\nGet a signature for data\nThe start of the range.\nThe tag for the transaction code\nThe MASP transaction that this section witnesses\nThe hash of the section being signed\nThe hash of the section being signed\nA transaction timestamp\nConvert this transaction into protobufs bytes.\nConvert owned version to a referenced one\nConvert to a vector\nSerialize signature to pretty JSON into an I/O stream\nSerialize tx to pretty JSON into an I/O stream\nTry to deserialize a tx from protobuf bytes\nTry to parse a signature from JSON string bytes\nDeserialize tx from JSON string bytes\nConvert this transaction into protobufs bytes\nThe transaction\nThe transaction\nThe type of this transaction\nUpdate the header whilst maintaining existing …\nDetermines the type of the input Tx\nVerify that the data has been signed by the secret key …\nVerify that the signature contained in this section is …\nVerify that the sections with the given hashes have been …\nVerify that the section with the given hash has been …\nVerify that the input data has been signed by the secret …\nCreate a new <code>IndexedTxRange</code> over a given <code>BlockHeight</code>.\nGet the wrapper header if it is present\nGet the transaction’s wrapper hash\nAn action applied from a tx.\nActions applied from txs.\nStorage access errors\nGov tx actions.\nMASP tx actions.\nA required authorizer for the transaction\nThe hash of the masp <code>crate::Section</code>\nPGF tx actions.\nPoS tx actions.\nRead actions from temporary storage\nWrite actions to temporary storage\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to get the optional masp section reference …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to check if the action is IBC shielding …\nPush an action applied in a tx.\nRead all the actions applied by a tx\nRead a temporary key-val\nWrite a temporary key-val\nThe block is full\nThe result of a specific tx in a batch\nThe result of a dry run, included the actual transaction …\nExpired tx\nThe extended transaction result, containing the references …\nError in paying tx fee\nThe transaction had an invalid signature.\nInvalid chain ID\nFound invalid commtiment to one of the transaction’s …\nInvalid signature\nInvalid tx\nInvalid vote extension\nNo action required\nSuccess\nExceeded gas limit\nTxs issued by validators as part of internal protocols\nAn ordinary tx\nReplayed tx\nThe different result codes that the ledger may send back …\nTx is too large\nExceeded gas limit\nTx code is not allowlisted\nTransaction application result. More specifically the set …\nSentinel used in transactions to signal events that …\nStruct that classifies that kind of Tx based on the …\nValidity predicate status flags.\nResult of checking a transaction with validity predicates\nError in WASM tx execution\nA Tx that contains a payload in the form of a raw tx\nThe addresses whose VPs accepted the transaction\nGet a flags value with all known bits set.\nCheck if the collection of inner tx results contains any …\nCheck if the collection of inner tx results contains any …\nCheck if all the inner txs in the collection have been …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nStorage keys touched by the transaction\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the hash of the some inner tx in a batch.\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nErrors occurred in any of the VPs, if any\nTx data to evaluate a validity-predicate\nEvents emitted by the transaction\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConvert from <code>u32</code>.\nRetrieve an inner tx result, if it exists.\nProduce a SHA-256 hash of this header\nGet the hash of a transaction\nNew established addresses created by the transaction\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert an inner tx result into this <code>TxResult</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the tx has been accepted by all the VPs\nWhether all known bits in this flags value are set.\nCheck if the collection of inner tx results is empty.\nWhether all bits in this flags value are unset.\nChecks if the given <code>ResultCode</code> value is a protocol level …\nIterate over all the inner tx results.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn the length of the collection of inner tx results.\nThe optional references to masp data (either MASP sections …\nReturn a new set of tx results.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\ntxs to manage pgf\ntxs to manage pos Types used for PoS system transactions\ntransaction protocols made by validators Types for sending …\nThe addresses whose VPs rejected the transaction\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the sentinel for an invalid section commitment error\nSet the sentinel for an out of gas error\nValidity predicate status flags, containing info about …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts this result to <code>ExtendedTxResult</code>\nConvert the batched result to a string\nConvert to <code>u32</code>.\nConvert to <code>usize</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe transaction result\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe results of all the triggered validity predicates by …\nwrapper txs\nA validity predicate with an input that is intended to be …\nReturns the argument unchanged.\nThe input for the <code>eval</code>ed VP\nCalls <code>U::from(self)</code>.\nThe VP code hash to <code>eval</code>\nA tx data type to hold proposal data\nThe new commission distribution\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pgf steward address\nA tx data type to become a validator account.\nA bond is a validator’s self-bond or a delegation from …\nA claim of pending rewards.\nA change to the validator commission rate.\nA change to the validator’s consensus key.\nA change to the validator metadata.\nA redelegation of bonded tokens from one validator to …\nAn unbond of a bond.\nA withdrawal of an unbond.\nAddress of an account that will become a validator.\nThe amount of tokens\nThe amount of tokens\nThe amount of tokens\nURL that points to a picture (e.g. PNG), identifying the …\nValidator’s avatar url\nThe initial commission rate charged for delegation rewards\nValidator’s commission rate\nA key to be used for signing blocks and votes on blocks.\nThe new consensus key\nThe validator description\nValidator description\nDestination validator address\nThe validator’s discord handle\nValidator’s discord handle\nThe validator email\nValidator’s email\nAn Eth bridge governance public key\nAn Eth bridge hot signing public key used for validator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum change allowed per epoch to the commission …\nValidator’s name\nValidator’s name\nThe new commission rate\nOwner (delegator) of the bonds to be redelegate\nPublic key used to sign protocol transactions\nSource address for delegations. For self-bonds, the …\nSource address for delegations. For self-bonds, the …\nSource address for withdrawing from delegations. For …\nSource address for claiming rewards from a bond. For …\nSource validator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nValidator address\nThe validator website\nValidator website\nCollection of signatures over the Ethereum bridge pool …\nSignature over the Ethereum bridge pool merkle root and …\nEthereum events seen by some validator\nEthereum events contained in vote extensions that are …\nTxs sent by validators as part of internal protocols\nTypes of protocol messages to be sent\nValidator set update signed by some validator\nValidator set updates contained in vote extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduce a SHA-256 hash of this section\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this <code>ProtocolTxType</code> is an Ethereum protocol …\nwe require ProtocolTxs be signed\nThe type of protocol message being sent\nValidate the signature of a protocol tx\nAmount of some specified token to pay for fees.\nGas limit of a transaction\nA wrapper transaction with some metadata for inclusion and …\nErrors relating to decrypting a wrapper tx and its …\nAmount of fees paid per gas unit.\nConvert the gas limit into scaled gas\nThe fee to be paid for including the tx\nGet the address of the implicit account associated with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMax amount of gas that can be used when executing the …\nGet the <code>DenominatedAmount</code> of fees to be paid by the given …\nProduce a SHA-256 hash of this section\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new wrapper tx from the personal keypair, an …\nUsed for signature verification and to determine an …\nAddress of the fee token.\nExtend an <code>Event</code> with batch data.\nExtend an <code>Event</code> with result code data.\nTransaction event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new event with the hash and height of the …\nTransaction event types.\nApplied transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")