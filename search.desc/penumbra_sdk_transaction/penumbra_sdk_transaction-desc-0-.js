searchState.loadedDescShard("penumbra_sdk_transaction", 0, "Data modeling for Penumbra transactions.\nAuthorization data returned in response to a …\nA compatibility wrapper for trait implementations that are …\nDetection data used by a detection server using Fuzzy …\nCommon behavior between Penumbra actions.\nParameters determining when the transaction should be …\nAdd proof to the existing witness data\nCompute the binding verification key from the transaction …\nHelper function for decrypting the memo on the transaction …\nThe required delegator vote authorization signatures, …\nThe computed authorization hash for the approved …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeclarative transaction plans, used for transaction …\nThe required spend authorization signatures, returned in …\nAn action performed by a Penumbra transaction.\nCreate a tracing span to track execution related to this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCanonical action ordering according to protobuf definitions\nA list of planned actions to be turned into a …\nReturns an immutable reference to a list of action plans.\nReturn the balance of the actions in the list, minus the …\nReturn the balance of the actions in the list, without …\nReturns an immutable reference to a map of change outputs.\nReturns an immutable reference to the fee.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert this list of actions into a <code>TransactionPlan</code>.\nPush a new action onto this list.\nUse the provided gas prices and fee tier to refresh the …\nReturns true if the resulting transaction would require a …\nAllows <code>Action</code>s and <code>Transaction</code>s to statically indicate …\nDecrypt a <code>MemoCiphertext</code> to generate a plaintext …\nDecrypt a <code>MemoCiphertext</code> to generate a fixed-length slice …\nDecrypt a <code>MemoCiphertext</code> using the wrapped OVK to generate …\nEncrypt a memo, returning its ciphertext.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new MemoPlaintext, checking that the text isn’t …\nA declaration of a planned <code>Action</code>, for use in transaction …\nWe don’t need any extra information (yet) to understand …\nVote on a proposal as a delegator.\nDescribes a proposed output.\nClaim the deposit for a finished proposal.\nPropose a governance vote.\nWithdraw a proposed vote.\nDescribes a proposed spend.\nDescribes a proposed swap.\nDescribes a swap claim.\nA declaration of a planned <code>Transaction</code>, for use in …\nWe don’t need any extra information (yet) to understand …\nVote on a proposal as a validator.\nSlot in the <code>AuthorizationData</code> and derive the synthetic …\nAuthorize this <code>TransactionPlan</code> with the provided <code>SpendKey</code>.\nBuild the serial transaction this plan describes.\nBuild the transaction this plan describes while proving …\nBuilds a planned <code>Action</code> specified by this <code>ActionPlan</code>.\nBuilds a <code>TransactionPlan</code> by slotting in the provided …\nCreate a <code>Clue</code> from the <code>CluePlan</code>.\nConvenience method to get all the destination addresses …\nCompute the effect hash of the action this plan will …\nComputes the <code>EffectHash</code> for the [<code>Transaction</code>] described by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>MemoCiphertext</code> from the <code>MemoPlan</code>.\nConvenience method to grab the <code>MemoKey</code> from the plan.\nCreate a new <code>CluePlan</code> associated with a given (possibly …\nCreate a new <code>MemoPlan</code>.\nConvenience method to get the number of <code>OutputPlan</code>s in …\nConvenience method to get the number of proofs in this …\nConvenience method to get the number of <code>SpendPlan</code>s in this …\nMethod to populate the detection data for this transaction …\nSort the actions in <code>TransactionPlan</code> by type, using the …\nCanonical action plan ordering according to protobuf …\nA builder-style version of …\nReturns a <code>WitnessData</code>, which may be used to build this …\nThis represents the data to understand an individual …\nThe views of any relevant address.\nThe openings of note commitments referred to in the …\nAny relevant batch swap output data.\nAssociates nullifiers with the transaction IDs that …\nAny relevant denoms for viewed assets.\nAny relevant extended metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssociates commitments with the transaction IDs that …\nList of per-action payload keys. These can be used to …\nAny relevant estimated prices.\nMapping of nullifiers spent in this transaction to notes.\nProduces a TransactionSummary, iterating through each …\nThe transaction ID associated with this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")