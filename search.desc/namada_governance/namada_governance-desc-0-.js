searchState.loadedDescShard("namada_governance", 0, "Governance library code\nThe governance internal address\nContains the error value\nContains the success value\nAbstract governance storage read interface\nResult of a storage API call.\nGovernance storage <code>Keys/Read/Write</code> implementation\nAbstract governance storage write interface\ngovernance CLI structures\nGovernance transaction events.\nApply governance updates for a block. On a new epoch, this …\nReturns the argument unchanged.\nInitialize default governance parameters into storage\nCalls <code>U::from(self)</code>.\nCheck if an accepted proposal is being executed\nGet governance “max_proposal_period” parameter\ngovernance parameters\ngovernance public good fundings PGF library code\ngovernance storage Governance storage\nGovernance utility functions/structs\nGovernance VP\nCLi governance on chain structures\nAdd action\nPGF default proposal\nThe proposal structure\nPGF action\nPGF continuous funding\nPGF funding\nPGF funding proposal\nPGF retro funding\nPGF stewards\nPGF stewards proposal\nRemove action\nPGF steward proposal extra data\nPGF action\nPGF action\nThe epoch in which any changes are executed and become …\nThe optional steward to add\nsteward address\nThe proposal author address\nThe proposal content\nPGF continuous funding\nThe default proposal extra data\nThe PGF steward proposal extra data\nThe PGF funding proposal extra data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a PGF action is adding a steward\nThe proposal data\nThe proposal data\nThe proposal data\nThe stewards to remove\nPGF retro fundings\nPGF target\nPGF retro target\nValidate a default funding proposal\nValidate a PGF stewards proposal\nValidate a PGF funding proposal\nThe final epoch in which voting is allowed\nThe epoch in which voting begins\nGovernance event.\nExtend an <code>Event</code> with has proposal code data.\nNew proposal event\nPassed proposal\nGovernance proposal event.\nExtend an <code>Event</code> with proposal code exit status data.\nProposal event kinds\nExtend an <code>Event</code> with proposal id data.\nExtend an <code>Event</code> with tally result data.\nRejected proposal\nExtend an <code>Event</code> with tally result data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new proposal event for default proposal\nCreate a new proposal event for default with wasm proposal\nEvent for a reject proposal\nGovernance event types.\nID of the governance proposal.\nGovernance proposal kind.\nDoes the proposal contain code?\nDoes the proposal contain code?\nDid the proposal code run successfully?\nType of proposal\nNew proposal.\nProposal passed.\nProposal rejected.\nGovernance parameter structure\nReturns the argument unchanged.\nInitialize governance parameters into storage\nCalls <code>U::from(self)</code>.\nMaximum length for proposal code in bytes\nMaximum number of characters for proposal content\nMaximum number of epochs between current epoch and start …\nMaximum number of epochs between the proposal start epoch …\nMinimum amount of locked funds\nMinimum number of epochs between the end and activation …\nMinimum number of epochs between the proposal end epoch …\nThe PGF internal address\nUpper limit on the number of reward distribution per …\nPGF CLI\nPGF inflation code PGF lib code.\nPGF parameters\nPGF storage Pgf\nPgf steward cli\nStruct holding data about a steward commission\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if a steward commission is valid\nThe steward reward distribution\nApply the PGF inflation.\nPgf parameter structure\nReturns the argument unchanged.\nInitialize governance parameters into storage\nCalls <code>U::from(self)</code>.\nThe maximum number of pgf stewards at once\nThe pgf funding inflation rate\nThe set of stewards\nThe pgf stewards inflation rate\nQuery the current pgf continuous payments\nQuery the pgf parameters\nQuery the a steward by address\nQuery the current pgf steward set\nCheck if an address is a steward\nPgf storage keys\nRemove a steward\nPgf steward structures\nUpdate the commission for a steward\nLazyMap handler for the pgf fundings substorage\nObtain a storage key for pgf fundings.\nGet key for maximum number of pgf stewards\nGet key for inflation rate key\nGet key for inflation rate key\nCheck if the given storage key is a pgf funding key.\nCheck if key is a pgf inflation rate key\nCheck if key is inside governance address space\nCheck if key is a steward inflation rate key\nCheck if the given storage key is a steward key. If it is, …\nLazyMap handler for the stewards subspace\nObtain a storage key for stewards key\nStruct holding data about a PGF steward\nThe steward address\nCreate an initial steward configuration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if reward distribution is valid\nThe steward reward distribution\nGet governance “max_proposal_period” parameter\nGet governance parameters\nGet the code associated with a proposal\nRead a proposal by id from storage\nGet the code associated with a proposal\nGet governance proposal result stored in storage if …\nQuery all the votes for a proposal_id\nA proposal creation transaction.\nCheck if an accepted proposal is being executed\nGovernance proposal keys\nLoad proposals for execution in the current epoch.\nProposal structures\nVote structures\nA proposal vote transaction.\nWrite the proposal result to storage.\nGet proposal activation epoch key\nGet key of proposal author\nGet the committing epoch from a proposal committing key\nGet the proposal id from a proposal committing key\nGet the proposal committing key prefix\nGet the committing proposal key\nGet key of proposal content\nGet key of proposal ids counter\nGet key of proposal funds\nGet maximum proposal code size key\nGet maximum proposal content key\nGet maximum proposal latency key\nGet maximum proposal period key\nGet key for the minimum proposal fund\nGet min grace epochs proposal key\nGet minimum proposal period key\nGet proposal code key\nGet the proposal execution key\nGet proposal id from key\nGet the proposal result key\nGet key of a proposal type\nGet proposal vote prefix key\nGet the delegation address from vote key\nGet the vote key for a specific proposal id\nGet voter address from vote key\nGet key of proposal voting end epoch\nGet key of proposal voting start epoch\nCheck if key is activation epoch key\nCheck if key is author key\nCheck if key is balance key\nCheck if key is a commit proposal key\nCheck if key is content key\nCheck if key is counter key\nCheck if key is epoch key\nCheck if key is inside governance address space\nCheck if key is a proposal max content parameter key\nCheck if key is a max proposal size key\nCheck if key is a max proposal period param key\nCheck if key is a min grace epochs key\nCheck if key is a proposal fund parameter key\nCheck if key is a min proposal period param key\nCheck if key is parameter key\nCheck if key is proposal code key\nCheck if key is proposal type key\nCheck if key is start epoch key\nCheck if key is start epoch or end epoch key\nCheck if a key is a vote key\nGet governance prefix key\nAdd\nAn add or remove action for PGF\nA continuous payment\nDefault governance proposal\nGovernance proposal with wasm code\nFunding target on another chain\nA tx data type to hold proposal data\nFunding target on this chain\nThe actions that a PGF Steward can propose to execute\nThe target of a PGF payment\nThe target of a PGF payment\nPGF funding proposal\nPGF stewards proposal\nThe target of a PGF payment\nThe type of a Proposal\nRemove\nA retro payment\nStorage struture for pgf fundings\nProposal representation when fetched from the storage\nA tx data type to hold vote proposal data\nThe epoch in which any changes are executed and become …\nThe epoch from which this changes are executed\nReturns the funding amount\nThe amount of token to fund the target address\nThe amount of token to fund the target address\nThe proposal author address\nThe proposal author address\nCheck if the proposal can be voted\nChannel ID to fund\nThe proposal content\nThe proposal content\nThe data about the pgf funding\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the hash of the corresponding extra data section\nReturn the status of a proposal\nReturn the type of tally for the proposal\nThe proposal id\nThe id of the proposal that added this funding\nThe proposal id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the proposal type is default\nCheck if the proposal type is default\nInit a new pgf funding struct\nPort ID to fund\nReturns the funding target as String\nThe target address\nThe target address on the target chain\nSerialize a proposal to string\nThe proposal type\nThe proposal type\nThe proposal vote\nThe proposal voter address\nThe final epoch in which voting is allowed\nThe epoch from which voting is stopped\nThe epoch in which voting begins\nThe epoch from which voting is allowed\nAbstain\nNo\nThe vote for a proposal\nYes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if a vote is abstain\nCheck if a vote is nay\nCheck if two votes are equal, returns an error if the …\nCheck if a vote is yay\nEnded proposal status\nEither less than 1/3 of the total voting power voted, or …\nOngoing proposal status\nThere are more <code>yay</code> votes than <code>nay</code> votes, and at least 1/3 …\nProposal was accepted with the associated value\nPending proposal status\nThe result with votes of a proposal\nProposal status\nProposal structure holding votes information necessary to …\nProposal was rejected\nThe result of a proposal\nRepresents a tally type that describes the voting …\nThe <code>yay</code> votes are at least 2/3 of the non-abstain votes, …\nStructure rappresenting a proposal vote\nAlias to comulate voting power\nAdd vote corresponding to a delegator\nAdd vote corresponding to a validator\nCompute the result of a proposal\nField holding vote data\nField holding the address of the delegator\nMap from delegator address to the corresponding validator …\nMap from delegation address to their vote\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe type of tally used for each proposal type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate the valid voting window for a validator given …\nCheck if a vote is from a validator\nReturns the latest epoch in which a validator can vote, …\nCreate a new tally result\nThe result of a proposal\nThe type of tally required for this proposal\nThe total voting power from abstained votes\nThe total voting power from nay votes\nThe total voting power during the proposal tally\nThe total voting power from yay votes\nReturn true if at least 2/3 of the total voting power …\nField holding the address of the validator\nMap from validator to their voting power\nMap from validator address to vote\nThe governance internal address\nGovernance VP\nThe maximum number of item in a pgf proposal\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a vote is from a delegator\nValidate an activation_epoch key\nValidate a author key\nValidate a content key\nValidate a counter key\nValidate a funds key\nValidate a governance parameter\nValidate a proposal code\nValidate a commit key\nValidate the proposal type\nValidate a start_epoch key\nCheck if a vote is from a validator\nPgf VP\nGovernance utility functions\nRun the validity predicate\nThe PGF internal address\nPgf VP\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate a governance parameter\nRun the validity predicate\nProposal errors\nInvalid proposal field deserialization\nInvalid validator set deserialization\nError during tally\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")