searchState.loadedDescShard("orion", 0, "A usable pure-Rust cryptography library.\nAuthenticated secret-key encryption.\nMessage authentication.\nErrors for orion’s cryptographic operations.\nHashing.\n[<strong><strong>Caution</strong></strong>] Low-level API.\nKey derivation.\nEphemeral key exchange.\nPassword hashing and verification.\nUtilities such as constant-time comparison.\nA type to represent a secret key.\nRandomly generate using a CSPRNG with recommended size. …\nReturns the argument unchanged.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nAuthenticated decryption using XChaCha20Poly1305.\nAuthenticated encryption using XChaCha20Poly1305.\nStreaming AEAD based on XChaCha20Poly1305.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nStreaming authenticated decryption.\nStreaming authenticated encryption.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a <code>StreamSealer</code> struct with a given key.\nInitialize a <code>StreamOpener</code> struct with a given key and …\nDecrypts <code>ciphertext</code>. Returns the decrypted data and the …\nEncrypts <code>plaintext</code>. The <code>StreamTag</code> indicates the type of …\nA type to represent a secret key.\nA type to represent the <code>Tag</code> output by BLAKE2b-256 in keyed …\nAuthenticate a message using BLAKE2b-256 in keyed mode.\nAuthenticate and verify a message using BLAKE2b-256 in …\nMake an object from a byte array.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nOpaque error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHashing using BLAKE2b-256.\nAEADs (Authenticated Encryption with Associated Data).\nElliptic-Curve Cryptography.\nCryptographic hash functions.\nKDFs (Key Derivation Function) and PBKDFs (Password-Based …\nMACs (Message Authentication Code).\nStream ciphers.\nAEAD ChaCha20Poly1305 as specified in the RFC 8439.\nStreaming AEAD based on XChaCha20Poly1305.\nAEAD XChaCha20Poly1305 as specified in the draft RFC.\nAEAD ChaCha20Poly1305 decryption and authentication as …\nAEAD ChaCha20Poly1305 encryption and authentication as …\nSize of additional data appended to each message.\nIndicates the end of a stream. Also does a rekey.\nA message with no special meaning.\nMarks that the message is the end of a set of messages. …\nDerives a new secret key and forgets the one used for …\nTag that indicates the type of message.\nStreaming XChaCha20Poly1305 state.\nThe size of a StreamTag.\nReturn the tag as a byte.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a <code>StreamXChaCha20Poly1305</code> struct with a given …\nAuthenticate and decrypt a single message and tag.\nDerives a new secret key used for encryption and …\nEncrypt and authenticate a single message and tag.\nAEAD XChaCha20Poly1305 decryption as specified in the …\nAEAD XChaCha20Poly1305 encryption as specified in the …\nDiffie-Hellman key exchange over Curve25519 as specified …\nThe size of a private key used in X25519.\nThe size of a public key used in X25519.\nA type to represent the <code>PrivateKey</code> that X25519 uses.\nA type that represents a <code>PublicKey</code> that X25519 uses.\nThe size of a shared key used in X25519.\nA type to represent the <code>SharedKey</code> that X25519 produces.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nX25519 (Diffie-Hellman with Montgomery form of Curve25519).\nReturn the length of the object.\nReturn the length of the object.\nReturn the length of the object.\nConvert this PublicKey to its byte-representation.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nBLAKE2b as specified in the RFC 7693.\nSHA2 as specified in the FIPS PUB 180-4.\nBLAKE2b streaming state.\nBlake2b with <code>32</code> as <code>size</code>.\nBlake2b with <code>48</code> as <code>size</code>.\nBlake2b with <code>64</code> as <code>size</code>.\nA type to represent the <code>Digest</code> that BLAKE2b returns.\nConvenience functions for common BLAKE2b operations.\nA type to represent the secret key that BLAKE2b uses for …\nReturn a digest selected by the given Blake2b variant.\nReturn a BLAKE2b digest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nReturn a <code>Blake2b</code> state selected by the given Blake2b …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nInitialize a <code>Blake2b</code> struct with a given size and an …\nReset to <code>new()</code> state.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nUpdate state with <code>data</code>. This can be called multiple times.\nVerify a Blake2b Digest in constant time.\nSHA256 as specified in the FIPS PUB 180-4.\nSHA384 as specified in the FIPS PUB 180-4.\nSHA512 as specified in the FIPS PUB 180-4.\nA type to represent the <code>Digest</code> that SHA256 returns.\nThe blocksize for the hash function SHA256.\nThe output size for the hash function SHA256.\nSHA256 streaming state.\nCalculate a SHA256 digest of some <code>data</code>.\nReturn a SHA256 digest.\nMake an object from a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nInitialize a <code>Sha256</code> struct.\nReset to <code>new()</code> state.\nUpdate state with <code>data</code>. This can be called multiple times.\nA type to represent the <code>Digest</code> that SHA384 returns.\nThe blocksize for the hash function SHA384.\nThe output size for the hash function SHA384.\nSHA384 streaming state.\nCalculate a SHA384 digest of some <code>data</code>.\nReturn a SHA384 digest.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nInitialize a <code>Sha384</code> struct.\nReset to <code>new()</code> state.\nUpdate state with <code>data</code>. This can be called multiple times.\nA type to represent the <code>Digest</code> that SHA512 returns.\nThe blocksize for the hash function SHA512.\nThe output size for the hash function SHA512.\nSHA512 streaming state.\nCalculate a SHA512 digest of some <code>data</code>.\nReturn a SHA512 digest.\nMake an object from a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nInitialize a <code>Sha512</code> struct.\nReset to <code>new()</code> state.\nUpdate state with <code>data</code>. This can be called multiple times.\nArgon2i password hashing function as described in the …\nHKDF (HMAC-based Extract-and-Expand Key Derivation …\nPBKDF2(Password-Based Key Derivation Function 2) as …\nThe Argon2 variant (i).\nThe Argon2 version (0x13).\nArgon2i password hashing function as described in the …\nVerify Argon2i derived key in constant time.\nHKDF-HMAC-SHA256 (HMAC-based Extract-and-Expand Key …\nHKDF-HMAC-SHA384 (HMAC-based Extract-and-Expand Key …\nHKDF-HMAC-SHA512 (HMAC-based Extract-and-Expand Key …\nCombine <code>extract</code> and <code>expand</code> to return a derived key.\nThe HKDF expand step.\nThe HKDF extract step.\nCombine <code>extract</code> and <code>expand</code> to return a derived key.\nThe HKDF expand step.\nThe HKDF extract step.\nCombine <code>extract</code> and <code>expand</code> to return a derived key.\nThe HKDF expand step.\nThe HKDF extract step.\nPBKDF2-HMAC-SHA256 (Password-Based Key Derivation Function …\nPBKDF2-HMAC-SHA384 (Password-Based Key Derivation Function …\nPBKDF2-HMAC-SHA512 (Password-Based Key Derivation Function …\nA type to represent the <code>Password</code> that PBKDF2 hashes.\nDerive a key using PBKDF2-HMAC-SHA256.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nVerify PBKDF2-HMAC-SHA256 derived key in constant time.\nA type to represent the <code>Password</code> that PBKDF2 hashes.\nDerive a key using PBKDF2-HMAC-SHA384.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nVerify PBKDF2-HMAC-SHA384 derived key in constant time.\nA type to represent the <code>Password</code> that PBKDF2 hashes.\nDerive a key using PBKDF2-HMAC-SHA512.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nVerify PBKDF2-HMAC-SHA512 derived key in constant time.\nHMAC (Hash-based Message Authentication Code) as specified …\nPoly1305 as specified in the RFC 8439.\nHMAC-SHA256 (Hash-based Message Authentication Code) as …\nHMAC-SHA384 (Hash-based Message Authentication Code) as …\nHMAC-SHA512 (Hash-based Message Authentication Code) as …\nHMAC-SHA256 streaming state.\nA type to represent the <code>SecretKey</code> that HMAC uses for …\nA type to represent the <code>Tag</code> that HMAC returns.\nReturn a HMAC-SHA256 tag.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nOne-shot function for generating an HMAC-SHA256 tag of <code>data</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nInitialize <code>HmacSha256</code> struct with a given key.\nReset to <code>new()</code> state.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nUpdate state with <code>data</code>. This can be called multiple times.\nVerify a HMAC-SHA256 tag in constant time.\nHMAC-SHA384 streaming state.\nA type to represent the <code>SecretKey</code> that HMAC uses for …\nA type to represent the <code>Tag</code> that HMAC returns.\nReturn a HMAC-SHA384 tag.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nOne-shot function for generating an HMAC-SHA384 tag of <code>data</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nInitialize <code>HmacSha384</code> struct with a given key.\nReset to <code>new()</code> state.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nUpdate state with <code>data</code>. This can be called multiple times.\nVerify a HMAC-SHA384 tag in constant time.\nHMAC-SHA512 streaming state.\nA type to represent the <code>SecretKey</code> that HMAC uses for …\nA type to represent the <code>Tag</code> that HMAC returns.\nReturn a HMAC-SHA512 tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nOne-shot function for generating an HMAC-SHA512 tag of <code>data</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nInitialize <code>HmacSha512</code> struct with a given key.\nReset to <code>new()</code> state.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nUpdate state with <code>data</code>. This can be called multiple times.\nVerify a HMAC-SHA512 tag in constant time.\nA type to represent the <code>OneTimeKey</code> that Poly1305 uses for …\nThe key size for Poly1305.\nThe output size for Poly1305.\nPoly1305 streaming state.\nA type to represent the <code>Tag</code> that Poly1305 returns.\nReturn a Poly1305 tag.\nMake an object from a byte array.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nInitialize a <code>Poly1305</code> struct with a given one-time key.\nOne-shot function for generating a Poly1305 tag of <code>data</code>.\nReset to <code>new()</code> state.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nUpdate state with <code>data</code>. This can be called multiple times.\nVerify a Poly1305 tag in constant time.\nIETF ChaCha20 as specified in the RFC 8439.\nXChaCha20 as specified in the draft-irtf-cfrg-xchacha-03.\nThe key size for ChaCha20.\nThe nonce size for IETF ChaCha20.\nA type that represents a <code>Nonce</code> that ChaCha20 and …\nA type to represent the <code>SecretKey</code> that Chacha20, …\nIETF ChaCha20 decryption as specified in the RFC 8439.\nIETF ChaCha20 encryption as specified in the RFC 8439.\nReturns the argument unchanged.\nMake an object from a byte array.\nReturns the argument unchanged.\nMake an object from a byte array.\nConstruct from a given byte slice.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nReturn the length of the object.\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nA type that represents a <code>Nonce</code> that XChaCha20, …\nThe nonce size for XChaCha20.\nXChaCha20 decryption as specified in the draft RFC.\nXChaCha20 encryption as specified in the draft RFC.\nReturns the argument unchanged.\nMake an object from a byte array.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nA type to represent the <code>Password</code> that Argon2i hashes and …\nA type to represent the <code>Salt</code> that Argon2i uses during key …\nA type to represent a secret key.\nRandomly generate using a CSPRNG with recommended size. …\nDerive a key using Argon2i.\nReturns the argument unchanged.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the object.\nA key pair used to establish shared keys for a single …\nA key pair used to establish shared keys for a single …\nA type to represent a secret key.\nA set of shared secrets for either transmitting to this …\nEstablish session keys with a client. This moves <code>self</code> to …\nEstablish session keys with a server. This moves <code>self</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new random key pair.\nGenerate a new random key pair.\nGet a reference to the <code>PrivateKey</code>.\nGet a reference to the <code>PrivateKey</code>.\nGet a reference to the <code>PublicKey</code>.\nGet a reference to the <code>PublicKey</code>.\nGet the shared secret intended to be used for receiving …\nGet the shared secret intended to be used for transporting …\nGiven a 16-byte salt (22 characters encoded) and 32-byte …\nGiven a 16-byte salt (22 characters encoded) and 32-byte …\nThe length of the hashed password.\nA type to represent the <code>Password</code> that Argon2i hashes and …\nA type to represent the <code>PasswordHash</code> that Argon2i returns …\nThe length of the salt used for password hashing.\nRandomly generate using a CSPRNG with recommended size. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from encoded password hash.\nConstruct from given byte slice and parameters.\nConstruct from a given byte slice.\nRandomly generate using a CSPRNG. Not available in <code>no_std</code> …\nHash a password using Argon2i.\nHash and verify a password using Argon2i. The Argon2i …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the password hash is empty, <code>false</code> otherwise.\nReturn <code>true</code> if this object does not hold any data, <code>false</code> …\nReturn the length of the password hash.\nReturn the length of the object.\nReturn the password hash as byte slice. <strong><strong>Warning</strong></strong>: Should …\nReturn the object as byte slice. <strong><strong>Warning</strong></strong>: Should not be …\nReturn encoded password hash. <strong><strong>Warning</strong></strong>: Should not be used …\nCompare two equal length slices in constant time.\nGenerate random bytes using a CSPRNG. Not available in …")