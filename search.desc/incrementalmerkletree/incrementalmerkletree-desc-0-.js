searchState.loadedDescShard("incrementalmerkletree", 0, "<code>incrementalmerkletree</code>\nA type-safe wrapper for indexing into “levels” of a …\nA possibly-empty incremental Merkle frontier.\nA trait describing the operations that make a value  …\nA type representing the position of a leaf in a Merkle …\nA Merkle tree that supports incremental appends, …\nReturns the altitude of each cousin and/or ommer required …\nReturns the altitude of each cousin and/or ommer required …\nAppends a new value to the frontier at the next available …\nAppends a new value to the tree at the next available slot.\nObtains an authentication path to the value at the …\nA space-efficient implementation of the <code>Tree</code> interface.\nCreates a new checkpoint for the current tree state. It is …\nReturns the most recently appended leaf value.\nReturns the most recently appended leaf value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRemove state from the tree that no longer needs to be …\nReturns the leaf at the specified position if the tree can …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the binary tree having <code>self</code> as the …\nReturns the altitude of each populated ommer.\nMarks the value at the specified position as a value we’…\nRewinds the tree state to the previous checkpoint, and …\nObtains the current root of this Merkle frontier by hashing\nObtains the root of the Merkle tree at the specified …\nMarks the current leaf as one for which we’re interested …\nReturn a set of all the positions for which we have …\nConvenience method for returning the zero altitude.\nReturns the position of the first leaf in the tree.\nEach AuthFragment stores part of the authentication path …\nErrors that can appear when validating the internal …\nA possibly-empty Merkle frontier. Used when the full …\nA set of leaves of a Merkle tree.\nA <code>[NonEmptyFrontier]</code> is a reduced representation of a …\nof two nodes is full (if the current leaf before the …\nAdvances this bridge’s frontier by appending the …\nCreates a new empty checkpoint for the specified <code>BridgeTree</code>…\nReturns the fragments of authorization path data for prior …\nReturns the length of the [<code>prior_bridges</code>] vector of the …\nChecks whether this bridge is a valid successor for the …\nReturns the checkpoints to which this tree may be rewound.\nReturns the current bridge at the tip of this tree\nReturns the current leaf.\nReturns the amount of memory dynamically allocated for …\nConstructs a new empty frontier.\nReturns the set of previously-witnessed positions that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new BridgeTree that will start recording …\nConstructs a new non-empty frontier from its constituent …\nConstruct a fragment from its component parts. This cannot …\nConstruct a new Merkle bridge from its constituent parts.\nCreates a new checkpoint from its constituent parts.\nReturns the non-empty frontier of this Merkle bridge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the current state of the tree had been …\nReturns the value of the most recently appended leaf.\nReturns the altitude of the highest ommer in the frontier.\nReturns the maximum altitude of this bridge’s frontier.\nReturns the maximum number of checkpoints that will be …\nConstructs a new frontier with the specified value at …\nConstruct the new empty authentication path fragment for …\nConstruct a new Merkle bridge containing only the specified\nReturns the position of the most recently appended leaf.\nReturns the position of latest leaf appended to the …\nReturns the position of the most recently appended leaf.\nReturns the prior bridges that make up this tree\nReturns the position of the final leaf in the frontier of …\nGenerate the root of the Merkle tree by hashing against …\nReturns the Merkle root of this bridge’s current …\nReturns the number of leaves that have been appended to …\nConstruct the successor fragment for this fragment to …\nConstructs a new bridge to follow this one. If …\nReturn the wrapped NonEmptyFrontier reference, or None if …\nIf the tree is full to the specified altitude, return the …\nIf the tree is not full, generate the root of the …\nReturns a set of the positions that have been witnessed …")