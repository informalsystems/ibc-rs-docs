searchState.loadedDescShard("argon2", 0, "RustCrypto: Argon2\nArgon2d algorithm identifier\nArgon2id algorithm identifier\nArgon2i algorithm identifier\nAssociated data is too long.\nArgon2 primitive type: variants of the algorithm.\nAlgorithm identifier invalid.\nArgon2 context.\nOptimizes against GPU cracking attacks but vulnerable to …\nOptimized to resist side-channel attacks.\nHybrid that mixes Argon2i and Argon2d passes (<em>default</em>).\nAssociated data\n“B64” encoding is invalid.\nStructure for the (1 KiB) memory block implemented as 128 …\nDefault parameters (recommended).\nDefault parameters (recommended).\nDefault memory cost.\nDefault output length.\nDefault degree of parallelism.\nDefault number of iterations (i.e. “time”).\nEmpty value.\nEmpty value.\nContains the error value\nError type.\nKey identifier\nKey ID is too long.\nMaximum length of associated data in bytes.\nMaximum length of a key ID in bytes.\nMaximum length in bytes\nMaximum length in bytes\nMaximum number of 1 KiB memory blocks.\nMaximum digest size in bytes.\nMaximum password length in bytes.\nMinimum and maximum number of threads (i.e. parallelism).\nMaximum salt length in bytes.\nMaximum secret key length in bytes.\nMaximum number of passes.\nMinimum number of 1 KiB memory blocks.\nMinimum digest size in bytes.\nMinimum and maximum number of threads (i.e. parallelism).\nMinimum salt length in bytes.\nMinimum number of passes.\nMemory cost is too small.\nMemory cost is too large.\nContains the success value\nOutput is too long.\nOutput is too short.\nArgon2 password hash parameters.\nAlgorithm-specific parameters.\nBuilder for Argon2 <code>Params</code>.\nPassword hash.\nTrait for password hashing functions.\nTrait for password verification.\nPassword is too long.\nRecommended salt length for password hashing in bytes.\nResult with argon2’s <code>Error</code> type.\nMemory block size in bytes\nSalt is too long.\nSalt is too short.\nSecret is too long.\nNot enough threads.\nToo many threads.\nTime cost is too small.\nVersion 16 (0x10 in hex)\nVersion 19 (0x13 in hex, default)\nVersion of the algorithm.\nInvalid version\nPassword hashing algorithm identifier.\nBorrow the inner value as a byte slice.\nBorrow the inner value as a byte slice.\nGet the identifier string for this PBKDF2 <code>Algorithm</code>.\nGet the number of blocks required given the configured …\nGet the finished <code>Params</code>.\nCreate a new <code>Argon2</code> context using the provided …\nAssociated data: byte slice between 0 and 32 bytes in …\nSet associated data.\nGet the <code>Encoding</code> that this <code>PasswordHash</code> is serialized with.\nUse a password and associated parameters only to fill the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode KeyId from a B64 string\nDecode AssociatedData from a B64 string\nGenerate a password hash using the supplied algorithm.\nPassword hashing function <code>Output</code>, a.k.a. hash/digest.\nSimple API for computing a <code>PasswordHash</code> from a password and\nCompute a <code>PasswordHash</code> from the provided password using an …\nHash a password and associated parameters into the …\nHash a password and associated parameters into the …\nGet the <code>Ident</code> that corresponds to this Argon2 <code>Algorithm</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this value empty?\nIs this value empty?\nKey identifier: byte slice between 0 and 8 bytes in length.\nSet key identifier.\nGet the length in bytes.\nGet the length in bytes.\nMemory size, expressed in kibibytes. Between 8*<code>p_cost</code> and …\nSet memory size, expressed in kibibytes, between 8*<code>p_cost</code> …\nParse an <code>Algorithm</code> from the provided string.\nReturns a Block initialized with zeros.\nCreate new parameters.\nCreate a new KeyId from a slice.\nCreate a new AssociatedData from a slice.\nCreate a new builder with the default parameters.\nCreate a new Argon2 context.\nParse a password hash from a string in the PHC string …\nCreate a new Argon2 context.\nLength of the output (in bytes).\nSet length of the output (in bytes).\nDegree of parallelism. Between 1 and (2^24)-1.\nSet degree of parallelism, between 1 and (2^24)-1.\nGet default configured <code>Params</code>.\nAlgorithm-specific parameters.\nParse a password hash from the given <code>Encoding</code>.\n<code>Salt</code> string for personalizing a password hash output.\nSerialize this <code>PasswordHash</code> as a <code>PasswordHashString</code>.\nNumber of iterations. Between 1 and (2^32)-1.\nSet number of iterations, between 1 and (2^32)-1.\nCompute this password hashing function against the …\nVerify this password hash using the specified set of …\nOptional version field.")