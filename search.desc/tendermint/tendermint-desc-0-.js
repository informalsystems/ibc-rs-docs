searchState.loadedDescShard("tendermint", 0, "Tendermint is a high-performance blockchain consensus …\nValidator display names\nTimeout durations\nTendermint version\nApplication BlockChain Interface (ABCI) is the interface …\nTendermint accounts\nBlocks within the chains of a Tendermint network\nChain information types for Tendermint networks\nChannels (RPC types)\nTendermint consensus\nCryptographic functionality for Tendermint.\nParse <code>Timeout</code> from string ending in <code>s</code> or <code>ms</code>\nError types\nEvidence of malfeasance by validators (i.e. signing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis data\nHash functions and their outputs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle tree used in Tendermint networks\nNodes in Tendermint blockchain networks\nCryptographic private keys\nTypes used in the Privval protocol (Tendermint Core ADR-063…\nProposals from validators\nPublic keys used in Tendermint networks\nSerde serializers\nCryptographic (a.k.a. digital) signatures\nTimestamps used by Tendermint blockchains\nDefine traits and instances for dealing with trust …\nTendermint validators\nVotes from validators\nABCI application response codes.\nA consensus method, driven by the consensus protocol and …\nError codes\nAn event that occurred while processing a request.\nThe attributes of an Event consist of a key, a value, and …\nAdds convenience methods to tuples for more ergonomic …\nThe flush method requests that all pending method requests …\nAn info method, used for initialization and user queries.\nA mempool method, used for validating new transactions …\nA category of ABCI method.\nSuccess\nA snapshot method, used for serving and restoring state …\nA marker trait for types that can be converted to and from …\nEventAttribute keys and values in TM34 are base64-encoded …\nEventAttribute keys and values in TM37 and later are plain …\nA list of <code>EventAttribute</code>s describing the event.\nChecks whether <code>&amp;self</code> is equal to <code>other</code>, ignoring the <code>index</code> …\nChecks whether <code>&amp;self</code> is equal to <code>other</code>, ignoring the <code>index</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA variant of <code>core::hash::Hash::hash</code> that ignores the <code>index</code> …\nA variant of <code>core::hash::Hash::hash</code> that ignores the <code>index</code> …\nIndicate that this key/value pair should be indexed by …\nAccess the <code>index</code> field common to all variants of the enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience wrapper around <code>Into::into</code> that doesn’t …\nConvenience wrapper around <code>Into::into</code> that doesn’t …\nWas the response an error?\nWas the response OK?\nAccess the <code>key</code> field common to all variants of the enum as …\nAccess the <code>key</code> field common to all variants of the enum as …\nThe kind of event.\nConstruct an event from generic data.\nIndicate that this key/value pair should not be indexed by …\nABCI requests and request data.\nABCI responses and response data.\nSet <code>index</code> field common to all variants of the enum.\nABCI-specific data types used in requests and responses.\nGet the integer error value for this code\nAccess the <code>value</code> field common to all variants of the enum …\nAccess the <code>value</code> field common to all variants of the enum …\nApplies a snapshot chunk.\nSignals the beginning of a new block.\nCheck whether a transaction should be included in the …\nThe possible kinds of <code>CheckTx</code> checks.\nExecute a transaction against the application state.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nABCI documentation\nABCI documentation\nRequests information about the application state.\nCalled on genesis to initialize chain state.\nUsed during state sync to retrieve snapshot chunks from …\nA full check is required (the default).\nOffers a list of snapshots to the application.\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nIndicates that the mempool is initiating a recheck of the …\nUndocumented, non-deterministic, was removed from …\nABCI documentation\nThe ABCI protocol version.\nThe light client verified app hash for this height.\nSerialized JSON bytes containing the initial application …\nThe Tendermint block protocol version.\nEvidence of validator misbehavior.\nThe ID of the blockchain.\nThe binary chunk contents, as returned by <code>LoadSnapshotChunk</code>…\nThe chunk index, starting from <code>0</code> for the initial chunk.\nInitial consensus-critical parameters.\nRaw query bytes.\nInformation about the last commit, obtained from the block …\nAn application-specific identifier of the format of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block’s hash.\nMerkle root hash of the fields of the decided block.\nThe block header.\nThe height of the block just executed.\nThe height of the finalized block.\nThe height of the snapshot the chunks belong to.\nThe block height for which the query should be executed.\nThe chunk index, starting from <code>0</code>.  Tendermint applies …\nHeight of the initial block (typically <code>1</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of check to perform.\nInformation about the last commit.\nthe modified transactions cannot exceed this size.\nThe message to send back.\nEvidence of validator misbehavior.\nMerkle root of the next validator set.\nThe Tendermint p2p protocol version.\nPath of the request, like an HTTP <code>GET</code> path.\nThe address of the public key of the original proposer of …\naddress of the public key of the validator proposing the …\naddress of the public key of the validator proposing the …\nWhether to return a Merkle proof with the response, if …\nThe P2P ID of the node who sent this chunk.\nThe snapshot offered for restoration.\nTimestamp of the finalized block.\nThe genesis time.\nThe transaction bytes.\nThe bytes of the transaction to execute.\nList of transactions committed as part of the block.\ntxs is an array of transactions that will be included in a …\ntxs is an array of transactions that will be included in a …\nInitial genesis validators, sorted by voting power.\nThe Tendermint software semantic version.\nAbort snapshot restoration, and don’t try any other …\nAbort all snapshot restoration\nThe chunk was accepted.\nSnapshot accepted, apply chunks\nReturns the result of applying a snapshot chunk and …\nThe result of applying a snapshot chunk.\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nABCI documentation\nReturns information about the application state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nReturns data queried from the application.\nReject this specific snapshot, try others\nReject all snapshots of this format, try others\nReject all snapshots from the sender(s), try others\nReject this snapshot, try a different one.\nReapply this chunk, combine with <code>refetch_chunks</code> and …\nRestart this snapshot from <code>OfferSnapshot</code>, reusing chunks …\nUndocumented, non-deterministic, was removed from …\nUnknown result, abort all snapshot restoration.\nUnknown result, abort all snapshot restoration\nABCI documentation\nThe hash of the application’s state.\nInitial application hash.\nThe application protocol version.\nThe binary chunk contents, in an arbitrary format.\nThe response code.\nThe response code.\nThe response code for the query.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nThe namespace for the <code>code</code>.\nChanges to consensus parameters (optional).\nUpdates to the consensus params, if any.\nInitial consensus-critical parameters (optional).\nResult bytes, if any.\nThe Merkle root hash of the application state.\nResult bytes, if any.\nSome arbitrary information.\nUndocumented.\nEvents that occurred while beginning the block.\nEvents that occurred while checking the transaction.\nEvents that occurred while executing the transaction.\nEvents that occurred while ending the block.\nSet of block events emitted as part of executing the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of gas consumed by the transaction.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAmount of gas requested for the transaction.\nThe block height from which data was derived.\nThe index of the key in the tree.\nAdditional information.\nAdditional information.\nAdditional information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key of the matching data.\nThe latest result of <code>Commit</code>.\nThe latest block for which the app has called <code>Commit</code>.\nThe output of the application’s logger.\nThe output of the application’s logger.\nThe output of the application’s logger.\nError reported for the mempool. Not used since CometBFT …\nThe message sent in the request.\nPriority for the mempool. Not used since CometBFT 0.38.\nSerialized proof for the value data, if requested, to be …\nRefetch and reapply the given chunks, regardless of <code>result</code>.\nReject the given P2P senders, regardless of <code>result</code>.\nThe result of applying the snapshot chunk.\nBlocks below this height may be removed.\nThe transactions’s sender. Not used since CometBFT 0.38.\nA list of local state snapshots.\nThe result of executing each transaction including the …\nChanges to the validator set, if any.\nA list of updates to the validator set. These will reflect …\nInitial validator set (optional).\nThe value of the matching data.\nThe application software semantic version.\nInformation on how the validator voted for a block.\nInformation on a block commit.\nEvidence that the validator voted for two different blocks …\nResults of executing one individual transaction.\nInformation on a block commit with provided vote …\nInformation about a whether a validator signed the last …\nFull information available, as determined by the …\nIn the message encoded in a CometBFT version before 0.38, …\nEvidence that a validator attacked a light client.\nEvidence of validator misbehavior.\nThe possible kinds of <code>Misbehavior</code>.\nUsed for state sync snapshots.\nUnknown evidence type (proto default value).\nA validator address with voting power.\nInformation about a whether a validator signed the last …\nThe validator’s address (the first 20 bytes of …\nThe number of chunks in the snapshot. Must be at least 1.\nThe response code.\nThe namespace for the <code>code</code>.\nResult bytes, if any.\nEvents that occurred while executing the transaction.\nSignature for the vote extension.\nThe application-specific snapshot format identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of gas consumed by the transaction.\nAmount of gas requested for the transaction.\nAn arbitrary snapshot hash.\nThe height when the offense occurred.\nThe height at which the snapshot was taken\nAdditional information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the validator has signed the block accordingly to …\nThe kind of evidence.\nThe output of the application’s logger.\nArbitrary application metadata, e.g., chunk hashes or …\nThe voting power of the validator.\nThe commit round.\nThe commit round.\nWhether or not the validator signed the last block.\nWhether or not the validator signed the last block.\nThe corresponding time when the offense occurred.\nTotal voting power of the validator set at <code>height</code>.\nIdentifies the validator.\nIdentifies the validator.\nThe offending validator.\nNon-deterministic extension provided by the sending …\nThe list of validator addresses in the last validator set, …\nThe list of validator addresses in the last validator set, …\nA key-value pair describing an <code>Event</code>.\nReturns the argument unchanged.\nWhether Tendermint’s indexer should index this event.\nCalls <code>U::from(self)</code>.\nThe event key.\nThe event value.\nAccount IDs\nSize of an  account ID in bytes\nBorrow the account ID as a byte slice\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new account ID from raw bytes\nThe vote was not received.\nBlocks consist of a header, transactions, votes (the …\nIndicates whether the validator voted for a block, nil, or …\nCommit contains the justification (ie. a set of …\nVoted for a block.\nBlock height for a particular chain (i.e. number of blocks …\nBlock identifiers which contain two distinct Merkle roots …\nBlock metadata - Todo: implement constructor and getters\nVoted for nil.\nParse <code>block::Height</code> from a type\nParse <code>block::Id</code> from a type\nBlock round for a particular chain\nBlock size parameters\nBlock ID\nID of the block\nblock size - Todo: make this robust (u63)\nCommitSig within Commit\nGet data\nTransaction data\nThe default value for the <code>time_iota_ms</code> parameter.\nGet evidence\nEvidence of malfeasance\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe block’s main hash is the Merkle root of all the …\nBlock headers\nGet header\nHeader of the block\nBlock header\nBlock height\nIncrement the block height by 1\nIncrement the block round by 1\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet last commit\nLast commit, should be <code>None</code> for the initial block.\nMaximum number of bytes in a block\nMaximum amount of gas which can be spent on a block\nBuilds a new <code>Block</code>, based on the given <code>Header</code>, data, …\nNumber of transactions - Todo: make this robust (u63)\nParse <code>block::Height</code>, or return an <code>Error</code> if parsing failed\nParse <code>block::Id</code>, or return an <code>Error</code> if parsing failed\nParts header (if available) is used for secure gossipping …\nBlock parts\nGet a shortened 12-character prefix of a block ID (ala git)\nRound\nSignatures\nSignedHeader contains commit and block header. It is what …\nThis parameter has no value anymore in Tendermint-core\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nno vote was received from a validator.\nvoted for the Commit.BlockID.\nvoted for nil.\nCommitSig represents a signature of a validator. It’s a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether this signature is absent (no vote was received …\nWhether this signature is a commit  (validator voted for …\nWhether this signature is nil (validator voted for nil)\nGet the address of this validator if a vote was received.\nSignature of vote\nSignature of vote\nTimestamp of vote\nTimestamp of vote\nValidator address\nValidator address\nBlock <code>Header</code> values contain metadata about the block and …\n<code>Version</code> contains the protocol version for the blockchain …\nApp version\nState after txs from the previous block\nBlock version\nChain ID\nConsensus params for the current block\nMerkle root of transaction hashes\nHash of evidence included in the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the hash of this header.\nHash this header with a Merkle hasher provided by a crypto …\nCurrent block height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrevious block info\nCommit from validators from the last block\nRoot hash of all results from the txs from the previous …\nValidators for the next block\nOriginal proposer of the block\nCurrent timestamp\nValidators for the current block\nHeader version\nBlock parts header\nReturns the argument unchanged.\nHash of the parts set header,\nCalls <code>U::from(self)</code>.\nconstructor\nNumber of parts in this block\nSigned block headers\nGet commit\nCommit containing signatures for the header\nReturns the argument unchanged.\nGet header\nBlock header\nCalls <code>U::from(self)</code>.\nConstructor.\nInformation about a particular Tendermint blockchain\nReturns the argument unchanged.\nCurrent block height of the chain\nTendermint blockchain identifiers\nChain identifier (e.g. ‘gaia-9000’)\nCalls <code>U::from(self)</code>.\nLast block ID seen for this chain\nCreate information about a particular network\nCurrent consensus time (if available)\nChain identifier (e.g. ‘gaia-9000’)\nMaximum length of a <code>chain::Id</code> name. Matches <code>MaxChainIDLen</code> …\nGet the chain ID as a raw bytes.\nGet the chain ID as a <code>str</code>\nReturns the argument unchanged.\nParses string to create a new chain ID\nCalls <code>U::from(self)</code>.\nChannels\nChannel collections\nChannel IDs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChannel ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPriority value\nAmount of data recently sent\nCapacity of the send queue\nSize of the send queue\nGet the current channel id as an integer\nTendermint consensus parameters\nTendermint consensus state\nParameters specific to the Application Blockchain …\nAll consensus-relevant parameters that can be adjusted by …\nValidatorParams restrict the public key types validators …\nVersion Parameters\nParameters specific to the Application Blockchain …\nThe ABCI application version.\nParameters limiting the size of a block and time between …\nParameters limiting the validity of evidence of byzantine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of accepted public key types.\nParameters limiting the types of public keys validators …\nThe ABCI application version. Will default to None if not …\nConfigures the first height during which vote extensions …\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nPlaceholder string to show when block ID is absent. Syntax …\nAn <code>Ordering</code> is the result of a comparison between two …\nTendermint consensus state\nBlock ID being proposed (if available)\nGet short prefix of the block ID for debugging purposes …\nUtilities for formatting and printing strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent block height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nReverses the <code>Ordering</code>.\nCurrent consensus round\nCurrent consensus step\nChains two orderings.\nChains the ordering with the given function.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFlag indicating what form of alignment was requested.\nDetermines if the <code>#</code> flag was specified.\nGet the formatted string, if it has no arguments to be …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nCharacter used as ‘fill’ whenever there is alignment.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nFlags for formatting\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nThis function takes a string slice and emits it to the …\nPerforms the correct padding for an integer which has …\nOptionally specified precision for numeric types. …\nDetermines if the <code>0</code> flag was specified.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nOptionally specified integer width that the output should …\nThe <code>write</code> function takes an output stream, and an <code>Arguments</code>…\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites some formatted information into this instance.\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …\nPure Rust implementations of the cryptographic traits.\nThe default implementation of the <code>Sha256</code> trait.\nTypes implementing the ECDSA algorithm using the Secp256k1 …\nThe pure Rust implementation of signature verification …\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of a SHA256 hash in bytes.\nA SHA256 digest implementation.\nSignature error.\nThe encoding of the public key was malformed.\nThe signature data was malformed.\nThe key used to verify a signature is not of a type …\nThis variant is deliberately opaque as to avoid …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConflicting block detected in light client attack\nDuplicate vote evidence\nDuplicate vote evidence\nDuration is a wrapper around core::time::Duration …\nEvidence of malfeasance by validators (i.e. signing …\nLightClient attack evidence\nLight client attack evidence\nA list of <code>Evidence</code>.\nEvidenceParams determine how we handle evidence of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this evidence data into a vector\nIterate over the evidence data\nMax age of evidence, in time.\nMax age of evidence, in blocks.\nThis sets the maximum size of total evidence in bytes that …\nconstructor\nCreate a new evidence data collection\nGet votes\nGenesis data\nApp hash\nApp state\nChain ID\nConsensus parameters\nReturns the argument unchanged.\nTime of genesis\nStarting height of the blockchain\nCalls <code>U::from(self)</code>.\nValidators\nHash algorithms\nAppHash is usually a SHA256 hash, but in reality it can be …\nHash digests\nEmpty hash\nOutput size for the SHA-256 hash function\nSHA-256\nSHA-256 hashes\nReturn the digest algorithm used to produce this hash\nSerialization/deserialization for <code>Hash</code> that allows for …\nBorrow the <code>Hash</code> as a byte slice\nReturn the hash bytes as a byte slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a <code>Hash</code> from base64-encoded string\nCreate a new <code>Hash</code> with the given algorithm type\nDecode a <code>Hash</code> from upper-case hexadecimal\nDecode a <code>Hash</code> from upper-case hexadecimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience function to check for Hash::None\nDeserialize <code>Hash</code> from a string, allowing for empty hashes.\nSerialize <code>Hash</code> into a string.\nSize of Merkle root hash\nHash is the output of the cryptographic digest function\nImplementation of Merkle tree hashing for Tendermint.\nA wrapper for platform-provided host functions which can’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMerkle proofs\nCompute a simple Merkle root from vectors of arbitrary …\nProofOp defines an operation used for calculating Merkle …\nMerkle proof defined by the list of ProofOps …\nActual data\nType of the ProofOp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey of the ProofOp\nThe list of ProofOps\nNode IDs\nBorrow the node ID as a byte slice\nReturns the argument unchanged.\nNode information (used in RPC responses)\nCalls <code>U::from(self)</code>.\nCreate a new Node ID from raw bytes\nNode information\nListen address information\nIndex is off\nIndex is on\nOther information\nProtocol version information\nTransaction index status\nApp version\nBlock version\nChannels\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListen address\nMoniker\nTendermint network / chain ID,\nConstruct <code>ListenAddress</code>\nOther status information\nP2P protocol version\nProtocol version information\nRPC address\nTX index status\nTendermint version\nEd25519 keys\nPrivate keys as parsed from configuration files\nECDSA/secp256k1 signing key\nIf applicable, borrow the Ed25519 keypair\nReturns the argument unchanged.\nFrom an <code>ed25519_consensus::SigningKey</code>\nCalls <code>U::from(self)</code>.\nGet the public key associated with this private key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCanonicalProposal for signing\nProposal\nRegular Proposal\nSignProposalRequest is a request to sign a proposal\nSignedProposalResponse is response containing a signed …\nTypes of proposals\nBlock ID\nBlock ID\nChain ID\nChain ID\nConsensus state from this proposal - This doesn’t seem …\nResponse error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncanonicalization requires fixed size encoding here\nHeight\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate signable vector from Proposal.\nCreate signable vector from Proposal.\ntype alias for byte\nProposal message type\nCreate CanonicalProposal from Proposal\nPOL round\nPOL Round\nProposal\nProposal\ncanonicalization requires fixed size encoding here\nRound\nSignature\nTimestamp\nTimestamp\nCreate signable bytes from Proposal.\nCreate signable bytes from Proposal.\nUser signing keys used for interacting with accounts in …\nPublic key algorithms\nValidator signing keys used for authenticating consensus …\nEd25519 keys\ned25519\nPubKeyRequest requests the consensus public key from the …\nPubKeyResponse\nPublic keys allowed in Tendermint protocols\nECDSA/secp256k1 verification key (i.e. public key)\nSecp256k1 keys\nsecp256k1\nPublic key roles used in Tendermint networks\nGet the string label for this algorithm\nChain ID\nCustom deserialization for public keys to handle multiple …\nGet Ed25519 public key\nError\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom an <code>ed25519_consensus::VerificationKey</code>\nFrom raw Ed25519 public key bytes\nFrom raw secp256k1 public key bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new account key from a <code>PublicKey</code>\nCreate a new consensus key from a <code>PublicKey</code>\nPublic key\nGet the <code>PublicKey</code> value for this <code>TendermintKey</code>\nGet Secp256k1 public key\nSerialize this key as Bech32 with the given human readable …\nSerialize this key as a byte vector.\nSerialize this key as hexadecimal\nSerialize/deserialize <code>nil</code>able value into <code>T</code>, where <code>nil</code> …\nAppHash serialization with validation\nAppHash serialization with validation\nSerialize/deserialize bytes (<code>Vec&lt;u8&gt;</code>) type\nSerialize and deserialize any <code>T</code> that implements <code>FromStr</code> …\nCombines <code>from_str</code> and <code>allow_null</code>.\nHash serialization with validation\nSerialize/deserialize <code>nil</code>able type into <code>T</code>, where <code>nil</code> turns …\n<code>Option&lt;Hash&gt;</code> serialization with validation\nSerialize/deserialize <code>Option&lt;T&gt;</code> type where <code>T</code> has a …\nDe/serialize an optional type that must be converted …\nSerialize and deserialize part_set_header.total (from …\nAn alternative timestamp serialization/deserialization …\nSerialize/deserialize core::time::Duration type from and …\nSerialize/deserialize Timestamp type from and into string:\nSerialize/deserialize <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> type from and into …\nDeserialize <code>null</code> or an empty object <code>{}</code> as <code>None</code>.\nDeserialize <code>T</code> from a <code>nil</code>-able representation, accepting …\nSerialize <code>T</code> as <code>Some</code> value of <code>Option&lt;T&gt;</code>.\nDeserialize hexstring into AppHash\nSerialize from AppHash into hexstring\nDeserialize a base64-encoded string into an <code>AppHash</code>\nSerialize from <code>AppHash</code> into a base64-encoded string.\nSerialize into base64string, deserialize from base64string\nSerialize into hexstring, deserialize from hexstring\nSerialize into and deserialize from an optional …\nSerialize into string, deserialize from string\nSerialize into and deserialize from a sequence of …\nDeserialize base64string into <code>Vec&lt;u8&gt;</code>\nDeserialize base64string into String\nSerialize from T into base64string\nDeserialize a hex-encoded string into <code>Vec&lt;u8&gt;</code>\nSerialize from a byte slice into a hex-encoded string.\nDeserialize <code>Option&lt;base64string&gt;</code> into <code>Vec&lt;u8&gt;</code> or null\nSerialize from <code>T</code> into <code>Option&lt;base64string&gt;</code>\nDeserialize string into <code>Vec&lt;u8&gt;</code>\nSerialize from <code>T</code> into string\nDeserialize array into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>\nSerialize from <code>Vec&lt;T&gt;</code> into <code>Vec&lt;base64string&gt;</code>\nDeserialize string into T\nSerialize from T into string\nDeserialize a nullable string into T\nSerialize from T into string\nDeserialize hexstring into Hash\nSerialize from Hash into hexstring\nDeserialize <code>Option&lt;T&gt;</code>\nSerialize <code>Option&lt;T&gt;</code>\nDeserialize a nullable hexstring into <code>Option&lt;Hash&gt;</code>. A null …\nSerialize from <code>Option&lt;Hash&gt;</code> into a nullable hexstring. …\nDeserialize <code>Option&lt;T&gt;</code>\nSerialize <code>Option&lt;T&gt;</code>\nDeserialize (string or u32) into u32(part_set_header.total)\nSerialize from u32(part_set_header.total) into u32\nDeserialize <code>String</code> into <code>Time</code>\nSerialize from <code>Time</code> into <code>String</code>\nDeserialize string into Duration\nSerialize from Duration into string\nHelper struct to serialize and deserialize Timestamp into …\nDeserialize string into Timestamp\nHelper for formatting an <code>OffsetDateTime</code> value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize from Timestamp into string\nSerialization helper for converting an <code>OffsetDateTime</code> …\nDeserialize transactions into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>\nSerialize from <code>Vec&lt;Vec&lt;u8&gt;&gt;</code> into transactions\nSize of an encoded Ed25519 signature in bytes.\nEd25519 signature.\nThe expected length of all currently supported signatures, …\nECDSA/secp256k1 signature (fixed-size)\nSignatures\nReturn a reference to the underlying byte array\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nParse an Ed25519 signature from a byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the underlying byte array\nCreate a new signature from the given byte array, if …\nBytes for the <code>R</code> component of a signature.\nBytes for the <code>s</code> component of a signature.\nReturn the inner byte array.\nConvert this signature into a byte vector.\nParse <code>Time</code> from a type\nTendermint timestamps\nCheck whether this time is after the given time.\nCheck whether this time is before the given time.\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nCalculate the amount of time which has passed since …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse <code>Time</code> from an RFC 3339 date\nParse <code>Time</code>, or return an <code>Error</code> if parsing failed\nReturn an RFC 3339 and ISO 8601 date and time string with …\nGet the unix epoch (“1970-01-01 00:00:00 UTC”) as a …\nReturn a Unix timestamp in seconds.\nReturn a Unix timestamp in nanoseconds.\nConstant for a trust threshold of 1/3.\nFacilitates validation of <code>TrustThresholdFraction</code> instances …\nConstant for a trust threshold of 2/3.\nTrustThreshold defines how much of the total voting power …\nTrustThresholdFraction defines what fraction of the total …\nThe denominator of this fraction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the given signed voting power is sufficient …\nInstantiate a TrustThresholdFraction if the given …\nThe numerator of this fraction.\nMerkle proof of the presence of a transaction in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nAll possible ABCI requests in CometBFT 0.34.\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nThe snapshot category of ABCI requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI responses for this protocol version.\nUndocumented, non-deterministic, was removed from …\nUndocumented, non-deterministic, was removed from …\nThe snapshot category of ABCI responses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nSignals the beginning of a new block.\nSignals the beginning of a new block.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nExecute a transaction against the application state.\nExecute a transaction against the application state.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nSignals the end of a block.\nSignals the end of a block.\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nAll possible ABCI requests in CometBFT 0.37.\nThe snapshot category of ABCI requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns events that occurred when beginning a new block.\nReturns events that occurred when beginning a new block.\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nReturns events that occurred while executing a transaction …\nReturns events that occurred while executing a transaction …\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns validator updates that occur after the end of a …\nReturns validator updates that occur after the end of a …\nReturns an exception (undocumented, nondeterministic).\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI responses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a snapshot chunk.\nApplies a snapshot chunk.\nCheck whether a transaction should be included in the …\nCheck whether a transaction should be included in the …\nSignals the application that it can write the queued state …\nSignals the application that it can write the queued state …\nThe consensus category of ABCI requests.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nIndicates that any pending requests should be completed …\nRequests information about the application state.\nRequests information about the application state.\nThe info category of ABCI requests.\nCalled on genesis to initialize chain state.\nCalled on genesis to initialize chain state.\nAsks the application for a list of snapshots.\nAsks the application for a list of snapshots.\nUsed during state sync to retrieve snapshot chunks from …\nUsed during state sync to retrieve snapshot chunks from …\nThe mempool category of ABCI requests.\nOffers a list of snapshots to the application.\nOffers a list of snapshots to the application.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nQueries for data from the application at current or past …\nQueries for data from the application at current or past …\nAll possible ABCI requests in CometBFT 0.38.\nThe snapshot category of ABCI requests.\nABCI documentation\nABCI documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method kind for this request.\nReturns the result of applying a snapshot chunk and …\nReturns the result of applying a snapshot chunk and …\nReturns the result of checking a transaction for mempool …\nReturns the result of checking a transaction for mempool …\nReturns the result of persisting the application state.\nReturns the result of persisting the application state.\nThe consensus category of ABCI responses.\nEchoes a string to test an ABCI implementation.\nEchoes a string to test an ABCI implementation.\nReturns an exception (undocumented, nondeterministic).\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nIndicates that all pending requests have been completed …\nReturns information about the application state.\nReturns information about the application state.\nThe info category of ABCI responses.\nReturned on genesis after initializing chain state.\nReturned on genesis after initializing chain state.\nReturns a list of local state snapshots.\nReturns a list of local state snapshots.\nReturns a snapshot chunk from the application.\nReturns a snapshot chunk from the application.\nThe mempool category of ABCI responses.\nReturns the application’s response to a snapshot offer.\nReturns the application’s response to a snapshot offer.\nABCI documentation\nABCI documentation\nABCI documentation\nABCI documentation\nReturns data queried from the application.\nReturns data queried from the application.\nAll possible ABCI responses for this protocol version.\nThe snapshot category of ABCI responses.\nABCI documentation\nABCI documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidator information\nProposer priority\nValidator set contains a vector of validators\nSimpleValidator is the form of the validator used for …\nA change to the validator set.\nValidator account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the hash of this validator set.\nReturns the bytes to be hashed into the Merkle tree - the …\nHash this header with a SHA256 hasher provided by a crypto …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidator name\nConstructor\nCreate a new validator.\nReturn the voting power of the validator.\nValidator voting power\nNew voting power\nGet proposer\nValidator proposer priority\nValidator public key\nPublic key\nValidator public key\nGet total voting power\nReturns the validator with the given Id if its in the Set.\nGet Info of the underlying validators.\nGet the current proposer priority\nVerify the given signature against the given sign_bytes …\nVoting power\nConvenience constructor for cases where there is a proposer\nConvenience constructor for cases where there is no …\nCanonicalVote is used for protobuf encoding a Vote\nVoting power\nVotes to commit to a particular block for a given round\nVotes for blocks which validators observe are valid for a …\nSignVoteRequest is a request to sign a vote\nSignedVote is the union of a canonicalized vote, the …\nSignedVoteResponse is a response containing a signed vote …\nTypes of votes\nValidatorIndex for a particular Vote\nVotes are signed messages from validators for a particular …\nBlock ID\nBlock ID\nChain ID\nChain ID\nConsensus state from this vote - This doesn’t seem to be …\nOptional error\nVote extension provided by the application. Only valid for …\nVote extension signature by the validator Only valid for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>SignedVote</code> from the provided <code>Vote</code>, which may …\nReturns block_id.hash\nBlock height\nBlock height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate signable vector from Vote.\nCreate signable vector from Vote.\nIs this vote a precommit?\nIs this vote a prevote?\nIs the current voting power zero?\nCreate new <code>SignedVote</code> from provided canonicalized vote, …\nCreate CanonicalVote from Vote\nRound\nRound\nReturn the bytes (of the canonicalized vote) that were …\nReturn the actual signature on the canonicalized vote.\nSignature\nTimestamp\nTimestamp\nCreate signable bytes from Vote.\nCreate signable bytes from Vote.\nValidator address\nReturn the id of the validator that signed this vote.\nValidator index\nGet the current voting power\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nVote\nOptional Vote\nType of vote (prevote or precommit)\nType of vote (prevote or precommit)")