searchState.loadedDescShard("mirai_annotations", 0, "Tagging a structured value also tags all of the component …\nTagging a value also tags any structured value that …\nA tag propagation set indicating a tag is propagated by …\nAn enum type of controllable operations for MIRAI tag …\nA type used to specify how tag types transfer over …\nProvides a way to specify a value that should be treated …\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to unreachable! when used with an unmodified …\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to the standard assert! when used with an …\nEquivalent to the standard assert_eq! when used with an …\nEquivalent to the standard assert_ne! when used with an …\nEquivalent to the standard assert! when used with an …\nEquivalent to the standard assert_eq! when used with an …\nEquivalent to the standard assert_ne! when used with an …\nEquivalent to the standard assert! when used with an …\nEquivalent to the standard assert_eq! when used with an …\nEquivalent to the standard assert_ne! when used with an …\nEquivalent to the standard assert! when used with an …\nEquivalent to the standard assert_eq! when used with an …\nEquivalent to the standard assert_eq! when used with an …\nEquivalent to the standard debug_assert! when used with an …\nEquivalent to the standard debug_assert_eq! when used with …\nEquivalent to the standard debug_assert_ne! when used with …\nEquivalent to the standard debug_assert! when used with an …\nEquivalent to the standard debug_assert_eq! when used with …\nEquivalent to the standard debug_assert_ne! when used with …\nEquivalent to the standard debug_assert! when used with an …\nEquivalent to the standard debug_assert_eq! when used with …\nEquivalent to the standard debug_assert_ne! when used with …\nEquivalent to the standard debug_assert! when used with an …\nEquivalent to the standard debug_assert_eq! when used with …\nEquivalent to the standard debug_assert_ne! when used with …\nProvides a way to check if a value has <em>not</em> been tagged …\nReturns the argument unchanged.\nRetrieves the value of the specified model field, or the …\nProvides a way to check if a value has been tagged with a …\nCalls <code>U::from(self)</code>.\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to a no op when used with an unmodified Rust …\nProvides a way to refer to the result value of an abstract …\nSets the value of the specified model field. A model field …\nProvide a way to create tag propagation sets. It is …\nTerminates the program with a panic that is tagged as …\nEquivalent to a no op when used with an unmodified Rust …\nEquivalent to unreachable! when used with an unmodified …")