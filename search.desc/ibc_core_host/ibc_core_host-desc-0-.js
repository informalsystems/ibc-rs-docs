searchState.loadedDescShard("ibc_core_host", 0, "Provides essential top-level traits designed for the …\nConvenient type alias for <code>ClientStateMut</code>, providing access …\nConvenient type alias for <code>ClientStateRef</code>, providing access …\nConvenient type alias for <code>ConsensusStateRef</code>, providing …\nContext to be implemented by the host that provides all “…\nThe client state type for the host chain.\nThe consensus state type for the host chain.\nContext to be implemented by the host that provides all “…\nCalculates the block delay period using the connection’s …\nCalculates the block delay period using the connection’s …\nReturns a counter on the number of channel ids have been …\nReturns the <code>ChannelEnd</code> for the given <code>port_id</code> and <code>chan_id</code>.\nReturns a natural number, counting how many clients have …\nReturns the prefix that the local chain uses in the KV …\nReturns a counter on how many connections have been …\nReturns the ConnectionEnd for the given identifier <code>conn_id</code>.\nDeletes the packet acknowledgement at the given store path\nDeletes the packet commitment at the given store path\nEmit the given IBC event\nRetrieve the context that implements all clients’ …\nRetrieve the context that implements all clients’ …\nFunction required by ICS-03. Returns the list of all …\nFunction required by ICS-03. Returns the list of all …\nReturns the sequence number for the next packet to be …\nReturns the sequence number for the next packet to be …\nReturns the sequence number for the next packet to be sent …\nReturns the packet acknowledgement for the given store path\nReturns the packet commitment for the given store path\nReturns the packet receipt for the given store path\nReturns the <code>ConsensusState</code> of the host (local) chain at a …\nReturns the current height of the local chain.\nReturns the current timestamp of the local chain.\nCalled upon channel identifier creation (Init or Try …\nCalled upon client creation. Increases the counter, that …\nCalled upon connection identifier creation (Init or Try …\nLog the given message.\nReturns the maximum expected time per block\nFunction required by ICS-03. Returns one version out of …\nFunction required by ICS-03. Returns one version out of …\nStores the given channel_end at a path associated with the …\nStores the given connection_end at path\nStores the given connection_id at a path associated with …\nStores the given <code>nextSequenceAck</code> number at the given store …\nStores the given <code>nextSequenceRecv</code> number at the given …\nStores the given <code>nextSequenceSend</code> number at the given …\nStores the given packet acknowledgement at the given store …\nStores the given packet commitment at the given store path\nStores the given packet receipt at the given store path\nRe-exports ICS-24 data structures from <code>ibc-core-host-types</code> …\nValidates the <code>signer</code> field of IBC messages, which …\nValidates the <code>ClientState</code> of the host chain stored on the …\nDefines identifier types\nDefines all store paths used by IBC\nidentifier <code>{id}</code> must only contain alphanumeric characters …\nidentifier <code>{id}</code> has invalid length; must be between <code>{min}</code> …\nidentifier prefix <code>{prefix}</code> is invalid\nString <code>{value}</code> cannot be converted to packet sequence, …\nrevision number overflowed\nchain identifier is not formatted with revision number\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the domain type for chain identifiers.\nType of the client, depending on the specific consensus …\nThe sequence number of a packet enforces ordering among …\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet a reference to the underlying string.\nGet this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nYields this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nConstructs a new <code>ClientId</code> with this type of client type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrements the sequence number by one.\nIncreases <code>ChainId</code>s revision number by one. Fails if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the client identifier is for 08-wasm light client.\nReturns <code>true</code> if the sequence number is zero.\nCreates a new <code>ChainId</code> with the given chain identifier.\nBuilds a new channel identifier. Like client and …\nBuilds a new client identifier.\nConstructs a new <code>ClientType</code> from the given <code>String</code> if it …\nBuilds a new connection identifier. Connection identifiers …\nReturns the static prefix to be used across all channel …\nReturns the static prefix to be used across all connection …\nExtract the revision number from the chain identifier\nEncodes the sequence number into a byte array in big …\nInfallible creation of the well-known transfer port\nA convenient method to check if the <code>ChainId</code> forms a valid …\nGives the sequence number.\nReturn ConnectionId with identifier 0\n<code>{path}</code> could not be parsed into a Path\nThe Path enum abstracts out the different sub-paths.\nRepresents a general-purpose path structure using the byte …\nThe key identifying the upgraded consensus state\nThe key identifying the upgraded client state\nABCI client upgrade keys\nReturns the parent group path under which all the ack …\nReturns the parent group path under which all the …\nFlattens a list of path bytes into a single path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ninto_bytes implementation\nIndication if the path is provable.\nThis iteration key is namely used by the <code>ibc-go</code> …\nReturns the final part (leaf) of the path under which an …\nReturns the final part (leaf) of the path under which an …\nReturns the final part (leaf) of the path under which an …\nReturns the final part (leaf) of the path under which an …\nConstructs a new <code>ClientConsensusStatePath</code>.\nConstructs a new <code>ClientUpdateTimePath</code>.\nCreate with the default upgrade path\nCreate with the default upgrade path\nReturns the path representing the parent group under which …\nReturns the path representing the parent group under which …\nReturns the path representing the parent group under which …\nReturns the client store prefix under which all the client …\nReturns the connection store prefix under which all the …\nReturns the channel end store prefix under which all the …\nReturns the commitment store prefix under which all the …\nReturns the ack store prefix under which all the packet …\nReturns the receipt store prefix under which all the …\nReturns the parent group path under which all the receipt …")