searchState.loadedDescShard("ibig", 0, "A big integer library with good performance.\nSigned big integer.\nMaximum length in bits.\nUnsigned big integer.\nReturns true if the <code>n</code>-th bit is set.\nBit length.\nClear the <code>n</code>-th bit.\nDefault value: 0.\nDefault value: 0.\nError types.\nGreatest common divisors and the Bézout coefficients.\nGreatest common divisors and the Bézout coefficients.\nFormatting helpers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from big-endian bytes.\nConstruct from little-endian bytes.\nConvert a string in a given base to IBig.\nConvert a string in a given base to UBig.\nConvert a string with an optional radix prefix to IBig.\nConvert a string with an optional radix prefix to UBig.\nGreatest common divisor.\nGreatest common divisor.\nCreate an IBig value.\nRepresentation in a given radix.\nRepresentation in a given radix.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the number is a power of 2.\nModular arithmetic.\nTraits for number operations.\nRaises self to the power of <code>exp</code>.\nRaises self to the power of <code>exp</code>.\nRandom distributions.\nSet the <code>n</code>-th bit.\nA number representing the sign of <code>self</code>.\nReturn big-endian bytes.\nConvert to f32.\nConvert to f32.\nConvert to f64.\nConvert to f64.\nReturn little-endian bytes.\nReturns the number of trailing zeros in the two’s …\nReturns the number of trailing zeros in the binary …\nCreate a UBig value.\nInvalid digit for a given radix.\nNo digits in the string.\nNumber out of bounds.\nError parsing a number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresentation of a UBig or IBig in any radix between 2 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for types that can be converted into Modulo in a …\nModular arithmetic.\nA ring of integers modulo a positive integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an element of the ring from another type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverse.\nThe ring modulus.\nCreate a new ring of integers modulo <code>n</code>.\nExponentiation.\nExponentiation to a signed exponent.\nGet the residue in range <code>0..n</code> in an n-element ring.\nAbsolute value.\nBitwise AND NOT operation.\nCompute Euclidean quotient.\nCompute quotient and remainder at the same time.\nCompute Euclidean quotient and remainder at the same time.\nNext power of two.\nCompute Euclidean remainder.\nUnsigned absolute value.\nUniform IBig distribution.\nUniform UBig distribution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")