searchState.loadedDescShard("cnidarium", 0, "Storage and management of chain state, backed by Jellyfish …\nExtension trait providing <code>try_begin_transaction()</code> on …\nA cache of changes to the state of the blockchain.\nA wrapper type for a byte slice that implements <code>Debug</code> by …\nA root of a <code>JellyfishMerkleTree</code>.\nA snapshot of the underlying storage at a specific state …\nA staged write batch that can be committed to RocksDB.\nAn arbitrarily-deeply nested stack of delta updates to an …\nRead access to chain state.\nWrite access to chain state.\nA handle for a storage instance, backed by RocksDB.\nA <code>Storage</code> instance backed by a <code>tempfile::TempDir</code> for …\nApply all changes in this branch of the tree to the …\nConsume this cache, applying its writes to the given state.\nCommits the provided <code>StateDelta</code> to persistent storage as …\nCommits the supplied <code>StagedWriteBatch</code> to persistent …\nDelete a key from the verifiable key-value store.\nFlatten all changes in this branch of the tree into a …\nFork execution, returning a new child state that includes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConcrete futures types used by the storage crate.\nGets a value from the verifiable key-value store as raw …\nFetch a key from the JMT.\nReturns some value corresponding to the key, along with an …\nInitializes a new storage instance at the given path. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are cached writes on top of the …\nReturns a new <code>Snapshot</code> on top of the latest version of the …\nReturns the latest version (block height) of the tree …\nLoads a storage instance from the given path, initializing …\nMerge the given cache with this one, taking its writes in …\nCreate a new tree of possible updates to an underlying …\nInspect the cache of unwritten changes to the …\nDelete a key from non-verifiable key-value storage.\nGets a byte value from the non-verifiable key-value store.\nFetch a key from nonverifiable storage.\nRetrieve all values for keys matching a prefix from the …\nReturns a stream of all key-value pairs with the given …\nPuts raw bytes into the non-verifiable key-value store …\nRetrieve all values for keys in a range from the …\nReturns a stream of all key-value pairs with the given …\nDeletes a key from the ephemeral object store.\nGets an object from the ephemeral key-object store.\nMerge a set of object changes into this <code>StateWrite</code>.\nPuts an object into the ephemeral object store with the …\nGets the [<code>TypeId</code>] of the object stored at <code>key</code> in the …\nRetrieve all keys (but not values) matching a prefix from …\nRetrieve all values for keys matching a prefix from the …\nReturns a stream of all key-value pairs with the given …\nReturns the root hash of the subtree corresponding to the …\nPrepares a commit for the provided <code>StateDelta</code>, returning a …\nPuts raw bytes into the verifiable key-value store with …\nRecord that an ABCI event occurred while building up this …\nRegisters all metrics used by this crate.\nShuts down the database and the dispatcher task, and waits …\nReturns the root hash of the jmt corresponding to this set …\nConsumes a <code>Cache</code> and returns a map of <code>SubstoreConfig</code> to …\nFetches the <code>Snapshot</code> corresponding to the supplied …\nReturns a <code>watch::Receiver</code> that can be used to subscribe to …\nReturns a <code>watch::Receiver</code> that can be used to subscribe to …\nReturns the version of a substore in this batch, if it …\nExtracts and returns the ABCI events contained in this …\nAttempts to begin a transaction on this <code>Arc&lt;State&gt;</code>, …\nInspect the cache of unwritten changes to the verifiable …\nReturns the new version of the chain state corresponding …\nFuture representing a read from an in-memory cache over an …\nFuture representing a read from a state snapshot.\nA stream of key-value pairs that interleaves a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms a key-value query against the JMT, either by key …\nPerforms a key-value query against the nonverifiable …\nPerforms a prefixed key-value query, by string prefix.\nRequests a stream of new key-value pairs that have been …\nA key-value pair that has been committed to the state.\nThe entry that was committed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf set, the key to fetch from storage.\nA regex for keys in the verifiable storage.\nNested message and enum types in <code>KeyValueResponse</code>.\nNested message and enum types in …\nNested message and enum types in …\nA regex for keys in the nonverifiable storage.\nThe prefix to fetch subkeys from storage.\nwhether to return a proof\nA proof of existence or non-existence.\nGenerated client implementations.\nGenerated server implementations.\nThe value corresponding to the specified key, if it was …\nThe value corresponding to the specified key, if it was …\nThe state version the key-value pair was committed at.\nNested message and enum types in <code>WatchResponse</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneral-purpose key-value state query API, that can be …\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nGeneral-purpose key-value state query API, that can be …\nGeneral-purpose prefixed key-value state query API, that …\nCompress requests with the given encoding.\nSubscribes to a stream of key-value updates, with regex …\nServer streaming response type for the PrefixValue method.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nServer streaming response type for the Watch method.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneral-purpose key-value state query API, that can be …\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nGeneral-purpose key-value state query API, that can be …\nGeneral-purpose prefixed key-value state query API, that …\nCompress responses with the given encoding, if the client …\nSubscribes to a stream of key-value updates, with regex …\nThe entry that was committed.\nElements of the verifiable storage have string keys.\nElements of the nonverifiable storage have byte keys.\nIf set to true, the key-value pair was deleted. This …\nIf set to true, the key-value pair was deleted. This …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")