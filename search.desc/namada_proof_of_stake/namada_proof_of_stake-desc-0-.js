searchState.loadedDescShard("namada_proof_of_stake", 0, "Proof of Stake system.\nAddress of the PoS account implemented as a native VP\nArguments to <code>become_validator</code>.\nTrait used to facilitate collection of lazy maps into …\nThe type of the value of the lazy map\nA 256 bit number with <code>POS_DECIMAL_PRECISION</code> number of Dec …\nEpoch identifier. Epochs are identified by consecutive …\nContains the error value\nContains the error value\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nRepresents a segment in a path that may be used as a …\nA lazy collection of storage values.\nLazy map.\nA lazy set.\nLazy dynamically-sized vector.\nA <code>LazyMap</code> with another <code>LazyCollection</code> inside it’s value <code>V</code>\nContains the success value\nContains the success value\nAn extension to <code>Option</code> to allow turning <code>None</code> case to an …\nStorage read prefix iterator\nAbstract PoS storage read interface\nResult of a storage API call.\nResult of a storage API call.\nResult extension to easily wrap custom errors into <code>Error</code>.\nAddress of the PoS slash pool account\nCommon storage read interface\nCommon storage write interface\nPoS storage <code>Keys/Read/Write</code> implementation\nPossible sub-keys in the collection\nA type of a value in the inner-most collection\nGet the absolute value of self as integer\nGet the non-negative difference between two <code>Dec</code>s.\nThe validator’s address.\nGet a nested collection at given key <code>key</code>. If there is no …\nRead the last element\nInitialize data for a new validator.\nGet the total bond amount, including slashes, for a given …\nGet the total bond amount, including slashes, for a given …\nGet bond amounts within the <code>claim_start..=claim_end</code> epoch …\nSelf-bond tokens to a validator when <code>source</code> is <code>None</code> or …\nReturn the integer value of a <code>Dec</code> by rounding up.\nConsensus key change for a validator\nChange the commission rate of a validator\nChange validator’s metadata. In addition to changing any …\nDo addition of two <code>Dec</code>s\nChecked epoch addition.\nChecked division\nChecked epoch division.\nChecked multiplication. Return <code>None</code> if overflow. This …\nChecked epoch multiplication.\nChecked negation\nChecked epoch integral reminder.\nDo subtraction of two <code>Dec</code>s\nChecked epoch subtraction. Computes self - rhs, returning …\nClaim available rewards, triggering an immediate transfer …\nCollect the lazy map into an eager map\nCommission rate.\nCompute and then store the total consensus stake\nThe validator’s consensus key, used by Tendermint.\nReturns whether the nested map contains a certain key with …\nReturns whether the map contains a key with a value.\nReturns whether the set contains a value.\nCopies the validator sets into all epochs up through the …\nThe numeric value of the current epoch.\nDeactivate a validator by removing it from any validator …\nDelete a value at the given key from storage.\nDelete all key-vals with a matching prefix.\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\n<code>Epoched</code> and <code>EpochedDelta</code> are structures for data that is …\nThe validator’s Ethereum bridge cold key.\nThe validator’s Ethereum bridge hot key.\nProof of Stake events.\nApply PoS updates for a block\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the first element\nReturns the address from the first key segment if it’s …\nGet the genesis consensus validators stake and consensus …\nReturns the value corresponding to the key, if any.\nRead an element at the index or <code>Ok(None)</code> if out of bounds.\nReturn the segment at the index parameter\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGet the height of the first block of the current epoch.\nGet the sub-key of a given element\nGiven the epoch at the given block height.\nGet the height of the first block of the given epoch.\nGet the storage sub-key of a given raw key\nGet the native token address\nGiven the information about predecessor block epochs\nFind the total amount of tokens staked at the given <code>epoch</code>, …\nGet the transaction index.\nStorage <code>has_key</code> in. It will try to read from the storage.\nInit genesis. Requires that the governance parameters are …\nInserts a key-value pair into the map.\nInserts a key into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>std::result::Result</code> into storage_api <code>Result</code>.\nReturns <code>Ok(true)</code> if the given address is a validator and it…\nCheck if the given storage key is a valid data key.\nCheck if the provided address is a delegator address, …\nCheck if the provided address is a delegator address, …\nReturns whether the map contains no elements.\nReturns whether the map contains no elements.\nReturns whether the set contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if the key is empty\nReturn if the <code>Dec</code> is negative\nCheck if the given storage key is a valid LazyVec sub-key …\nCheck if the given storage key is a valid LazyVec sub-key …\nCheck if the provided address is a validator address\nCheck if the provided address is a validator address\nCheck if a validator is frozen.\nCheck if the given key is a key to a validity predicate. …\nCheck if value is zero\nAn iterator visiting all key-value elements. The iterator …\nAn iterator visiting all key-value elements, where the …\nAn iterator visiting all keys. The iterator element type …\nAn iterator visiting all elements. The iterator element …\nIterates over all addresses in the key segments\nIterate a range of epochs, inclusive of the start and end.\nStorage prefix iterator. It will try to read from the …\nStorage prefix iterator ordered by the storage keys. It …\nIterate items matching the given prefix, ordered by the …\nIterate a range of consecutive epochs starting from <code>self</code> …\nJail validators who failed to match the liveness threshold\nJail a validator by removing it from and updating the …\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nLazy map.\nLazy set.\nLazy dynamically-sized vector.\nReads the number of elements in the map.\nReads the number of elements in the map.\nReads the number of elements in the vector.\nReturns the length\nMax commission rate change.\nValidator metadata\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate a new <code>Dec</code> using a mantissa and a scale.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nChange to the next epoch\nOptional offset to use instead of pipeline offset\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T&gt;</code>, mapping [<code>Some(v)</code>…\nThe representation of 1\nThe representation of 1 / 3\nCreate or use an existing vector with the given storage <code>key</code>…\nCreate or use an existing map with the given storage <code>key</code>.\nCreate or use an existing map with the given storage <code>key</code>.\nCreate or use an existing vector with the given storage <code>key</code>…\nProof-of-Stake system parameters\nProof-of-stake parameters.\nReverse of <code>into_string</code>. Convert key segment to <code>Self</code>.\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nRead PoS pipeline length parameter\nRemoves the last element from a vector and returns it, or …\nChange to the previous epoch.\nThe validator’s protocol key.\nRemove liveness data from storage for all validators that …\nAppends an element to the back of a collection.\nReturns a new key with segments of <code>Self</code> and the given …\nQueriezzz\nQuery the amount of available reward tokens for a given …\nConvert <code>Self</code> to a string.\nGet the total bond amount, without applying slashes, for a …\nRe-activate an inactive validator\nStorage read Borsh encoded value. It will try to read from …\nStorage read raw bytes. It will try to read from the …\nRead PoS validator’s stake. For non-validators and …\nRecord the liveness data of the consensus validators\nRedelegate bonded tokens from a source validator to a …\nRemoves a key from the map if it’s present, returning …\nRemoves a key from the set if it’s present, returning …\nRemove all map entries at a given key prefix\nPoS rewards distribution.\nChecked epoch subtraction. Computes self - rhs, returning …\nThe segments of the key in the original (left-to-right) …\nSlashing tingzzzz\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nAddress of the staking token (i.e. the native token)\nPoS functions for reading and writing to storage and lazy …\nProof-of-Stake storage keys and storage integration.\nReturns a sub key without the first segment\nConvert <code>Self</code> to a key segment. This mapping should …\nConvert the Dec type into a I256 with truncation\nConvert the Dec type into a Uint with truncation\nRead total active stake\nPerforms division with truncation.\nTries to inserts a key into the set.\nTry update a value at the given key with the given …\nThe representation of 2\nThe representation of 2 / 5\nThe representation of 2 / 3\nProof of Stake data types\nUnbond tokens that are bonded between a validator and a …\nUnchecked epoch addition.\nUnjail a validator that is currently jailed.\nUpdate a value at the given key with the given function. …\nUpdate an element at the given index.\nThe validation rules for a <code>LazyVec</code> are:\nValidator set updates\nReturns a key of the validity predicate of the given …\nProof-of-Stake native validity predicate.\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nWithdraw tokens from those that have been unbonded from …\nWrap another <code>std::error::Error</code> with a static message.\nAdd a static message to a possible error in <code>Result</code>.\nWrite a value to be encoded with Borsh at the given key to …\nWrite a value as bytes at the given key to storage.\nThe representation of 0\nDefault number of past epochs to keep.\nOffset at the const default num past epochs (above)\nOffset length dynamic choice.\nWhich offset should be used to set data. The value is read …\nDiscrete epoched data handle\nDelta epoched data handle\nSub-key for an epoched data structure’s last (most …\nSub-key holding a lazy map in storage\nOffset at the max proposal period\nOffset at the larger of max proposal period or slash …\nOffset at the larger of max proposal period or slash …\nOffset at the max proposal period plus the default num …\nOffset of the max u64 value\nDiscrete epoched data handle with nested lazy structure\nSub-key for an epoched data structure’s oldest epoch …\nDefault offset\nOffset at max proposal period.\nOffset at the larger of the slash processing length and …\nOffset at the larger of the slash processing length and …\nOffset at the max proposal period, plus the default num …\nMaximum offset.\nOffset at pipeline length.\nOffset at pipeline + unbonding length.\nOffset at the slash processing delay.\nOffset at the slash processing delay plus the default num …\nOffset at unbonding length.\nZero offset\nOffset at pipeline length.\nOffset at pipeline length - 1\nOffset at pipeline + unbonding length.\nOffset at slash processing delay (unbonding + …\nOffset at slash processing delay plus the default num past …\nOffset at unbonding length.\nZero offset\nInitialize or add a value to the current delta value at …\nGet the inner LazyCollection value by the outer key\nConvert to <code>DynEpochOffset</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind the value for the given epoch or a nearest epoch …\nGet handle to the NestedMap data itself\nGet handle to the raw LazyMap data\nGet the delta value at the given epoch\nGet the epoch of the most recent update\nGet the epoch of the most recent update\nGet the oldest epoch at which data is stored\nGet the sum of the delta values up through the given epoch\nInitialize new nested data at the given epoch.\nInitialize new epoched data. Sets the head to the given …\ninit at genesis\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen the handle\nOpen the handle\nInitialize or set the value at the given epoch offset.\nInitialize or set the value at the given epoch offset.\nSet the epoch of the most recent update\nRead all the data into a <code>HashMap</code>\nUpdate data by removing old epochs\nUpdate the data associated with epochs to trim historical …\nFind the value of a given offset from PoS and Gov …\nProof of Stake event.\nSlashing event.\nExtend an <code>Event</code> with slashed amount data.\nExtend an <code>Event</code> with slashed validator data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof of Stake event types.\nAmount of tokens that have been slashed.\nThe address of the slashed validator.\nSlash event.\nTrait used to facilitate collection of lazy maps into …\nThe type of the value of the lazy map\nSubkey corresponding to the data elements of the LazyMap\nData sub-key, further sub-keyed by its literal map key\nData sub-key\nLazy map.\nA <code>LazyMap</code> with another <code>LazyCollection</code> inside it’s value <code>V</code>\nPossible sub-keys of a nested <code>LazyMap</code>\nPossible sub-keys of a <code>LazyMap</code>\nCollect the lazy map into an eager map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLiteral map key\nSub-key in the nested collection\nLiteral set key\nA lazy set.\nPossible sub-keys of a <code>LazySet</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubkey corresponding to the data elements of the LazyVec\nData sub-key, further sub-keyed by its index\nUsing <code>u64</code> for vector’s indices\nSubkey pointing to the length of the LazyVec\nLazy dynamically-sized vector.\nLength sub-key\nPossible sub-keys of a <code>LazyVec</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum string length of any validator metadata\nProof-of-Stake system parameters owned by the PoS address, …\nProof-of-Stake system parameters. This includes parameters …\nThe number of fundamental units per whole token of the …\nAmount of tokens rewarded to a validator for proposing a …\nAmount of tokens rewarded to each validator that voted on …\nGet the first and the last epoch of a cubic slash window.\nNumber of epochs above and below (separately) the current …\nFraction of validator’s stake that should be slashed on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine if the infraction is in the lazy slashing window …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFraction of validator’s stake that should be slashed on …\nThe minimum required activity of consesus validators, in …\nThe length, in blocks, of the sliding window for consensus …\nMaximum staking rewards rate per annum\nGovernance param - Maximum proposal voting period in …\nA maximum number of consensus validators\nPoS-owned params\nAny change applied during an epoch <code>n</code> will become active at …\nGet the redelegation end epoch from the start epoch\nGet the redelegation start epoch from the end epoch\nPoS gain d (read only)\nPoS gain p (read only)\nGet the epoch offset for processing slashes\nTarget ratio of staked NAM tokens to total NAM tokens\nThe voting power per fundamental unit of the staking token …\nHow many epochs after a committed fault a validator can be …\nValidate PoS parameters values. Returns an empty list if …\nThe minimum amount of bonded tokens that a validator needs …\nGet the epoch offset from which an unbonded bond can …\nCollect the details of all bonds and unbonds that match …\nFind raw bond deltas for the given source and validator …\nFind all validators to which a given bond <code>owner</code> (or …\nFind all validators to which a given bond <code>owner</code> (or …\nFind raw unbond deltas for the given source and validator …\nLookup data about a validator from their protocol signing …\nLookup the total voting power for an epoch.\nGet a validator’s Ethereum hot key from storage at the …\nFind the protocol key of the given validator address at …\nFind if the given source address has any bonds.\nRead PoS validator’s stake (sum of deltas). For …\nrewards coefficients are not set\nnumber of votes is less than the threshold of 2/3\nHolds coefficients for the three different ways to get PoS …\nHolds relevant PoS parameters and is used to calculate the …\nReturn values of the inflation asnd staking rewards rates\nErrors during rewards calculation\nAdd tokens to a rewards counter.\nApply inflation to the Proof of Stake system.\nCompute the current available rewards amount due only to …\nCompute PoS inflation amount\nCompute an estimation of the most recent staking rewards …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate the rewards coefficients. These are used in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRewards fraction that goes to the block proposer\nRead the current token value in the rewards counter.\nRewards fraction that goes to the block signers\nTotal stake of validators who signed the block\nTake tokens from a rewards counter. Deletes the record …\nTotal stake of the whole consensus set\nUpdate validator and delegators rewards products and mint …\nComputes how much remains from an amount of tokens after …\nCompute the total amount of tokens from a set of unbonds, …\nCompute the total amount of tokens from a set of unbonds, …\nGet the remaining token amount in a bond after applying a …\nUses <code>fn compute_bond_at_epoch</code> to compute the token amount …\nComputes how much is left from a bond or unbond after …\nCollect the details of all of the enqueued slashes to be …\nFind all slashes and the associated validators in the PoS …\nFind slashes applicable to a validator with inclusive <code>start</code>…\nFind PoS slashes applied to a validator, if any\nCompute a token amount after slashing, given the initial …\nProcess enqueued slashes that were discovered earlier.\nRecord a slash for a misbehavior that has been received …\nSlash a redelegated bond.\nCompute slash amounts for a validator.\nSlash a redelegated bond on a destination validator.\nGet the storage handle to the epoched below-capacity …\nGet the storage handle to a bond, which is dynamically …\nGet the storage handle to the epoched consensus validator …\nGet the storage handle to the delegation targets map\nGet the storage handle to a delegator’s redelegated …\nGet the storage handle to a delegator’s redelegated …\nGet the storage handle to list of all slashes to be …\nGet the validator address given the raw hash of the …\nFind a consensus key of a validator account.\nGet the unique set of consensus keys in storage\nGet the last epoch in which rewards were claimed from …\nCount the number of consensus validators\nCheck if the given consensus key is already being used to …\nGet the storage handle to the missed votes for liveness …\nGet the storage handle to the sum of missed votes for …\nRead all validator addresses.\nRead all addresses from below-capacity validator set.\nRead all addresses from below-capacity validator set with …\nRead all addresses from the below-threshold set\nRead all addresses from consensus validator set.\nRead all addresses from consensus validator set with their …\nRead last block proposer address.\nRead last epoch’s PoS inflation amount.\nRead last epoch’s staked ratio.\nRead non-PoS-owned parameters to add them to <code>OwnedPosParams</code>…\nRead owned PoS parameters\nRead PoS parameters\nRead PoS total stake (sum of deltas).\nRead PoS total stake (sum of deltas).\nRead PoS validator’s avatar.\nRead PoS validator’s delta value.\nRead PoS validator’s description.\nRead PoS validator’s discord handle.\nRead PoS validator’s email.\nRead the most recent slash epoch for the given epoch\nRead PoS validator’s max commission rate change.\nRead validator’s metadata.\nRead PoS validator’s name.\nRead PoS validator’s stake (sum of deltas). For …\nRead the validator state\nRead PoS validator’s website.\nGet the storage handle to the rewards accumulator for the …\nGet the storage handle to the total active deltas\nGet the storage handle to a validator’s total bonds, …\nGet the storage handle to the total consensus validator …\nGet the storage handle to the total deltas\nGet the storage handle to a validator’s total-unbonded …\nCheck if the given consensus key is already being used to …\nGet the storage handle to an unbond\nUpdate PoS total deltas. Note: for EpochedDelta, write the …\nAdd or remove PoS validator’s stake delta value\nGet the storage handle to the set of all validators\nGet the storage handle to a PoS validator’s commission …\nGet the storage handle to a PoS validator’s consensus …\nGet the storage handle to a PoS validator’s deltas\nGet the storage handle to a PoS validator’s eth cold key.\nGet the storage handle to a PoS validator’s eth hot key.\nGet the storage handle to a validator’s incoming …\nGet the storage handle to a validator’s outgoing …\nGet the storage handle to a PoS validator’s protocol key …\nGet the storage handle to a validator’s rewards products\nGet the storage handle to a PoS validator’s deltas\nGet the storage handle to a PoS validator’s slashes\nGet the storage handle to a PoS validator’s state\nGet the storage handle to a validator’s total …\nGet the storage handle to a validator’s outgoing …\nWrite last block proposer address.\nWrite last epoch’s pos inflation amount.\nWrite the last epoch in which rewards were claimed for the …\nWrite last epoch’s staked ratio.\nWrite PoS parameters\nWrite PoS validator’s address raw hash.\nWrite PoS validator’s avatar. If the provided arg is an …\nWrite PoS validator’s description. If the provided arg …\nWrite PoS validator’s discord handle. If the provided …\nWrite PoS validator’s email. The email cannot be …\nWrite the most recent slash epoch for the given epoch\nWrite PoS validator’s max commission rate change.\nWrite validator’s metadata.\nWrite PoS validator’s name. If the provided arg is an …\nWrite PoS validator’s website. If the provided arg is an …\nStorage key for below-capacity validator set\nStorage key for a bond with the given ID (source and …\nStorage key prefix for all bonds of the given source …\nStorage key prefix for all bonds.\nStorage key for consensus keys set.\nStorage key for the consensus validator set rewards …\nStorage key for consensus validator set\nStorage key for the delegation targets of a delegator.\nStorage prefix for the delegation targets.\nStorage key for a particular delegator’s redelegated …\nStorage key prefix for all delegators’ redelegated bonds.\nStorage key for a particular delegator’s redelegated …\nStorage key prefix for all delegators’ redelegated …\nStorage key for all slashes.\nGet validator address from bond key\nIs storage key for the below-capacity validator set?\nIs storage key for a bond last update or oldest epoch? …\nIs storage key for a bond? Returns the bond ID and bond …\nIs storage key for consensus keys set?\nIs storage key for the consensus validator set?\nIs storage key for the consensus validator set?\nIs storage key for the delegation targets of a delegator?\nIs the storage key’s prefix matching delegator’s total …\nIs storage key for block proposer address of the previous …\nIs the storage key for epoch at which an account last …\nIs storage key for PoS parameters?\nIs the given key a PoS storage key?\nIs the storage key for rewards counter?\nIs storage key for total active deltas?\nIs storage key for the total consensus stake?\nIs storage key for total deltas of all validators?\nIs storage key for an unbond? Returns the bond ID and …\nIs storage key for validator’s address raw hash?\nIs the storage key a prefix for all active validators?\nIs storage key for validator’s commission rate?\nIs storage key for validator’s consensus key?\nIs storage key for validator’s total deltas?\nIs storage key for validator’s eth cold key?\nIs storage key for validator’s eth hot key?\nIs storage key for validator’s last known rewards …\nIs storage key for validator’s maximum commission rate …\nIs storage key for some piece of validator metadata?\nIs the storage key’s prefix matching one of validator’…\nIs storage key for validator’s rewards products?\nIs the storage key for validator set positions?\nIs storage key for a validator’s slashes\nIs storage key for a validator state’s last update or …\nIs storage key for validator’s state?\nIs the storage key for the total bonds or unbonds for a …\nStorage key for block proposer address of the previous …\nStorage key for the last epoch’s PoS inflation amount.\nStorage key for epoch at which an account last claimed PoS …\nStorage prefix for epoch at which an account last claimed …\nStorage key for the last epoch’s staked ratio.\nStorage prefix for the liveness data of the cosnensus …\nStorage key for the liveness records.\nStorage key for the liveness data.\nStorage key for PoS parameters.\nStorage key for rewards counter.\nStorage prefix for rewards counter.\nStorage prefix for slashes.\nStorage key for total active deltas (Consensus, …\nStorage key for total consensus stake\nStorage key for total deltas of all validators.\nStorage key for an unbond with the given ID (source and …\nStorage key prefix for all unbonds of the given source …\nStorage key prefix for all unbonds.\nStorage key for validator’s address raw hash for look-up …\nStorage prefix for all active validators (consensus, …\nStorage key for a validator’s avatar\nStorage key for validator’s commission rate.\nStorage key for validator’s consensus key.\nStorage key for validator’s deltas.\nStorage key for a validator’s description\nStorage key for a validator’s discord handle\nStorage key for a validator’s email\nStorage key for validator’s eth cold key.\nStorage key for validator’s eth hot key.\nStorage key for a validator’s incoming redelegations, …\nStorage key for validator’s last known rewards product …\nStorage key for the last (most recent) epoch in which a …\nStorage key for validator’s maximum commission rate …\nStorage key for a validator’s name\nStorage key for a validator’s outgoing redelegations, …\nStorage key for validator’s rewards products.\nStorage key for validator set positions\nStorage prefix for validator sets.\nStorage key for validator’s slashes.\nStorage key for validator’s consensus key.\nStorage key for the total bonds for a given validator.\nStorage key for validator’s total-redelegated-bonded …\nStorage key for validator’s total-redelegated-unbonded …\nStorage key for validator’s total-unbonded amount to …\nStorage key for a validator’s website\nA validator who has stake greater than the …\nBelow-capacity validator set, keyed by staked token amount\nEpoched below-capacity validator sets.\nA validator who has stake less than the …\nBond with all its details\nID of a bond and/or an unbond.\nEpoched validator’s bonds\nBonds and unbonds with all details (slashes and rewards, …\nBonds and unbonds with all details (slashes and rewards, …\nCommission rate and max commission rate change per epoch …\nEpoched validator commission rate\nA validator is consensus-participating\nA validator who may participate in the consensus and is …\nConsensus keys set, used to ensure uniqueness\nNewly updated consensus validator’s consensus key and …\nConsensus validator set, keyed by staked token amount\nEpoched consensus validator sets.\nA validator who was consensus-participating in the last …\nContains information on epoch periods (start, end) in …\nThe set of all target validators for a given delegator.\nA delegator’s redelegated bonded token amount. The map …\nA delegator’s redelegated unbonded token amounts. The …\nDuplicate block vote.\nIn-memory map of redelegated bonds. The map keys from …\nEpoched slashes, where the outer epoch key is the epoch in …\nA genesis validator definition.\nA validator who is deactivated via a tx when a validator …\nA validator’s incoming redelegations, where the key is …\nA validator who is prohibited from participating in …\nLight client attack.\nLiveness data related to the network and set of consensus …\nLiveness record of the consensus validator set. Records …\nThe sum of missed votes within some interval for each of …\nPosition value of 1\nA validator’s outgoing redelegations, where the …\nA position in a validator set\nMap of redelegated bonds or unbonds. The map keys from …\nMap of redelegated tokens. The map keys from outside in …\nEager data for a generic redelegation\nTemp: In quint this is from <code>ResultUnbondTx</code> field …\nA wrapper over <code>token::Amount</code>, whose <code>KeySeg</code> implementation …\nConsensus validator rewards accumulator (for tracking the …\nEpoched rewards products\nA slash applied to validator, to punish byzantine behavior …\nA type of slashable event.\nSlashed amount of tokens.\nSlashes applied to validator, to punish byzantine behavior …\nEpoched total consensus validator set stake\nEpoched total deltas.\nA validator’s total redelegated unbonded tokens for any …\nA validator’s total redelegated unbonded tokens for any …\nUnbond with all its details\nEpoched validator’s unbonds\nAn epoched lazy set of all known validator addresses\nEpoched validator’s consensus key.\nEpoched validator’s deltas.\nEpoched validator’s eth cold key.\nEpoched validator’s eth hot key.\nSome liveness data for a consensus validator\nValidator metadata\nA map from a position to an address in a Validator Set\nEpoched validator’s protocol key.\nStored positions of validators in validator sets\nAn update of the consensus and below-capacity validator …\nSlashes indexed by validator address and then block height …\nValidator’s state. May correspond to the validator set …\nThe validator state from a query and the epoch when it was …\nEpoched validator’s state.\nTotal unbonded for validators needed for slashing …\nVoteInfo inspired from tendermint for validators whose …\nValidator’s address with its voting power.\nValidator’s address\nValidator’s address\nAmount of tokens that were slashed.\nRedelegation amount\nToken amount\nToken amount\nURL that points to a picture (e.g. PNG), identifying the …\nBlock height at which the slashable event occurred.\nStart epoch of the redelgated bond\nTotal bonded stake of the validator\nThe <code>total_stake</code> field must be on top, because …\nBonds\nChecked subtraction\nCometBFT address\nValidator commission rate\nCommission rate charged on rewards for delegators (bounded …\nA public key used for signing validator’s consensus …\nA public key used for signing validator’s consensus …\nValidator description\nValidator’s discord handle\nValidator’s email\nInfraction epoch from which the tokens were slashed\nQuery epoch\nEpoch at which the slashable event occurred.\nMap from bond start epoch to token amount after slashing\nAn Eth bridge governance public key\nAn Eth bridge hot signing public key used for validator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the slash rate applicable to the given slash type from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate voting power in the tendermint context (which is …\nThe last range during which a bond existed\nLiveness threshold\nLength of liveness window\nValidator max commission rate change per epoch\nMaximum change in commission rate permitted per epoch\nValidator metadata\nValidator missed votes\nValidator’s name\nValidator address\nGet the next Position (+1)\nPrevious ranges during which a bond existed (Map&lt;start, …\nA public key used for signing protocol transactions\nThe cubic slashing rate for this validator\nStart epoch of the redelegation is the first epoch in …\nToken amount that has been slashed, if any\nToken amount that has been slashed, if any\nSlashes applied to any of the bonds and/or unbonds\n(Un)bond’s source address is the owner of the bonded …\nSource validator\nThe first epoch in which this bond contributed to a stake\nThe first epoch in which the source bond of this unbond …\nThe token amount unbonded from the validator stake after …\nStaked tokens are put into a self-bond\nA type of slashable event.\nUnbonds\nValidator validator metadata. Returns an empty vec only if …\n(Un)bond’s validator address.\nValidator address\nvalidator voting power\nValidators’ liveness info\nValidator website\nThe first epoch in which this unbond can be withdrawn. …\nCopy the consensus and below-capacity validator sets and …\nInsert the new validator into the right validator set …\nPromote the next below-capacity validator to the consensus …\nRemove a validator from the below-capacity set\nRemove a validator from the consensus validator set\nUpdate validator set at the pipeline epoch when a …\nCommunicate imminent validator set updates to Tendermint.\nProof-of-Stake validity predicate\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the validity predicate")