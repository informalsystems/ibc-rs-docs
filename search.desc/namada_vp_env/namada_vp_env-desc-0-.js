searchState.loadedDescShard("namada_vp_env", 0, "Validity predicate environment contains functions that can …\nThe block header data from Tendermint header relevant for …\nHeight of a block, i.e. the level. The <code>default</code> is the …\nEpoch identifier. Epochs are identified by consecutive …\nPredecessor block epochs\nContains the error value\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nContains the success value\nType to read storage state after the transaction execution\nType to read storage state before the transaction execution\nStorage read prefix iterator\nStorage read prefix iterator\nResult of a storage API call.\nCommon storage read interface\nTransaction index within block.\nValidity predicate’s environment is available for native …\nCharge the provided gas for the current vp\nChecked index addition.\nChecked epoch addition.\nChecked block height addition.\nChecked epoch division.\nChecked epoch multiplication.\nChecked epoch integral reminder.\nChecked epoch subtraction. Computes self - rhs, returning …\nChecked block height subtraction.\nStorage change validation helpers\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nThe number of bytes when this header is encoded\nEvaluate a validity predicate with given data. The …\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nThe first block height 1.\nReturn all starting block heights for each successive …\nThe block heights of the first block of each known epoch. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the address from the first key segment if it’s …\nReturn the segment at the index parameter\nGetting the block epoch. The epoch is that of the block to …\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGetting the chain ID.\nGet the height of the first block of the current epoch.\nLook up the epoch of a given block height. If the given …\nGiven the epoch at the given block height.\nGet the height of the first block of the given epoch.\nLook up the starting block height of an epoch at or before …\nGet the events emitted by the current tx.\nGet the address of the native token.\nGet the native token address\nGiven the information about predecessor block epochs\nGiven the information about predecessor block epochs\nLook up the starting block height of the given epoch\nGet a tx hash\nGet the shielded transaction index.\nGet the transaction index.\nStorage <code>has_key</code> in. It will try to read from the storage.\nStorage <code>has_key</code> in posterior state (after tx execution). …\nStorage <code>has_key</code> in prior state (before tx execution). It …\nMerkle root hash of block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the key is empty\nCheck if the given key is a key to a validity predicate. …\nIterates over all addresses in the key segments\nIterate a range of epochs, inclusive of the start and end.\nStorage prefix iterator. It will try to read from the …\nStorage prefix iterator, ordered by storage keys. It will …\nStorage prefix iterator ordered by the storage keys. It …\nIterate a range of consecutive epochs starting from <code>self</code> …\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nReturns the length\nConvert from a <code>usize</code> or panic.\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nRecord start of a new epoch at the given block height\nChange to the next epoch\nGet the height of the next block\nHash of the addresses of the next validator set\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nRead storage state after the transaction execution\nRead storage state before the transaction execution\nChange to the previous epoch.\nGet the height of the previous block\nReturns a new key with segments of <code>Self</code> and the given …\nStorage read Borsh encoded value. It will try to read from …\nStorage read raw bytes. It will try to read from the …\nStorage read posterior state raw bytes (after tx …\nStorage read prior state raw bytes (before tx execution). …\nStorage read temporary state raw bytes (after tx …\nStorage read posterior state Borsh encoded value (after tx …\nStorage read prior state Borsh encoded value (before tx …\nStorage read temporary state Borsh encoded value (after tx …\nChecked epoch subtraction. Computes self - rhs, returning …\nThe segments of the key in the original (left-to-right) …\nA sentinel value block height 0 may be used before any …\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nReturns a sub key without the first segment\nTimestamp associated to block\nUnchecked epoch addition.\nReturns a key of the validity predicate of the given …\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nWrap another <code>std::error::Error</code> with a static message.\nActions on the collection determined from changed storage …\nNewly added value\nData update with prior and posterior state.\nDeleted value\nExtensions for <code>LazyCollection</code>s for validation.\nPossible sub-keys together with the data read from storage\nUpdated value prior and posterior state\nValidation builder from storage changes.\nAccumulate storage changes inside a <code>ValidationBuilder</code>. …\nThe accumulator of found changes under the vector\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLazyMap validation helpers\nLazySet validation helpers\nLazyVec validation helpers\nRead the prior and posterior state for the given key.\nTry to read and decode the data for each change storage …\nExecute validation on the validation builder, to be called …\nValidate changed sub-keys associated with their data and …\nPosterior state\nPosterior state\nPrior state\nPrior state\nPossible actions that can modify a simple (not nested) …\nNested collection action <code>A</code> at key <code>K</code>\nData sub-key, further sub-keyed by its literal map key\nInsert or update a value <code>V</code> at key <code>K</code> in a <code>LazyMap&lt;K, V&gt;</code>.\nPossible actions that can modify a nested <code>LazyMap</code>.\nRemove a value <code>V</code> at key <code>K</code> from a <code>LazyMap&lt;K, V&gt;</code>.\nPossible sub-keys of a <code>LazyMap</code>, together with their <code>Data</code> …\nUpdate a value <code>V</code> at key <code>K</code> in a <code>LazyMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey at which the value is updated\nvalue after the update\nvalue before the update\nPossible actions that can modify a <code>LazySet</code>. This roughly …\nInsert a key <code>K</code> in a <code>LazySet&lt;K&gt;</code>.\nRemove a key <code>K</code> from a <code>LazySet&lt;K&gt;</code>.\nDetermine what action was taken from the pre/post state\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPossible actions that can modify a <code>LazyVec</code>. This roughly …\nData sub-key, further sub-keyed by its index\nLength sub-key\nPop a value <code>T</code> from a <code>LazyVec&lt;T&gt;</code>\nPush a value <code>T</code> into a <code>LazyVec&lt;T&gt;</code>\nPossible sub-keys of a <code>LazyVec</code>, together with their <code>Data</code> …\nUpdate a value <code>T</code> at index from pre to post state in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nindex at which the value is updated\nvalue after the update\nvalue before the update")