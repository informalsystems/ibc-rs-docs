searchState.loadedDescShard("coins_bip32", 0, "This crate provides a basic implementation of BIP32, ‚Ä¶\nBubbled up error from bs58 library\nThe hardened derivation flag. Keys at or above this index ‚Ä¶\nError bubbled up from the backend\nBad Checks on b58check\nBad padding byte on serialized xprv\nAttempted to tweak an xpriv or xpub directly\nUnrecognized version when deserializing xpriv\nUnrecognized version when deserializing xpub\nErrors for this library\nError bubbled up from the backend\npted to derive the hardened child of an xpub\nAttempted to deserialize a very long path\nHMAC I_l was invalid during key generations.\nError bubbled up froom std::io\nParsing an string derivation failed because an index ‚Ä¶\nAttempted to deserialize a DER signature to a recoverable ‚Ä¶\nMaster key seed generation received &lt;16 bytes\nError bubbled up froom Ser\nProvides keys that are coupled with their derivation path\nElliptic Curve Digital Signature Algorithm (ECDSA).\nNetwork-differentiated encoders for extended keys.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>DerivationPath</code> type and tooling for parsing it from strings\nQuickstart types and traits\nLow-level types\nExtended keys and related functionality\nDerived keys are keys coupled with their derivation. We ‚Ä¶\nA Pubkey with its derivation. Primarily used by PSBT.\nAn XPriv with its derivation.\nAn XPub with its derivation.\nGenerate a root node from some seed data. Uses the ‚Ä¶\nInstantiate a root node using a custom HMAC key.\nReturn this key‚Äôs derivation\nThe fingerprint is the first 4 bytes of the HASH160 of the ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if this key is a possible ancestor of the argument, ‚Ä¶\nCheck if this XPriv is the private ancestor of some other ‚Ä¶\nCheck if this XPriv is the private ancestor of some other ‚Ä¶\nInstantiate a new <code>DerivedPubkey</code>\nInstantiate a derived XPub from the XPub and derivatin. ‚Ä¶\nInstantiate a derived XPub from the XPub and derivatin. ‚Ä¶\nReturns the path to the descendant, or <code>None</code> if the ‚Ä¶\nReturn the hash of the compressed (Sec1) pubkey.\nGenerate a root node from some seed data. Uses the ‚Ä¶\nGenerate a customized root node using the stati\n<code>true</code> if the keys share a root fingerprint, <code>false</code> ‚Ä¶\nSign the given message digest, returning a signature and ‚Ä¶\nGet the compressed sec1 representation of the public key.\nGet the compressed sec1 representation of the public key.\nDerive the corresponding xpub\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. ‚Äúrecid‚Äù.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nCreate a new error with an associated source.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of ùëò√óùëÆ overflow the ‚Ä¶\nIs the affine y-coordinate of ùëò√óùëÆ odd?\nCreate a new error with no associated source\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use ‚Ä¶\nGiven a public key, message, and signature, use trial ‚Ä¶\nGiven a public key, message digest, and signature, use ‚Ä¶\nPreferred digest to use when computing ECDSA signatures ‚Ä¶\nBind a preferred <code>Digest</code> algorithm to an elliptic curve ‚Ä¶\nTry to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined ‚Ä¶\nSign a prehashed message digest using the provided secret ‚Ä¶\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically ‚Ä¶\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA ‚Ä¶\nVerify the prehashed message against the provided ECDSA ‚Ä¶\nPreferred <code>Digest</code> algorithm to use when computing this ‚Ä¶\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nVerify the provided signature for the given prehashed ‚Ä¶\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as ‚Ä¶\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with ‚Ä¶\nSign the given message using the provided external ‚Ä¶\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a ‚Ä¶\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. ‚Ä¶\nVerify the provided message bytestring using <code>Self</code> (e.g. a ‚Ä¶\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure ‚Ä¶\nSign the given message and return a digital signature\nSign the given message, update the state, and return a ‚Ä¶\nSign the given prehashed message <code>Digest</code>, returning a ‚Ä¶\nSign the given prehashed message <code>Digest</code>, returning a ‚Ä¶\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital ‚Ä¶\nAttempt to sign the given message, updating the state, and ‚Ä¶\nAttempt to sign the given prehashed message <code>Digest</code>, ‚Ä¶\nAttempt to sign the given prehashed message <code>Digest</code>, ‚Ä¶\nAttempt to sign the given message, returning a digital ‚Ä¶\nUse <code>Self</code> to verify that the provided signature for a given ‚Ä¶\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced ‚Ä¶\nFixed size output value which provides a safe <code>Eq</code> ‚Ä¶\nConvenience wrapper trait covering functionality of ‚Ä¶\nModification of the <code>Digest</code> trait suitable for trait ‚Ä¶\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able ‚Ä¶\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to ‚Ä¶\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually ‚Ä¶\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the ‚Ä¶\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of ‚Ä¶\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to ‚Ä¶\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to ‚Ä¶\nTrait for reader types which are used to extract ‚Ä¶\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around ‚Ä¶\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and ‚Ä¶\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size ‚Ä¶\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size ‚Ä¶\nRetrieve result into a boxed slice and reset the hasher ‚Ä¶\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher ‚Ä¶\nWrite result into provided array and consume the hasher ‚Ä¶\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher ‚Ä¶\nWrite result into provided array and reset the hasher ‚Ä¶\nWrite result into provided array and reset the hasher ‚Ä¶\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and ‚Ä¶\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher ‚Ä¶\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to ‚Äú‚Ä¶\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the ‚Ä¶\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> ‚Ä¶\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited ‚Ä¶\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input ‚Ä¶\nCheck truncated tag correctness using all bytes of ‚Ä¶\nCheck truncated tag correctness using all bytes of ‚Ä¶\nCheck truncated tag correctness using left side bytes ‚Ä¶\nCheck truncated tag correctness using right side bytes ‚Ä¶\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer ‚Ä¶\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer ‚Ä¶\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the ‚Ä¶\nCompress remaining data after padding it with <code>delim</code>, zeros ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length ‚Ä¶\nPad message with 0x80, zeros and 64-bit message length ‚Ä¶\nPad message with 0x80, zeros and 64-bit message length ‚Ä¶\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\nTrait making <code>GenericArray</code> work, marking types to be used ‚Ä¶\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> ‚Ä¶\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. ‚Ä¶\nReturns the remaining items of this iterator as a mutable ‚Ä¶\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its ‚Ä¶\nReturns the argument unchanged.\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred ‚Ä¶\nReturns the argument unchanged.\nCreates a new <code>GenericArray</code> instance from an iterator with ‚Ä¶\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred ‚Ä¶\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in ‚Ä¶\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic ‚Ä¶\nMapped sequence type\nDefines the relationship between one generic sequence and ‚Ä¶\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates ‚Ä¶\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, ‚Ä¶\nFirst part of the resulting split array\nDefines some sequence with an associated length and ‚Ä¶\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or ‚Ä¶\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference ‚Ä¶\nAccessor for <code>GenericSequence</code> item type, which is really ‚Ä¶\nDefines a <code>GenericSequence</code> which can be shortened by ‚Ä¶\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts ‚Ä¶\nReturns a new array with the given element appended to the ‚Ä¶\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given ‚Ä¶\nReturns a new array without the last element, and the last ‚Ä¶\nReturns a new array without the first element, and the ‚Ä¶\nReturns a new array with the given element prepended to ‚Ä¶\nSplits an array at the given index, returning the separate ‚Ä¶\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: ‚Ä¶\nAlias to make it easy to add 1: ‚Ä¶\nAlias for the associated type of <code>BitAnd</code>: ‚Ä¶\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a ‚Ä¶\nAlias for the associated type of <code>Cmp</code>: ‚Ä¶\nAlias to make it easy to cube. ‚Ä¶\nAlias for the associated type of <code>Sub</code>: ‚Ä¶\nAlias to make it easy to multiply by 2. ‚Ä¶\nAlias for the associated type of <code>IsEqual</code>: ‚Ä¶\nA potential output from <code>Cmp</code>, this is the type equivalent ‚Ä¶\nAlias for the associated type of <code>Pow</code>: ‚Ä¶\nA <strong>type operator</strong> that computes the greatest common divisor ‚Ä¶\nAlias for the associated type of <code>Gcd</code>: ‚Ä¶\nAlias for the associated type of <code>IsGreater</code>: ‚Ä¶\nAlias for the associated type of <code>IsGreaterOrEqual</code>: ‚Ä¶\nA potential output from <code>Cmp</code>, this is the type equivalent ‚Ä¶\nThe concrete value for the type. Can be used in <code>const</code> ‚Ä¶\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, ‚Ä¶\nAlias for the associated type of <code>IsLess</code>: ‚Ä¶\nAlias for the associated type of <code>IsLessOrEqual</code>: ‚Ä¶\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the ‚Ä¶\nAlias for the associated type of <code>Len</code>: ‚Ä¶\nA potential output from <code>Cmp</code>, this is the type equivalent ‚Ä¶\nAlias for the associated type of <code>Logarithm2</code>: ‚Ä¶\nA <strong>type operator</strong> for taking the integer binary logarithm of ‚Ä¶\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: ‚Ä¶\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: ‚Ä¶\nAlias for the associated type of <code>Rem</code>: ‚Ä¶\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: ‚Ä¶\nA <strong>marker trait</strong> to designate that a type is not zero. All ‚Ä¶\nAlias for the associated type of <code>IsNotEqual</code>: ‚Ä¶\nAlias for the associated type of <code>BitOr</code>: ‚Ä¶\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one ‚Ä¶\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> ‚Ä¶\nAlias for the associated type of <code>PartialDiv</code>: ‚Ä¶\nA <strong>type operator</strong> that provides exponentiation by repeated ‚Ä¶\nThe <strong>marker trait</strong> for type-level numbers which are a power ‚Ä¶\nAlias for the associated type of <code>Mul</code>: ‚Ä¶\nAlias for the associated type of <code>Div</code>: ‚Ä¶\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, ‚Ä¶\nAlias for the associated type of <code>Shl</code>: ‚Ä¶\nAlias for the associated type of <code>Shr</code>: ‚Ä¶\nAlias for the associated type of <code>SquareRoot</code>: ‚Ä¶\nAlias to make it easy to square. ‚Ä¶\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: ‚Ä¶\nAlias for the associated type of <code>Add</code>: ‚Ä¶\n<code>TArr</code> is a type that acts as an array of types. It is ‚Ä¶\nA <strong>type operator</strong> for taking a concrete integer value from a ‚Ä¶\nThe <strong>marker trait</strong> for type-level arrays of type-level ‚Ä¶\n<code>UInt</code> is defined recursively, where <code>B</code> is the least ‚Ä¶\nThe terminating type for <code>UInt</code>; it always comes after the ‚Ä¶\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: ‚Ä¶\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, ‚Ä¶\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> ‚Ä¶\nType aliases for many constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn‚Äôt used in this crate, but may be ‚Ä¶\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly ‚Ä¶\nInstantiates a singleton representing this strictly ‚Ä¶\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned ‚Ä¶\nInstantiates a singleton representing this unsigned ‚Ä¶\nConvenient type operations.\nAliases for the type operators used in this crate. Their ‚Ä¶\nMethod for performing the division\nThis function isn‚Äôt used in this crate, but may be ‚Ä¶\nCreate a new type-level array. Only usable on Rust 1.13.0 ‚Ä¶\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is ‚Ä¶\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All ‚Ä¶\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power ‚Ä¶\nThe <strong>marker trait</strong> for type-level arrays of type-level ‚Ä¶\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, ‚Ä¶\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: ‚Ä¶\nAlias to make it easy to add 1: ‚Ä¶\nAlias for the associated type of <code>BitAnd</code>: ‚Ä¶\nAlias for the associated type of <code>Cmp</code>: ‚Ä¶\nAlias to make it easy to cube. ‚Ä¶\nAlias for the associated type of <code>Sub</code>: ‚Ä¶\nAlias to make it easy to multiply by 2. ‚Ä¶\nAlias for the associated type of <code>IsEqual</code>: ‚Ä¶\nAlias for the associated type of <code>Pow</code>: ‚Ä¶\nAlias for the associated type of <code>Gcd</code>: ‚Ä¶\nAlias for the associated type of <code>IsGreater</code>: ‚Ä¶\nAlias for the associated type of <code>IsGreaterOrEqual</code>: ‚Ä¶\nAlias for the associated type of <code>IsLess</code>: ‚Ä¶\nAlias for the associated type of <code>IsLessOrEqual</code>: ‚Ä¶\nAlias for the associated type of <code>Len</code>: ‚Ä¶\nAlias for the associated type of <code>Logarithm2</code>: ‚Ä¶\nAlias for the associated type of <code>Max</code>: ‚Ä¶\nAlias for the associated type of <code>Min</code>: ‚Ä¶\nAlias for the associated type of <code>Rem</code>: ‚Ä¶\nAlias for the associated type of <code>Neg</code>: ‚Ä¶\nAlias for the associated type of <code>IsNotEqual</code>: ‚Ä¶\nAlias for the associated type of <code>BitOr</code>: ‚Ä¶\nAlias for the associated type of <code>PartialDiv</code>: ‚Ä¶\nAlias for the associated type of <code>Mul</code>: ‚Ä¶\nAlias for the associated type of <code>Div</code>: ‚Ä¶\nAlias for the associated type of <code>Shl</code>: ‚Ä¶\nAlias for the associated type of <code>Shr</code>: ‚Ä¶\nAlias for the associated type of <code>SquareRoot</code>: ‚Ä¶\nAlias to make it easy to square. ‚Ä¶\nAlias to make it easy to subtract 1: ‚Ä¶\nAlias for the associated type of <code>Add</code>: ‚Ä¶\nAlias for the associated type of <code>BitXor</code>: ‚Ä¶\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a ‚Ä¶\nA <strong>type operator</strong> that computes the greatest common divisor ‚Ä¶\nThe concrete value for the type. Can be used in <code>const</code> ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, ‚Ä¶\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the ‚Ä¶\nA <strong>type operator</strong> for taking the integer binary logarithm of ‚Ä¶\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one ‚Ä¶\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> ‚Ä¶\nA <strong>type operator</strong> that provides exponentiation by repeated ‚Ä¶\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, ‚Ä¶\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a ‚Ä¶\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn‚Äôt used in this crate, but may be ‚Ä¶\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn‚Äôt used in this crate, but may be ‚Ä¶\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power ‚Ä¶\nA <strong>type operator</strong> that, when implemented for unsigned ‚Ä¶\nAlias for the result of calling <code>SetBit</code>: ‚Ä¶\n<code>UInt</code> is defined recursively, where <code>B</code> is the least ‚Ä¶\nThe terminating type for <code>UInt</code>; it always comes after the ‚Ä¶\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an ‚Äúarc‚Äù (i.e. integer ‚Ä¶\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an ‚Ä¶\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of ‚Ä¶\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID ‚Ä¶\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMaximum size of a BER/DER-encoded OID in bytes.\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>‚Ä¶\nGet the BER/DER serialization of this OID as bytes.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string ‚Ä¶\nParse an <code>ObjectIdentifier</code> from the dot-delimited string ‚Ä¶\nGet the OID associated with this value.\nGet the parent OID of this one (if applicable).\nPush an additional arc onto this OID, returning the child ‚Ä¶\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> ‚Ä¶\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output ‚Ä¶\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the ‚Ä¶\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) ‚Ä¶\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided ‚Ä¶\nFinalize hasher and write full hashing result into the <code>out</code> ‚Ä¶\nRetrieve XOF reader using remaining data stored in the ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> ‚Ä¶\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually ‚Ä¶\nTypes which can be initialized from another type and ‚Ä¶\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the ‚Ä¶\nInitialization vector (nonce) used by <code>IvSizeUser</code> ‚Ä¶\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for ‚Ä¶\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization ‚Ä¶\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors ‚Ä¶\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital ‚Ä¶\nVerify the provided message prehash using <code>Self</code> (e.g. a ‚Ä¶\nSign the provided message prehash using the provided ‚Ä¶\nAttempt to sign the given message digest, returning a ‚Ä¶\nAttempt to sign the given message digest, returning a ‚Ä¶\nUse <code>Self</code> to verify that the provided signature for a given ‚Ä¶\nCodes at or above this point can be used by users to ‚Ä¶\nA marker trait used to indicate that an <code>RngCore</code> or ‚Ä¶\nAn extension trait that is automatically implemented for ‚Ä¶\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive ‚Ä¶\nA random number generator that retrieves randomness from ‚Ä¶\nThe core of a random number generator.\nSeed type, which is restricted to types ‚Ä¶\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the ‚Ä¶\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type ‚Ä¶\nA wrapper type implementing <code>RngCore</code> for some type ‚Ä¶\nA trait for RNGs which do not generate random numbers ‚Ä¶\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‚Äòblock‚Äô an RNG implementing ‚Ä¶\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> ‚Ä¶\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the ‚Ä¶\nGenerate a new set of results immediately, setting the ‚Ä¶\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing ‚Ä¶\nCreate a new <code>BlockRng</code> from an existing RNG implementing ‚Ä¶\nReset the number of available results. This will force a ‚Ä¶\nReset the number of available results. This will force a ‚Ä¶\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, ‚Ä¶\nImplement <code>fill_bytes</code> by reading chunks from the output ‚Ä¶\nImplement <code>fill_bytes</code> by reading chunks from the output ‚Ä¶\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nThe Bip49 privkey version bytes\nThe Bip49 pubkey version bytes\nThe Bip84 pubkey version bytes\nThe Bip84 pubkey version bytes\nParameterizable Bitcoin encoder\nMainnet encoding param\nXKeyEncoder for Mainnet xkeys\nContains network-specific serialization information\nThe Bip32 privkey version bytes\nThe Bip32 pubkey version bytes\nTestnet encoding param\nXKeyEncoder for Testnet xkeys\nBip32/49/84 encoder\nDecode a bytevector from a base58 check string\nEncode a vec into a base58 check String\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to instantiate an <code>XPriv</code> from a <code>std::io::Read</code>\nAttempt to instantiate an <code>XPub</code> from a <code>std::io::Read</code>\nSerialize the xpriv to <code>std::io::Write</code>\nSerialize the xpriv to <code>std::io::Write</code>\nSerialize the xpub to <code>std::io::Write</code>\nSerialize the xpub to <code>std::io::Write</code>\nAttempt to read an XPriv from a b58check string.\nSerialize an XPriv to base58\nAttempt to read an XPub from a b58check string\nSerialize an XPub to base58\nA Bip32 derivation path\nA Derivation Path for a bip32 key\nConverts the path to a standard bip32 string. e.g ‚Ä¶\nAppend an additional derivation to the end, return a clone\nAppend an additional derivation to the end, return a clone\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an raw index to hardened\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>True</code> if there are no indices in the path\n<code>true</code> if this key is an ancestor of other, <code>false</code> otherwise. ‚Ä¶\nMake an iterator over the path indices\nReturn the last index in the path. None if the path is the ‚Ä¶\nConvenience function for finding the last hardened ‚Ä¶\nThe number of derivations in the path\nThe derivation path from the root key\nReturns the path to the decendant.\nReturn a clone with a resized path. If the new size is ‚Ä¶\nReturn a clone with a resized path. If the new size is ‚Ä¶\nThe root key fingerprint\n<code>true</code> if the keys share a root fingerprint, <code>false</code> ‚Ä¶\n<code>true</code> if <code>other</code> is a prefix of <code>self</code>\nRemove a prefix from a derivation. Return a new ‚Ä¶\nRecovery IDs, a.k.a. ‚Äúrecid‚Äù.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nshortcut for easy usage\nRe-exported signer traits\nA 32-byte chain code\nBip32 + Bip49 hint for Witness-via-P2SH\nWe treat the bip32 xpub bip49 ypub and bip84 zpub ‚Ä¶\nA 4-byte key fingerprint\nStandard Bip32 hint\nBip32 + Bip84 hint for Native SegWit\nInfo associated with an extended key\nThe 32-byte chain code used to generate child keys\nThe key depth in the HD tree\nDetermines if the slice represents the same key fingerprint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe key‚Äôs stanadard output type preference\nThe 4-byte derivation index of the key. If the ‚Ä¶\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe 4-byte Fingerprint of the parent\nA Parent key can be used to derive children.\nThe BIP32-defined seed used for derivation of the root ‚Ä¶\nA BIP32 eXtended Privkey\nA BIP32 eXtended Public key\nGenerate a root node from some seed data. Uses the ‚Ä¶\nInstantiate a root node using a custom HMAC key.\nDerive the child at <code>index</code>. Note that this may produce the ‚Ä¶\nDerive a series of child indices. Allows traversing ‚Ä¶\nDerive a series of child indices. Allows traversing ‚Ä¶\nThe fingerprint is the first 4 bytes of the HASH160 of the ‚Ä¶\nThe fingerprint is the first 4 bytes of the HASH160 of the ‚Ä¶\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new XPriv.\nInstantiate a new XPub\nReturn the bitcoin HASH160 of the serialized public key\nGenerate a root node from some seed data. Uses the ‚Ä¶\nGenerate a customized root node\nSign the given message digest, returning a signature and ‚Ä¶\nGet the compressed sec1 representation of the public key.\nDerive the associated XPub")