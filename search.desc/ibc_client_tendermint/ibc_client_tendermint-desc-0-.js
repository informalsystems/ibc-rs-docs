searchState.loadedDescShard("ibc_client_tendermint", 0, "ICS 07: Tendermint light client implementation along with …\nThis module includes trait implementations for the …\nThis module includes trait implementations for the …\nRe-exports Tendermint light client data structures from the\nNewtype wrapper around the <code>ClientState</code> type, imported from …\nCheck for misbehaviour on the client state as part of the …\nChecks for misbehaviour upon receiving a new consensus …\nCheck that the subject and substitute client states match …\nDetermines the <code>Status</code>, whether it is <code>Active</code> or <code>Expired</code>, of …\nReturns the argument unchanged.\nSeed the host store with initial client and consensus …\nCalls <code>U::from(self)</code>.\nRemoves consensus states from the client store whose …\nQuery the status of the client state.\nCommit a frozen client state, which was frozen as a result …\nUpdate the <code>client_state</code>’s ID, trusting period, latest …\nCommit the new client state and consensus state to the …\nUpdate the host store with a new client state, pruning old …\nValidate the given proof height against the client state’…\nVerify the client message as part of the client state …\nThe default verification logic exposed by ibc-rs simply …\nVerify an <code>Any</code> consensus state by attempting to convert it …\nVerify membership of the given value against the client’…\nDetermines if two conflicting headers at the same height …\nVerify that the given value does not belong in the client…\nPerform client-specific verifications and check all data …\nNewtype wrapper around the <code>ConsensusState</code> type imported …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines data structure for Tendermint client state.\nDefines the Tendermint light client’s consensus state\nTendermint consensus header\nTendermint light client’s misbehaviour type\nConstant for a trust threshold of 1/3.\nConstant for a trust threshold of 2/3.\n<code>TrustThreshold</code> defines the level of trust that a client has\nConstant for a trust threshold of 0/0.\nHelper method to produce a <code>Options</code> struct for use in …\n<code>header.trusted_next_validator_set</code> was given to us by the …\nReturns the tendermint <code>ClientType</code>\nThe denominator of the fraction underlying this trust …\nDefines the Tendermint light client’s error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Tendermint <code>ClientState</code> by given …\nInstantiate a TrustThreshold with the given denominator and\nThe numerator of the fraction underlying this trust …\nRe-exports ICS-07 Tendermint light client from <code>ibc-proto</code> …\nGet the refresh time to ensure the state does not expire\nReturns the timestamp of the consensus state as a …\nChecks if the fields of a given header are consistent with …\ndecoding error: {0}\nfailed to verify header: {0}\ninsufficient misbehaviour header height: header1 height …\ninsufficient trusting period <code>{trusting_period:?}</code>; should …\ninsufficient validator overlap <code>{0}</code>\ninvalid header height <code>{0}</code>\ninvalid max clock drift; must be greater than 0\ninvalid client proof specs <code>{0}</code>\ninvalid timestamp <code>{0}</code>\ninvalid client state trust threshold: {description}\nmismatched header chain ids: expected <code>{expected}</code>, actual …\nmismatched revision heights: expected <code>{expected}</code>, actual …\nmismatched validator hashes: expected <code>{expected}</code>, actual …\nmissing client state upgrade-path key\nThe main error type for the Tendermint light client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientState from Tendermint tracks the current validator …\nConsensusState defines the consensus state from Tendermint.\nFraction defines the protobuf message type for …\nHeader defines the Tendermint client consensus Header. It …\nMisbehaviour is a wrapper over two conflicting Headers …\nallow_update_after_expiry is deprecated\nallow_update_after_misbehaviour is deprecated\nClientID is deprecated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock height when the client was frozen due to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatest height the client was updated to\ndefines how much new (untrusted) header’s Time can drift …\nProof specifications used in verifying counterparty state\ncommitment root (i.e app hash)\ntimestamp that corresponds to the block height in which …\nduration of the period since the LastestTimestamp during …\nduration of the staking unbonding period\nPath at which next upgraded client will be committed. Each …")