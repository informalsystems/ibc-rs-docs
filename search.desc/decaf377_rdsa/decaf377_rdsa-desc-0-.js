searchState.loadedDescShard("decaf377_rdsa", 0, "decaf377-rdsa\nA type variable corresponding to Zcash’s <code>BindingSig</code>.\nAbstracts over different signature domains.\nAn error related to <code>decaf377-rdsa</code> signatures.\nSignature verification failed.\nThe encoding of a signing key was malformed.\nThe encoding of a verification key was malformed.\nA <code>decaf377-rdsa</code> signature.\nA <code>decaf377-rdsa</code> signing key.\nA type variable corresponding to Zcash’s <code>SpendAuthSig</code>.\nA valid <code>decaf377-rdsa</code> verification key.\nA refinement type for <code>[u8; 32]</code> indicating that the bytes …\nOccurs when reading from a slice of the wrong length.\nPerforms batch <code>decaf377-rdsa</code> signature verification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for identity checks.\nCreate a new signing key from the supplied <code>rng</code>.\nUse the supplied field element as the signing key directly.\nRandomize this public key with the given <code>randomizer</code>.\nRandomize this verification key with the given <code>randomizer</code>.\nCreate a signature for domain <code>D</code> on <code>msg</code> using this …\nCreate a signature for domain <code>D</code> on <code>msg</code> using this …\nReturns the bytes of the signature.\nReturns the byte encoding of the signing key.\nReturns the byte encoding of the verification key.\nVerify a purported <code>signature</code> over <code>msg</code> made by this …\nA batch verification item.\nA batch verification context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new batch verifier.\nQueue an Item for verification.\nPerform batch verification, returning <code>Ok(())</code> if all …\nPerform non-batched verification of this <code>Item</code>.")