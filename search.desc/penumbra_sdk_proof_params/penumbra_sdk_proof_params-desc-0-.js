searchState.loadedDescShard("penumbra_sdk_proof_params", 0, "Proving key for the convert proof.\nVerification key for the convert proof.\nProving key for the delegator vote proof.\nVerification key for the delegator vote proof.\nThis trait characterizes circuits which can generate …\nThe length of our Groth16 proofs in bytes.\nA wrapper around a proving key that can be lazily loaded.\nProving key for the nullifier derivation proof.\nVerification key for the delegator vote proof.\nProving key for the output proof.\nVerification key for the output proof.\nProving key for the spend proof.\nVerification key for the spend proof.\nProving key for the swap claim proof.\nVerification key for the swap claim proof.\nProving key for the swap proof.\nVerification key for the swap proof.\nReturns the argument unchanged.\nGenerate constraint matrices from a circuit type.\nA variant of <code>generate_test_parameters</code> which spits out a …\nGenerate parameters for proving and verifying, for <em>tests</em>.\nCalls <code>U::from(self)</code>.\nAttempt to load the proving key from the given bytes.\nAttempt to load the proving key from the given bytes.\nThis will create a circuit with dummy witness values, for …")