searchState.loadedDescShard("flex_error", 0, "<code>flex-error</code> is a lightweight Rust library that uses macros …\nType alias to <code>&lt;Error as ErrorSource&lt;Trace&gt;&gt;::Detail</code>\nType alias to <code>&lt;Error as ErrorSource&lt;Trace&gt;&gt;::Source</code>\nThe <code>DefaultTracer</code> type alias is used when defining error …\nThe type of the error detail that can be extracted from …\nAn <code>ErrorSource</code> that only provides error details but do not …\nAn <code>ErrorSource</code> that implements <code>Display</code> and can be traced …\nAn <code>ErrorMessageTracer</code> can be used to generically trace any …\nA type implementing <code>ErrorSource&lt;Trace&gt;</code> is a proxy type …\nAn error tracer implements <code>ErrorTracer&lt;E&gt;</code> if it supports …\nAn <code>ErrorSource</code> that can be used to represent to lack of …\nThe type of the error source.\n<code>Error</code> is a trait representing the basic expectations for …\nAn <code>ErrorSource</code> that should implement <code>Error</code> and other …\nAn <code>ErrorSource</code> that contains only the error trace with no …\nAdds new error detail to an existing trace.\nAdd a new error trace from <code>E</code>. In the current underlying …\nIf the <code>std</code> feature is enabled, the error tracer also …\n<code>define_error!</code> is the main macro that implements a mini DSL …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>dyn Error</code>.\nExtracts the error details out from the error source, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nCreates a new error trace, starting from a source error …\nCreate a new error trace from <code>E</code>, also taking ownership of …\nProvides type based access to context intended for error …\nThe lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nType alias to <code>eyre::Report</code>.\nA naive string tracer serializes error messages into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")