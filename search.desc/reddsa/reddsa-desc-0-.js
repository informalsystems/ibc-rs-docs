searchState.loadedDescShard("reddsa", 0, "A minimal RedDSA implementation for use in Zcash.\nA trait corresponding to <code>BindingSig</code> in Zcash protocols.\nAn error related to RedDSA signatures.\nSignature verification failed.\nThe encoding of a signing key was malformed.\nThe encoding of a verification key was malformed.\nAn element of the protocol’s scalar field used for …\nAbstracts over different RedDSA parameter choices, <code>Binding</code> …\nA RedDSA signature.\nA RedDSA signing key.\nA trait corresponding to <code>SpendAuthSig</code> in Zcash protocols.\nA valid RedDSA verification key.\nA refinement type for <code>[u8; 32]</code> indicating that the bytes …\nPerforms batch RedDSA signature verification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new signing key.\nSignature types for the Orchard protocol.\nRandomize this public key with the given <code>randomizer</code>.\nRandomize this verification key with the given <code>randomizer</code>.\nSignature types for the Sapling protocol.\nCreate a signature of type <code>T</code> on <code>msg</code> using this <code>SigningKey</code>.\nVerify a purported <code>signature</code> over <code>msg</code> made by this …\nA batch verification item.\nA batch verification context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a batch item from a <code>Binding</code> signature.\nCreate a batch item from a <code>SpendAuth</code> signature.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new batch verifier.\nQueue an Item for verification.\nPerform batch verification, returning <code>Ok(())</code> if all …\nPerform non-batched verification of this <code>Item</code>.\nA type variable corresponding to Zcash’s …\nA type variable corresponding to Zcash’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type variable corresponding to Zcash’s Sapling …\nA type variable corresponding to Zcash’s Sapling …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")