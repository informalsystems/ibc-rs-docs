searchState.loadedDescShard("penumbra_sdk_sct", 0, "The commitment was created through a <code>CommunityPoolOutput</code> …\nThe commitment was created through a validator’s funding …\nThe state commitment was included in the genesis state.\nThe commitment was created by an inbound ICS20 transfer.\nThe commitment was created by a transaction.\nThe Sct component contains the interface to the chain’s …\nDerive the <code>Nullifier</code> for a positioned note or swap given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the transaction ID, if this source is a hydrated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for stripping transaction hashes out of …\nConvenience method for constructing a “stripped” …\nThe channel the packet was sent on.\nThe transaction ID, if specified.\nThe sequence number of the transfer packet.\nThe sender address on the counterparty chain.\nBlockchain clocks: epoch indices, block heights and …\nImplementation of the SCT component query server.\nThe SCT component implementation.\nTracking commitment sources within a block execution.\nMediate access to the state commitment tree and related …\nProvides write access to the chain’s epoch manager. The …\nProvides read access to epoch indices, block heights, …\nGet the current block height.\nGets a historic block timestamp from nonverifiable storage.\nGets the current block timestamp from the JMT\nGet the current application epoch.\nGet the epoch corresponding to the supplied height.\nReturns true if we are triggering an early epoch end.\nWrites the block height to verifiable storage.\nWrites the current block’s timestamp as an RFC3339 …\nIndex the current epoch by height.\nWrite a value in the end epoch flag in object-storage. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis trait provides read access to configuration data for …\nThis trait provides write access to configuration data for …\nReturns the argument unchanged.\nFetch the epoch duration parameter (measured in blocks).\nGets the SCT parameters from the state.\nCalls <code>U::from(self)</code>.\nA helper trait for placing a <code>CommitmentSource</code> as ambient …\nSets a mock source, for testing.\nProvides write access to the state commitment tree and …\nProvides read access to the state commitment tree and …\nAdd a state commitment into the SCT, emitting an event …\nSeal the current block in the SCT, and produce an epoch …\nReturn the SCT root for the given height, if it exists. If …\nFetch the state commitment tree from nonverifiable …\nRecord a nullifier as spent in the verifiable storage.\nReturn the set of nullifiers that have been spent in the …\nPersist the object-store SCT instance to nonverifiable …\nReturn metadata on the specified nullifier, if it has been …\nWrite an SCT instance to nonverifiable storage and record …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe initial configuration parameters for the sct component.\nThe configuration parameters for the SCT component.\nThe “default” duration of an epoch in number of blocks.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")