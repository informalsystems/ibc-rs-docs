searchState.loadedDescShard("namada_token", 0, "Namada transparent and shielded token types, storage keys …\nAccounts can send or receive funds in a transparent token …\nAmount in micro units. For different granularity another …\nIndicates an event is to do with a finalized block.\nA change in tokens amount\nA representation of a leaf in the conversion tree\nA representation of the conversion state\nA 256 bit number with <code>POS_DECIMAL_PRECISION</code> number of Dec …\nAn amount with its denomination.\nGiven a number represented as <code>M*B^D</code>, then <code>M</code> is the …\nContains the error value\nIndicates if an event is emitted do to an individual Tx or …\nAbstract token events interface\nA MASP ExtendedSpendingKey\nExternal chain address.\nA MASP FullViewingKey\nInternal chain address in Namada.\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nAbstract token keys interface\nThe four possible u64 words in a <code>Uint</code>. Used for converting …\nWrapper type around <code>Epoch</code> for type safe operations …\nA MASP transaction.\nWrapper for masp_primitive’s TxId\nRepresents any MASP value\nMaximum decimal places in a native token <code>Amount</code> and <code>Change</code>.\nDecimal scale of a native token <code>Amount</code> and <code>Change</code>. For …\nContains the success value\nAn extension to <code>Option</code> to allow turning <code>None</code> case to an …\nA MASP PaymentAddress\nStorage read prefix iterator\nAbstract token storage read interface\nResult of a storage API call.\nResult extension to easily wrap custom errors into <code>Error</code>.\nToken parameters for each kind of asset held on chain\nRepresents the current state of the shielded pool from the …\nCommon storage read interface\nCommon storage write interface\nTransparent token storage <code>Keys/Read/Write</code> implementation\nArguments for a multi-party token transfer\nReferences to the transparent sections of a <code>Transfer</code>.\nIndicates an event is to do with an individual transaction.\nA user account.\nAble to borrow mutable conversion state.\nAbstract token storage write interface\nGet the absolute value of self as integer\nGet the non-negative difference between two <code>Dec</code>s.\nReturns the significand of this number\nMaps asset types to their decodings\nMap assets to their latest conversion and position in …\nKey for transparent token balance\nBurn a specified amount of tokens from some address.\nBurn a specified amount of tokens from some address. If …\nCheck if there are enough funds.\nFind the minimal precision that holds this value …\nReturn the integer value of a <code>Dec</code> by rounding up.\nGet the amount as a <code>Change</code>\nDo addition of two <code>Dec</code>s\nChecked addition. Returns <code>None</code> on overflow or if the …\nChecked addition. Returns <code>None</code> on overflow.\nChecked division\nChecked division. Returns <code>None</code> on underflow.\nDivide by <code>u64</code> with zero divisor and overflow check.\nChecked multiplication. Return <code>None</code> if overflow. This …\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked multiplication. Returns <code>None</code> on overflow.\nChecked negation\nChecked addition. Returns <code>None</code> on overflow or if the …\nDo subtraction of two <code>Dec</code>s\nChecked subtraction. Returns <code>None</code> on underflow.\nChecked subtraction. Returns <code>None</code> on overflow.\nCompute the total unspent notes associated with the …\nMASP rewards conversions\nThe actual conversion and generator\nBorrow mutable conversion state\nCredit the given account\nCredit tokens to an account, to be used only by protocol. …\nCredit tokens to an account, to be used only by protocol. …\nDebit the given account\nDecrement the balance of a given token and owner.\nDecrement the total network supply of a given token.\nDelete a value at the given key from storage.\nDelete all key-vals with a matching prefix.\nReturns the denomination of this number\nThe denomination associated with the above toke\nConvert this denominated amount into a plain amount by …\nGet the corresponding u64 word from the input uint256.\nAdd denomination info if it exists in storage.\nThe digit position covered by this asset type\nMaps note positions to the diversifier of their payment …\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nEmit burn token event\nEmit mint token event\nEmit transfer token event\nThe masp epoch of the asset type\nToken transaction events.\nApply token logic for finalizing block (i.e. shielded …\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate amount from the absolute value of <code>Change</code>.\nGiven a u64 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a i128 and <code>MaspDigitPos</code>, construct the corresponding …\nGiven a string and a denomination, parse an amount from …\nConvert to an <code>Amount</code> under the assumption that the input …\nConvert a <code>u128</code> to an <code>Amount</code>.\nConvert a <code>u64</code> to an <code>Amount</code>.\nAttempt to convert an unsigned integer to an <code>Amount</code> with …\nReturns the address from the first key segment if it’s …\nReturn the segment at the index parameter\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGet the height of the first block of the current epoch.\nGet the effective circulating total supply of native …\nGet the effective circulating total supply of native …\nGiven the epoch at the given block height.\nGet the height of the first block of the given epoch.\nGet the native token address\nGiven the information about predecessor block epochs\nGet the transaction index.\nStorage <code>has_key</code> in. It will try to read from the storage.\nAttempt to increase the precision of an amount. Can fail …\nIncrement the balance of a given token and owner.\nIncrement the total network supply of a given token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>std::result::Result</code> into storage_api <code>Result</code>.\nCheck if the given storage key is for total supply of a …\nCheck if the given storage key is a balance key for an …\nReturns the owner address if the given storage key is a …\nReturns <code>true</code> if the key is empty\nReturn if the <code>Dec</code> is negative\nCheck if <code>Amount</code> is greater than zero.\nCheck if the given key is a key to a validity predicate. …\nCheck if value is zero\nCheck if <code>Amount</code> is zero.\nCheck if the inner <code>Amount</code> is zero.\nIterator over the possible denominations\nIterates over all addresses in the key segments\nStorage prefix iterator. It will try to read from the …\nStorage prefix iterator ordered by the storage keys. It …\nIterate over all words in this <code>Amount</code>.\nReturns a new key with segments of <code>Self</code> and the given key\nShielded Pool nominal derivative gain\nShielded Pool nominal proportional gain for the given token\nReturns the last segment of the key, or <code>None</code> if it is …\nThe position of this leaf in the conversion tree\nReturns the length\nTry to load the last saved shielded context from the given …\nTry to load the last saved confirmed shielded context from …\nTarget amount for the given token that is locked in the …\nMASP verification wrappers.\nCreate a MASP transaction\nCreate a new amount with the maximum value\nMaximum reward rate\nCreate a new amount with the maximum signed value\nMaps note positions to their corresponding memos\nMint MASP rewards tokens and increment the stored total …\nMint <code>amount</code> of <code>token</code> as <code>minter</code> to <code>dest</code>.\nObtain a storage key for the minted multitoken balance.\nObtain a storage key for the multitoken minter.\nMultiply by a decimal <code>Dec</code> with the result rounded up. …\nMultiply by a decimal <code>Dec</code> with the result rounded down. …\nReturn a denominated native token amount.\nReturn a denominated native token amount.\nCreate a new amount of native token from whole number of …\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate a new <code>Dec</code> using a mantissa and a scale.\nMake a new denominated amount representing amount*…\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nChange to the next masp epoch.\nMaps a nullifier to the note position to which it applies\nThe last amount of the native token distributed\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T&gt;</code>, mapping [<code>Some(v)</code>…\nThe representation of 1\nThe representation of 1 / 3\nOwner of the account\nObtain a storage key prefix for token parameters.\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nMaps viewing keys to applicable note positions\nUpdates the internal state with the data of the newly …\nChange to the previous masp epoch.\nReturns a new key with segments of <code>Self</code> and the given …\nGet the raw <code>Uint</code> value, which represents namnam\nStorage read Borsh encoded value. It will try to read from …\nRead the balance of a given token and owner.\nRead the balance of a given token and owner.\nStorage read raw bytes. It will try to read from the …\nRead the denomination of a given token, if any. Note that …\nRead the denomination of a given token, if any. Note that …\nRead the masp token map.\nRead the total rewards minted by MASP.\nRead the total network supply of a given token.\nReceive a given amount.\nSave this shielded context into its associated context …\nMultiply this number by 10^denom and return the computed …\nThe segments of the key in the original (left-to-right) …\nHash of tx section that contains the MASP transaction\nConstruct pairs of source address and token with a debited …\nSources of this transfer\nSources of this transfer\nSpend a given amount.\nThe set of note positions that have been spent\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nToken storage keys\nReturns a sub key without the first segment\nSum with overflow check\nSync the current state of the multi-asset shielded pool in …\nThe sync state of the context\nConstruct pairs of target address and token with a …\nTargets of this transfer\nTargets of this transfer\nConvert the Dec type into a I256 with truncation\nGet a string representation of a native token amount.\nA precise string representation. The number of decimal …\nConvert the Dec type into a Uint with truncation\nToken handled by the account\nThe token associated with this asset type\nApply transfer of a <code>token</code> from <code>src</code> to <code>dest</code> in storage.\nTransfer <code>token</code> from <code>src</code> to <code>dest</code>. Returns an <code>Err</code> if <code>src</code> has …\nTransfer assets between accounts\nGet references to the transparent sections.\nThe tree currently containing all the conversions\nThe commitment tree produced by scanning all transactions …\nPerforms division with truncation.\nConverts and <code>Epoch</code> into a <code>MaspEpoch</code> based on the provided …\nThe representation of 2\nThe representation of 2 / 5\nThe representation of 2 / 3\nToken transaction\nA combination of Euclidean division and fractions: x*(a,b) …\nUpdate the balance of a given token and owner.\nUpdate the total network supply of a given token.\nMASP utilities\nLocation where this shielded context is saved\nMASP verification wrappers.\nReturns a key of the validity predicate of the given …\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nValidity predicates\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …\nMaps note positions to their witness (used to make merkle …\nWrap another <code>std::error::Error</code> with a static message.\nAdd a static message to a possible error in <code>Result</code>.\nWrite a value to be encoded with Borsh at the given key to …\nWrite a value as bytes at the given key to storage.\nWrite the denomination of a given token.\nInitialize parameters for the token in storage during the …\nWrite a new masp token map.\nThe representation of 0\nReturns a 0 masp epoch\nZero <code>Amount</code>.\nCompute the MASP rewards by applying the PD-controller to …\nCompute the precision of MASP rewards for the given token. …\nCompute shielded token inflation amount\nUpdate the MASP’s allowed conversions\nExtend an <code>Event</code> with amount data.\nToken burn operation.\nToken burn event.\nExtend an <code>Event</code> with token event descriptor data.\nToken mint operation.\nToken mint event.\nExtend an <code>Event</code> with source post balance data.\nExtend an <code>Event</code> with source account data.\nExtend an <code>Event</code> with source account data.\nExtend an <code>Event</code> with source post balance data.\nExtend an <code>Event</code> with target account data.\nExtend an <code>Event</code> with target account data.\nExtend an <code>Event</code> with target post balance data.\nExtend an <code>Event</code> with token address data.\nNamada token event.\nToken event kind.\nNamada token operation.\nToken transfer operation.\nToken transfer event.\nAdditional description of the token event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe token event kind associated with this operation.\nThe event level.\nThe operation that took place.\nConstruct a simple transfer operation\nToken event types.\nThe amount of minted tokens.\nThe amount of minted tokens.\nThe balance that <code>target_account</code> ended up with.\nThe balance that <code>target_account</code> ended up with.\nThe balance that <code>sources</code> and <code>targets</code> ended up with.\nThe source of the token transfer.\nThe target account whose balance was changed.\nThe target account whose balance was changed.\nThe target of the token transfer.\nThe affected token address.\nThe affected token address.\nBurn token event.\nMint token event.\nTransfer token event.\nBuild error for masp errors\nConvert circuit name\nThe context contains data that has been confirmed by the …\nThe possible sync states of the shielded context\nRepresents the amount used of different conversions\nShielded sync message dispatcher.\nShielded sync cache.\nEnv var to point to a dir with MASP parameters. When not …\nRandomness seed for MASP integration tests to build proofs …\nGeneric error\nInsufficient funds error\na masp amount\na masp change\nData to log the error of a batch of masp transactions\nData to log the error of a single masp transaction\nThe data for a masp fee payment\nA task env whose backing thread-pool uses a no-op panic …\nThe data for a masp transfer relative to a given source\nThe data for a masp transfer relative to a given target\nShielded pool data for a token\nThe data for a single masp transfer\nThe network to use for MASP\nMaps a shielded tx to the index of its first output note.\nOutput circuit name\nMASP verifying keys\nSpend circuit name\nA configuration used to tune the concurrency parameters of …\nShielded transfer\nAbstracts platform specific details away from the logic of …\nRepresents the current state of the shielded pool from the …\nThe context possibly contains that that has not yet been …\nA type tracking the notes used to construct a shielded …\nRepresents the changes that were made to a list of …\nRepresents the changes that were made to a list of …\nA return type for gen_shielded_transfer\nFreeze a Builder into the format necessary for inclusion …\nMaps the note index (in the commitment tree) to a witness\nthe token address\nMaps asset types to their decodings\nThe error batch\nCreate a builder for building <code>ShieldedSyncConfig</code>. On the …\nShielded transfer builder\nLoad a cache of data as part of shielded sync if that …\nSave a cache of data as part of shielded sync if that …\nthe change in the token\nconvert verifying key\nRetrieve the <code>Dispatcher</code> used to run shielded sync.\nMaps note positions to the diversifier of their payment …\nEpoch in which the transaction was created\nGenerate a valid diversifier, i.e. one that has a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation of MASP functionality depending on a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad up the currently saved ShieldedContext\nGet a MASP transaction prover\nMASP transaction\nMaps note positions to their corresponding memos\nMetadata\ncreate a new <code>MaspLocalTaskEnv</code>\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\noutput verifying key\nPartially deauthorize the transparent bundle\nMaps viewing keys to applicable note positions\nMake sure the MASP params are present and load verifying …\nRun the dispatcher\nSave the given ShieldedContext for future loads\nThe shielded wallet implementation\nHow many tokens are missing.\nspend verifying key\nThe set of note positions that have been spent\nThe sync state of the context\nMake a ViewingKey that can view notes encrypted by given …\nToken to be spent.\nThe commitment tree produced by scanning all transactions …\nHelper functions and types\nLocation where this shielded context is saved\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nMaps note positions to their witness (used to make merkle …\nBuilder error returned from the masp library\nAn implementation of ShieldedUtils for standard filesystems\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to load the last saved shielded context from the given …\nInitialize a shielded transaction context that identifies …\nSave this confirmed shielded context into its associated …\nThe methods of the shielded wallet that depend on the …\nA trait that allows downstream types specify how a …\nRepresents the current state of the shielded pool from the …\nAdd the necessary transaction inputs to the builder.\nAdd the necessary transaction outputs to the builder\nMaps asset types to their decodings\nCollect enough unspent notes in this context to exceed the …\nComputes added_amt - required_amt taking care of …\nConvert the given amount into the latest asset types …\nCompute the total unspent notes associated with the …\nConvert Namada amount and token type to MASP equivalents\nQuery the ledger for the decoding of the given asset type …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nConvert an amount whose units are AssetTypes to one whose …\nMaps note positions to the diversifier of their payment …\nWe estimate the total rewards accumulated by the assets …\nMake shielded components to embed within a Transfer …\nGet the asset type with the given epoch, token, and …\nEither get the denomination from the cache or query it\nDetermine if using the current note would actually bring …\nMaps note positions to their corresponding memos\nMaps a nullifier to the note position to which it applies\nMaps a shielded tx to the index of its first output note.\nMaps note positions to their corresponding notes\nMaps viewing keys to applicable note positions\nUse the addresses already stored in the wallet to …\nQuery the ledger for the conversion that is allowed for …\nGet the last block height\nQuery for converting assets across epochs\nQuery the denomination of a token type\nQuery the MASP epoch\nGet the upper limit on the time to make a new block\nGet the address of the native token\nGroup all the information for every source/token and …\nThe set of note positions that have been spent\nThe sync state of the context\nThe commitment tree produced by scanning all transactions …\nLocation where this shielded context is saved\nMaps viewing keys to the block height to which they are …\nMaps note positions to their corresponding viewing keys\nMaps note positions to their witness (used to make merkle …\nThe masp client implementation is capable of not only …\nType alias for a successful note decryption.\nError type returned by the methods of this trait\nA cache of fetched indexed transactions.\nAlways retry\nType alias for convenience and profit\nType alias for the entries of <code>IndexedNoteData</code> iterators\nBorrowed version of an <code>IndexedNoteEntry</code>\nThis abstracts away the implementation details of how …\nEnumerates the capabilities of a <code>MaspClient</code> implementation.\nThe masp client implementation is only capable of fetching …\nWhen retrying to fetch all notes in a loop, this dictates …\nLimit number of retries to a fixed number\nCache of decrypted notes.\nGiven a block height range we wish to request and a cache …\nReturn the capabilities of this client.\nCheck if this cache has already been populated for a given …\nAppend elements to the cache from an iterator.\nFetch the commitment tree of height <code>height</code>.\nFetch the tx notes map of height <code>height</code>.\nFetch shielded transfers from blocks heights in the range …\nFetch the witness map of height <code>height</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nCache <code>notes</code> decrypted with <code>vk</code>, indexed at <code>itx</code>.\nAdd a single entry to the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if empty\nCheck if empty\nIterates over the fetched transactions in the order they …\nReturn the last block height we can retrieve data from.\nCheck the length of the fetched cache\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if the masp client is able to fetch a pre-built …\nCheck if retries are exhausted.\nCheck if the lack of one or more capabilities in the masp …\nReturns the number of successful trial decryptions in …\nTake cached notes decrypted with <code>vk</code>, indexed at <code>itx</code>.\nIterates over the fetched transactions in the order they …\nKey segment for a balance key\nKey segment for a denomination key\nKey segment for minted balance\nKey segment for multitoken minter\nKey segment for token parameters\nObtain a storage key for user’s balance.\nObtain a storage key prefix for all users’ balances.\nObtain a storage key denomination of a token.\nCheck if the given storage key is for total supply of a …\nCheck if the given storage key is for a minter of a …\nCheck if the given storage key is a balance key for an …\nCheck if the given storage key is a parameter key for an …\nCheck if the given storage key is a balance key for the …\nCheck if the given storage key is a denomination key for …\nCheck if the given key is a masp commitment anchor\nCheck if the given storage key is a masp key\nCheck if the given storage key is a masp nullifier key\nCheck if the given storage key is a masp token map key\nCheck if the given storage key is allowed to be touched by …\nCheck if a key is part of the multitoken vp sub storage\nGets the key for the given token address, error with the …\nGet the key for the masp assets’ hash\nGet a key for a masp commitment tree anchor\nGet the key for the masp commitment tree\nGet the key for the masp convert tree anchor\nObtain the nominal derivative key for the given token\nObtain the nominal proportional key for the given token\nObtain the storage key for the last inflation of a token\nObtain the storage key for the last locked amount of a …\nObtain the locked target amount key for the given token\nThe max reward rate key for the given token\nGet a key for a masp nullifier\nGet the key for the masp token map\nThe max reward rate key for the given token\nObtain a storage key for the minted multitoken balance.\nObtain a storage key for the multitoken minter.\nObtain a storage key prefix for token parameters.\nApply a shielded transfer\nTransfer tokens from <code>sources</code> to <code>targets</code> and submit a …\nTransparent and shielded token transfers that can be used …\nTransfer transparent token, insert the verifier expected …\nHandle a MASP transaction.\nCheck if a transaction is a MASP transfer transaction.\nAppends the note commitments of the provided transaction …\nConvert circuit name\nEnv var to point to a dir with MASP parameters. When not …\nOutput circuit name\nMASP verifying keys\nRepresents an authorization where the Sapling bundle is …\nSpend circuit name\nconvert verifying key\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the path to MASP parameters from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noutput verifying key\nPartially deauthorize the transparent bundle\nMake sure the MASP params are present and load verifying …\nspend verifying key\nVerify a shielded transaction.\nContains the error value\nMASP VP\nMultitoken VP\nContains the success value\nResult of a storage API call.\nGeneric types for DI\nGeneric types for DI\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the minter if the minter is valid and the minter VP …\nReturn if the parameter change was done via a governance …\nReturn if the parameter change was done via a governance …\nRun the validity predicate\nRun the validity predicate")