searchState.loadedDescShard("ethers_middleware", 0, "ethers-middleware\nError type returned by most operations\nThe <code>Inner</code> type is the next lower middleware layer’s …\nThe next-lower middleware in the middleware stack\nA middleware allows customizing requests send and received …\n<code>MiddlewareError</code> is a companion trait to <code>crate::Middleware</code>. …\nThe JSON-RPC client type at the bottom of the stack\nRequests adding the given peer, returning a boolean …\nRequests adding the given peer as a trusted peer, which …\nAccess an underlying JSON-RPC error (if any)\nAttempt to convert this error to the next lower middleware…\nAttempts to access an underlying <code>ProviderError</code>, usually by …\nAccess an underlying <code>serde_json</code> error (if any)\nMiddlewareBuilder provides a way to compose many <code>Middleware</code>…\nSends the read-only (constant) transaction to a single …\nReturns the current client version using the …\nConvert a provider error into the associated error type by …\nQuery the node for an EIP-2930 Access List.\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nExecutes the given call and returns a number of possible …\nAfter replaying any previous transactions in the same …\nReturn the default sender (if any). This will typically be …\nGets a heuristic recommendation of max fee per gas and max …\nSends a transaction to a single Ethereum node and return …\nQuery the node for a <code>FeeHistory</code> object. This objct contains\nFill necessary details of a transaction for dispatch\nConvert the next lower middleware layer’s error to this …\nConvert a <code>ProviderError</code> to this type, by successively …\nThe Gas Escalator middleware is used to re-broadcast …\nThe gas oracle middleware is used to get the gas price …\nGets the accounts on the node\nReturns the account’s balance\nGets the block at <code>block_hash_or_number</code> (transaction hashes …\nGet the block number\nReturns all receipts for a block.\nGets the block at <code>block_hash_or_number</code> (full transactions …\nReturns the currently configured chain id, a value used in …\nReturns the deployed code at a given address\nGets the current gas price as estimated by the node\nGet the block header by number or hash\nReturns an array (possibly empty) of logs that match the …\nReturns a stream of logs are loaded in pages of given page …\nReturns the network version.\nReturns the EIP-1186 proof response …\nGet the storage of an address for a particular slot …\nGets the transaction with <code>transaction_hash</code>\nGets the transaction with block and index\nReturns the nonce of the address\nGets the transaction receipt with <code>transaction_hash</code>\nGets the block uncle at <code>block_hash_or_number</code> and <code>idx</code>\nGets the block uncle count at <code>block_hash_or_number</code>\nSends the given key to the node to be encrypted with the …\nGet a reference to the next-lower middleware in the …\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error stems from a lower …\nReturns <code>true</code> if the underlying error is a serde_json …\nThis returns true if either the middleware stack contains …\nReturns the ENS name the <code>address</code> resolves to (or None if …\nReturns an indication if this node is currently mining.\nReturns general information about the node as well as …\nThe Nonce Manager is used to locally calculate nonces …\nReturns all receipts for that block. Must be done on a …\nReturns the list of peers currently connected to the node.\nThe Policy is used to ensure transactions comply with the …\nThe HTTP or Websocket provider.\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nReturns the avatar HTTP link of the avatar that the …\nFetch a field for the <code>ens_name</code> (no None if not configured).\nReturns the address that the <code>ens_name</code> resolves to (or None …\nReturns the URL (not necesserily HTTP) of the image behind …\nSend a transaction with a simple escalation policy.\nSend the raw RLP encoded transaction to the entire …\nSends the transaction to the entire Ethereum network and …\nSigns data using a specific account. This account needs to …\nSign a transaction via RPC call\nThe SignerMiddleware is used to locally sign transactions …\nStarts the miner.\nStop terminates the miner, both at the consensus engine …\nSubscribe to a stream of incoming blocks.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of event logs matchin the provided …\nSubscribe to a stream of pending transaction hashes.\nReturn current client syncing status. If IsFalse sync is …\nThe TimeLag middleware provides safety against reorgs by …\nReturns traces created at given block\nExecutes the given call and returns a number of possible …\nExecutes given calls and returns a number of possible …\nReturn traces matching the given filter\nReturns trace at the given position\nTraces a call to <code>eth_sendRawTransaction</code> without making the …\nReplays all transactions in a block returning the …\nReplays a transaction, returning the traces\nReturns all traces of a given transaction\nThe TransformerMiddleware is used to intercept transactions\nReturns the details of all transactions currently pending …\nReturns a summary of all the transactions currently …\nReturns the number of transactions currently pending for …\nPrompts the node to decrypt the given account from its …\nStreams event logs matching the filter.\nStreams new block hashes\nStreams pending transactions.\nA builder trait to compose different <code>Middleware</code> layers and …\nWraps <code>self</code> inside a <code>GasOracleMiddleware</code>.\nWraps <code>self</code> inside a <code>NonceManagerMiddleware</code>.\nWraps <code>self</code> inside a <code>SignerMiddleware</code>.\nWraps <code>self</code> inside a new <code>Middleware</code>.\nOn a duration basis (in milliseconds)\nThe frequency at which transactions will be bumped\nTrait for fetching updated gas prices after a transaction …\nError thrown when the GasEscalator interacts with the …\nA Gas escalator allows bumping transactions’ gas price …\nGeometrically increasing gas price.\nLinearly increasing gas price.\nThrown when an internal middleware errors\nOn a per block basis using the eth_newBlock filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven the initial gas price and the time elapsed since the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nInitializes the middleware with the provided gas escalator …\nContains the error value\nAn internal error in the Etherscan client request made …\nGeneric <code>GasOracle</code> gas price categories.\nAn internal error thrown when the required gas category is …\nAn Ethereum gas price oracle.\nError thrown by a <code>GasOracle</code>.\nAn internal error in the HTTP request made from the …\nAn error with oracle response type\nContains the success value\nError thrown when the provider failed.\nAn error decoding JSON response from gas oracle\nMakes an asynchronous HTTP query to the underlying …\nMakes an asynchronous HTTP query to the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA client over HTTP for the BlockNative gas tracker API …\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BlockNative gas oracle.\nPerform a request to the gas price API and deserialize the …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA client over HTTP for the EthGasStation gas tracker API …\nEth Gas Station’s response for the current recommended …\nRecommended average (expected to be mined in &lt; 5 minutes).\nWaiting time (in minutes) for the <code>average</code> gas price.\nThe latest block number.\nAverage time (in seconds) to mine a single block.\nSets the gas price category to be used when fetching the …\nRecommended fast (expected to be mined in &lt; 2 minutes).\nWaiting time (in minutes) for the <code>fast</code> gas price.\nRecommended fastest (expected to be mined in &lt; 30 seconds).\nWaiting time (in minutes) for the <code>fastest</code> gas price.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new EthGasStation gas oracle.\nPerform a request to the gas price API and deserialize the …\nRecommended safe (expected to be mined in &lt; 30 minutes).\nWaiting time (in minutes) for the <code>safe_low</code> gas price.\nSmallest value of <code>gasUsed / gaslimit</code> from the last 10 …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nA client over HTTP for the Etherchain gas tracker API that …\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Etherchain gas price oracle.\nPerform a request to the gas price API and deserialize the …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nA client over HTTP for the Etherscan gas tracker API that …\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Etherscan gas price oracle.\nPerform a request to the gas price API and deserialize the …\nA client over HTTP for the beaconcha.in GasNow gas tracker …\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new beaconcha.in GasNow gas price oracle.\nPerform a request to the gas price API and deserialize the …\nSame as <code>Self::new</code> but with a custom <code>Client</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMiddleware used for fetching gas prices over an API …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Polygon gas station API Queries over HTTP and …\nThe response from the Polygon gas station API.\nSets the gas price category to be used when fetching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform a request to the gas price API and deserialize the …\nGas oracle from a <code>Middleware</code> implementation such as an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThrown when the internal middleware errors\nThrown when an error happens at the Nonce Manager\nMiddleware used for calculating nonces locally, useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates the nonce manager with a 0 nonce. The <code>address</code> …\nReturns the next nonce to be used\nSigns and broadcasts the transaction. The optional …\nA policy that does not restrict anything.\nThrown when an internal middleware errors\nBasic trait to ensure that transactions about to be sent …\nThrown when the internal policy errors\nMiddleware used to enforce certain policies for …\nError thrown when the client interacts with the policy …\nA policy that rejects all transactions.\nEvaluates the transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new client from the provider and policy.\nThis ensures the tx complies with the registered policy. …\nThrown if the signer’s chain_id is different than the …\nThrown if the <code>gas</code> field is missing\nThrown if the <code>gas_price</code> field is missing\nThrown when an internal middleware errors\nThrown if the <code>nonce</code> field is missing\nThrown when the internal call to the signer fails\nMiddleware used for locally signing transactions, …\nError thrown when the client interacts with the blockchain\nThrown if a signature is requested from a different address\nReturns the client’s address\nReturns the client’s address\nHelper for filling a transaction’s nonce using the wallet\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>SignerMiddleware</code> is instantiated with a signer.\nCreates a new client from the provider and signer. Sets …\nCreates a new client from the provider and signer. Sets …\nSigns and broadcasts the transaction. The optional …\nSigns a message with the internal signer, or if none is …\nReturns a reference to the client’s signer\nBuilds a SignerMiddleware with the given Signer.\nThrown when an internal middleware errors\nTimeLag Provider\nTimeLage Provider Errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates TimeLag provider\n<code>Transformer</code> is a trait to be implemented by a proxy …\nErrors thrown from the types that implement the <code>Transformer</code>…\nMiddleware used for intercepting transaction requests and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new TransformerMiddleware that intercepts …\nTransforms a <code>transaction request</code> into one that can be …\nRepresents the DsProxy type that implements the Transformer…\nThe address of the DsProxy instance.\nDeploys a new DsProxy contract to the Ethereum network.\nExecute a tx through the DsProxy instance. The target can …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of DsProxy by providing the address …\nA lazily computed hash map with the Ethereum network IDs …\nThis module was auto-generated with ethers-rs Abigen. More …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>build</code> …\nContainer type for all return fields from the <code>build</code> …\nContainer type for all input parameters for the <code>cache</code> …\nContainer type for all return fields from the <code>cache</code> …\nThe parsed JSON ABI of the contract.\nThe bytecode of the contract.\nContainer type for all of the contract’s call\nContainer type for all input parameters for the <code>isProxy</code> …\nContainer type for all return fields from the <code>isProxy</code> …\nCalls the contract’s <code>build</code> (0xf3701da2) function\nCalls the contract’s <code>build</code> (0x8e1a55fc) function\nCalls the contract’s <code>cache</code> (0x60c7d295) function\nGets the contract’s <code>Created</code> event\nConstructs the general purpose <code>Deployer</code> instance based on …\nReturns an <code>Event</code> builder for all the events of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the contract’s <code>isProxy</code> (0x29710388) function\nCreates a new contract instance with the specified <code>ethers</code> …")