searchState.loadedDescShard("penumbra_sdk_view", 0, "The view RPC library for the Penumbra Zone.\nA planner for a <code>TransactionPlan</code> that can fill in the …\nCorresponds to the SpendableNoteRecord proto\nThe view protocol is used by a view client, who wants to …\nA service that synchronizes private chain state and …\nAdd an arbitrary action to the planner.\nGet a copy of the app parameters.\nQueries for all known assets.\nQuery the auction state\nQueries for a specific note by commitment, waiting until …\nWaits for a specific nullifier to be detected, returning …\nQueries for account balance by address\nQuery for account balance by address\nSet the change address for the transaction.\nDeposit a value into the Community Pool.\nAdd a delegation to this transaction.\nVote with all possible vote weight on a given proposal.\nVote with a specific positioned note in the transaction, …\nEnds a Dutch auction.\nSchedule a Dutch auction.\nWithdraws the reserves of the Dutch auction.\nSet the expiry height for the transaction.\nFilters for nullifiers whose notes we control\nGet a copy of the FMD parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a copy of the gas prices.\nObtain a Tonic Channel to a remote <code>pd</code> endpoint.\nPerform an IBC action\nPerform an ICS-20 withdrawal\nQueries for the index of a provided address, returning <code>None</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last block height we’ve scanned to, if any.\nReturn the latest block height known by the fullnode or …\nLoads asset metadata from a JSON file and use to update …\nConvenience method that calls <code>Storage::load_or_initialize</code> …\nIf the database at <code>storage_path</code> exists, <code>Self::load</code> it, …\nSet a human-readable memo text for the transaction.\nCustomize the return address for the memo.\nCreate a new planner.\nConstructs a new <code>ViewService</code>, spawning a sync task …\nQueries for a specific note by commitment, returning …\nQuery for a note by its note commitment, optionally …\nQueries for notes.\nQueries for notes for voting.\nQueries for a specific nullifier’s status, returning …\nQuery for a nullifier’s status, optionally waiting until …\nAdd an output note from this transaction.\nQueries for liquidity positions owned by the full viewing …\nAdd spends and change outputs as required to balance the …\nClose a liquidity position in the order book.\nOpen a liquidity position in the order book.\nWithdraw a liquidity position in the order book.\nPrioritize notes to spend to release value of a specific …\nClaim a governance proposal deposit in this transaction.\nSubmit a new governance proposal in this transaction.\nWithdraw a governance proposal in this transaction.\nRegisters all metrics used by this crate.\nReturn advice about note contents for use in scanning.\nSet the fee tier.\nSet the current gas prices for fee prediction.\nSpend a specific positioned note in the transaction.\nGet the current status of chain sync.\nStream status updates on chain sync until it completes.\nPerform a swap based on input notes in the transaction.\nQueries for a specific swap by commitment, returning …\nQuery for a swap by its swap commitment, optionally …\nPerform a swap claim based on an input swap with a …\nReturns a tuple of (block height, transaction hash) for …\nQueries for transactions in a range of block heights\nGenerates a full perspective for a selected transaction …\nReturns a tuple of (block height, transaction hash, …\nGet all transactions with a matching memo text. The <code>pattern</code>…\nQueries for unclaimed Swaps.\nQuery for all unclaimed swaps.\nAdd an undelegation to this transaction.\nAdd an undelegate claim to this transaction.\nReturn unspent notes, grouped by account ID (combining …\nReturn unspent notes, grouped by account ID (combining …\nReturn unspent notes, grouped by address index and then by …\nReturn unspent notes, grouped by address index and then by …\nReturn unspent notes, grouped by denom and then by address …\nReturn unspent notes, grouped by denom and then by address …\nUpload a validator definition in this transaction.\nCast a validator vote in this transaction.\nReturns authentication paths for the given note …\nReturns a transaction built from the provided …")