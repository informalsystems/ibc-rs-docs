searchState.loadedDescShard("dur", 0, "dur\nA human readable duration backed by a u128.\nThe parse error.\nImplements Display without loss of precision.\nCatch-all for values that aren’t proper durations.\nThe value contains an unrecognized duration unit.\nThe value being parsed contains negative durations.\nThe value being parsed is missing a unit.\nThe value being parsed is too big in nanoseconds in total …\nReturns the total number of whole microseconds contained …\nReturns this duration in microseconds as a Decimal.\nReturns the total number of whole milliseconds contained …\nReturns this duration in milliseconds as a Decimal.\nReturns the total number of nanoseconds contained by this …\nReturns the total number of whole seconds contained by …\nReturns this duration in seconds as a Decimal.\nReturns a struct with a lossless Display implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nConvert from StdDuration. Equivalent to Duration::from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this Duration is 0.\nParse the human-readable duration string into a Duration.\nParse the human-readable duration string into an …\nConstructs a new Duration. Equivalent to Duration::from\nConvert to StdDuration. equivalent to calling Into::into.\nTries to convert <code>self</code> into an StdDuration.")