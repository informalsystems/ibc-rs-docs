searchState.loadedDescShard("nam_sparse_merkle_tree", 0, "Constructs a new <code>SparseMerkleTree&lt;H, V, S&gt;</code>.\nExpected path size: log2(256) * 2, used for hint vector …\nKey limit size\nHeight of sparse merkle tree\nAn occupied entry.\nA vacant entry.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresent 256 bits\nA wrapper type for using a hash an internal key\nCopy bits and return a new H256\nTreat H256 as a path in a tree fork height is the number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTreat H256 as a path in a tree return parent_path of self\nThe actual key value used in the tree\nCopy bits and return a new InternalKey\nTreat InternalKey as a path in a tree fork height is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTreat InternalKey as a path in a tree return parent_path …\nhash_leaf = hash(prefix | key | value) zero value …\nMerge two hashes this function is optimized for ZERO_HASH …\nAn structure optimized for verify merkle proof\nconvert merkle proof into CompiledMerkleProof\nCompute root from proof leaves: a vector of (key, value)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of leaves required by this merkle proof\nreturn the inner leaves_path vector\nCreate MerkleProof leaves_path: contains height of …\nreturn proof merkle path\nDestruct the structure, useful for serialization\nVerify merkle proof see compute_root_from_proof\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe error type for failed mappings\nTrait for customize hash function\nThis trait is map keys to / from the users key space into …\nTrait for customize backend storage\nTrait for define value structures\nThis should map from the internal key space back into the …\nThis should map from the internal key space back into the …\nThis should map from the user’s key space into the …\nA branch in the SMT\nA leaf in the SMT\nSparse merkle tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet value of a leaf return zero value if leaf not exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck empty of the tree\nGenerate ICS 23 commitment proof for the existing key\nGenerate merkle proof\nBuild a merkle tree from root and store\nGenerate ICS 23 commitment proof for the non-existing key\nMerkle root\nGet backend store\nGet mutable backend store\nDestroy current tree and retake store\nUpdate a leaf, return new merkle root set to zero value to …\nRecompute the root of the merkle tree from the store. …")