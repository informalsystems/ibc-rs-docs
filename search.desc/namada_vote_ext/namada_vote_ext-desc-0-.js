searchState.loadedDescShard("namada_vote_ext", 0, "This module contains types necessary for processing vote …\nCollection of signatures over the Ethereum bridge pool …\nSignature over the Ethereum bridge pool merkle root and …\nEthereum events seen by some validator\nEthereum events contained in vote extensions that are …\nData associated with Ethereum protocol transactions.\nAll the variants of <code>EthereumTxData</code>, stored in a trait.\nValidator set update signed by some validator\nValidator set updates contained in vote extensions\nThis type represents the data we pass to the extension of …\nA signature of the Ethereum bridge pool root and nonce.\nVote extension types for adding a signature of the bridge …\nDeserialize Ethereum protocol transaction data.\nContains types necessary for processing Ethereum events in …\nVote extension data related with Ethereum events.\nAll the variants of <code>EthereumTxData</code>, stored in a module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize Ethereum protocol transaction data.\nSign transaction Ethereum data and wrap it in a <code>Tx</code>.\nContains types necessary for processing validator set …\nVote extension data related with validator set updates.\nA vote extension containing a validator’s signature of …\nA collection of validator signatures over the Ethereum …\nA signed <code>BridgePoolRootVext</code>.\nAlias for <code>BridgePoolRootVext</code>.\nThe block height at which the vote extensions was sent.\nThe block height at which the vote extensions was sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual signature being submitted. This is a signature …\nThe actual signature being submitted. This is a signature …\nCreates a new signed <code>Vext</code>.\nCreates a new signed <code>Vext</code>.\nThe address of the validator who submitted the vote …\nThe address of the validator who submitted the vote …\nRepresents a set of <code>EthereumEvent</code> instances seen by some …\nCompresses a set of signed <code>Vext</code> instances, to save space …\nAggregates an Ethereum event with the corresponding …\nRepresents a <code>Vext</code> signed by some validator, with a Namada …\nType alias for an <code>EthereumEventsVext</code>.\nType alias for an <code>EthereumEventsVextDigest</code>.\nThe block height for which this <code>Vext</code> was made.\nThe block height for which this <code>Vext</code> was made.\nDecompresses a set of signed <code>Vext</code> instances.\nDecompresses a set of signed <code>Vext</code> instances.\nCreates a <code>Vext</code> without any Ethereum events.\nCreates a <code>Vext</code> without any Ethereum events.\nThe new ethereum events seen. These should be …\nThe new ethereum events seen. These should be …\nThe Ethereum event that was signed.\nThe events that were reported\nThe events that were reported\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSign a <code>Vext</code> with a validator’s <code>signing_key</code>, and return …\nSign a <code>Vext</code> with a validator’s <code>signing_key</code>, and return …\nThe signatures, signing address, and signing block height …\nThe signatures, signing address, and signing block height …\nList of addresses of validators who signed this event and …\nBuild a singleton <code>VextDigest</code>, from the provided <code>Vext</code>.\nBuild a singleton <code>VextDigest</code>, from the provided <code>Vext</code>.\nThe address of the validator who submitted the vote …\nThe address of the validator who submitted the vote …\nThe events that were reported\nThe signatures, signing address, and signing block height …\nA mapping from a consensus validator address to a <code>Signature</code>…\nThe addresses of the validators in the new <code>Epoch</code>, and …\nContainer type for both kinds of Ethereum bridge addresses:\nTag type that indicates we should use <code>AbiEncode</code> to sign …\nRepresents a <code>Vext</code> signed by some validator, with an …\nStruct for serializing validator set arguments with ABI …\nRepresents a validator set update, for some new <code>Epoch</code>.\nContains the digest of all signatures from a quorum of …\nType alias for a <code>ValidatorSetUpdateVext</code>.\nType alias for a <code>ValidatorSetUpdateVextDigest</code>.\nProvides a mapping between <code>EthAddress</code> and <code>token::Amount</code> …\nThis trait contains additional methods for a …\nEthereum address derived from a cold key.\nDecompresses a set of signed <code>Vext</code> instances.\nDecompresses a set of signed <code>Vext</code> instances.\nThe epoch when the validators were part of the consensus …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of Ethereum validator hot and cold …\nReturns the bridge and governance keccak hashes of this …\nReturns a <code>Vec</code> of pairs of validator addresses and voting …\nEthereum address derived from a hot key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new signed <code>Vext</code>.\nCreates a new signed <code>Vext</code>.\nA mapping from a consensus validator address to a <code>Signature</code>…\nA mapping from a consensus validator address to a <code>Signature</code>…\nThe value of Namada’s <code>Epoch</code> at the creation of this <code>Vext</code>.\nThe value of Namada’s <code>Epoch</code> at the creation of this <code>Vext</code>.\nBuild a singleton <code>VextDigest</code>, from the provided <code>Vext</code>.\nBuild a singleton <code>VextDigest</code>, from the provided <code>Vext</code>.\nThe address of the validator who submitted the vote …\nThe address of the validator who submitted the vote …\nEthereum addresses of the validators.\nReturns the bridge and governance keccak hashes calculated …\nThe addresses of the validators in the new <code>Epoch</code>, and …\nThe addresses of the validators in the new <code>Epoch</code>, and …\nThe addresses of the validators in the new <code>Epoch</code>, and …\nThe addresses of the validators in the new <code>Epoch</code>, and …\nThe voting powers of the validators.")