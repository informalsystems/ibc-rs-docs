searchState.loadedDescShard("decaf377", 0, "<code>decaf377</code> instantiates Decaf over the BLS12-377 scalar field…\nReturn the conventional generator for <code>decaf377</code>.\nMaps a field element to a decaf377 <code>Element</code> suitable for …\nAuto-generated, formally-verified field arithmetic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps two field elements to a uniformly distributed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method to make identity checks more readable.\nGiven an iterator of public scalars and an iterator of …\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nConvert bytes into an Fp element, returning None if these …\nSample a random field element uniformly.\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nConvert bytes into an Fq element, returning None if these …\nRaise this element to a given power.\nSample a random field element uniformly.\nComputes the square root of a ratio of field elements, …\nConverts <code>Self::BigInteger</code> into <code>Self</code>\nConvert bytes into an Fr element, returning None if these …\nSample a random field element uniformly.\nAutogenerated: fiat_crypto.js word-by-word-montgomery –…\nFrI1 represents values of 1 bits, stored in one byte.\nFrI2 represents values of 2 bits, stored in one byte.\nThe type FrMontgomeryDomainFieldElement is a field element …\nThe type FrNonMontgomeryDomainFieldElement is a field …\nFrU1 represents values of 1 bits, stored in one byte.\nFrU2 represents values of 2 bits, stored in one byte.\nThe function fr_add adds two field elements in the …\nThe function fr_addcarryx_u32 is an addition with carry.\nThe function fr_cmovznz_u32 is a single-word conditional …\nThe function fr_divstep computes a divstep.\nThe function fr_divstep_precomp returns the precomputed …\nThe function fr_from_bytes deserializes a field element …\nThe function fr_from_montgomery translates a field element …\nThe function fr_msat returns the saturated representation …\nThe function fr_mul multiplies two field elements in the …\nThe function fr_mulx_u32 is a multiplication, returning …\nThe function fr_nonzero outputs a single non-zero word if …\nThe function fr_opp negates a field element in the …\nThe function fr_selectznz is a multi-limb conditional …\nThe function fr_set_one returns the field element one in …\nThe function fr_square squares a field element in the …\nThe function fr_sub subtracts two field elements in the …\nThe function fr_subborrowx_u32 is a subtraction with …\nThe function fr_to_bytes serializes a field element NOT in …\nThe function fr_to_montgomery translates a field element …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nConvert bytes into an Fr element, returning None if these …\nCalls <code>U::from(self)</code>.\nSample a random field element uniformly.\nRepresents a constant in the constraint system, which …\nRepresents the R1CS equivalent of a <code>decaf377::Element</code>\nRepresents an allocated variable constant in the …\nInverse square root in R1CS\nRepresents the R1CS equivalent of a <code>decaf377::Element</code>\nR1CS equivalent of <code>Element::vartime_compress_to_field</code>\nR1CS equivalent of <code>Encoding::vartime_decompress</code>\nMaps a field element to a decaf377 <code>ElementVar</code> suitable for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")