searchState.loadedDescShard("penumbra_sdk_ibc", 0, "The IBC commitment prefix used for the IBC substore, as a …\nThe ICS23 proof spec for penumbra’s IBC state; this can …\nThe substore prefix used for IBC data.\nIBC token represents a token that was created through IBC.\nTODO: upstream into ibc-types\nCreate a tracing span to track execution related to this …\nGet the default display denomination for this IBC token.\nGet the base denomination for this IBC token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget the asset ID for this IBC token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nget the IBC transfer path of the IBC token.\nReturns the argument unchanged.\nGets the IBC parameters from the JMT.\nGets the IBC parameters from the JMT.\nCalls <code>U::from(self)</code>.\nWrites the provided IBC parameters to the JMT.\nWrites the provided IBC parameters to the JMT.\nRegisters all metrics used by this crate.\nAppHandlerCheck defines the interface for an IBC …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis trait, an extension of the Channel, Connection, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsend_packet_check verifies that a packet can be sent using …\nSend a packet on a channel. This assumes that …\nReturns the argument unchanged.\nThe initial configuration parameters for the IBC component.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nWhether IBC (forming connections, processing IBC packets) …\nWhether inbound ICS-20 transfers are enabled\nCalls <code>U::from(self)</code>.\nWhether outbound ICS-20 transfers are enabled")