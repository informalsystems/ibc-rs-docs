searchState.loadedDescShard("ibc_test_framework", 0, "IBC Relayer Integration Test Framework\nHelper functions for setting up test cases in an …\nConstructs for spawning and managing full nodes, e.g. the …\nDocumentation-only module containing long-form docs and …\nError type used for the tests.\nFramework code for making it easier to write test cases.\nCode that may belong to the <code>ibc</code> module, but are currently …\nRe-export of common constructs that are used by test cases.\nCode that may belong to the <code>ibc_relayer</code> module, but are …\nThis module contains definitions of core data structures …\nUtility and helper functions used in the tests.\nHelper functions for bootstrapping constructs that involve …\nHelper functions for bootstrapping a consumer full node.\nFunctions for initializing each test at the beginning of a …\nExperimental work to bootstrap N-ary chains for testing.\nHelper functions for bootstrapping a single full node.\nHelper functions for bootstrapping two relayer chain …\nHelper functions for bootstrapping a channel between two …\nHelper functions for bootstrapping a connection between …\nGenerate <code>ChainConfig</code> from a running <code>FullNode</code> and add it to …\nAdd a wallet key to a <code>ChainHandle</code>’s key store.\nAdd multiple wallets provided in <code>TestWallets</code> into the …\nBootstraps two relayer chain handles with connected …\nBootstraps two relayer chain handles with connected …\nOverrides options for the foreign client connecting chain …\nOverrides options for the foreign client connecting chain …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SharedRegistry</code> that uses …\nSave a relayer’s <code>Config</code> to the filesystem to make it …\nSpawn a new chain handle using the given <code>SharedRegistry</code> and\nCreate a new <code>ConnectedChannel</code> between two chains using …\nCreate a new <code>ConnectedChannel</code> based on the provided …\nCreate a new <code>ConnectedChannel</code> using existing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a random number of dummy channel IDs so that the …\nCreate a new <code>ConnectedConnection</code> using the foreign clients …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a random number of dummy connection IDs so that the …\nInitialize the test with a global logger and error …\nInstall the <code>tracing_subscriber</code> logger handlers so that …\nFunctions for bootstrapping N-ary number of chains.\nFunctions for bootstrapping N-ary number of channels.\nFunctions for bootstrapping N-ary number of connections.\nBootstrap a dynamic number of chains, according to the …\nBootstrap a fixed number of chains specified by <code>SIZE</code>.\nBootstrap a fixed number of chains that are actually …\nBootstrap a fixed number of channels as specified by <code>SIZE</code>, …\nBootstrap a dynamic number of channels together with the …\nBootstrap a fixed number of connections with the same <code>SIZE</code> …\nBootstrap a dynamic number of channels based on the number …\nBootstrap a dynamic number of connections based on the …\nBootstrap a single full node with the provided <code>ChainBuilder</code>…\nBuilder construct that spawn new chains with some common …\nHelper functions for modifying the Gaia chain config in …\nImplementation of <code>ChainDriver</code>.\nMethods for tagged version of the chain driver.\nUsed for holding common configuration needed to create new …\nThe filesystem path to store the data files used by the …\nThe CLI executable used for the chain commands. Defaults …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ChainBuilder</code>.\nCreate a new <code>ChainDriver</code> with the chain ID containing the …\nCreate a <code>ChainBuilder</code> based on the provided <code>TestConfig</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMethods for voting on a proposal.\nMethods for performing IBC token transfer on a chain.\nMethods for voting on a proposal.\nQuery the address of the interchain account corresponding …\nRegister a new interchain account controlled by the given …\nQuery authority account for a specific module\nQuery pending Cross Chain Queries\nQuery for the transactions related to a wallet on <code>Chain</code> …\nSet the <code>log_level</code> field in the full node config.\nSet the <code>p2p</code> field in the full node config.\nSet the <code>pprof_laddr</code> field in the full node config.\nSet the <code>rpc</code> field in the full node config.\nSet the <code>consensus.timeout_commit</code> field in the full node …\nSet the <code>consensus.timeout_propose</code> field in the full node …\nA driver for interacting with a chain full nodes through …\nAssert that a wallet should eventually have escrowed the …\nAssert that a wallet should eventually have the expected …\nThe ID of the chain.\nThe filesystem path to the Gaia CLI. Defaults to <code>gaiad</code>.\nCreate a new <code>ChainDriver</code>\nReturns the argument unchanged.\nReturns the full URL for the GRPC address.\nReturns the full URL for the GRPC address to listen to …\nThe port used for GRPC.\nThe home directory for the full node to store data files.\nCalls <code>U::from(self)</code>.\nThe port used for P2P. (Currently unused other than for …\nThe port used for pprof. (Currently unused other than for …\nQuery for the balances for a given wallet address and …\nReturns the full URL for the RPC address.\nReturns the full URL for the RPC address to listen to when …\nThe port used for RPC.\nReturns the full URL for the WebSocket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd a wallet address to the genesis account list for an …\nAdd a wallet ID with the given stake amount to be the …\nAdd a wallet with the given ID to the full node’s …\nAssert that the proposal is eventually in the desired …\nCall <code>gaiad collect-gentxs</code> to generate the genesis …\nCopy validator key pair.\nInitialized the chain data stores.\nQuery a consumer chain’s genesis.\nRead the content at a file path relative to the chain home …\nReplace genesis state.\nStart a full node by running in the background <code>gaiad start</code>.\nSubmit a consumer chain proposal.\nModify the Gaia chain config which is saved in toml format.\nModify the Gaia genesis file.\nWrite the string content to a file path relative to the …\nBuild the recipient address as following: …\nBuild a forward address with the destination address …\nQuery the proposal with the given proposal_id, which is …\nSubmits an IBC token transfer transaction to <code>Chain</code> to any …\nWait for a chain to get to a desired height, and timeout if\nA <code>ChainDriver</code> may be tagged with a <code>Chain</code> tag in the form …\nTagged version of …\nTagged version of …\nTagged version of <code>query_auth_module</code>.\nTagged version of <code>ChainDriver::query_balance</code>.\nTagged version of <code>query_recipient_transactions</code>.\nSets up an RPC client for making requests to the chain …\nWalkthroughs of integration tests that are used to test …\nMemo Test\nOrdered Channel Test\nSimple Test\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBase infrastructure for the test framework. Includes basic …\nConstructs for test cases that involve interaction between …\nRun N-ary test cases that involve more than 2 chains.\nConstructs for implementing overrides for test cases.\nA basic test has the minimal test setup that is essential …\nUsed for test case wrappers to indicate that the inner …\nThe inner type that implements the override traits.\nA primitive test case provides no additional logic.\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nGet the reference to the inner override type.\nCalls <code>U::from(self)</code>.\nTest runner\nTest runner\nRuns a basic test case implementing <code>BasicTest</code>.\nRuns a primitive test case implementing <code>PrimitiveTest</code>.\nInner test\nConstructs for running test cases with two chains, …\nConstructs for running test cases with two full nodes …\nConstructs for running test cases with two full nodes …\nConstructs for running test cases with two full nodes …\nThis trait is implemented for test cases that need to have …\nAn internal trait that can be implemented by test cases to …\nAn internal trait that can be implemented by test cases to …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModify the relayer config\nCreate a new <code>RunBinaryChainTest</code>\nCreate a new <code>RunTwoWayBinaryChainTest</code>\nCreate a new <code>RunSelfConnectedBinaryChainTest</code>\nTest runner\nRuns a test case that implements <code>BinaryChainTest</code>.\nRuns a test case that implements <code>BinaryChainTest</code>, with the …\nRuns a test case that implements <code>BinaryChainTest</code>, with the …\nInner test\nInner test\nInner test\nThis trait is implemented for test cases that need to have …\nAn internal trait for test cases to override the channel …\nFacility for overriding the channel version \nAn internal trait that can be implemented by test cases to …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nReturn the channel ordering as <code>Ordering</code>.\nReturn the port ID for chain A.\nReturn the port ID for chain B.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RunBinaryChannelTest</code>\nCreate a new <code>BinaryChannelTest</code>\nTest runner\nRuns a test case that implements <code>BinaryChannelTest</code>.\nRuns a test case that implements <code>BinaryChannelTest</code>, with …\nInner test\nInner test\nThis trait is implemented for test cases that need to have …\nAn internal trait that can be implemented by test cases to …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nReturn the connection delay as <code>Duration</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RunBinaryConnectionTest</code>\nCreate a new <code>BinaryConnectionTest</code>\nTest runner\nRuns a test case that implements <code>BinaryConnectionTest</code>.\nRuns a test case that implements <code>BinaryConnectionTest</code>, with\nInner test\nInner test\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>InterchainSecurityChainTest</code>\nTest runner\nRuns a test case that implements …\nInner test\nThis trait is implemented for test cases that need to have …\nAn internal trait that can be implemented by test cases to …\nAn internal trait that can be implemented by test cases to …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModify the genesis file\nModify the full node config\nTest runner\nRuns a test case that implements <code>BinaryNodeTest</code>.\nInner test\nInner test\nConstructs for running test cases with more than two …\nConstructs for running test cases with more than two …\nConstructs for running test cases with more than two …\nConstructs for running test cases with more than two full …\nThis trait is implemented for test cases that need to have …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest runner\nRuns a test case that implements <code>NaryChainTest</code> with a <code>SIZE</code> …\nRuns a test case that implements <code>NaryChainTest</code>, with one …\nInner test\nInner test\nThis trait is implemented for test cases that need to have …\nAn internal trait that can be implemented by test cases to …\nA wrapper type that lifts a test case that implements …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest runner\nInner test\nInner test\nReturns a <code>SIZE</code>x<code>SIZE</code> number of transfer ports.\nThis trait is implemented for test cases that need to have …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest runner\nInner test\nInner test\nThis trait is implemented for test cases that need to have …\nA wrapper type that lifts a test case that implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis trait should be implemented for all test cases to …\nReturn the channel ordering used for creating channels as …\nReturn the port ID used for creating the channel for the …\nReturn the port ID used for creating the channel for the …\nReturn the channel version used for creating channels as …\nReturns the settings for the foreign client on the first …\nReturns the settings for the foreign client on the second …\nReturn the connection delay used for creating connections …\nModify the genesis file before the chain gets initialized.\nModify the full node config before the chain gets …\nModify the relayer config before initializing the relayer. …\nA wrapper type that implements the same test traits as the …\nAn internal trait that can be implemented by test cases to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper functions for deriving IBC denom.\nA newtype wrapper to represent a denomination string.\nType alias for <code>Denom</code> tagged with the chain it belongs to.\nType alias for <code>&amp;Denom</code> tagged with the chain it belongs to.\nDerives the denom on <code>ChainB</code> based on a denom on <code>ChainA</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAmount\nDenomination\nThis type is subject to future changes.\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nThe duration of one second.\nA wrapper around the SupervisorCmd sender so that we can …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nGet this identifier as a borrowed byte slice\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nYields the Order as a string\nGet a reference to the underlying string.\nGet this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nGet this identifier as a borrowed <code>&amp;str</code>\nConstructs a client state at the given height\nConstructs a consensus state at the given height\nLower-level interface for preparing a message to create a …\nReturns the identifier of the newly created client.\nExtract the version from the given chain identifier.\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nConstructs an event at the debug level.\nChecks for evidence of misbehaviour. The check starts with …\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nReturns a handle to the chain hosting this client.\nA handle to the chain hosting this client, i.e., …\nAsk the supervisor to dump its internal state\nConstructs an event at the error level.\nConstruct an ad-hoc error from a string.\nRetrieves the client update event that was emitted when a …\nQueries <code>host_chain</code> to verify that a client with identifier …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nPerform a health check\nGet the <code>ChainId</code> of this chain.\nThe identifier of this client. The host chain determines …\nConstructs an event at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nis_epoch_format() checks if a chain_id is in the format …\nReturns true if this <code>Duration</code> spans no time.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nExtract the chain name from this chain identifier. The …\nCreates a new <code>ChainId</code> given a chain name and an epoch …\nBuilds a new client identifier. Client identifiers are …\nBuilds a new connection identifier. Connection identifiers …\nBuilds a new channel identifier. Like client and …\nCreates a new foreign client on <code>dst_chain</code>. Blocks until …\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns true if filtering is disabled or if packets are …\nReturns one of the prefixes that should be present in any …\nReturns the static prefix to be used across all connection …\nQuery the balances from all denom of the given account. If …\nQuery the latest height and timestamp the application is at\nQuery the balance of the given account for the given denom.\nPerforms a query to retrieve the channel associated with a …\nPerforms a query to retrieve the client state for the …\nPerforms a query to retrieve all the channels of a chain.\nPerforms a query to retrieve the identifiers of all …\nPerforms a query to retrieve the state of the specified …\nPerforms a query to retrieve the state of all clients that …\nPerforms a query to retrieve the connection associated …\nPerforms a query to retrieve all channels associated with …\nPerforms a query to retrieve the identifiers of all …\nQuery the consensus state at the specified height for a …\nQuery the heights of every consensus state for a given …\nQuery the denomination trace given a trace hash.\nPerforms a query to retrieve <code>nextSequenceRecv</code> stored at …\nPerforms a query to retrieve a stored packet …\nPerforms a query to retrieve all the packet …\nPerforms a query to retrieve a stored packet commitment …\nPerforms a query to retrieve all the packet commitments …\nPerforms a query to retrieve a given packet receipt, …\nPerforms a query about which IBC packets in the specified …\nPerforms a query about which IBC packets in the specified …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nSubmit messages asynchronously. Does not block waiting on …\nSend the given <code>msgs</code> to the chain, packaged as one or more …\nShutdown the chain runtime.\nExplicitly stop the running supervisor. This is useful in …\nPuts the current thread to sleep for at least the …\nReturns a handle to the chain whose headers this client is …\nA handle to the chain whose headers this client is …\nPanics\nPanics\nSubscribe to the events emitted by the chain.\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nInfallible creation of the well-known transfer port\nConverts a <code>Duration</code> to a result containing a positive (<code>Ok</code>) …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nAttempts to update a client using header from the latest …\nCreate and send a transaction to perform a client upgrade. …\nMethod for syntactic validation of the input configuration …\nExtract the version from this chain identifier.\nReturn the version of the IBC protocol that this chain is …\nWrapper for build_update_client_with_trusted.\nWait for the source chain application to reach height …\nConstructs an event at the warn level.\nDefinition for a proxy <code>ChainHandle</code> implementation for …\nDefinition for extension trait methods for <code>Connection</code>\nDriver for spawning the relayer.\nDefinition for extension trait methods for <code>ForeignClient</code>\nFunctions for performing IBC transfer that works similar to\nThis struct contains the attributes which can be modified …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn extension trait that provide helper methods to get …\nGet the connection ID from side A of the chain.\nGet the connection ID from side B of the chain.\nEncapsulates the parameters needed to spawn the relayer …\nThe relayer <code>Config</code>. Use this config when spawning new …\nThe path to the relayer config saved on the filesystem.\nReturns the argument unchanged.\nWhether the driver should hang the test when the …\nCalls <code>U::from(self)</code>.\nThe relayer chain <code>Registry</code> that is shared with any running …\nSpawns the relayer supervisor and return the …\nSpawns the relayer supervisor and then executes the …\nAn extension trait for providing methods for getting …\nGet the client ID of the destination chain that corresponds\nGet the destination chain ID.\nGet the source chain ID.\nPerform a simplified version of IBC token transfer for …\nDefinitions for data structures involving two chains.\nDefinition for the test configuration.\nTypes for exporting test setup information into …\nThis module contains the tagged version of the identifier …\nDefinitions for tagged data structures involving N-ary …\nDefine wrapper type around <code>std::process::Child</code> to kill the …\nDefinitions for data types that involve a single chain.\nA small library for adding one or two type tags to data …\nThe Topology defines how chains are interconnected when …\nTypes for information about a chain wallet.\nType definition for two connected chains.\nType definitions for channel connected between two chains.\nType definitions for IBC clients connected between two …\nType definitions for connection that is connected between …\nTwo connected chains including the full node, chain …\nNewtype wrapper for <code>ChainHandle</code> to stop the chain handle …\nThe chain ID of chain A.\nThe chain ID of chain B.\nSwitch the position between chain A and chain B.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the chain handle for chain A.\nThe <code>ChainHandle</code> for chain A.\nGet a reference to the chain handle for chain B.\nThe <code>ChainHandle</code> for chain B.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ConnectedChains</code>\nThe tagged <code>FullNode</code> for chain A.\nThe tagged <code>FullNode</code> for chain B.\nA channel that is connected between two chains with the …\nThe underlying relayer <code>Channel</code>.\nThe channel ID on chain A, corresponding to the channel …\nThe channel ID on chain B, corresponding to the channel …\nThe underlying <code>ConnectedConnection</code> that the channel …\nFlip the position between chain A and chain B.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe port ID on chain A, corresponding to the channel …\nThe port ID on chain B, corresponding to the channel …\nData type to store the client IDs of two chains that are …\nThe client ID on chain A.\nThe client ID on chain B.\nFlip the position of chain A and B of the client.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA connection that is connected between two chains with the …\nThe underlying connected clients\nThe underlying <code>Connection</code> data\nThe connection ID on chain A.\nThe connection ID on chain B.\nFlip the position of chain A and B of the connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSwitch the position between chain A and chain B.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe test config to be passed to each test case. Currently …\nThe command that the <code>ChainDriver</code> should use to execute …\nThe directory path for storing the chain and relayer files.\nReturns the argument unchanged.\nWhether to suspend a test case when it fails whenever …\nCalls <code>U::from(self)</code>.\nThe exported environment variables are stored in a data …\nThis trait is implemented by data types that can export …\nA wrapper that implements <code>EnvWriter</code> by adding a prefix to …\nExport the environment variables using the given <code>EnvWriter</code>.\nRetrieve the environment variables exported by a type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an <code>EnvWriter</code> that adds a prefix to the keys of the …\nRetrieve the environment variables exported by a type …\nWrite an environment variable with the given key and value.\nA <code>ChainId</code> tagged with the chain it belongs to.\nA reference to <code>ChainId</code> tagged with the chain it belongs to.\nA <code>ChannelId</code> tagged with first, the host chain that has the …\nA reference to <code>ChannelId</code> tagged with first, the host chain …\nA <code>ClientId</code> tagged with first, the chain it belongs to, and …\nA reference to <code>ClientId</code> tagged with first, the chain it …\nA <code>ConnectionId</code> tagged with first, the host chain that has …\nA reference to <code>ConnectionId</code> tagged with first, the host …\nA <code>PortId</code> tagged with first, the host chain that has the …\nA reference to <code>PortId</code> tagged with first, the host chain …\nConstructs for N-ary connected chains.\nConstructs for N-ary connected channels.\nConstructs for N-ary connected connections.\nTag a <code>Handle: ChainHandle</code> type with a const generic …\nLifts a const generic <code>usize</code> into a type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA dynamic-sized N-ary connected chains, based on the …\nA fixed-size N-ary connected chains as specified by <code>SIZE</code>.\nA pair of binary <code>ConnectedChains</code> that are tagged by a …\nA <code>FullNode</code> that is tagged by a <code>Handle: ChainHandle</code> and the …\nGet the <code>ChainHandle</code> at position <code>POS</code>, which must be less …\nGet a connected chain pair at position <code>CHAIN_A</code> and <code>CHAIN_B</code>…\nGet the <code>ForeignClient</code> with the source chain at position …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>FullNode</code> at position <code>POS</code>, which must be less than …\nThe <code>ChainHandle</code> for chain A.\nThe <code>ChainHandle</code> for chain B.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe tagged <code>FullNode</code> for chain A.\nThe tagged <code>FullNode</code> for chain B.\nA two dimensional BTreeMap of connected channels as …\nA two dimensional BTreeMap of connected channels as …\nA tagged <code>Channel</code> with the A side at <code>CHAIN_A</code> position and B …\nA tagged <code>ChannelId</code> for the chain at position <code>CHAIN_A</code> that …\nA tagged <code>ConnectedChannel</code> that is connected between the …\nA tagged <code>PortId</code> for the chain at position <code>CHAIN_A</code> that is …\nThe underlying relayer <code>Channel</code>.\nGet the binary <code>ConnectedChannel</code> at position <code>CHAIN_A</code> and …\nThe channel ID on chain A, corresponding to the channel …\nThe channel ID on chain B, corresponding to the channel …\nThe underlying <code>ConnectedConnection</code> that the channel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe port ID on chain A, corresponding to the channel …\nThe port ID on chain B, corresponding to the channel …\nA two dimensional BTreeMap of connected connections as …\nA two dimensional BTreeMap of connected connections as …\nA tagged binary <code>ConnectedConnection</code> that is connected …\nThe connection ID on the chain at position <code>CHAIN_A</code> that …\nThe underlying connected clients\nThe underlying <code>Connection</code> data\nGet the connection pair for chains at position <code>CHAIN_A</code> and …\nThe connection ID on chain A.\nThe connection ID on chain B.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>ForeignClient</code> that is tagged by a <code>Handle: ChainHandle</code> and\nA handle to the chain hosting this client, i.e., …\nGet the <code>ForeignClient</code> with the source chain at position …\nReturns the argument unchanged.\nThe identifier of this client. The host chain determines …\nCalls <code>U::from(self)</code>.\nA handle to the chain whose headers this client is …\nA lightweight wrapper around std::process::Child to ensure …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKill the underlying child process.\nCreate a new <code>ChildProcess</code> from the primitive <code>Child</code> type.\nWait for the child process to terminate.\nType definition for a single running full node.\nRepresents a full node running as a child process managed …\nExtra methods for <code>FullNode</code> that is tagged.\nGet the <code>ChainDriver</code> tagged with the given <code>Chain</code>.\nThe <code>ChainDriver</code> used to communicate with the full node.\nGet the <code>ChainId</code> tagged with the given <code>Chain</code>.\nGet the <code>Denom</code> tagged with the given <code>Chain</code>.\nThe currency denomination which the wallets have been …\nReturns the argument unchanged.\nGenerate the relayer’s chain config based on the …\nCalls <code>U::from(self)</code>.\nKill the underlying child process of the full node, …\nThe child process that is running the full node.\nGet the <code>TestWallets</code> tagged with the given <code>Chain</code>.\nThe test wallets with more than sufficient account balance …\nTagged data types with two type tags.\nTagged data types with a single type tag.\nTag a <code>Value</code> type with a two type tags <code>TagA</code> and <code>TagB</code>.\nCreate a tagged iterator, if the underlying value supports …\nConvert a tagged value into a tagged reference.\nConvert a <code>Clone</code>eable tagged reference into a tagged value.\nPerform operation with the reference to the underlying …\nPerform operation consuming the underlying reference, and …\nPerform operation with the reference to the underlying …\nFlips the ordering of the two tags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a mutable reference to the underlying value.\nPerform operation with the reference to the underlying …\nPerform an operation consuming the original tagged value, …\nPerform operation with the reference to the underlying …\nCreate a new tagged value with any type tag.\nRetag a tagged value with a different tag.\nConvert a tagged <code>Option</code> value into an optional tagged …\nConvert a tagged <code>Result</code> value into an result tagged value.\nGet a reference to the underlying value.\nTag a <code>Value</code> type with a single <code>Tag</code> type tag.\nCreate a tagged iterator, if the underlying value supports …\nAdd an additional tag to a mono-tagged value, turning it …\nConvert a tagged value into a tagged reference.\nConstructs a client state at the given height\nConstructs a consensus state at the given height\nConvert a <code>Clone</code>eable tagged reference into a tagged value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the tagged value into an untagged value.\nPerform operation with the reference to the underlying …\nPerform an operation consuming the original tagged value, …\nPerform operation with the reference to the underlying …\nGet a mutable reference to the underlying value.\nCreate a new tagged value with any type tag.\nRetag a tagged value with a different tag.\nConvert a tagged <code>Result</code> value into an result tagged value.\nConvert a tagged <code>Option</code> value into an optional tagged …\nConvert a tagged <code>Vec</code> value into a list of tagged value.\nGet a reference to the underlying value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtra methods for <code>TestWallets</code> that is tagged.\nExtra methods for <code>Wallet</code> that is tagged.\nA collection of wallets used for testing. We use an …\nA wallet containing the information about the ID, address, …\nNewtype wrapper for the address a wallet corresponds to.\nNewtype wrapper for a wallet ID as identified by the chain …\nGet the <code>WalletAddress</code> tagged with the given <code>Chain</code>.\nThe address for receiving tokens for this wallet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>WalletId</code> tagged with the given <code>Chain</code>.\nThe ID of the wallet for accessing it from the key store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>SigningKeyPair</code> tagged with the given <code>Chain</code>.\nThe wallet key information in the form of <code>SigningKeyPair</code> …\nCreate a new <code>Wallet</code>\nGet the relayer <code>Wallet</code> tagged with the given <code>Chain</code>.\nThe relayer wallet. This is used by the relayer by default.\nGet the first user <code>Wallet</code> tagged with the given <code>Chain</code>.\nThe first user wallet that can be used for testing.\nGet the second user <code>Wallet</code> tagged with the given <code>Chain</code>.\nThe second user wallet that can be used for testing.\nGet the validator <code>Wallet</code> tagged with the given <code>Chain</code>.\nThe validator wallet.\nHelpers for manipulating fixed-sized arrays.\nFilesystem utilities.\nUtilities for random value generation.\nUtilities for retrying test operations.\nUtilities for suspending the test.\nConverts a fixed-sized nested array <code>[[T; SIZE]; SIZE]</code> into …\nConverts a dynamic-sized vector <code>Vec&lt;T&gt;</code> into a fixed-sized …\nPipe a streaming source implementing <code>std::io::Read</code> to a …\nSends a message containing <code>InterchainAccountPacketData</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates a random string value, in the form of <code>u64</code> hex …\nGenerates a random <code>u128</code> value between the given min and …\nGenerates a random <code>u32</code> value.\nGenerates a random <code>u64</code> value.\nGenerates a random <code>u64</code> value between the given min and max.\nFind a random unused non-privileged TCP port.\nA simplified version of retry logic used for testing. We …\nSuspends the test using <code>suspend</code> if <code>hang_on_fail</code> is <code>true</code> …\nCall this function in the middle of a test code of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")