searchState.loadedDescShard("namada_gas", 0, "Gas accounting module to track the gas usage in a block …\nContains the error value\nRepresentation of tracking gas in sub-units.\nTrait to share gas operations for transactions and …\nThe cost to execute an Ibc action\nThe cost to validate an Ibc action\nThe cost to process a masp convert note in the bundle\nThe cost to run the final masp check in the bundle\nThe fixed cost of convert note verification\nThe fixed cost of output note verification\nThe fixed cost of spend note verification\nThe cost to process a masp output note in the bundle\nThe cost to process a masp spend note in the bundle\nThe variable cost of convert note verification\nThe variable cost of output note verification\nThe variable cost of spend note verification\nThe cost of masp sig verification\nThe cost of accessing data from memory (both read and …\nContains the success value\nGas module result for functions that may fail\nThe cost of accessing data from storage, per byte\nThe cost of removing data from storage, per byte\nThe cost of writing data to storage, per byte\nGas metering in a transaction\nThe cost of verifying a single signature of a transaction\nGas metering in a validity predicate\nThe cost for requesting one more page in wasm (64KiB)\nGas represented in whole units. Used for fee payment and …\nAdd the compiling cost proportionate to the code length\nAdd the gas for loading the wasm code from storage\nAdd the gas for validating untrusted wasm code\nAdd the gas required by a wrapper transaction which is …\nCheck if the vps went out of gas. Starts with the gas …\nChecked add of <code>Gas</code>. Returns <code>None</code> on overflow\nChecked div of <code>Gas</code>. Returns <code>None</code> if <code>rhs</code> is zero.\nChecked sub of <code>Gas</code>. Returns <code>None</code> on underflow\nAdd gas cost. It will return error when the consumed gas …\nGas related events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a <code>Gas</code> instance from a <code>WholeGas</code> amount\nGet the amount of gas still available to the transaction\nGet the gas limit\nGet the protocol gas scale\nGet the gas consumed by the tx\nGet the entire gas used by the transaction up until this …\nGet the gas consumed by the tx alone before the vps were …\nGet the gas consumed by the VP alone\nConverts the sub gas units to whole ones. If the sub units …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a new Tx gas meter. Requires a gas limit for …\nInitialize a new VP gas meter from the <code>TxGasMeter</code>\nGas storage keys\nThe gas limit for a transaction\nExtend an <code>namada_events::Event</code> with gas used data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA storage key is made of storage key segments <code>DbKeySeg</code>, …\nReturns the addresses from the key segments\nReturns the first segment of the key, or <code>None</code> if it is …\nReturns the argument unchanged.\nReturns the address from the first key segment if it’s …\nGet the full transaction hash prefix under the <code>last</code> subkey\nReturn the segment at the index parameter\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the key is empty\nCheck if the given key is a key to a validity predicate. …\nIterates over all addresses in the key segments\nReturns a new key with segments of <code>Self</code> and the given key\nReturns the last segment of the key, or <code>None</code> if it is …\nReturns the length\nParses string and returns a key\nReturns a key from the given DB key path that has the …\nGet the transaction hash prefix under the <code>all</code> subkey\nReturns a new key with segments of <code>Self</code> and the given …\nThe segments of the key in the original (left-to-right) …\nReturns the prefix before the last segment and last …\nCheck if the key begins with the given prefix and returns:\nReturns a sub key without the first segment\nReturns a key of the validity predicate of the given …\nReturns a key of the wasm code of the given hash\nReturns a key of the wasm code’s length of the given hash\nReturns a key of wasm code’s hash of the given name\nReturns a key of the wasm code hash of the given code path\nTakes ownership of the key, appends a new segment to it, …")