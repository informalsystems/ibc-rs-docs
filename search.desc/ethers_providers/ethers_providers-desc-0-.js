searchState.loadedDescShard("ethers_providers", 0, "ethers-providers\naddr(bytes32)\nThe quorum is reached when all providers return the exact …\nBasic or bearer authentication in http or websocket …\nHTTP Basic Auth\nBearer Auth\nBesu\nThe primary builder which exposes <code>RawCall</code> methods.\nA builder which implements <code>RawCall</code> methods for overriding …\nHolds the inputs to the <code>eth_call</code> rpc method along with the …\nCustom error from unknown source\nThe polling interval to use for local endpoints, See …\nThe default polling interval for filters and pending …\nENS registry address (…\nEmpty requests array\nEmpty responses array\nAn error during ENS name resolution\nInvalid reverse ENS name\nErigon\nError response with a <code>JsonRpcError</code>.\nThe error type that can occur when creating a provider\nA JSON-RPC Error\nError type returned by most operations\nAn EscalatingPending is a pending transaction that …\nA simple gas escalation policy\ntext(bytes32, string)\nTypes of filters supported by the JSON-RPC.\nStreams data from an installed filter via …\nGeth\nError in underlying lib <code>reqwest</code>\nError in underlying lib <code>hex</code>\nA low-level JSON-RPC Client over HTTP.\nError thrown when sending an HTTP request\nImplements RetryPolicy that will retry requests that …\nsupportsInterface(bytes4 interfaceID)\nThe <code>Inner</code> type is the next lower middleware layer’s …\nThe next-lower middleware in the middleware stack\nTrait which must be implemented by data transports to be …\nAn internal error in the JSON RPC Client\nWrapper trait for <code>crate::JsonRpcClient</code> that erases …\nA JSON-RPC 2.0 error\nThrown if the response could not be parsed\nCustom JsonRpcError\nContains the JWT secret and claims parameters.\nGenerates a bearer token from a JWT secret\nError loading latest block\nError loading logs from block range\nA log query provides streaming access to historical logs …\nErrors while querying for logs\n<code>eth_newBlockFilter</code>\nThe quorum is reached when the majority of the providers …\nAn implementer of <code>RawCall</code> that maps a function <code>f</code> over the …\nA middleware allows customizing requests send and received …\n<code>MiddlewareError</code> is a companion trait to <code>crate::Middleware</code>. …\nErrors for the <code>MockProvider</code>\nMock transport used in test environments.\nHelper response type for <code>MockProvider</code>, allowing custom …\nname(bytes32)\nNethermind\n<code>eth_newBlockFilter</code> filter\nNoQuorumReached\nNode Clients\nThis includes general information about a running node, …\nThe type of stream this transport returns\nOpenEthereum\nRepresents a short summary of information known about a …\nA pending transaction is a transaction which has been …\n<code>eth_newPendingTransactionFilter</code> filter\nThe quorum is reached when the cumulative weight of a …\nAn abstract provider for interacting with the Ethereum …\nThe JSON-RPC client type at the bottom of the stack\nThe quorum is reached when the given number of provider …\nAn error thrown when making a call to the provider\nInternal provider error\nExtension trait for <code>Provider</code>\nA transport implementation supporting pub sub …\nDetermines when the provider reached a quorum\nError thrown when sending an HTTP request\nA provider that bundles multiple providers and only …\nIf you need to override the Authorization header value\nProvides methods for overriding parameters to the <code>eth_call</code> …\nThrown if the <em>read</em> request failed\nThrown if the request failed\nRetryClient presents as a wrapper around JsonRpcClient …\nBuilder for a <code>RetryClient</code>\nError thrown when:\nRetryPolicy defines logic for which JsonRpcClient::Error …\nAn <code>RpcError</code> is an abstraction over error types returned by …\nA client containing two clients.\nError thrown when using either read or write client\nSerde JSON Error\n(De)Serialization error\n(De)Serialization error\nError in underlying lib <code>serde_json</code>\nSigner is not available to this provider.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nStreams data from an installed filter via <code>eth_subscribe</code>\nTimeout while making requests\nDrains a stream of transaction hashes and yields entire …\nNode is not supported by this provider\nRPC method is not supported by this provider\nSuccessful response with a <code>serde_json::Value</code>.\nUsed by the <code>std::future::Future</code> implementation. You are …\nThe quorum is reached once the accumulated weight of the …\nThe configuration of a provider for the <code>QuorumProvider</code>\nThrown if the <em>write</em> request failed\nRequests adding the given peer, returning a boolean …\nRequests adding the given peer, returning a boolean …\nAdd a provider to the set\nRequests adding the given peer as a trusted peer, which …\nRequests adding the given peer as a trusted peer, which …\nTypes for the admin api\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nReturns a reference to the underlying byte array.\nAccess an underlying JSON-RPC error (if any)\nAccess an underlying JSON-RPC error (if any)\nAccess an underlying JSON-RPC error (if any)\nAttempt to convert this error to the next lower middleware…\nAttempts to access an underlying <code>ProviderError</code>, usually by …\nAttempts to access an underlying <code>ProviderError</code>, usually by …\nAttempt to extract revert data from the JsonRpcError be …\nAccess an underlying <code>serde_json</code> error (if any)\nAccess an underlying <code>serde_json</code> error (if any)\nAccess an underlying <code>serde_json</code> error (if any)\nChecks that the provided request was submitted by the …\nProviders may include the <code>backoff</code> in the error response …\nMake a new basic auth\nMake a new bearer auth\nSets the block number to execute against\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nCreates the <code>RetryClient</code> with the configured settings\nConvenience method for creating a <code>QuorumProviderBuilder</code> …\nBorrows a stream, rather than consuming it.\nReturns a number in bytes form with padding to fit in 32 …\nSends the read-only (constant) transaction to a single …\nSends the read-only (constant) transaction to a single …\nOverrides for the <code>eth_call</code> rpc method\nAnalogous to <code>Middleware::call</code>, but returns a <code>CallBuilder</code> …\nThe peer’s capabilities.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nReturns the current client version using the …\nReturns the current client version using the …\nThe error code\nTransforms a stream into a collection, returning a future …\nSets the number of assumed available compute units per …\nConcatenate all items of a stream into a single extendable …\nSets the number of confirmations for the pending …\nCreates a new instance connected to the given <code>url</code>, exit on …\nCreates a new instance connected to the given <code>url</code>, exit on …\nConvert a provider error into the associated error type by …\nConvert a provider error into the associated error type by …\nDrives the stream to completion, counting the number of …\nQuery the node for an EIP-2930 Access List.\nQuery the node for an EIP-2930 Access List.\nRepeats a stream endlessly.\nAdditional data\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nReplays all transactions in a given block (specified by …\nExecutes the given call and returns a number of possible …\nExecutes the given call and returns a number of possible …\nAfter replaying any previous transactions in the same …\nAfter replaying any previous transactions in the same …\nDecode revert data (if any) into a decodeable type\nReturn the default sender (if any). This will typically be …\nReturn the default sender (if any). This will typically be …\nCreate a <code>QuorumProvider</code> for different <code>PubsubClient</code> types\nCreate a <code>QuorumProvider</code> for different <code>JsonRpcClient</code> types\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nEthereum Name Service support Adapted from …\nSets the ENS Address (default: mainnet)\nCreates a stream which gives the current iteration count …\nERC related utilities. Only supporting NFTs for now.\nGets a heuristic recommendation of max fee per gas and max …\nGets a heuristic recommendation of max fee per gas and max …\nSends a transaction to a single Ethereum node and return …\nSends a transaction to a single Ethereum node and return …\nQuery the node for a <code>FeeHistory</code> object. This objct contains\nQuery the node for a <code>FeeHistory</code> object. This objct contains\nFill necessary details of a transaction for dispatch\nFill necessary details of a transaction for dispatch\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nCustomize <code>Provider</code> settings for chain.\nCustomize <code>Provider</code> settings for chain.\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the next lower middleware layer’s error to this …\nDecode the given string from hex (no 0x prefix), and …\nConvert a <code>ProviderError</code> to this type, by successively …\nConvert a <code>ProviderError</code> to this type, by successively …\nWrap given slice in <code>Self</code>. Returns an error if slice.len() …\nFuse a stream such that <code>poll_next</code> will never again be …\nGenerate a JWT token with <code>claims.iat</code> set to current time.\nGets the accounts on the node\nGets the accounts on the node\nReturns the account’s balance\nReturns the account’s balance\nGets the block at <code>block_hash_or_number</code> (transaction hashes …\nGets the block at <code>block_hash_or_number</code> (transaction hashes …\nGet the block number\nGet the block number\nReturns all receipts for a block.\nReturns all receipts for a block.\nGets the block at <code>block_hash_or_number</code> (full transactions …\nGets the block at <code>block_hash_or_number</code> (full transactions …\nGet the current broadcast interval.\nReturns the currently configured chain id, a value used in …\nReturns the currently configured chain id, a value used in …\nReturns the deployed code at a given address\nReturns the deployed code at a given address\nGets the current gas price as estimated by the node\nGets the current gas price as estimated by the node\nGet the block header by number or hash\nGet the block header by number or hash\nGets the polling interval which the provider currently …\nReturns an array (possibly empty) of logs that match the …\nReturns an array (possibly empty) of logs that match the …\nReturns a stream of logs are loaded in pages of given page …\nReturns a stream of logs are loaded in pages of given page …\nReturns the network version.\nReturns the network version.\nGet the current polling interval.\nReturns the EIP-1186 proof response …\nReturns the EIP-1186 proof response …\nReturns a transaction request for calling the <code>resolver</code> …\nGet the storage of an address for a particular slot …\nGet the storage of an address for a particular slot …\nGets the transaction with <code>transaction_hash</code>\nGets the transaction with <code>transaction_hash</code>\nGets the transaction with block and index\nGets the transaction with block and index\nReturns the nonce of the address\nReturns the nonce of the address\nGets the transaction receipt with <code>transaction_hash</code>\nGets the transaction receipt with <code>transaction_hash</code>\nGets the block uncle at <code>block_hash_or_number</code> and <code>idx</code>\nGets the block uncle at <code>block_hash_or_number</code> and <code>idx</code>\nGets the block uncle count at <code>block_hash_or_number</code>\nGets the block uncle count at <code>block_hash_or_number</code>\nThe node’s private key.\nThe peer’s enode ID.\nThe subscription’s installed id on the ethereum node\nThe filter’s installed id on the ethereum node\nSends the given key to the node to be encrypted with the …\nSends the given key to the node to be encrypted with the …\nSets the duration to wait initially before retrying\nGet a reference to the next-lower middleware in the …\nDo something with each item of this stream, afterwards …\nAllows inspecting the content of a pending transaction in …\nCreate a stream that emits items at a fixed interval. Used …\nSets the default polling interval for event filters and …\nSets the polling interval\nSets the stream’s polling interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the key, returning its underlying byte array.\nConverts this stream into a future of …\nThe IP address of the connected node.\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error is a JSON-RPC error …\nReturns <code>true</code> if the underlying error stems from a lower …\nReturns <code>true</code> if the underlying error stems from a lower …\nReturns true if the endpoint is local\nDetermine if the error output of the <code>eth_call</code> RPC request …\nReturns <code>true</code> if the underlying error is a serde_json …\nReturns <code>true</code> if the underlying error is a serde_json …\nReturns <code>true</code> if the underlying error is a serde_json …\nReturns <code>true</code> if the underlying error is a serde_json …\nThis returns true if either the middleware stack contains …\nThis returns true if either the middleware stack contains …\nWrap this stream in an <code>Either</code> stream, making it the …\nThe node’s listening address.\nLogs the pending transaction’s hash\nLogs the pending transaction hash along with a custom …\nReturns the ENS name the <code>address</code> resolves to (or None if …\nReturns the ENS name the <code>address</code> resolves to (or None if …\nMaps this stream’s items to a different type, returning …\nCalls the future if <code>item</code> is None, otherwise returns a …\nThe error message\nReturns an indication if this node is currently mining.\nReturns an indication if this node is currently mining.\nReturns an indication if this node is currently mining.\nReturns a <code>Provider</code> instantiated with an internal “mock”…\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nReturns the ENS namehash as specified in EIP-137\nNetworking information about the peer.\nCreate a new JwtAuth from a secret key, and optional <code>id</code> …\nInstantiate a new <code>LogQuery</code>\nCreate a new <code>TransactionStream</code> instance\nInstantiate a new provider with a backend.\nInitializes a new HTTP Client\nInstantiate a new <code>QuorumProvider</code> from a <code>Quorum</code> and a set of\nCreate a <code>WeightedProvider</code> with weight <code>1</code>\nCreates a new client using two different clients\nCreates a new <code>RetryClient</code> that wraps a client and adds …\nInstantiates a mock transport\nCreates a new subscription stream for the provided …\nCreates a new pending transaction poller from a hash and a …\nCreates a new watcher with the provided factory and filter …\nCreate a new <code>RetryClient</code> by connecting to the provided …\nInitializes a new HTTP Client with authentication\nAllows to customize the provider by providing your own …\nCreates a future that resolves to the next item in the …\nReturns the type of node we’re connected to, while also …\nReturns general information about the node as well as …\nReturns general information about the node as well as …\nReturns the ENS record key hash EIP-634\nReturns all receipts for that block. Must be done on a …\nReturns all receipts for that block. Must be done on a …\nCreates a new stream which exposes a <code>peek</code> method.\nReturns the list of peers currently connected to the node.\nReturns the list of peers currently connected to the node.\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nReturns the Provider associated with the pending …\nThe HTTP or Websocket provider.\nThe HTTP or Websocket provider.\nReturn a reference to the weighted providers\nPushes the data to the responses\nPushes the data or error to the responses\nProvider that uses a quorum\nThe weight at which the provider reached a quorum\nHow many retries for rate limited responses\nOverride the Authorization header with your own string\nReturns the client used for read operations\nAn adaptor for chunking up ready items of the stream …\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nRequests to remove the given peer, returning a boolean …\nMake a request, as <code>crate::JsonRpcClient</code>\nSends a request with the provided JSON-RPC and parameters …\nMake an RPC request via the internal connection, and …\nSends a POST request with the provided method and the …\nPushes the <code>(method, params)</code> to the back of the <code>requests</code> …\nReturns a transaction request for calling\nReturns the avatar HTTP link of the avatar that the …\nReturns the avatar HTTP link of the avatar that the …\nFetch a field for the <code>ens_name</code> (no None if not configured).\nFetch a field for the <code>ens_name</code> (no None if not configured).\nReturns the address that the <code>ens_name</code> resolves to (or None …\nReturns the address that the <code>ens_name</code> resolves to (or None …\nReturns the URL (not necesserily HTTP) of the image behind …\nReturns the URL (not necesserily HTTP) of the image behind …\nSet retries\nReturns the reverse-registrar name of an address.\nWrap this stream in an <code>Either</code> stream, making it the …\nCreates a new Provider with a RwClient\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nReturns a <code>Future</code> that resolves when the next item in this …\nSend a transaction with a simple escalation policy.\nSend a transaction with a simple escalation policy.\nSend the raw RLP encoded transaction to the entire …\nSend the raw RLP encoded transaction to the entire …\nSends the transaction to the entire Ethereum network and …\nSends the transaction to the entire Ethereum network and …\nCustomized <code>Provider</code> settings for chain\nSets the free compute units per second limit.\nSets the default polling interval for event filters and …\nSet the loaded elements buffer. This buffer contains logs …\nWhether to retry the request based on the given <code>error</code>\nSigns data using a specific account. This account needs to …\nSigns data using a specific account. This account needs to …\nSign a transaction via RPC call\nSign a transaction via RPC call\nSign a transaction via RPC call\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nConsumes the client and returns the underlying clients\nProvides types and methods for constructing an <code>eth_call</code> …\nStarts the miner.\nStarts the miner.\nSets the state override set. Note that not all client …\nStop terminates the miner, both at the consensus engine …\nStop terminates the miner, both at the consensus engine …\nAlias for Box::pin, must be called in order to pin the …\nAdd a subscription to this transport\nSubscribe to a stream of incoming blocks.\nSubscribe to a stream of incoming blocks.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of event logs matchin the provided …\nSubscribe to a stream of event logs matchin the provided …\nSubscribe to a stream of pending transaction hashes.\nSubscribe to a stream of pending transaction hashes.\nReturns a transaction request for checking interface …\nReturn current client syncing status. If IsFalse sync is …\nReturn current client syncing status. If IsFalse sync is …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nPre-instantiated Infura HTTP clients which rotate through …\nComputes from this stream’s items new items of a …\nSets the number of retries after a connection times out\nReturns traces created at given block\nReturns traces created at given block\nExecutes the given call and returns a number of possible …\nExecutes the given call and returns a number of possible …\nExecutes given calls and returns a number of possible …\nExecutes given calls and returns a number of possible …\nReturn traces matching the given filter\nReturn traces matching the given filter\nReturns trace at the given position\nReturns trace at the given position\nTraces a call to <code>eth_sendRawTransaction</code> without making the …\nTraces a call to <code>eth_sendRawTransaction</code> without making the …\nReplays all transactions in a block returning the …\nReplays all transactions in a block returning the …\nReplays a transaction, returning the traces\nReplays a transaction, returning the traces\nReturns all traces of a given transaction\nReturns all traces of a given transaction\nReturns a stream that yields the <code>Transaction</code>s for the …\nReturns a stream that yields the <code>Transaction</code>s for the …\nReturns a new <code>RwClient</code> with transposed clients\nTry to create a new <code>Provider</code>\nReturns the transaction hash of the pending transaction\nReturns the details of all transactions currently pending …\nReturns the details of all transactions currently pending …\nReturns a summary of all the transactions currently …\nReturns a summary of all the transactions currently …\nReturns the number of transactions currently pending for …\nReturns the number of transactions currently pending for …\nPrompts the node to decrypt the given account from its …\nPrompts the node to decrypt the given account from its …\nRemove a subscription from this transport\nUnsubscribes from the subscription.\nConverts a stream of pairs into a future, which resolves …\nThe Url to which requests are made\nThe Url to which requests are made\nMutable access to the Url to which requests are made\nMutable access to the Url to which requests are made\nValidate a JWT token given the secret key and return the …\nStreams event logs matching the filter.\nStreams event logs matching the filter.\nStreams new block hashes\nStreams new block hashes\nStreams pending transactions\nStreams pending transactions.\nStreams pending transactions.\nSet the broadcast interval. This controls how often the …\nset page size for pagination\nSet the polling interval. This controls how often the …\nSet the default sender on the provider\nInstantiate a <code>WeightedProvider</code> with a set weight\nReturns the client used for write operations\nAn adapter for zipping two streams together.\nUnderlying error\nThe contents of the HTTP response that could not be …\nReturned errors\nReturned responses\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe total difficulty of the peer’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nThe hash of the peer’s best known block.\nThe node’s private key.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nThe primary builder which exposes <code>RawCall</code> methods.\nA builder which implements <code>RawCall</code> methods for overriding …\nHolds the inputs to the <code>eth_call</code> rpc method along with the …\nAn implementer of <code>RawCall</code> that maps a function <code>f</code> over the …\nProvides methods for overriding parameters to the <code>eth_call</code> …\nUsed by the <code>std::future::Future</code> implementation. You are …\nSets the block number to execute against\nSets the block number to execute against\nSets the block number to execute against\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps a closure <code>f</code> over the result of <code>.await</code>ing this call\nMaps a closure <code>f</code> over the result of <code>.await</code>ing this call\nMaps a closure <code>f</code> over the result of <code>.await</code>ing this call\nApplies a closure <code>f</code> to a <code>CallBuilder::Build</code>. Does nothing …\nInstantiate a new call builder based on <code>tx</code>\nInstantiate a new <code>Caller</code> based on <code>tx</code>\nInstantiate a new map\nProvides types and methods for constructing an <code>eth_call</code> …\nSets the state override set. Note that not all client …\nSets the state override set. Note that not all client …\nSets the state override set. Note that not all client …\nReturns the inner <code>Caller</code> from a <code>CallBuilder::Build</code>. Panics …\nThe state elements to override for a particular account.\nState Diff\nState override\nA wrapper type that holds a complete state override set.\nWraps a map from storage slot to the overriden value.\nReturns a state override set with a single element setting …\nAccount balance\nReturns a state override set with a single element setting …\nAccount code\nReturns a state override set with a single element setting …\nAccount nonce\nReturns an empty state override set.\nReturns a state override set with a single element setting …\nAccount storage\naddr(bytes32)\nENS registry address (…\ntext(bytes32, string)\nsupportsInterface(bytes4 interfaceID)\nname(bytes32)\nReturns a number in bytes form with padding to fit in 32 …\nReturns a transaction request for calling the <code>resolver</code> …\nReturns the ENS namehash as specified in EIP-137\nReturns the ENS record key hash EIP-634\nReturns a transaction request for calling\nReturns the reverse-registrar name of an address.\nReturns a transaction request for checking interface …\nERC1155\nbalanceOf(address owner, uint256 tokenId)\nERC721\nownerOf(uint256 tokenId)\nAn ERC 721 or 1155 token\nSupported ERCs\nERC-1155 and ERC-721 metadata document.\nAddress of the NFT contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a HTTP url for an IPFS object.\nNFT ID in that contract\nThe URL of the image for the NFT\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the method selector\nType of the NFT\nThe state elements to override for a particular account.\nState Diff\nState override\nA wrapper type that holds a complete state override set.\nWraps a map from storage slot to the overriden value.\nReturns a mutable reference to the <code>Account</code> in the map.\nReturns a state override set with a single element setting …\nOverride the account balance\nAccount balance\nReturns a state override set with a single element setting …\nOverride the code at the account\nAccount code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a state override set with a single element setting …\nOverride the account nonce\nAccount nonce\nReturns an empty state override set.\nReturns a state override set with a single element setting …\nAccount storage\nOverride the value of the account storage at the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")