searchState.loadedDescShard("futures_locks", 0, "A library of <code>Futures</code>-aware locking primitives.  These …\nA Futures-aware Mutex.\nA <code>Future</code> representing a pending <code>Mutex</code> acquisition.\nAn RAII mutex guard, much like <code>std::sync::MutexGuard</code>.  The …\n<code>MutexWeak</code> is a non-owning reference to a <code>Mutex</code>.  <code>MutexWeak</code> …\nA Futures-aware RwLock.\nA <code>Future</code> representing a pending <code>RwLock</code> shared acquisition.\nAn RAII guard, much like <code>std::sync::RwLockReadGuard</code>.  The …\nA <code>Future</code> representing a pending <code>RwLock</code> exclusive …\nAn RAII guard, much like <code>std::sync::RwLockWriteGuard</code>.  The …\nThe lock could not be acquired at this time because the …\nCreate a <code>MutexWeak</code> reference to this <code>Mutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the underlying data, if there are …\nReturns a reference to the underlying data, if there are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAcquires a <code>Mutex</code>, blocking the task in the meantime.  When …\nCreate a new <code>Mutex</code> in the unlocked state.\nCreate a new <code>RwLock</code> in the unlocked state.\nReturns true if the two <code>Mutex</code> point to the same data else …\nAcquire the <code>RwLock</code> nonexclusively, read-only, blocking the …\nAttempts to acquire the lock.\nAttempts to acquire the <code>RwLock</code> nonexclusively.\nConsumes the <code>Mutex</code> and returns the wrapped data.  If the …\nConsumes the <code>RwLock</code> and returns the wrapped data.  If the …\nAttempts to acquire the <code>RwLock</code> exclusively.\nTries to upgrade the <code>MutexWeak</code> to <code>Mutex</code>. If the <code>Mutex</code> was …\nAcquire the <code>RwLock</code> exclusively, read-write, blocking the …")