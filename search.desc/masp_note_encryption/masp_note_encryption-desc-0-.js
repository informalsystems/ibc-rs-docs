searchState.loadedDescShard("masp_note_encryption", 0, "Note encryption for MASP transactions.\nTrait that encapsulates protocol-specific batch trial …\nThe size of a compact note.\nTrait that encapsulates protocol-specific note encryption …\nThe size of an encrypted note plaintext.\nNewtype representing the byte encoding of an …\nThe size of <code>NotePlaintextBytes</code>.\nA struct containing context required for encrypting …\nNewtype representing the byte encoding of a note plaintext.\nThe size of an encrypted outgoing plaintext.\nThe size of <code>OutPlaintextBytes</code>.\nNewtype representing the byte encoding of a outgoing …\nA symmetric key that can be used to recover a single …\nTrait that provides access to the components of an …\nAPIs for batch trial decryption.\nComputes <code>Self::epk</code> on a batch of ephemeral keys.\nComputes <code>Self::kdf</code> on a batch of items.\nDerives the <code>ExtractedCommitment</code> for this note.\nExposes the <code>cmu_bytes</code> or <code>cmx_bytes</code> field of the output.\nDerives the <code>EphemeralSecretKey</code> corresponding to this note.\nDerives the <code>OutgoingCipherKey</code> for an encrypted note, given …\nExposes the note ciphertext of the output.\nGenerates <code>encCiphertext</code> for this note.\nGenerates <code>outCiphertext</code> for this note.\nExposes the <code>ephemeral_key</code> field of the output.\nAttempts to parse <code>ephemeral_key</code> as an <code>EphemeralPublicKey</code>.\nExposes the encoding of the ephemeral public key being …\nReturns the byte encoding of the given <code>EphemeralPublicKey</code>.\nExposes the ephemeral secret key being used to encrypt …\nParses the <code>EphemeralSecretKey</code> field of the outgoing …\nExtracts the memo field from the given note plaintext.\nParses the <code>DiversifiedTransmissionKey</code> field of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the <code>DiversifiedTransmissionKey</code> from the note.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerives the <code>SharedSecret</code> from the recipient’s …\nDerives the <code>SharedSecret</code> from the sender’s information …\nDerives <code>EphemeralPublicKey</code> from <code>esk</code> and the note’s …\nDerives the <code>SymmetricKey</code> used to encrypt the note …\nConstruct a new note encryption context for the specified …\nFor use only with Sapling. This method is preserved in …\nEncodes the given <code>Note</code> and <code>Memo</code> as a note plaintext.\nEncodes the outgoing plaintext for the given note.\nParses the given note plaintext from the recipient’s …\nParses the given note plaintext from the sender’s …\nPrepare an ephemeral public key for more efficient scalar …\nTrial decryption of the compact note plaintext by the …\nTrial decryption of the full note plaintext by the …\nRecovery of the full note plaintext by the sender.\nRecovery of the full note plaintext by the sender.\nTrial decryption of a batch of notes for light clients …\nTrial decryption of a batch of notes with a set of …")