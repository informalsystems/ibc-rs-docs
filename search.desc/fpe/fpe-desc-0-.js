searchState.loadedDescShard("fpe", 0, "Format-preserving encryption algorithms.\nA Rust implementation of the FF1 algorithm, specified in …\nA numeral string with radix 2.\nType used for byte representations.\nA struct for performing FF1 encryption and decryption …\nA numeral string that supports radixes in [2..2^16).\nThe numeral string was not compatible with the configured …\nError indicating that a radix was not in the supported …\nFor a given base, a finite, ordered sequence of numerals …\nErrors that can occur while using FF1 for encryption or …\nType representing FF1 operations that can be performed on …\nType used for FF1 computations.\nThe numeral string was longer than the maximum allowed …\nThe numeral string was shorter than the minimum allowed …\nComputes <code>(self + other) mod radix^m</code>.\nConcatenates two strings used for FF1 computations into a …\nDecrypts the given numeral string.\nEncrypts the given numeral string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a BinaryNumeralString from a byte slice, with each …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this numeral string is valid for the base …\nCreates a new FF1 object for the given key and radix.\nReturns the number of numerals in this numeral sub-string.\nReturns the number of numerals in this numeral string.\nSplits this numeral string of length <code>n</code> into two sections …\nComputes <code>(self - other) mod radix^m</code>.\nReturns a <code>b</code>-byte big-endian representation of the number …\nReturns a Vec, with each byte written from the …\nThe maximum length allowed (in numerals) for a numeral …\nThe minimum length allowed (in numerals) for a numeral …\nThe length of the numeral string.\nThe length of the numeral string.")