searchState.loadedDescShard("clap", 0, "<strong>Command Line Argument Parser for Rust</strong>\nEnables colored output regardless of whether or not the …\nDeprecated, replaced with <code>ValueEnum</code>\nDeprecated, replaced with <code>ValueEnum</code> Generates the <code>ValueEnum</code>…\nDeprecated, replaced with <code>ValueEnum</code> Generates the <code>ValueEnum</code>…\nParse a set of arguments into a user-defined container.\nEnables colored output only when the output is going to a …\nRepresents the color preferences for program output\nCreate a <code>Command</code> relevant for a user-defined container.\nConverts an instance of <code>ArgMatches</code> to a user-defined …\nDeprecated, replaced with <code>CommandFactory</code>\nDisables colored output no matter if the output is going …\nParse command-line arguments into <code>Self</code>.\nParse a sub-command into a user-defined enum.\nParse arguments into enums.\nDeprecated, replaced with <code>clap::command!</code>\nCreate an <code>Arg</code> from a usage string.\nAppend to <code>Command</code> so it can instantiate <code>Self</code>.\nAppend to <code>Command</code> so it can update <code>self</code>.\nAppend to <code>Command</code> so it can instantiate <code>Self</code>.\nAppend to <code>Command</code> so it can update <code>self</code>.\nDefine <code>Command</code> line arguments\nBuild a <code>Command</code> that can instantiate <code>Self</code>.\nBuild a <code>Command</code> that can instantiate <code>Self</code>.\nAllows you to build the <code>Command</code> instance from your …\nBuild a <code>Command</code> that can update <code>self</code>.\nBuild a <code>Command</code> that can update <code>self</code>.\nAllows you to pull the authors for the command from your …\nAllows you to pull the description from your Cargo.toml at …\nAllows you to pull the name from your Cargo.toml at …\nAllows you to pull the version from your Cargo.toml at …\nError reporting\nReturns the argument unchanged.\nInstantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …\nInstantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …\nInstantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …\nParse an argument into <code>Self</code>.\nParse an argument into <code>Self</code>.\nTest whether <code>Self</code> can parse a specific subcommand\nCalls <code>U::from(self)</code>.\nDeprecated, replaced with <code>CommandFactory::command</code>\nDeprecated, replaced with …\nParse from <code>std::env::args_os()</code>, exit on error\nParse from <code>std::env::args_os()</code>, exit on error\nParse from iterator, exit on error\nParse from iterator, exit on error\n<code>Command</code> line argument parser\nThe canonical argument value.\nParse from <code>std::env::args_os()</code>, return Err on error.\nParse from <code>std::env::args_os()</code>, return Err on error.\nParse from iterator, return Err on error.\nParse from iterator, return Err on error.\nUpdate from iterator, return Err on error.\nUpdate from iterator, return Err on error.\nUpdate from iterator, exit on error\nUpdate from iterator, exit on error\nAssign values from <code>ArgMatches</code> to <code>self</code>.\nAssign values from <code>ArgMatches</code> to <code>self</code>.\nAssign values from <code>ArgMatches</code> to <code>self</code>.\nSelect a <code>ValueParser</code> implementation from the intended type\nAll possible argument values, in display order.\nDeprecated, replaced with <code>ArgAction::Set</code>\nDeprecated, replaced with …\nDeprecated, replaced with <code>Command::allow_hyphen_values</code> and …\nDeprecated, replaced with <code>Arg::allow_hyphen_values</code> and …\nDeprecated, replaced with <code>Arg::value_parser</code>\nDeprecated, replaced with …\nDeprecated, replaced with <code>Command::allow_missing_positional</code>…\nDeprecated, replaced with <code>Command::allow_negative_numbers</code> …\nAny existing path.\nDeprecated, replaced with <code>Command</code>\nApplication level settings, which affect how <code>Command</code> …\nWhen encountered, store the associated value(s) in …\nThe abstract representation of a command line argument. …\nBehavior of arguments when they are encountered while …\nFamily of related arguments.\nDeprecated, replaced with <code>Command::arg_required_else_help</code> …\nVarious settings that apply to arguments and may be set, …\nDeprecated, replaced with …\nImplementation for <code>ValueParser::bool</code>\nParse bool-like string values, everything else is <code>true</code>\nBuild a command-line interface.\nName of a command, without arguments. May be relative to …\nA single string containing a command and its arguments.\nCapture the remaining arguments as a command name and …\nWhen encountered, increment a <code>u8</code> counter\nDisplays the arguments and <code>subcommands</code> in the help message …\nPath to a directory.\nDeprecated, replaced with <code>Command::disable_colored_help</code> and\nDeprecated, replaced with <code>Command::disable_help_flag</code> and …\nDeprecated, replaced with <code>Command::disable_help_subcommand</code> …\nDeprecated, replaced with <code>Command::disable_version_flag</code> and\nDeprecated, replaced with …\nDeprecated, replaced with …\nEmail address.\nParse an <code>ValueEnum</code> value.\nDeprecated, replaced with <code>Arg::exclusive</code> and …\nPath to an executable file.\nParse false-like string values, everything else is <code>true</code>\nPath to a file.\nDeprecated, replaced with […\nDeprecated, replaced with <code>Arg::global</code> and …\nWhen encountered, display <code>Command::print_help</code>\nDeprecated, replaced with <code>Command::help_expected</code>\nDeprecated, replaced with <code>Command::hide</code> and …\nDeprecated, replaced with <code>Arg::hide</code> and <code>Arg::is_hide_set</code>\nDeprecated, replaced with <code>Arg::hide_long_help</code> and …\nDeprecated, replaced with <code>Arg::hide_short_help</code> and …\nDeprecated, replaced with <code>Arg::hide_default_value</code> and …\nDeprecated, replaced with <code>Command::hide_possible_values</code> and\nDeprecated, replaced with <code>Arg::hide_possible_values</code> and …\nHost name of a computer. Shells usually parse <code>/etc/hosts</code> …\nDeprecated, replaced with <code>Arg::ignore_case</code> and …\nDeprecated, replaced with <code>Command::ignore_errors</code>\nDeprecated, replaced with <code>ArgAction::SetTrue</code> or …\nDeprecated, replaced with <code>Command::infer_long_args</code>\nDeprecated, replaced with <code>Command::infer_subcommands</code>\nDeprecated, replaced with <code>Arg::last</code> and <code>Arg::is_last_set</code>\nDeprecated, replaced with <code>Command::multicall</code> and …\nDeprecated, replaced with <code>Arg::action</code> (Issue #3772)\nDeprecated, replaced with <code>Arg::multiple_values</code> and …\nDeprecated, replaced with <code>Command::next_line_help</code> and …\nDeprecated, replaced with <code>Arg::next_line_help</code> and …\nDeprecated, replaced with <code>Arg::action</code>\nDeprecated, replaced with <code>Arg::action</code>\nDeprecated, replaced with <code>Command::no_binary_name</code>\nParse non-empty string values\nImplementation for <code>ValueParser::os_string</code>\nNone of the hints below apply. Disables shell completion …\nGenerated parser, usually <code>ValueParser</code>.\nImplementation for <code>ValueParser::path_buf</code>\nA possible value of an argument.\nVerify the value is from an enumerated set of <code>PossibleValue</code>…\nDeprecated, replaced with <code>Command::propagate_version</code> and …\nParse number that fall within a range of values\nParse number that fall within a range of values\nDeprecated, replaced with <code>Arg::require_value_delimiter</code> and …\nDeprecated, replaced with <code>Arg::require_equals</code> and …\nDeprecated, replaced with <code>Arg::required</code> and …\nWhen encountered, store the associated value(s) in …\nWhen encountered, act as if <code>&quot;false&quot;</code> was encountered on the …\nWhen encountered, act as if <code>&quot;true&quot;</code> was encountered on the …\nDeprecated, replaced with <code>ArgAction::Set</code> or …\nImplementation for <code>ValueParser::string</code>\nDeprecated, replaced with …\nDeprecated, replaced with <code>Command::subcommand_required</code> and …\nDeprecated, replaced with <code>Command::subcommand_required</code> …\nDeprecated, replaced with <code>Command::subcommand_negates_reqs</code> …\nDeprecated, replaced with <code>Arg::takes_value</code> and …\nDeprecated, replaced with <code>Command::trailing_var_arg</code> and …\nParse/validate argument values\nDefault value if hint is not specified. Follows shell …\nComplete web address.\nDeprecated, this is now the default\nDeprecated, replaced with <code>Arg::use_value_delimiter</code> and …\nName of a local operating system user.\nArgument’s value type\nProvide shell with hint on how to complete an argument.\nParse/validate argument values\nRegister a type with value_parser!\nWhen encountered, display <code>Command::version</code>\nDeprecated, replace\nSets the program’s description for the short help (<code>-h</code>).\nSpecify the behavior when parsing an argument\nFree-form help text for after auto-generated short help (<code>-h</code>…\nFree-form help text for after auto-generated long help (…\nAdd an alias, which functions as a hidden long flag.\nSets a hidden alias to this subcommand.\nSets a <em>hidden</em> alias for this argument value.\nAdd aliases, which function as hidden long flags.\nSets multiple hidden aliases to this subcommand.\nSets multiple <em>hidden</em> aliases for this argument value.\nAssume unexpected positional arguments are a <code>subcommand</code>.\nAllows values which start with a leading hyphen (<code>-</code>)\nSpecifies that leading hyphens are allowed in all argument …\nDeprecated, replaced with <code>value_parser</code>\nSpecifies that external subcommands that are invalid UTF-8 …\nAllows one to implement two styles of CLIs where …\nAllows negative numbers to pass as values.\nAdds an argument to this group by name\nAdds an argument to the list of valid possibilities.\nExit gracefully if no arguments are present (e.g. <code>$ myprog</code>…\nAdds multiple arguments to this group by name\nAdds multiple arguments to the list of valid possibilities.\nSpecifies that use of an argument prevents the use of …\nDeprecated, replaced with <code>ArgAction::Set</code>\nSets the author(s) for the help message.\nFree-form help text for before auto-generated short help (…\nFree-form help text for before auto-generated long help (…\nOverrides the runtime-determined name of the binary for …\n<code>bool</code> parser for argument values\nPrepare for introspecting on all included <code>Command</code>s\nSets when to color output.\nThis argument is mutually exclusive with the specified …\nSpecify an argument or group that must <strong>not</strong> be present when …\nThis argument is mutually exclusive with the specified …\nSpecify arguments or groups that must <strong>not</strong> be present when …\nCatch problems earlier in the development cycle.\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when not present.\nSpecifies the value of the argument if <code>arg</code> has been used …\nProvides a conditional default value in the exact same …\nSpecifies multiple values and conditions in the same …\nProvides multiple conditional default values in the exact …\nValue for the argument when not present.\nValue for the argument when not present.\nValue for the argument when not present.\nDisables colorized help messages.\nDisables <code>-h</code> and <code>--help</code> flag.\nDisables the <code>help</code> <code>subcommand</code>.\nDisables <code>-V</code> and <code>--version</code> flag.\nOverrides the runtime-determined display name of the …\nAllows custom ordering of args within the help message.\nSet the placement of this subcommand within the help.\nDisables the automatic collapsing of positional args into …\nDisables the automatic delimiting of values after <code>--</code> or …\nCustom error message for post-parsing validation\nThis argument must be passed alone; it conflicts with all …\nFind subcommand such that its name or one of aliases …\nFind subcommand such that its name or one of aliases …\nDeprecated, replaced with […\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the help message specified via <code>Command::about</code>.\nBehavior when parsing the argument\nReturns the help heading for listing subcommands.\nReturns the help heading for listing subcommands.\nGet <em>all</em> aliases for this argument, if any, both visible …\nIterate through the set of <em>all</em> the aliases for this …\nIterate through the set of <em>all</em> the long aliases for this …\nGet <em>all</em> short aliases for this argument, if any, both …\nIterate through the set of <em>all</em> the short aliases for this …\nGet a list of all arguments the given argument conflicts …\nIterate through the set of arguments.\nGet the authors of the cmd.\nReturns the help heading for listing subcommands.\nReturns the help heading for listing subcommands.\nGet the name of the binary.\nShould we color the output?\nGet the default values specified for this argument, if any\nGet the name of the binary.\nConfigured parser for values passed to an external …\nDeprecated, replaced with <code>Arg::is_global_set</code>\nIterate through the set of groups.\nGet the help specified for this argument, if any\nGet the help specified for this argument, if any\nGet the help heading specified for this argument, if any\nDeprecated, replaced with <code>Command::get_next_help_heading</code>\nGet the name of the argument\nGet the index of this argument, if any\nGet the long option name for this argument, if any\nGet the help message specified via <code>Command::long_about</code>.\nGet the long option name and its visible aliases, if any\nGet the long flag of the subcommand.\nGet the long help specified for this argument, if any\nGet the long version of the cmd.\nParse <code>env::args_os</code>, exiting on failure.\nParse the specified arguments, exiting on failure.\nParse <code>env::args_os</code>, exiting on failure.\nDeprecated, replaced with <code>Arg::get_id</code>\nGet the name of the cmd.\nGet the name of the argument value\nReturns all valid values of the argument value.\nGet the custom section heading specified via …\nGet the number of values for this argument.\nIterate through the <em>options</em>.\nIterate through the <em>positionals</em> arguments.\nDeprecated, replaced with […\nGet the short option name for this argument, if any\nGet the short option name and its visible aliases, if any\nGet the short flag of the subcommand.\nReturns the help heading for listing subcommands.\nReturns the subcommand value name.\nIterate through the set of subcommands, getting a …\nIterate through the set of subcommands, getting a mutable …\nDeprecated, replaced with <code>App::get_subcommand_help_heading</code>\nGet the delimiter between multiple values\nGet the value hint of this argument\nGet the names of values for this argument.\nConfigured parser for argument values\nGet the version of the cmd.\nGet visible aliases for this argument, if any\nIterate through the <em>visible</em> aliases for this subcommand.\nIterate through the <em>visible</em> long aliases for this …\nGet the name if argument value is not hidden, <code>None</code> …\nGet visible short aliases for this argument, if any\nIterate through the <em>visible</em> short aliases for this …\nSpecifies that an argument can be matched to all child …\nApply a setting for the current command and all …\nThe name of the <code>ArgGroup</code> the argument belongs to.\nAdds an <code>ArgGroup</code> to the application.\nThe names of <code>ArgGroup</code>’s the argument belongs to.\nAdds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.\nReturns <code>true</code> if this <code>Command</code> has subcommands.\nSets the description of the argument for short help (<code>-h</code>).\nSets the help description of the value.\nPanic if help descriptions are omitted.\nOverride the current help section.\nDeprecated, replaced with <code>Command::next_help_heading</code>\nSets the help template to be used, overriding the default …\nDo not display the argument in help message.\nSpecifies that this <code>subcommand</code> should be hidden from help …\nHides this value from help and shell completions.\nDo not display the default value of the argument in the …\nHides an argument from long help (<code>--help</code>).\nDo not display the possible values in the help message.\nTells <code>clap</code> <em>not</em> to print possible values when displaying …\nHides an argument from short help (<code>-h</code>).\nSet the identifier used for referencing this argument in …\nSets the group name.\nMatch values against <code>Arg::possible_values</code> without matching …\nTry not to fail on parse errors, like missing option …\nSpecifies the index of a positional argument <strong>starting at</strong> 1.\nAllow partial matches of long arguments or their aliases.\nAllow partial matches of subcommand names and their aliases…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReport whether <code>Command::allow_external_subcommands</code> is set\nReport whether <code>Arg::allow_hyphen_values</code> is set\nReport whether …\nDeprecated, replaced with [<code>Arg::get_value_parser()</code>\nReport whether <code>Command::allow_missing_positional</code> is set\nReport whether <code>Command::allow_negative_numbers</code> is set\nReport whether <code>Command::arg_required_else_help</code> is set\nReport whether <code>Command::args_conflicts_with_subcommands</code> is …\nReport whether <code>Command::disable_colored_help</code> is set\nReport whether <code>Command::disable_help_flag</code> is set\nReport whether <code>Command::disable_help_subcommand</code> is set\nReport whether <code>Command::disable_version_flag</code> is set\nReport whether <code>Command::dont_collapse_args_in_usage</code> is set\nReport whether <code>Command::dont_delimit_trailing_values</code> is set\nReports whether <code>Arg::exclusive</code> is set\nDeprecated, replaced with <code>Arg::get_value_parser()</code>\nReport whether <code>Arg::global</code> is set\nDeprecated, replaced with <code>PossibleValue::is_hide_set</code>\nReport whether <code>Arg::hide_default_value</code> is set\nReport whether <code>Arg::hide_long_help</code> is set\nReport whether <code>Arg::hide_possible_values</code> is set\nReport whether <code>Arg::hide</code> is set\nReport whether <code>Command::hide</code> is set\nReport if <code>PossibleValue::hide</code> is set\nReport whether <code>Arg::hide_short_help</code> is set\nReports whether <code>Arg::ignore_case</code> is set\nReports whether <code>Arg::last</code> is set\nReport whether <code>Command::multicall</code> is set\n<code>Arg::multiple_occurrences</code> is going away  (Issue #3772)\nReport whether <code>Arg::multiple_values</code> is set\nReport whether <code>Arg::next_line_help</code> is set\nReport whether <code>Command::next_line_help</code> is set\nReport whether <code>Command::no_binary_name</code> is set\nChecks whether this argument is a positional or not.\nReport whether <code>Command::propagate_version</code> is set\nReport whether <code>Arg::require_equals</code> is set\nReport whether <code>Arg::require_value_delimiter</code> is set\nReports whether <code>Arg::required</code> is set\nCheck if the <code>ArgSettings</code> variant is currently set on the …\nCheck if the given <code>AppSettings</code> variant is currently set on …\nReport whether <code>Command::subcommand_negates_reqs</code> is set\nReport whether <code>Command::subcommand_precedence_over_arg</code> is …\nReport whether <code>Command::subcommand_required</code> is set\nReport whether <code>Arg::is_takes_value_set</code> is set\nReport whether <code>Command::trailing_var_arg</code> is set\nReport whether <code>Arg::use_value_delimiter</code> is set\nThis arg is the last, or final, positional argument (i.e. …\nSets the long version of the argument without the …\nSets the program’s description for the long help (<code>--help</code>…\nSets the long version of the subcommand flag without the …\nAdd an alias, which functions as a “hidden” long flag …\nAdd aliases, which function as “hidden” long flag …\nSets the description of the argument for long help (<code>--help</code>…\nSets the version for the long version (<code>--version</code>) and help …\nAdapt a <code>TypedValueParser</code> from one value to another\nAdapt a <code>TypedValueParser</code> from one value to another\nTests if the value is valid for this argument value\nDeprecated, for flags, this is replaced with …\nSets the maximum terminal width at which to wrap help …\nThe <em>maximum</em> number of values are for this argument.\nThe <em>minimum</em> number of values for this argument.\nMultiple-personality program dispatched on the binary name …\nAllows more than one of the <code>Arg</code>s in this group to be used. …\nDeprecated, replaced with <code>Arg::action</code> (Issue #3772)\nSpecifies that the argument may have an unknown number of …\nAllows one to mutate an <code>Arg</code> after it’s been added to a …\nAllows one to mutate a <code>Command</code> after it’s been added as …\nDeprecated, replaced with <code>Arg::id</code> to avoid confusion with …\nDeprecated, replaced with <code>ArgGroup::id</code>\n(Re)Sets the program’s name.\nCustom parser for argument values\nCreate a new <code>Arg</code> with a unique name.\nCreate a <code>ArgGroup</code> using a unique name.\nCreates a new instance of an <code>Command</code>.\nCreate a <code>PossibleValue</code> with its name.\nImplementation for <code>ValueParser::string</code>\nImplementation for <code>ValueParser::os_string</code>\nImplementation for <code>ValueParser::path_buf</code>\nParse an <code>ValueEnum</code>\nVerify the value is from an enumerated set pf <code>PossibleValue</code>…\nSelect full range of <code>i64</code>\nSelect full range of <code>u64</code>\nImplementation for <code>ValueParser::bool</code>\nParse false-like string values, everything else is <code>true</code>\nParse bool-like string values, everything else is <code>true</code>\nParse non-empty string values\nChange the starting value for assigning future display …\nSet the default section heading for future args.\nRender the help on the line after the argument.\nPlaces the help string for all arguments and subcommands …\nSpecifies that the parser should not assume the first …\nThe number of values allowed for this argument.\n<code>OsString</code> parser for argument values\nOverrides the <code>clap</code> generated help message (both <code>-h</code> and …\nOverrides the <code>clap</code> generated usage string for help and …\nSets an overridable argument.\nSets multiple mutually overridable arguments by name.\nParse the argument value\nParse the argument value\nParse the argument value\n<code>PathBuf</code> parser for argument values\nDeprecated, replaced with […\nReflect on enumerated value properties\nReflect on enumerated value properties\nReflect on enumerated value properties\nDeprecated, replaced with […\nPrints the short help message (<code>-h</code>) to <code>io::stdout()</code>.\nPrints the long help message (<code>--help</code>) to <code>io::stdout()</code>.\nSpecifies to use the version of the current command for …\nNarrow the supported range\nNarrow the supported range\nConsume all following arguments.\nVersion message rendered as if the user ran <code>--version</code>.\nUsage statement\nVersion message rendered as if the user ran <code>-V</code>.\nDeprecated, replaced with <code>Arg::require_value_delimiter</code>\nRequires that options use the <code>--option=val</code> syntax\nSpecifies that <em>multiple values</em> may only be set using the …\nSpecifies that the argument must be present.\nRequire an argument from the group to be present when …\nThis argument is required only if the specified <code>arg</code> is …\nSpecify this argument is required based on multiple …\nSpecify this argument is required based on multiple …\nSet this arg as required as long as the specified argument …\nSets this arg as required unless <em>all</em> of the specified …\nSets this arg as required unless <em>any</em> of the specified …\nSets an argument that is required when this one is present\nSpecify an argument or group that must be present when …\nRequire these arguments names when this one is presen\nSpecify arguments or groups that must be present when this …\nRequire another argument if this arg was present at …\nAllows multiple conditional requirements.\nSet binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.\nApply a setting to the argument.\nApply a setting for the current command or subcommand.\nSets the short version of the argument without the …\nAdd an alias, which functions as a hidden short flag.\nAdd aliases, which functions as a hidden short flag.\nSets the short version of the subcommand flag without the …\nAdd an alias, which functions as  “hidden” short flag …\nAdd aliases, which function as “hidden” short flag …\n<code>String</code> parser for argument values\nAdds a subcommand to the list of valid possibilities.\nSets the help heading used for subcommands when printing …\nAllows <code>subcommands</code> to override all requirements of the …\nPrevent subcommands from being consumed as an arguments …\nIf no <code>subcommand</code> is present at runtime, error and exit …\nSets the value name used for subcommands when printing …\nAdds multiple subcommands to the list of valid …\nSpecifies that the argument takes a value at run time.\nReturns whether this action accepts values on the …\nSets the terminal width at which to wrap help messages.\nSpecifies that the final positional argument is a “VarArg…\nParse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.\nParse the specified arguments, returning a <code>clap::Result</code> on …\nParse the specified arguments, returning a <code>clap::Result</code> on …\nDescribes the content of <code>AnyValue</code>\nRemove a setting and stop propagating down to subcommands.\nRemove a setting from the argument.\nRemove a setting for the current command or subcommand.\nDeprecated, replaced with <code>Arg::use_value_delimiter</code>\nSpecifies that an argument should allow grouping of …\nDeprecated, replaced with [<code>Arg::value_parser(...)</code>]\nDeprecated, replaced with [<code>Arg::value_parser(...)</code>]\nSeparator between the arguments values, defaults to <code>,</code> …\nProvide the shell a hint about how to complete this …\nPlaceholder for the argument’s value in the help message …\nPlaceholders for the argument’s values in the help …\nCreate the specified <code>Self::Parser</code>\nSpecify the type of the argument.\nSentinel to <strong>stop</strong> parsing multiple values of a give …\nSets the version for the short version (<code>-V</code>) and help …\nAdd an alias, which functions as a visible long flag.\nSets a visible alias to this subcommand.\nAdd aliases, which function as visible long flags.\nSets multiple visible aliases to this subcommand.\nAdd an alias, which functions as a “visible” long flag …\nAdd aliases, which function as <em>visible</em> long flag …\nAdd an alias, which functions as a visible short flag.\nAdd aliases, which function as visible short flags.\nAdd an alias, which functions as  “visible” short flag …\nAdd aliases, which function as <em>visible</em> short flag …\nWrites the short help message (<code>-h</code>) to a <code>io::Write</code> object.\nWrites the long help message (<code>--help</code>) to a <code>io::Write</code> …\nNumber of occurrences present\nNumber of values present\nOccurs when the user provides two values which conflict …\nOccurs when using the <code>ArgMatches::value_of_t</code> and friends …\nA single value\nSemantics for a piece of error information\nA piece of error information\nAn opaque message to the user\nNot a true “error” as it means <code>--help</code> or similar was …\nOccurs when either an argument or a <code>Subcommand</code> is …\nNot a true “error” as it means <code>--version</code> or similar …\nOccurs when the user provides an empty value for an option …\nContains the error value\nCommand Line Argument Parser Error\nCommand line argument parser kind of error\nNumber of allowed values\nRepresents a Format error (which is a part of <code>Display</code>). …\nThe cause of the error\nThe cause of the error\nOccurs when the user provides an unrecognized <code>Subcommand</code> …\nOccurs when the user provides a value containing invalid …\nRejected values\nOccurs when an <code>Arg</code> has a set of possible values, and the …\nRepresents an I/O error. Can occur when writing to <code>stderr</code> …\nMaximum number of allowed occurrences\nMinimum number of allowed values\nOccurs when the user does not provide one or more required …\nOccurs when a subcommand is required (as defined by …\nOccurs when the user doesn’t use equals for an option …\n<code>ContextKind</code> is self-sufficient, no additional information …\nA single value\nContains the success value\nExisting arguments\nShort hand for <code>Result</code> type\nA single value\nMany values\nPotential fix for the user\nPotential fix for the user\nPotential fix for the user\nPotential fix for the user\nOccurs when the user provides fewer values for an argument …\nOccurs when a user provides more occurrences for an …\nOccurs when a user provides more values for an argument …\nTrailing argument\nOccurs when the user provides multiple values to an …\nOccurs when a user provides a flag, option, argument or …\nOccurs when the user provides an unrecognized <code>Subcommand</code> …\nA usage string\nAccepted values\nOccurs when the user provides a value for an argument with …\nOccurs when the user provides a different number of values …\nEnd-user description of the error case, where relevant\nAdditional information to further qualify the error\nPrints the error and exits.\nFormat the existing message with the Command’s context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeprecated, replaced with <code>Error::context()</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of error for programmatic processing\nDeprecated, replaced with <code>Error::kind()</code>\nPrints formatted and colored error to <code>stdout</code> or <code>stderr</code> …\nCreate an unformatted error\nShould the message be written to <code>stdout</code> or not?\nContainer for parse results.\nValue was passed in on the command-line\nValue came <code>Arg::default_value</code>\nFailed to downcast <code>AnyValue</code> to the specified type\nValue came [<code>Arg::env</code>][crate::Arg::env]\nIterate over indices for where an argument appeared when …\nViolation of <code>ArgMatches</code> assumptions\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nIterate over raw argument values via <code>ArgMatches::get_raw</code>.\nArgument not defined in <code>Command</code>\nOrigin of the argument’s value\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nIterate over multiple values for an argument via …\nCheck if any args were present on the command line\nCheck if values are present for the argument or group id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value of a specific <code>ArgAction::Count</code> flag\nGets the value of a specific <code>ArgAction::SetTrue</code> or …\nIterate over values of a specific option or positional …\nGets the value of a specific option or positional argument.\nIterate over the original argument values.\nThe first index of that an argument showed up.\nAll indices an argument appeared at when parsing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeprecated, replaced with <code>ArgAction::SetTrue</code> or …\nDeprecated, replaced with  <code>ArgAction::Count</code>, …\nReturn values of a specific option or positional argument.\nReturns the value of a specific option or positional …\nReturn the name and <code>ArgMatches</code> of the current subcommand.\nThe name and <code>ArgMatches</code> of the current subcommand.\nThe <code>ArgMatches</code> for the current subcommand.\nThe name of the current subcommand.\nNon-panicking version of <code>ArgMatches::contains_id</code>\nNon-panicking version of <code>ArgMatches::get_many</code>\nNon-panicking version of <code>ArgMatches::get_one</code>\nNon-panicking version of <code>ArgMatches::get_raw</code>\nNon-panicking version of <code>ArgMatches::remove_many</code>\nNon-panicking version of <code>ArgMatches::remove_one</code>\nDeprecated, replaced with <code>ArgMatches::get_one()</code>\nDeprecated, replaced with <code>ArgMatches::get_one()</code>\nDeprecated, replaced with <code>ArgMatches::get_one()</code>\nDeprecated, replaced with <code>ArgMatches::get_one()</code>\nDeprecated, replaced with <code>ArgMatches::get_one()</code>\nReport where argument value came from\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nDeprecated, replaced with <code>ArgMatches::get_many()</code>\nType for value stored in <code>ArgMatches</code>\nThe target type to downcast to")