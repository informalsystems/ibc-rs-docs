searchState.loadedDescShard("ark_groth16", 0, "An implementation of the <code>Groth16</code> zkSNARK.\nThe SNARK of [Groth16]…\nCreate a Groth16 proof using randomness <code>r</code> and <code>s</code> and the …\nCreate a Groth16 proof using randomness <code>r</code> and <code>s</code> and the …\nCreate a Groth16 proof that is <em>not</em> zero-knowledge with the …\nCreate a Groth16 proof that is zero-knowledge using the …\nData structures used by the prover, verifier, and …\nReturns the argument unchanged.\nCreate parameters for a circuit, given some toxic waste, …\nGenerates a random common reference string for a circuit …\nGenerate public parameters for the Groth16 zkSNARK …\nCalls <code>U::from(self)</code>.\nPrepare proof inputs for use with […\nCreate proofs for the Groth16 zkSNARK construction.\nReduce an R1CS instance to a <em>Quadratic Arithmetic Program</em> …\nGiven a Groth16 proof, returns a fresh proof of the same …\nVerify proofs for the Groth16 zkSNARK construction.\nVerify a Groth16 proof <code>proof</code> against the prepared …\nVerify a Groth16 proof <code>proof</code> against the prepared …\nPreprocessed verification key parameters that enable …\nA proof in the Groth16 SNARK.\nThe prover key for for the Groth16 zkSNARK.\nA verification key in the Groth16 SNARK.\nThe <code>A</code> element in <code>G1</code>.\nThe elements <code>a_i * G</code> in <code>E::G1</code>.\nThe <code>alpha * G</code>, where <code>G</code> is the generator of <code>E::G1</code>.\nThe element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.\nThe <code>B</code> element in <code>G2</code>.\nThe elements <code>b_i * G</code> in <code>E::G1</code>.\nThe elements <code>b_i * H</code> in <code>E::G2</code>.\nThe element <code>beta * G</code> in <code>E::G1</code>.\nThe <code>alpha * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.\nThe <code>C</code> element in <code>G1</code>.\nThe element <code>delta * G</code> in <code>E::G1</code>.\nThe <code>delta * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.\nThe element <code>- delta * H</code> in <code>E::G2</code>, prepared for use in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>gamma^{-1} * (beta * a_i + alpha * b_i + c_i) * H</code>, …\nThe <code>gamma * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.\nThe element <code>- gamma * H</code> in <code>E::G2</code>, prepared for use in …\nThe elements <code>h_i * G</code> in <code>E::G1</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe elements <code>l_i * G</code> in <code>E::G1</code>.\nThe unprepared verification key.\nThe underlying verification key.\nComputes the R1CS-to-QAP reduction defined in <code>libsnark</code>.\nComputes instance and witness reductions from R1CS to …\nComputes the inner product of <code>terms</code> with <code>assignment</code>.\nReturns the argument unchanged.\nComputes the exponents that the generator uses to …\nComputes a QAP instance corresponding to the R1CS instance …\nCalls <code>U::from(self)</code>.\nComputes a QAP witness corresponding to the R1CS witness …\nComputes a QAP witness corresponding to the R1CS witness …\nPrepare the verifying key <code>vk</code> for use in proof verification.")