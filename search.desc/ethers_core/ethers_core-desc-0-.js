searchState.loadedDescShard("ethers_core", 0, "ethers-core\nExtensions to the <code>ethabi</code> API.\nEthereum data types.\nVarious utilities\nAPI building calls to contracts ABI.\nAdditional trait for types that can appear in arrays\nTrait for ABI decoding\nTrait for ABI encoding\nABI codec related errors\nContract ABI and optional bytecode as JSON object\nA parser that turns a “human readable abi” into a <code>Abi</code>\nA trait for types that can be represented in the Ethereum …\nABI address.\nAddress.\nAddress.\nMatch any.\nArray of unknown size.\nArray of params with unknown size.\njson array input as <code>[]</code>\nBoolean.\nBoolean value.\nABI bytes.\nBytes.\nVector of bytes of unknown size.\nEither an input/output or a nested component of an …\nContract constructor specification.\nAPI building calls to contracts ABI.\nThrown when the ABI decoding fails\nThrown when detokenizing an argument\nOutput type possible to deserialize from Contract ABI\nAn error thrown by <code>encode_packed</code>.\nContains the error value\nEthabi errors\nExtension trait for <code>ethabi::AbiError</code>.\nContract event.\nExtension trait for <code>ethabi::Event</code>.\nEvent param specification.\nContract events iterator.\nArray with fixed size.\nArray with known size.\nABI fixed bytes.\nVector of bytes with fixed size.\nVector of bytes with known size.\nContract function specification.\nExtension trait for <code>ethabi::Function</code>.\nContract functions generated by ethabi-derive\nContract functions iterator.\nCommonly used FixedBytes of size 32\nHex string parsing error.\nABI signed integer.\nSigned integer.\nSigned integer.\nInvalid data.\nInvalid entity such as a bad function name.\nRepresents contract ABI input variants\nDecoded log.\nthe associated <code>Log</code> type that can be parsed from a <code>RawLog</code> …\nCommon filtering functions that are available for any …\nDecoded log param.\nFunction does not accept Ether - the default\njson object input as <code>{&quot;abi&quot;: [..], &quot;bin&quot;: &quot;...&quot;}</code>\nContains the success value\nMatch any of the hashes.\nOther errors.\nOutput types of the contract function\nFunction param.\nFunction and event param types.\nError that can occur during human readable parsing\nInteger parsing error.\ntrait common to things (events) that have an associated <code>Log</code>…\nFunction accepts Ether\nSpecified not to read blockchain state\nContract ABI as a list of items where each item can be a …\nEthereum log.\nRaw topic filter.\nEthabi result type\nSerialization error.\nWhether a function modifies or reads blockchain state\nString.\nString.\nMatch only this hash.\nEthereum ABI params.\nSimplified output type for single value.\nMarker trait for <code>Tokenizable</code> types that are can tokenized …\nConvert types into <code>Token</code>s.\nAcceptable topic possibilities.\nTopic filter.\nTuple containing different types\nTuple of params of variable types.\nTuple params specification\nABI unsigned integer.\nUnsigned integer.\nUnsigned integer.\nSpecified to not modify the blockchain state\nABI word.\nCompute the method signature in the standard ABI format. …\nCompute the event signature in human-readable format. The …\nCompute the method signature in the standard ABI format.\nIf anonymous, event cannot be found using <code>from</code> filter.\nReturns the bytecode object\nConstant function.\nCreates constructor call builder.\nContract constructor.\nContract constructor.\nOthers are just plain data.\nDecodes ABI compliant vector of bytes into vector of …\nDecodes the given bytes output for the contract function\nDecodes the ABI encoded data\nDecode hex encoded ABI encoded data\nDecode hex encoded ABI encoded data\nParses the ABI function input to a list of tokens.\nParses the ABI function output to list of tokens.\nDecodes ABI compliant vector of bytes into vector of …\nReturns the deployed bytecode object\nEncodes vector of tokens into ABI compliant vector of …\nABI encode the type\nReturns the encoded value as hex string, <em>with</em> a <code>0x</code> prefix\nReturns the encoded value as hex string, <em>with</em> a <code>0x</code> prefix\nPrepares ABI constructor call with given input params.\nPrepares ABI function call with given input params.\nEncodes the given tokens into an ABI compliant vector of …\nGet the contract error named <code>name</code>, the first if there are …\nIterate over all errors of the contract in arbitrary order.\nContract errors, maps signature to error.\nContract errors, maps signature to error.\nGet all errors named <code>name</code>.\nGet the contract event named <code>name</code>, the first if there are …\n(event name, idx) -&gt; struct which are the identifying …\nIterate over all events of the contract in arbitrary order.\nContract events, maps signature to event.\nContract events, maps signature to event.\nGet all contract events named <code>name</code>.\nContract has fallback function.\nContract has fallback function.\nCreates topic filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Token</code> into expected type.\nCreates a new instance from parsed ABI tokens.\nGet the function named <code>name</code>, the first if there are …\n(function name, param name) -&gt; struct which are the …\nIterate over all functions of the contract in arbitrary …\nContract functions.\nContract functions.\nGet all functions named <code>name</code>.\nIndexed flag. If true, param is used to build block bloom.\nIndexed flag. for solidity events\nConstructor input.\nEvent input.\nFunction input.\nAdditional Internal type.\nAdditional Internal type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts token to…\nConverts a specified type back into token.\nConverts <code>self</code> into a <code>Vec&lt;Token&gt;</code>.\nConverts token to…\nConverts token to…\nReturns true if topic is empty (Topic::Any)\nreturns whether a ParamType is dynamic used to decide how …\nCheck if the token is a dynamic type resulting in prefixed …\nreturns whether a zero length byte slice (<code>0x</code>) is a valid …\nParam type.\nParam type.\nParam type.\nLoads contract from json.\nReturns the full Keccak-256 hash of the signature of the …\nMap\nReturns the minimum number of bytes that <code>ty</code> takes up in …\nA hint of the minimum number of bytes this type takes up …\nEvent name.\nParam name.\nFunction name.\nDecoded log name.\nParam name.\nParam name.\nCreates a new instance of the lexer\nFunction output.\n(function name) -&gt; <code>Vec&lt;structs&gt;</code> all structs the function …\nFunction and event param types.\nThe native ABI type this type represents.\nLog params.\nParses a “human readable abi” string vector\nParses a “human readable abi” string vector\nParses a “human readable abi” string\nParses a Constructor from a human readable form\nParses a Function from a human readable form\nParses a solidity event declaration from …\nParses an Event from a human readable form\nReturns the parsed function from the input string\nParses a Function from a human readable form\nparse the associated <code>Log</code> type from a <code>RawLog</code>\nParses <code>RawLog</code> and retrieves all log params from it. …\nParses <code>RawLog</code> and retrieves all log params from it. Fails, …\nParses a “human readable abi” string\nParses the input into a ParamType\nContract has receive function.\nContract has receive function.\nCompute the Keccak256 function selector used by contract …\nCompute the Keccak256 error selector used by contract ABIs.\nReturns the first four bytes of the Keccak-256 hash of the …\nReturn the 4 byte short signature of this function.\nEvent signature\nReturns a signature that uniquely identifies this function.\nWhether the function reads or modifies blockchain state\nSolidity struct definition parsing support\nsolidity structs as tuples\nsolidity structs\nReturns the next <code>Constructor</code> and consumes the underlying …\nReturns the next <code>Error</code> and consumes the underlying tokens\nReturns the next <code>Function</code> and consumes the underlying …\nABI param and parsing for it.\nTopic.\nUsually (for not-anonymous transactions) the first topic …\nTopic.\nSecond topic.\nTopic.\nThird topic.\nFourth topic.\nIndexed event params are represented as log topics.\nCheck whether the type of the token matches the given …\nCheck if all the types of the tokens match the given …\nDecoded log value.\nMatch any log parameters.\nLink additional structs for parsing\nBloom hash type with 256 bytes (2048 bits) size.\nConversion from decimal string error\nThe error type for parsing numbers from strings.\nA list of error categories encountered when parsing …\nFixed-size uninterpreted hash type with 16 bytes (128 …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nA character in the input string is not valid for the given …\nChar not from range 0-9\nThe input length is not valid for the given radix.\nValue does not fit into type\nMaximum value.\nMaximum value.\nMaximum value.\nMaximum value.\nLittle-endian large integer type 128-bit unsigned integer.\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nLittle-endian large integer type Unsigned 64-bit integer.\nThe given radix is not supported.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nMultiplies two 128-bit integers to produce full 256-bit …\nMultiplies two 256-bit integers to produce full 512-bit …\nConditional compilation depending on whether …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nWhether this is zero.\nWhether this is zero.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the corresponding <code>FromStrRadixErrKind</code> for this …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nReturns the inner bytes array.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nAddress.\nArray of unknown size.\nBoolean.\nBytes.\nArray with fixed size.\nVector of bytes with fixed size.\nSigned integer.\nFunction and event param types.\nUsed to convert param type represented as a string to rust …\nString.\nTuple containing different types\nUnsigned integer.\nOutput formatter for param type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts string to param type.\nReturns string which is a formatted represenation of param.\nIf <code>serialize_tuple_contents</code> is <code>true</code>, tuples will be …\nRepresents elementary types, see <code>ParamType</code>\nA field declaration inside a struct\nA field declaration inside a struct\nMapping\nRepresents a solidity struct\nA non elementary type field, treated as user-defined struct\nRepresents a elementary field declaration inside a struct …\nRepresents the type of a field in a struct\nHow the type of a struct field is referenced\nA non elementary type field, represents a user defined …\nIf the struct only consists of elementary fields, this …\nAll the fields of this struct\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if a field with an empty name exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this field is an elementary <code>ParamType</code>.\nWhether this field is a mapping.\nWhether this field is a user-defined struct.\nName of this struct\nParse a struct field declaration\nParse a solidity struct definition\nAddress.\nArray of params with unknown size.\nBoolean value.\nVector of bytes of unknown size.\nArray with known size.\nVector of bytes with known size.\nSigned integer.\nTries to parse string as a token. Does not require string …\nTries to parse string as a token. Require string to …\nString.\nEthereum ABI params.\nThis trait should be used to parse string values as tokens.\nTuple of params of variable types.\nUnsigned integer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to parse a string as a token of given type.\nTries to parse a value as an address.\nTries to parse a value as a vector of tokens.\nTries to parse a value as a bool.\nTries to parse a value as bytes.\nTries to parse a value as a vector of tokens of fixed size.\nTries to parse a value as bytes.\nTries to parse a value as signed integer.\nTries to parse a value as a string.\nTried to parse a struct as a vector of tokens\nTries to parse a value as unsigned integer.\nAn <code>ethers-rs</code> internal crate.\nAn iterator over the variants of EthersCrate\nRepresents a generic Rust/Cargo project’s environment.\n“<code>&lt;self as kebab-case&gt;</code>”\nDetermines the crate paths to use by looking at the …\nReturns the <code>contract</code> crate’s <code>Path</code>.\nReturns the <code>core</code> crate’s <code>Path</code>.\n“::ethers::<code>&lt;self in ethers&gt;</code>”\n<code>&lt;ethers::*&gt;</code>\nReturns the <code>providers</code> crate’s <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe path on the file system, from an <code>ethers-rs</code> root …\nReturns an <code>EthersCrate</code>’s <code>Path</code> in the current project.\nReturns the <code>Path</code> in the current project.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether <code>crate_name</code> is the name of a file or …\nReturns whether the <code>crate</code> path identifier refers to the …\nCreates a new instance using the given manifest dir and …\nCreates a new instance using the the <code>CARGO_MANIFEST_DIR</code> …\n“<code>::&lt;self as snake_case&gt;</code>”\n<code>&lt;ethers_*&gt;</code>\nOpcode 0x1 - Addition operation\nOpcode 0x8 - Modulo addition operation\nOpcode 0x30 - Get address of currently executing account\nOpcode 0x16 - Bitwise AND operation\nSerde-friendly <code>AccountDiff</code> shadow.\nAction\nAn external action type.\nAn address type\nAn Ethereum Address\nA type that can either be an <code>Address</code> or <code>Bytes</code>.\nA vector of values\nA vector of values\nOpcode 0x31 - Get address of currently executing account\nOpcode 0x48 - Get the base fee\nOpcode 0x40 - Get the hash of one of the 256 most recent …\nOpcode 0x1A - Retrieve single byte from word\n<code>BadInstructions</code> is returned when given instruction is not …\n<code>BadJumpDestination</code> is returned when execution tried to move\nThe block type returned from RPC calls.\nBlock\nA block hash or block number.\nA block number or tag.\nBindings for block overrides in <code>debug_traceCall</code> options\nAd-Hoc trace API type\nBloom hash type with 256 bytes (2048 bits) size.\nA new value has been set.\nWhen builtin contract failed on input data\nbuilt-in tracer\nbuilt-in tracer\nWrapper type around Bytes to deserialize/serialize “0x”…\nA bytes type\nOpcode 0xF1 - Message-call into an account\nOpcode 0xF2 - Message-call into this account with …\nOpcode 0x37 - Copy input data in current environment to …\nOpcode 0x35 - Get input data of current environment\nOpcode 0x36 - Get size of input data in current environment\nOpcode 0x33 - Get caller address\nOpcode 0x34 - Get deposited value by the …\nOpcode 0x46 - Get the chain ID\nOpcode 0x39 - Copy code running in current environment to …\nOpcode 0x38 - Get size of code running in current …\nOpcode 0x41 - Get the block’s beneficiary address\nOpcode 0xF0 - Create a new account with associated code\nOpcode 0xF5 - Create a new account with associated code at …\nCall response\nCall\nCall\nContract call.\nCall\nCall code\nCall Result\nCall type.\nAn Ethereum EIP-155 chain.\nAn iterator over the variants of Chain\nValue changed.\nAux type for Diff::Changed.\nCreate response\nCreate\nCreate\nContract creation.\nCreate Result\nOpcode 0xF4 - Message-call into this account with an …\nOpcode 0x44 - Get the block’s difficulty\nOpcode 0x4 - Integer division operation\nOpcode 0x80 - Duplicate 1st stack item\nOpcode 0x89 - Duplicate 10th stack item\nOpcode 0x8A - Duplicate 11th stack item\nOpcode 0x8B - Duplicate 12th stack item\nOpcode 0x8C - Duplicate 13th stack item\nOpcode 0x8D - Duplicate 14th stack item\nOpcode 0x8E - Duplicate 15th stack item\nOpcode 0x8F - Duplicate 16th stack item\nOpcode 0x81 - Duplicate 2nd stack item\nOpcode 0x82 - Duplicate 3rd stack item\nOpcode 0x83 - Duplicate 4th stack item\nOpcode 0x84 - Duplicate 5th stack item\nOpcode 0x85 - Duplicate 6th stack item\nOpcode 0x86 - Duplicate 7th stack item\nOpcode 0x87 - Duplicate 8th stack item\nOpcode 0x88 - Duplicate 9th stack item\nMessage bytes\nWhen parsing a signature from string to hex\nDelegate call\nA value has been removed.\nSerde-friendly <code>Diff</code> shadow.\nOpcode 0x14 - Equality comparison\nOpcode 0xA - Exponential operation\nOpcode 0x3C - Copy an account’s code to memory\nOpcode 0x3F - Get hash of an account’s code\nOpcode 0x3B - Get size of an account’s code\nEarliest block (genesis)\nEmptyStep (AuthorityRound)\nHelper to classify the executed instruction\nExternal (attributed as part of an external protocol)\nFilter for\nRepresents the target range of blocks for the filter\nSupport for matching Filters\nFinalized block accepted as canonical\nOpcode 0x5A - Get the amount of available gas, including …\nOpcode 0x45 - Get the block’s gas limit\nOpcode 0x3A - Get price of gas in current environment\nOpcode 0x11 - Greater-than comparison\nAvailable built-in tracers\nAvailable tracers\nBindings for additional <code>debug_traceCall</code> options\nBindings for additional <code>debug_traceTransaction</code> options\nFixed-size uninterpreted hash type with 16 bytes (128 …\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nFixed-size uninterpreted hash type with 64 bytes (512 …\nA block hash\nMessage hash\nLittle-endian 256-bit signed integer.\nOpcode 0xFE - Designated invalid instruction\nOpcode 0x15 - Simple not operator\nError that occurs when the number is too large or too …\nReturned on evm internal error. Should never be ignored …\nWhen invalid code was attempted to deploy\nError that occurs when an invalid digit is encountered …\nInvalid length, secp256k1 signatures are 65 bytes\nWhen the code walks into a subroutine, that is not allowed\nWhen client is synced to highest block, eth_syncing with …\nWhen client is still syncing past blocks we get IsSyncing …\nOpcode 0x56 - Alter the program counter\nOpcode 0x5B - Mark a valid destination for jumps\nOpcode 0x57 - Conditionally alter the program counter\ncustom JS tracer\ncustom JS tracer\nInternal error during signature recovery\nThe instruction is recognized\nOpcode 0xA0 - Append log record with one topic\nOpcode 0xA1 - Append log record with two topics\nOpcode 0xA2 - Append log record with three topics\nOpcode 0xA3 - Append log record with four topics\nOpcode 0xA4 - Append log record with five topics\nOpcode 0x10 - Less-than comparison\nLatest block\nA log produced by a transaction.\nMaximum value.\nMinimum value.\nOpcode 0x51 - Load word from memory\nOpcode 0x6 - Modulo remainder operation\nOpcode 0x59 - Get the size of active memory in bytes\nOpcode 0x52 - Save word to memory\nOpcode 0x53 - Save byte to memory\nOpcode 0x2 - Multiplication operation\nOpcode 0x9 - Modulo multiplication operation\nA diff of some chunk of memory.\nWhen execution tries to modify the state in static context\nOpcode 0x19 - Bitwise NOT operation\nOpcode 0x43 - Get the block’s number\nAn ENS Name (format does not get checked)\nENS name or Ethereum Address. Not RLP encoded/serialized …\nLess than zero.\nNone\nNone\nA block number\nBlock by number from canon chain\nOpcode 0x17 - Bitwise OR operation\nOpcode 0x32 - Get execution origination address\nAn EVM Opcode.\nA type that is supposed to capture additional fields that …\nContract tried to access past the return data buffer.\n<code>OutOfGas</code> is returned when transaction execution runs out …\nWhen execution would exceed defined Stack Limit\nWhen execution would exceed defined subroutine Stack Limit\nOpcode 0x58 - Get the value of the program counter prior …\nOpcode 0x50 - Remove item from stack\nOpcode 0x5F - Place the constant value 0 on stack\nOpcode 0x60 - Place 1 byte item on stack\nOpcode 0x69 - Place 10 byte item on stack\nOpcode 0x6A - Place 11 byte item on stack\nOpcode 0x6B - Place 12 byte item on stack\nOpcode 0x6C - Place 13 byte item on stack\nOpcode 0x6D - Place 14 byte item on stack\nOpcode 0x6E - Place 15 byte item on stack\nOpcode 0x6F - Place 16 byte item on stack\nOpcode 0x70 - Place 17 byte item on stack\nOpcode 0x71 - Place 18 byte item on stack\nOpcode 0x72 - Place 19 byte item on stack\nOpcode 0x61 - Place 2 byte item on stack\nOpcode 0x73 - Place 20 byte item on stack\nOpcode 0x74 - Place 21 byte item on stack\nOpcode 0x75 - Place 22 byte item on stack\nOpcode 0x76 - Place 23 byte item on stack\nOpcode 0x77 - Place 24 byte item on stack\nOpcode 0x78 - Place 25 byte item on stack\nOpcode 0x79 - Place 26 byte item on stack\nOpcode 0x7A - Place 27 byte item on stack\nOpcode 0x7B - Place 28 byte item on stack\nOpcode 0x7C - Place 29 byte item on stack\nOpcode 0x62 - Place 3 byte item on stack\nOpcode 0x7D - Place 30 byte item on stack\nOpcode 0x7E - Place 31 byte item on stack\nOpcode 0x7F - Place 32 byte item on stack\nOpcode 0x63 - Place 4 byte item on stack\nOpcode 0x64 - Place 5 byte item on stack\nOpcode 0x65 - Place 6 byte item on stack\nOpcode 0x66 - Place 7 byte item on stack\nOpcode 0x67 - Place 8 byte item on stack\nOpcode 0x68 - Place 9 byte item on stack\nThe error type that is returned when parsing a 256-bit …\nA path type\nA type that can either be a <code>Path</code> or a <code>String</code>\nPending block (not yet part of the blockchain)\nGreater than or equal to zero.\nOpcode 0xF3 - Halt execution returning output data\nOpcode 0x3E - Copy output data from the previous call to …\nOpcode 0x3D - Get size of output data from the previous …\nOpcode 0xFD - Halt execution reverting state changes but …\nError in recovering public key from signature\nRecovery message data.\nResponse\nExecution has been reverted with REVERT instruction.\nReward action\nReward\nA block reward.\nReward type.\nOpcode 0x1D - Arithmetic (signed) right shift operation\nOpcode 0x5 - Signed integer division operation (truncated)\nOpcode 0x47 - Get balance of currently executing account\nOpcode 0xFF - Halt execution and register account for …\nOpcode 0x13 - Signed greater-than comparison\nOpcode 0x20 - Compute Keccak-256 hash\nOpcode 0x1B - Left shift operation\nOpcode 0x1C - Logical right shift operation\nOpcode 0xB - Extend length of two’s complement signed …\nOpcode 0x54 - Load word from storage\nOpcode 0x12 - Signed less-than comparison\nOpcode 0x7 - Signed modulo remainder operation\nOpcode 0x55 - Save word to storage\nOpcode 0xFA - Static message-call into an account\nOpcode 0x0 - Halts execution\nOpcode 0x3 - Subtraction operation\nOpcode 0x90 - Exchange 1st and 2nd stack items\nOpcode 0x99 - Exchange 1st and 11th stack items\nOpcode 0x9A - Exchange 1st and 12th stack items\nOpcode 0x9B - Exchange 1st and 13th stack items\nOpcode 0x9C - Exchange 1st and 14th stack items\nOpcode 0x9D - Exchange 1st and 15th stack items\nOpcode 0x9E - Exchange 1st and 16th stack items\nOpcode 0x9F - Exchange 1st and 17th stack items\nOpcode 0x91 - Exchange 1st and 3rd stack items\nOpcode 0x92 - Exchange 1st and 4th stack items\nOpcode 0x93 - Exchange 1st and 5th stack items\nOpcode 0x94 - Exchange 1st and 6th stack items\nOpcode 0x95 - Exchange 1st and 7th stack items\nOpcode 0x96 - Exchange 1st and 8th stack items\nOpcode 0x97 - Exchange 1st and 9th stack items\nOpcode 0x98 - Exchange 1st and 10th stack items\nSafe head block\nNo change.\nEnum to represent the sign of a 256-bit signed integer.\nAn ECDSA signature\nAn error involving a signature.\n<code>StackUnderflow</code> when there is not enough stack elements to …\nSerde-friendly <code>StateDiff</code> shadow.\nState Difference\nStatic call\nA diff of some storage value.\nA string type\nWhen there is not enough subroutine stack elements to …\nSuicide\nSuicide\nContract suicide.\nRepresents the sync status of the node\nStructure used in <code>eth_syncing</code> RPC\nOpcode 0x42 - Get the block’s timestamp\nError returned by <code>Block::time</code>.\nTimestamp is too large for <code>DateTime&lt;Utc&gt;</code>.\nTimestamp is zero.\nA single topic\nTrace-Filtering API trace type\nTransaction Trace\nTrace evm errors.\nTrace filter\nDescription of the type of trace to make\nTrace\nA transaction Hash Fixed-size uninterpreted hash type with …\nTransaction Pool Content\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nLittle-endian large integer type 128-bit unsigned integer.\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nLittle-endian large integer type Unsigned 64-bit integer.\nA wrapper for <code>u8</code>\nUncle\nThe instruction is not recognized\nA record of an executed VM operation.\nA record of the execution of a single VM operation.\nA record of a full VM trace for a CALL/CREATE.\nA single value\nA single value\nUnion type for representing a single value or a vector of …\nThrown when signature verification failed (i.e. when the …\nVirtual Machine Execution Trace\nWasm error\nA validator withdrawal from the consensus layer. See …\nOpcode 0x18 - Bitwise XOR operation\nComputes the absolute value of <code>self</code>.\nAction\nAction\nAction Type\nAction Type\nSets the inner filter object\nH160. the contract that emitted the log\nAddress\nAssigned address\nAddress.\nTarget address for withdrawn ether\nReturns the BloomFilter for the given address\nSets after offset\nValue of withdrawal (in wei)\nMaps Address(a) to Some(a) and Name to None.\nReturns the sign character.\nConversion to i128 with overflow checking.\nConversion to i16 with overflow checking.\nConversion to i32 with overflow checking.\nConversion to i64 with overflow checking.\nConversion to i8 with overflow checking.\nConversion to isize with overflow checking.\nMaps Name(n) to Some(n) and Address to None.\nReturns the numeric block number if explicitly set\nConversion to u128 with overflow checking.\nConversion to u16 with overflow checking.\nConversion to u32 with overflow checking.\nConversion to u64 with overflow checking.\nConversion to u8 with overflow checking.\nConversion to usize with overflow checking.\nArithmetic shift left operation. Computes <code>self &lt;&lt; rhs</code>, …\nArithmetic shift right operation. Computes <code>self &gt;&gt; rhs</code> …\nMiner/author’s address. None if pending.\nAuthor’s address.\nReturns the chain’s average blocktime, if applicable.\nBalance.\nAccount balance.\nBase fee per unit of gas (if past London)\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nBlob gas used (if past Cancun)\nBlock Hash\nBlock Hash\nBlock Number\nBlock Number\nFilter block options, specifying on which blocks the …\nReturn specific byte.\nThe type of the call.\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nCreates an I256 from an absolute value and a negative …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nCode\nAccount code.\nThe code to be executed.\nThe gas cost for this instruction.\nSets amount of traces to display\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nData\nThe changed data.\nDeserialized this type into another container type\nDifficulty\nCalculates the quotient of Euclidean division of <code>self</code> by …\nError, See also <code>TraceError</code>\nError\nReturns the chain’s blockchain explorer’s API key, …\nReturns the chain’s blockchain explorer’s API key …\nReturns the chain’s blockchain explorer and its API …\nGiven the event signature in string form, it hashes it and …\nHashes all event signatures and sets them as array to …\nInformation concerning the execution of the operation.\nExcess blob gas (if past Cancun)\nCreate <code>10**n</code> as this type.\nExtra data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSender\nSender\nPrevious value.\nSets from address\nSets From block\nConvert from a decimal string.\nConvert from a hexadecimal string.\nCoerces an unsigned integer into a signed one. If the …\nCreates a new <code>Bytes</code> from a static slice.\nConverts the given byte into the corresponding error …\nGas amount\nGas\nGas\nGas Limit\nGas Price\nThe target gas usage as per EIP-1559\nGas Used\nGas used\nGas used\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the deserialized value of the field, if it exists\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the numeric value of the <code>toBlock</code> field\nReturns the deserialized value of the field, if it exists. …\nReturns true if at least one topic is set\nHash of the block\nMonotonically increasing identifier issued by consensus …\nInitialization code\nInput data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this block that only holds transaction hashes …\nReturns the signed integer as a unsigned integer. If the …\nSplits a I256 into its absolute value and negative flag.\nReturns <code>true</code> if it’s “earliest”\nReturns <code>true</code> if it’s “finalized”\nReturns <code>true</code> if it’s “latest”\nReturns whether the chain implements EIP-1559 (with the …\nReturns whether the sign is negative.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if a numeric block number is set\nReturns <code>true</code> if it’s “pending”\nReturns whether the sign is positive.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if it’s “safe”\nReturns <code>true</code> if <code>self</code> is zero and <code>false</code> if the number is …\nWhich key in storage is changed.\nReturns the number of leading zeros in the binary …\nInteger of the log index position in the block. None if it…\nLog Type\nLogs bloom\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nLow word.\nReturns <code>true</code> if the bloom contains the address\nReturns <code>true</code> if the bloom matches the topics\nThe maximum value which can be inhabited by this type.\nIf altered, the memory delta.\nref …\nThe minimum value which can be inhabited by this type.\nMinus one (multiplicative inverse) of this type.\nMix Hash\nCreates a new empty <code>Bytes</code>.\nThe next block’s base fee, it is a function of parent …\nNonce\nAccount nonce.\nBlock number. None if pending.\nOffset into memory the change begins.\noldestBlock is returned as an unsigned integer up to geth …\nOne (multiplicative identity) of this type.\nThe opcode of the executed instruction\nThe operations executed.\nCaptures unknown fields such as additional fields used by …\nOutput bytes\nOutput Bytes\nComputes the absolute value of <code>self</code>.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> / <code>rhs</code>\nCalculates the quotient of Euclidean division …\nCreates an I256 from a sign and an absolute value. Returns …\nCalculates <code>self</code> * <code>rhs</code>\nNegates self, overflowing if this is equal to the minimum …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates <code>self</code> % <code>rhs</code>\nOverflowing Euclidean remainder. Calculates …\nShifts self left by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nCalculates <code>self</code> - <code>rhs</code>\nParent beacon block root (if past Cancun)\nHash of the parent\nThe program counter.\npending tx\npending tx\nnumber of pending tx\nRaises self to the power of <code>exp</code>, using exponentiation by …\nThe stack item placed, if any.\nqueued tx\nqueued tx\nnumber of queued tx\nR value\nReads the contents at path, or simply returns the string.\nTransactions receipts root hash\nRecovers the Ethereum address which was used to sign the …\nRecovers the ethereum address which was used to sign a …\nRetrieve the recovery ID.\nRefund address.\nCalculates the least nonnegative remainder of …\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nTrue when the log was removed, due to a chain …\nReplace None values - aka wildcards - for the log input …\nResult\nResult\nAn (optional) array of effective priority fee per gas data …\nReward type.\nS Value\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSeal fields\nSets the inner filter object\nSome convenient serde helpers\nReturns the sign of self.\nReturns a number representing sign of <code>self</code>.\nSize in bytes\nProvides types and methods for constructing an <code>eth_call</code> …\nState Difference\nState root hash\nAccount storage.\nThe altered storage value, if any.\nSubordinate trace of the CALL/CREATE if applicable.\nSubtraces\nSubtraces\nReturns whether the chain supports the <code>PUSH0</code> opcode or not.\nParse <code>Self::timestamp</code> into a <code>DateTime&lt;Utc&gt;</code>.\nTimestamp\nRecipient (None when contract creation)\nRecipient\nCurrent value.\nSets to address\nWrite to the slice in big-endian format.\nSets to block\nWrite to the slice in little-endian format.\nCopies and serializes <code>self</code> into a new <code>Vec</code> with the …\nSets topic0 (the event name for non-anonymous events)\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nReturns an iterator over all existing topics\ntopics: Array of 0 to 4 32 Bytes of indexed log arguments. …\nTopics\nReturns the BloomFilter for the given topics\nTotal difficulty\nTransaction Trace\nTrace address\nTrace address\ntracerConfig is slated for Geth v1.11.0 See …\nReturns the number of leading zeros in the binary …\nTransaction Hash\nTransaction hash\nTransaction Hash\nTransaction Index\nInteger of the transactions index position log was created …\nTransaction position\nTransactions\nTransactions root hash\nParses a raw signature which is expected to be 65 bytes …\nCompute the two’s complement of this number.\nConvert a floating point value to its nearest f64 integer.\nUncles’ hashes\nHash of the uncles\nComputes the absolute value of <code>self</code> without any wrapping …\nThe total gas used.\nV value\nWhat the value has been changed to.\nIndex of validator associated with withdrawal\nTransferred value\nTransferred Value\nValue\nReward amount.\nVerifies that signature on <code>message</code> was produced by <code>address</code>\nVirtual Machine Execution Trace\nWithdrawals (if past Shanghai)\nWithdrawals root hash (if past Shanghai)\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nZero (additive identity) of this type.\nVarious block number representations, See …\nHelper type to parse both <code>u64</code> and <code>U256</code>\nHelper type to deserialize sequence of numbers\nHelper type to parse numeric strings, <code>u64</code> and <code>U256</code>\nHelper type to parse numeric strings, <code>u64</code> and <code>U256</code>\nDeserializes a number from hex or int\nDeserializes a number from hex or int, but optionally\nDeserializes single integer params: <code>1, [1], [&quot;0x01&quot;]</code>\nSupports parsing block number as strings\nSupports parsing ethereum-types U64\nSupports parsing ethereum-types <code>Option&lt;U64&gt;</code>\nSupports parsing numbers as strings\nSupports parsing numbers as strings\nSupports parsing u64\nSupports parsing u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFollowing the spec the block parameter is either:\nSame as <code>lenient_block_number</code> but requires to be <code>[num; 1]</code>\nThe state elements to override for a particular account.\nState Diff\nState override\nA wrapper type that holds a complete state override set.\nWraps a map from storage slot to the overriden value.\nReturns a mutable reference to the <code>Account</code> in the map.\nReturns a state override set with a single element setting …\nOverride the account balance\nAccount balance\nReturns a state override set with a single element setting …\nOverride the code at the account\nAccount code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a state override set with a single element setting …\nOverride the account nonce\nAccount nonce\nReturns an empty state override set.\nReturns a state override set with a single element setting …\nAccount storage\nOverride the value of the account storage at the given …\nTransaction types\nTransaction types\nWhen decoding a transaction request from RLP\nAn error involving an EIP1559 transaction request.\nParameters for sending a transaction\nWhen recovering the address from a signature\nSets the <code>access_list</code> field in the transaction to the …\nSets the <code>chain_id</code> field in the transaction to the provided …\nChain ID (None for mainnet)\nSets the <code>data</code> field in the transaction to the provided …\nThe compiled code of a contract OR the first 4 bytes of …\nDecodes fields of the request starting at the RLP offset …\nDecodes the given RLP into a transaction, attempting to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nSender address or ENS name\nSets the <code>gas</code> field in the transaction to the provided value\nSupplied gas (None for sensible default)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>max_fee_per_gas</code> field in the transaction to the …\nRepresents the maximum amount that a user is willing to …\nSets the <code>max_priority_fee_per_gas</code> field in the transaction …\nRepresents the maximum tx fee that will go to the miner as …\nCreates an empty transaction request with all fields left …\nSets the <code>nonce</code> field in the transaction to the provided …\nTransaction nonce (None for next available nonce)\nGets the unsigned transaction’s RLP encoding\nProduces the RLP encoding of the transaction with the …\nSets the <code>to</code> field in the transaction to the provided value\nRecipient address (None for contract creation)\nSets the <code>value</code> field in the transaction to the provided …\nTransferred value (None for no transfer)\nWhen decoding a signed Eip1559 transaction\nWhen decoding a signed Eip2930 transaction\nWhen decoding a signed legacy transaction\nMissing transaction payload when decoding from RLP\nMissing transaction type when decoding from RLP\nError decoding the transaction type from the transaction’…\nThe TypedTransaction enum represents all Ethereum …\nAn error involving a typed transaction request.\nDecodes a signed TypedTransaction from a rlp encoded byte …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the transaction’s data with the included …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax cost of the transaction\nHashes the transaction’s data. Does not double-RLP encode\nAccess list\nAccess list item\nWhen decoding a transaction request from RLP\nAn error involving an EIP2930 transaction request.\nAn EIP-2930 transaction is a legacy transaction including …\nWhen recovering the address from a signature\nAccessed address\nDecodes the given RLP into a transaction, attempting to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduces the RLP encoding of the transaction with the …\nAccessed storage keys\nEip712 Domain attributes used in determining the domain …\nPre-computed value of the following expression:\nPre-computed value of the following expression:\nHelper methods for computing the typed data hash used in …\nRepresents the name and type pair\nAn EIP-712 error.\nUser defined error type;\nRepresents the EIP-712 typed data object.\nCustom types for <code>TypedData</code>\nThe EIP-155 chain id. The user-agent should refuse signing …\nReturns the current domain. The domain depends on the …\nSigning domain metadata. The signing domain is the …\nDefault implementation of the domain separator;\nEncodes an object by encoding and concatenating each of …\nWhen using the derive macro, this is the primary method …\nHash a typed message according to EIP-712. The returned …\nParse token into Eip712 compliant ABI encoding\nEncode a single field.\nEncodes the type of an object by encoding a comma …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes an object\nReturns the hashed encoded type of <code>primary_type</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert hash map of field names and types into a type hash …\nThe message to be signed.\nThe user readable name of signing domain, i.e. the name of …\nThe type of the message.\nA disambiguating salt for the protocol. This can be used …\nHash of the struct, according to EIP-712 definition of …\nThis method is used for calculating the hash of the type …\nThe custom types used by this message.\nThe address of the contract that will verify the signature.\nThe current major version of the signing domain. …\nWhen decoding a transaction request from RLP\nWhen recovering the address from a signature\nAn error involving a transaction request.\nParameters for sending a transaction\nSets the <code>chain_id</code> field in the transaction to the provided …\nChain ID (None for mainnet)\nSets the <code>data</code> field in the transaction to the provided …\nThe compiled code of a contract OR the first 4 bytes of …\nDecodes the given RLP into a transaction request, ignoring …\nDecodes the given RLP into a transaction, attempting to …\nDecodes RLP into a transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the transaction to the provided …\nSender address or ENS name\nSets the <code>gas</code> field in the transaction to the provided value\nSupplied gas (None for sensible default)\nSets the <code>gas_price</code> field in the transaction to the …\nGas price (None for sensible default)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an empty transaction request with all fields left …\nSets the <code>nonce</code> field in the transaction to the provided …\nTransaction nonce (None for next available nonce)\nConvenience function for sending a new payment transaction …\nGets the transaction’s RLP encoding, prepared with the …\nProduces the RLP encoding of the transaction with the …\nGets the unsigned transaction’s RLP encoding\nHashes the transaction’s data with the provided chain id\nSets the <code>to</code> field in the transaction to the provided value\nRecipient address (None for contract creation)\nSets the <code>value</code> field in the transaction to the provided …\nTransferred value (None for no transfer)\nSets the <code>access_list</code> field in the transaction (converts …\nDetails of a signed transaction\n“Receipt” of an executed transaction: details of its …\nBlock hash. None when pending.\nHash of the block this transaction was included within.\nBlock number. None when pending.\nNumber of the block this transaction was included within.\nContract address created, or <code>None</code> if not a deployment.\nCumulative gas used within the block after this was …\nThe price paid post-execution by the transaction (i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSender\naddress of the sender.\nGas amount\nGas Price, null for Type 2 transactions\nGas used by this transaction alone.\nThe transaction’s hash\nInput data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs generated within this transaction.\nLogs bloom\nRepresents the maximum amount that a user is willing to …\nRepresents the maximum tx fee that will go to the miner as …\nThe transaction’s nonce\nCaptures unknown fields such as additional fields used by …\nCaptures unknown fields such as additional fields used by …\nECDSA signature r\nRecover the sender of the tx from signature\nRecover the sender of the tx from signature and set the …\nState root. Only present before activation of EIP-658\nECDSA signature s\nStatus: either 1 (success) or 0 (failure). Only present …\nRecipient (None when contract creation)\nTransaction hash.\nTransaction Index. None when pending.\nIndex within the block.\nTransaction type, Some(2) for EIP-1559 transaction, …\nTransaction type, Some(1) for AccessList transaction, None …\nECDSA recovery id\nTransferred value\nBuilder for launching <code>anvil</code>.\nAn anvil CLI instance. Will close the instance when …\nRepresents a node’s chain configuration.\nConsensus configuration for Clique.\nThe default max priority fee per gas, used in case the …\nThe number of blocks from the past for which the fee …\nThe threshold for base fee below which we use the default …\nThe default percentile of gas premiums that are fetched …\nThe threshold max change/difference (in %) at which we …\nEmpty consensus configuration for proof-of-work networks.\nEther is equivalent to 1e18 wei.\nBuilder for launching <code>ganache-cli</code>.\nA ganache CLI instance. Will close the instance when …\nThis represents the chain configuration, specifying the …\nAn account in the state of the genesis block.\nBuilder for launching <code>geth</code>.\nA geth instance. Will close the instance when dropped.\nGwei is equivalent to 1e9 wei.\nKwei is equivalent to 1e3 wei.\nMwei is equivalent to 1e6 wei.\nOther less frequent unit sizes, equivalent to 1e{0} wei.\nThis enum holds the numeric types that a possible to be …\nPwei is equivalent to 1e15 wei.\nTwei is equivalent to 1e12 wei.\nCommon Ethereum unit types.\n1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei\nWei is equivalent to 1 wei.\nReturns the addresses used to instantiate this instance\nReturns the addresses used to instantiate this instance\nThe initial state of the genesis block.\nAdds an argument to pass to the <code>ganache-cli</code>.\nAdds an argument to pass to the <code>anvil</code>.\nAdds multiple arguments to pass to the <code>ganache-cli</code>.\nAdds multiple arguments to pass to the <code>anvil</code>.\nThe Arrow Glacier hard fork block.\nCreates a Geth builder which will execute <code>geth</code> at the …\nCreates an Anvil builder which will execute <code>anvil</code> at the …\nSets the port for authenticated RPC connections.\nThe base fee\nThe Berlin hard fork block.\nSets the block-time which will be used when the <code>ganache-cli</code>…\nSets the block-time which will be used when the <code>geth-cli</code> …\nSets the block-time in seconds which will be used when the …\nThe Byzantium hard fork block.\nCancun switch time.\nReturns the chain of the anvil instance\nSets the chain id for the geth instance.\nSets the chain_id the <code>anvil</code> instance will use.\nThe network’s chain ID.\nClique parameters.\nReturns the private key used to configure clique on this …\nThe genesis header coinbase address.\nThe fork configuration for this network.\nThe Constantinople hard fork block.\nThe DAO fork switch block (None = no fork).\nWhether or not the node supports the DAO hard-fork.\nReturns the path to this instances’ data directory\nSets the data directory for geth.\nThe genesis header difficulty.\nDisable discovery for the geth instance.\nThe EIP-150 hard fork block (None = no fork).\nThe EIP-150 hard fork hash.\nThe default EIP-1559 fee estimator which is based on the …\nThe EIP-155 hard fork block.\nThe EIP-158 hard fork block.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint of this instance\nEpoch length to reset votes and checkpoints.\nEthash parameters.\nThe genesis header extra data.\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns a bytes32 string representation of text. If the …\nFormat the output for the user which prefer to see values …\nDivides the provided amount with 10^{units} provided.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a Bytes value into a H256, accepting inputs that …\nDeserializes the input into an Option&lt;HashMap&lt;H256, …\nThe genesis header gas limit.\nThe block gas gasUsed\nReturns the genesis configuration used to configure this …\nSets the <code>genesis.json</code> for the geth instance.\nThe address for an Ethereum contract is deterministically …\nReturns the CREATE2 address of a smart contract as …\nReturns the CREATE2 address of a smart contract as …\nThe Gray Glacier hard fork block.\nHash a message according to EIP-191 (version <code>0x01</code>).\nRe-export hex\nThe homestead switch block (None = no fork, 0 = already …\nCalculate the function selector as per the contract ABI …\nAllow geth to unlock accounts when rpc apis are open.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the path to this instances’ IPC socket\nManually sets the IPC path for the socket manually.\nReturns whether the node is launched in Clique consensus …\nThe Istanbul hard fork block.\nCompute the Keccak-256 hash of input bytes.\nReturns the private keys used to instantiate this instance\nReturns the private keys used to instantiate this instance\nThe London hard fork block.\nVirtual fork after the merge to use as a network splitter.\nThe genesis header mix hash.\nSets the mnemonic which will be used when the <code>ganache-cli</code> …\nSets the mnemonic which will be used when the <code>anvil</code> …\nMoonbeam utils Moonbeam utilities\nThe Muir Glacier hard fork block.\nCreates an empty Ganache builder. The default port is …\nCreates an empty Geth builder.\nCreates a chain config using the given chain id. and funds …\nCreates an empty Anvil builder. The default port is 8545. …\nThe genesis header nonce.\nThe block number\nReturns the p2p port of this instance\nSets the port which will be used for incoming p2p …\nThe block parent hash\nReturns the decoded string represented by the bytes32 …\nParses an EIP-1191 checksum address.\nConverts the input to a U256 and converts from Ether to …\nMultiplies the provided amount with 10^{units} provided.\nSets the <code>path</code> to the <code>geth</code> executable\nSets the <code>path</code> to the <code>anvil</code> cli\nNumber of seconds between blocks to enforce.\nThe Petersburg hard fork block.\nReturns the port of this instance\nReturns the port of this instance\nSets the port which will be used when the <code>ganache-cli</code> …\nReturns the port of this instance\nSets the port which will be used when the <code>geth-cli</code> …\nSets the port which will be used when the <code>anvil</code> instance …\nConverts an public key, in compressed or uncompressed form …\nConvert a raw, uncompressed public key to an address.\nRe-export RLP\nConverts a K256 SigningKey to an Ethereum Address\nSerialize a type.\nSets the Clique Private Key to the <code>geth</code> executable, which …\nShanghai switch time.\nConsumes the builder and spawns <code>ganache-cli</code>.\nConsumes the builder and spawns <code>geth</code>.\nConsumes the builder and spawns <code>anvil</code>.\nSets the startup timeout which will be used when the …\nTakes the stderr contained in the child process.\nTotal difficulty reached that triggers the merge consensus …\nA flag specifying that the network already passed the …\nSets the timeout which will be used when the <code>anvil</code> …\nThe genesis header timestamp.\nEncodes an Ethereum address to its EIP-55 checksum.\nBlocks until geth adds the specified peer, using 20s as …\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nReturns the Websocket endpoint of this instance\nHolds private developer keys with their names\nReturns the private developer keys …\nReturns the argument unchanged.\nGet a key by then, like <code>Alith</code>\nCalls <code>U::from(self)</code>.")