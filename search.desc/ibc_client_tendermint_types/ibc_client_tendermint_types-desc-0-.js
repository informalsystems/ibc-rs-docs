searchState.loadedDescShard("ibc_client_tendermint_types", 0, "ICS-07: Tendermint Client implements a client verification …\nDefines data structure for Tendermint client state.\nDefines the Tendermint light client’s consensus state\nTendermint consensus header\nTendermint light client’s misbehaviour type\nConstant for a trust threshold of 1/3.\nConstant for a trust threshold of 2/3.\n<code>TrustThreshold</code> defines the level of trust that a client has\nConstant for a trust threshold of 0/0.\nHelper method to produce a <code>Options</code> struct for use in …\n<code>header.trusted_next_validator_set</code> was given to us by the …\nReturns the tendermint <code>ClientType</code>\nThe denominator of the fraction underlying this trust …\nDefines the Tendermint light client’s error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Tendermint <code>ClientState</code> by given …\nInstantiate a TrustThreshold with the given denominator and\nThe numerator of the fraction underlying this trust …\nRe-exports ICS-07 Tendermint light client from <code>ibc-proto</code> …\nGet the refresh time to ensure the state does not expire\nChecks if the fields of a given header are consistent with …\ncurrent timestamp minus the latest consensus state …\nThe main error type\ninvalid header, failed basic validation: <code>{reason}</code>, error: …\nheader revision height = <code>{height}</code> is invalid\ninvalid header timestamp: <code>{0}</code>\ninvalid identifier: <code>{0}</code>\ninvalid client state latest height: <code>{reason}</code>\ninvalid client state max clock drift: <code>{reason}</code>\ninvalid client proof specs: <code>{0}</code>\ninvalid raw client state: <code>{reason}</code>\ninvalid raw header error: <code>{0}</code>\ninvalid raw misbehaviour: <code>{reason}</code>\ninvalid tendermint client state trust threshold error: <code>{0}</code>\ninvalid client state trust threshold: <code>{reason}</code>\nheaders block hashes are equal\nheaders are not at the same height and are monotonically …\nthe given chain-id (<code>{given}</code>) does not match the chain-id …\nthe header’s trusted revision number (<code>{trusted_revision}</code>…\nThe given hash of the validators does not match the given …\nfrozen height is missing\nmissing the latest height\nmissing signed header\nmissing trusted height\nmissing trusted next validator set\nmissing trusting period\nmissing unbonding period\nmissing validator set\nnegative max clock drift\nnot enough trust because insufficient validators overlap: …\nProcessed time or height for the client <code>{client_id}</code> at …\ninvalid header, failed basic validation: <code>{reason}</code>\nverification failed: <code>{detail}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientState from Tendermint tracks the current validator …\nConsensusState defines the consensus state from Tendermint.\nFraction defines the protobuf message type for …\nHeader defines the Tendermint client consensus Header. It …\nMisbehaviour is a wrapper over two conflicting Headers …\nallow_update_after_expiry is deprecated\nallow_update_after_misbehaviour is deprecated\nClientID is deprecated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock height when the client was frozen due to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatest height the client was updated to\ndefines how much new (untrusted) header’s Time can drift …\nProof specifications used in verifying counterparty state\ncommitment root (i.e app hash)\ntimestamp that corresponds to the block height in which …\nduration of the period since the LastestTimestamp during …\nduration of the staking unbonding period\nPath at which next upgraded client will be committed. Each …")