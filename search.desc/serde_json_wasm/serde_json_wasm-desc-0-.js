searchState.loadedDescShard("serde_json_wasm", 0, "<code>serde-json</code> for <code>wasm</code> programs\nDeserialize JSON data to a Rust data structure\nDeserializes an instance of type <code>T</code> from bytes of JSON text\nDeserializes an instance of type T from a string of JSON …\nSerialize a Rust data structure into JSON data\nSerializes the given data structure as a string of JSON …\nSerializes the given data structure as a JSON byte vector\nControl character (U+0000 to U+001F) found in string. …\nCustom error message from serde\nDeserializer will parse serde-json-wasm flavored JSON into …\nEOF while parsing a list.\nEOF while parsing an object.\nEOF while parsing a string.\nEOF while parsing a JSON value.\nContains the error value\nThis type represents all possible errors that can occur …\nExpected this character to be a <code>&#39;:&#39;</code>.\nExpected a high surrogate (D800–DBFF) but found …\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>&#39;]&#39;</code>.\nExpected a low surrogate (DC00–DFFF) but found something …\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>&#39;}&#39;</code>.\nExpected to parse either a <code>true</code>, <code>false</code>, or a <code>null</code>.\nExpected this character to start a JSON value.\nInvalid escape sequence\nInvalid number.\nInvalid type\nInvalid unicode code point.\nObject key is not a string.\nFound a lone surrogate, which can exist in JSON but cannot …\nContains the success value\nJSON is nested too deeply, exceeded the recursion limit.\nDeserialization result\nJSON has non-whitespace trailing characters after the …\nJSON has a comma after the last value in an array or map.\nUnsupported\nUnsupported\nUsed to throw out fields from JSON objects that we don’t …\nUnsupported. We can’t parse newtypes because we don’t …\nResolves “null” to ()\nResolves “null” to requested unit struct\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes an instance of type <code>T</code> from bytes of JSON text\nDeserializes an instance of type T from a string of JSON …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuffer is full\nCustom error message from serde\nContains the error value\nThis type represents all possible errors that can occur …\nContains the success value\nSerialization result\nSerializer implements serde::ser::Serializer and allows us …\nUnreachable is a placeholder for features that are not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerializes the given data structure as a string of JSON …\nSerializes the given data structure as a JSON byte vector")