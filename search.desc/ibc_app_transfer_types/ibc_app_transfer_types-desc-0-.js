searchState.loadedDescShard("ibc_app_transfer_types", 0, "Implementation of the IBC fungible token transfer (ICS-20) …\nThe successful string, used for creating an …\nA type for representing token transfer amounts.\nA <code>Coin</code> type with an unprefixed denomination.\nThe “base” of a denomination.\nCoin defines a token with a denomination and an amount.\nMaximum value.\nModule identifier for the ICS20 application.\nRepresents the token transfer memo\nThe port identifier that the ICS20 applications typically …\nA <code>Coin</code> type with fully qualified <code>PrefixedDenom</code>.\nA type that contains the base denomination for ICS20 and …\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nRe-exports <code>U256</code> from <code>primitive-types</code> crate for convenience.\nICS20 application current version.\nComputes the absolute difference between self and other.\nReturns a successful acknowledgement status for the token …\nAdds the specified prefix to the path.\nAdds the specified prefix to the trace path.\nAmount\nAmount\nAmount\nAmount\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nBase denomination of the relayed fungible token.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte. Byte 0 is the least significant …\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nDenomination\nDenomination\nDenomination\nDenomination\nReturns a pair <code>(self / other, self % other)</code>.\nReturn empty trace path\nDefines the token transfer error type\nDefines all token transfer event types\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nInitializes a <code>PrefixedDenom</code> from a string that adheres to …\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the path is empty and false otherwise.\nReturns true if the denomination originally came from the …\nReturns true if the denomination originally came from the …\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nDefines the token transfer message type\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nContains the <code>PacketData</code> type that defines the structure of …\nFast exponentiation by squaring …\nRe-exports ICS-20 token transfer proto types from the …\nRemoves the specified prefix from the path if there is a …\nRemoves the specified prefix from the trace path if there …\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nReturns true iff this path starts with the specified prefix\nReturns a string slice with <code>TracePrefix</code> removed.\nConvert to big-endian bytes.\nConvert to little-endian bytes.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns the number of trailing zeros in the binary …\nReturns a string slice with <code>TracePath</code> or all <code>TracePrefix</code>es …\nWrite to the slice in big-endian format.\nZero (additive identity) of this type.\nchannel error: {0}\ndecoding error: {0}\nfailed to deserialize acknowledgement\nfailed to deserialize packet data\nhost error: {0}\ninvalid channel state: cannot be closed\nmismatched channel orders: expected <code>{expected}</code>, actual …\nmismatched port IDs: expected <code>{expected}</code>, actual <code>{actual}</code>\nmissing destination channel <code>{channel_id}</code> on port <code>{port_id}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the token transfer message type\nMessage used to build an ICS20 token transfer packet.\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntoken transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocation defines the spend limit for a particular port …\nDenomTrace contains the base denomination for ICS20 …\nGenesisState defines the ibc-transfer genesis state\nMsgTransfer defines a msg to transfer fungible tokens (i.e …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nParams defines the set of IBC transfer parameters. NOTE: …\nQueryDenomHashRequest is the request type for the …\nQueryDenomHashResponse is the response type for the …\nQueryDenomTraceRequest is the request type for the …\nQueryDenomTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryConnectionsResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is the request type for the …\nQueryParamsResponse is the response type for the …\nQueryTotalEscrowForDenomRequest is the request type for …\nQueryTotalEscrowForDenomResponse is the response type for …\nTransferAuthorization allows the grantee to spend up to …\nport and channel amounts\nallow list of receivers, an empty allow list permits any …\nallow list of packet data keys, an empty list prohibits …\nbase denomination of the relayed fungible token.\nunique channel identifier\ndenom_trace returns the requested denomination trace …\ndenom_traces returns all denominations trace information.\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or denom (full denom with ibc prefix) …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\nGenerated client implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the transfer parameters to update.\nparams defines the parameters of the module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nGenerated client implementations.\nreceive_enabled enables or disables all cross-chain token …\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain token …\nthe sender address\nsequence number of the transfer packet sent\nsigner address\nthe channel by which the packet will be sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nthe port on which the packet will be sent\nspend limitation on the channel\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe tokens to be transferred\ntotal_escrowed contains the total amount of tokens escrowed\nThe denomination trace <code>([port_id]/[channel_id])+/[denom]</code>\nMsg defines the ibc/transfer Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a rpc handler for MsgUpdateParams.\nQuery provides defines the gRPC querier service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nDenomHash queries a denomination hash information.\nDenomTrace queries a denomination trace information.\nDenomTraces queries all denomination traces.\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the ibc-transfer module.\nCompress requests with the given encoding.\nTotalEscrowForDenom returns the total amount of tokens in …\nFungibleTokenPacketData defines a struct for the packet …\nthe token amount to be transferred\nthe token denomination to be transferred\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\noptional memo\nthe recipient address on the destination chain\nthe sender address")