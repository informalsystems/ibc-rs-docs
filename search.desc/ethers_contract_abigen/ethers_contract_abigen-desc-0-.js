searchState.loadedDescShard("ethers_contract_abigen", 0, "Abigen\nProgrammatically generate type-safe Rust bindings for an …\nType-safe contract bindings generated by Abigen.\nHelper to match <code>ethabi::Param</code>s with structs and nested …\nAn ABI located on the local file system.\nA source of an Ethereum smart contract’s ABI.\nA raw ABI string.\nAdd a custom derive to the derives for all structs and …\nAdd a Solidity custom error alias to specify the generated …\nManually adds a solidity event alias to specify what the …\nAdd a Solidity method error alias to specify the generated …\nReturns <code>self</code> as <code>Local</code>.\nReturns <code>self</code> as <code>String</code>.\nContains types to generate Rust bindings for Solidity …\nReturns a reference to the contract’s derives.\nReturns a mutable reference to the contract’s derives.\nSpecify whether to print cargo build script directives if …\nReturns a mutable reference to the contract’s event …\nReturns a reference to the contract’s event aliases.\nExpands the <code>Abigen</code> and returns the <code>ExpandedContract</code> that …\nFiltering support for contracts used in <code>Abigen</code>\nSpecify whether to format the code or not. True by default.\nWhether to format the generated bindings using <code>prettyplease</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to load a new builder from an ABI JSON file at …\nGenerates the contract bindings.\nRetrieves the source JSON of the artifact this will either …\nReturns the type identifier as it’s used in the solidity …\nReturns the name of the rust type that will be generated …\nReturns solidity type identifier as it’s used in the ABI.\nReturns the name of the rust type that will be generated …\nReturns the name of the rust type that will be generated …\nReturns the name of the rust type that will be generated …\nReturns the name of the rust type for the type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is <code>Local</code>.\nReturns <code>true</code> if <code>self</code> is <code>String</code>.\nCreates a local filesystem source from a path string.\nReturns a reference to the contract’s method aliases.\nReturns a mutable reference to the contract’s method …\nGenerate the default file name of the module.\nGenerate the default module name (snake case of the …\nGenerate bindings for multiple <code>Abigen</code>\nReturns a reference to the contract’s name.\nThe contract’s name.\nReturns a mutable reference to the contract’s name.\nCreates a new instance with a filled type mapping table …\nCreates a new builder with the given contract name and ABI …\nCreates a new builder with the given contract name Ident …\nParses an ABI from a source.\nReturns the mapping table of abi …\nReturns a reference to the contract’s ABI source.\nReturns a mutable reference to the contract’s ABI source.\nReturns all the solidity struct types\nWrites the bindings to a new Vec.\nThe generated bindings as a <code>TokenStream</code>.\nWrites the bindings to a given <code>io::Write</code>.\nWrites the bindings to a given <code>fmt::Write</code>.\nWrites the bindings to a <code>contract_name.rs</code> file in the …\nWrites the bindings to the specified file.\nInternal shared context for generating smart contract …\nThe result of <code>Context::expand</code>\nGenerate corresponding types for structs parsed from a …\nThe contract’s internal structs\nAll contract call struct related types\nContract, Middle related implementations\nAll error impls of the contract\nGenerate the event filter methods for the contract\nAll event impls of the contract\nExpands each event to a struct + its impl Detokenize block\nGenerates the tokens.\nExpands to the corresponding struct type based on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a context from the code generation arguments.\nThe contract module’s imports\nReturns a reference to the internal ABI struct mapping …\nReturns a mutable reference to the internal ABI struct …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerges everything into a single module\nMerges everything into a single module, with an …\nThe name of the contract module\nIn the event of type conflicts this allows for removing a …\nReturns the type definition for the struct with the given …\nInclude all contracts\nUsed to filter contracts that should be <em>included</em> in the …\nOnly include contracts that <em>don’t</em> match the filter\nA Contract Filter that exclude certain contracts\nOnly include contracts that match the filter\nA Contract Filter that only includes certain contracts.\nAdds an exact name to the filter\nAdds an exact name to the filter\nSets the pattern to use\nSets the pattern to use\nAdds the regex to use\nAdds the regex to use\nAdds multiple exact names to the filter\nAdds multiple exact names to the filter\nAdds multiple patterns to the filter\nAdds multiple patterns to the filter\nAdds multiple exact names to the filter\nAdds multiple exact names to the filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether to include the contract with the given <code>name</code>\nReturns true whether the <code>name</code> matches the filter\nReturns true whether the <code>name</code> matches the filter\nSets the pattern to use\nSets the pattern to use\nAdds multiple patterns to the filter\nAdds multiple patterns to the filter\nCollects Abigen structs for a series of contracts, pending …\nOutput of the <code>MultiAbigen</code> build process. <code>MultiBindings</code> …\nRepresents a collection of <code>Abigen::expand()</code>\nRepresents an intermediary result of …\nRemoves all <code>Abigen</code> items that should not be included based …\nBuild the contract bindings and prepare for writing\nSpecify a set of dependencies to use for the generated …\nThis ensures that the already generated bindings crate …\nThis ensures that the already generated bindings module …\nExpands all contracts into separated <code>TokenStream</code>s\nExpands all contracts into a single <code>TokenStream</code>\nExpands all contracts into a single <code>TokenStream</code>\nSpecify whether to format the code or not. True by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance by expanding all <code>Abigen</code> elements the …\nCreate a new instance from a series of already resolved …\nReads all json files contained in the given <code>dir</code> and use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are any bindings to be generated\nReturns the number of contracts to generate bindings for.\nCreate a new instance that wraps the given <code>contracts</code>\nCreate a new instance from a series (<code>contract name</code>, …\nAdd another Abigen to the module or lib\nSets the directory from which this type should expand from.\nSee <code>apply_filter</code>\nGenerates all the bindings and writes a library crate …\nGenerates all the bindings and writes them to the given …")