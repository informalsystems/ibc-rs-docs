searchState.loadedDescShard("masp_primitives", 0, "<em>General MASP primitives.</em>\nConsensus logic and parameters.\nVarious constants used by the Zcash primitives.\nStructs for handling encrypted memos.\nImplementation of a Merkle tree of commitments used to …\nStructs and constants specific to the Sapling shielded …\nImplementation of ZIP 32 for hierarchical deterministic …\nProduces an asset generator without cofactor cleared\nReturns the argument unchanged.\nAttempt to construct an asset type from an existing asset …\nReturn the identifier of this asset type\nGet the asset identifier as a vector of bools\nCalls <code>U::from(self)</code>.\nCreate a new AsstType from a unique asset name Not …\nAttempt to create a new AssetType from a unique asset name …\nDeserialize an AssetType object\nConstruct a value commitment from given value and …\nProduces a value commitment generator with cofactor cleared\nA wrapper type representing blockchain heights. Safe …\nA globally-unique identifier for a set of consensus rules …\nThe MASP network upgrade.\nThe consensus rules deployed by <code>NetworkUpgrade::MASP</code>.\nMarker struct for the production network.\nAn event that occurs at a specified height on the Zcash …\nMASP consensus parameters.\nMarker struct for the test network.\nReturns the activation height for a particular network …\nReturns the branch ID corresponding to the consensus rule …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the range of heights for the consensus epoch …\nReturns the range of heights for the consensus epoch …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the specified network upgrade is active …\nLength in bytes of the asset identifier\nBLAKE2s Personalization for deriving asset identifier from …\nBLAKE2s Personalization for CRH^ivk = BLAKE2s(ak | nk)\nFirst 64 bytes of the BLAKE2s input during group hash. …\nBLAKE2s Personalization for the group hash for key …\nThe note commitment is randomized over this generator.\nThe node commitment is randomized again by the position in …\nBLAKE2s Personalization for the nullifier position …\nThe maximum number of chunks per segment of the Pedersen …\nThe exp table for <code>PEDERSEN_HASH_GENERATORS</code>.\nThe window size for exponentiation of Pedersen hash …\nThe generators (for each segment) used in all Pedersen …\nBLAKE2s Personalization for Pedersen hash generators.\nBLAKE2s Personalization for PRF^nf = BLAKE2s(nk | rho)\nBLAKE2s Personalization for the proof generation key base …\nThe prover will demonstrate knowledge of discrete log with …\nThe spender proves discrete log with respect to this base …\nBLAKE2s Personalization for the spending key base point\nBLAKE2s Personalization for the value commitment generator …\nThe value commitment is randomized over this generator, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the note commitment\nReturns [<code>self.cmu</code>] in the correct representation for …\nThis deserialization is unsafe because it does not do the …\nProduces an asset generator without cofactor cleared\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the value commitment for a given amount and …\nPRF^expand(sk, t) := BLAKE2b-512(“MASP__ExpandSeed”, …\nA memo field containing arbitrary bytes.\nAn empty memo field.\nErrors that may result from attempting to construct an …\nSome unknown memo format from ✨<em>the future</em>✨ that we can…\nAn unencrypted memo received alongside a shielded note in …\nThe unencrypted memo bytes received alongside a shielded …\nA memo field containing a UTF-8 string.\nType-safe wrapper around String to enforce memo length …\nReturns the raw byte array containing the memo bytes, …\nReturns a slice of the raw bytes, excluding null padding.\nCreates a <code>MemoBytes</code> indicating that no memo is present.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nSerializes the <code>Memo</code> per ZIP 302.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>MemoBytes</code> from a slice, exactly as provided.\nParses a <code>Memo</code> from its ZIP 302 serialization.\nReturns a <code>Memo</code> containing the given string, or an error if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>Memo</code> from its ZIP 302 serialization.\nA Merkle tree of note commitments.\nAn immutable commitment tree\nA hashable node within a Merkle tree.\nA hashable node within a Merkle tree.\nAn updatable witness to a path from a position in a …\nA path from a position in a particular commitment tree to …\nAdds a leaf node to the tree.\nTracks a leaf node that has been added to the underlying …\nReturns a blank leaf node.\nReturns the parent node within the tree of the two given …\nCreates an empty tree.\nReturns the empty root for the given depth.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a Merkle path directly from a path and position.\nReads a Merkle path from its serialized form.\nCreates an <code>IncrementalWitness</code> for the most recent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge the n-1 full Merkle trees with the last possibly …\nConstruct a commitment tree with the given leaf nodes\nConstruct a merkle path to the given position in …\nReturns the current witness, or None if the tree is empty.\nReturns the position of the witnessed leaf node in the …\nParses a node from the given byte source.\nParses a node from the given byte source.\nReads a <code>CommitmentTree</code> from its serialized form.\nReads an <code>IncrementalWitness</code> from its serialized form.\nGet the root node of the commitment tree\nReturns the current root of the tree.\nReturns the current root of the tree corresponding to the …\nReturns the root of the tree corresponding to this path …\nReturns the number of leaf nodes in the tree.\nReturns the number of leaf nodes in the tree.\nSerializes this node.\nSerializes this node.\nSerializes this tree as an array of bytes.\nSerializes this <code>IncrementalWitness</code> as an array of bytes.\nA node within the Sapling commitment tree.\nTypesafe wrapper for nullifier values.\nA key used to derive the nullifier for a Sapling note.\nA Sapling payment address.\nEnum for note randomness before and after ZIP 212.\nThe asset type that the note represents\nReturns a blank leaf node.\nComputes the note commitment\nReturns the parent node within the tree of the two given …\nReturns [<code>self.cmu</code>] in the correct representation for …\nReturns the derived <code>esk</code> if this note was created after ZIP …\nReturns the <code>Diversifier</code> for this <code>PaymentAddress</code>.\nReturns the empty root for the given depth.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a PaymentAddress from bytes.\nConstructs a PaymentAddress from a diversifier and a …\nConstructs a new note commitment tree node from a …\nThe diversified base of the address, GH(d)\nImplementation of group hashing into Jubjub.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSapling key components.\nCompute a parent node in the Sapling commitment tree given …\nComputes the nullifier given the nullifier deriving key and\nImplementation of in-band secret distribution for MASP …\nImplementation of the Pedersen hash function used in …\nReturns <code>pk_d</code> for this <code>PaymentAddress</code>.\nThe public key of the address, g_d^ivk\nAbstractions over the proving system and parameters.\nParses a node from the given byte source.\nImplementation of RedJubjub, a specialization of RedDSA to …\nrseed\nCreate the spendAuthSig for a Sapling SpendDescription.\nReturns the byte encoding of this <code>PaymentAddress</code>.\nThe value of the note\nSerializes this node.\nProduces a random point in the Jubjub curve. The point is …\nErrors that can occur in the decoding of Sapling spending …\nA Sapling expanded spending key\nA Sapling key that provides the capability to view …\nCould not decode the <code>ask</code> bytes to a jubjub field element.\nCould not decode the <code>nsk</code> bytes to a jubjub field element.\nThe length of the byte slice provided for decoding was …\nAn outgoing viewing key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes the expanded spending key from its serialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes the expanded spending key to the its seralized …\nA Sapling ephemeral public key that has been precomputed …\nA Sapling incoming viewing key that has been precomputed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSapling KDF for note encryption.\nPerforms the necessary precomputations to use a <code>SaplingIvk</code> …\nSapling PRF^ock.\nSapling key agreement for note encryption.\nCreates a new encryption context for the given note.\nRecovery of the full note plaintext by the sender.\nRecovery of the full note plaintext by the sender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType for persisting any necessary context across multiple …\nInterface for creating zero-knowledge proofs for shielded …\nCreate the <code>bindingSig</code> for a Sapling transaction. All calls …\nCreate the value commitment, and proof for a MASP …\nInstantiate a new Sapling proving context.\nCreate the value commitment and proof for a MASP …\nCreate the value commitment, re-randomized key, and proof …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthorization state for a bundle of transaction data.\nA MASP transaction.\nThe set of defined transaction format versions.\nStructs for building transactions.\nStructs representing the components within Zcash …\nAbstractions and types related to fee calculations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn overflow or underflow occurred when computing value …\nGenerates a <code>Transaction</code> from its inputs and outputs.\nThe transaction has inputs in excess of outputs and fees; …\nErrors that can occur during transaction construction.\nAn error occurred in computing the fees for a transaction.\nInsufficient funds were provided to the transaction …\nReports on the progress made by the builder towards …\nAn error occurred in constructing the Sapling parts of a …\nAn error occurred in constructing the transparent parts of …\nAdds a Sapling note to be spent in this transaction.\nAdds a Sapling address to send funds to.\nAdds a Sapling note to be spent in this transaction.\nAdds a transparent coin to be spent in this transaction.\nAdds a transparent address to send funds to.\nBuilds a transaction from the configured spends and …\nReturns the number of steps completed so far while …\nReturns the total expected number of steps before this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Builder</code> targeted for inclusion in the block …\nReturns the network parameters that the builder has been …\nReturns the set of Sapling converts currently set to be …\nReturns the set of Sapling inputs currently committed to …\nReturns the set of Sapling outputs currently set to be …\nReturns the target height of the transaction under …\nReturns the set of transparent inputs currently committed …\nReturns the set of transparent outputs currently set to be …\nReturns the sum of the transparent, Sapling, and TZE value …\nSets the notifier channel, where progress of building the …\nStructs representing the components within Zcash …\nA type for balance violations in amount addition and …\nA type-safe representation of some quantity of Zcash.\nReturns an iterator over the amount’s non-zero …\nReturns an iterator over the amount’s non-zero components\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a non-negative ValueSum from a Value.\nCreates an ValueSum from a Value.\nGet the given AssetType within this ValueSum\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nQuery how much of the given asset this amount contains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the amount’s non-zero components\nCheck if ValueSum is zero\nOne ValueSum is more than or equal to another if each …\nFilters out everything but the given AssetType from this …\nDeserialize an ValueSum object from a list of amounts …\nDeserialize an ValueSum object from a list of amounts …\nDeserialize an ValueSum object from a list of amounts …\nFilters out the given AssetType from this ValueSum\nSerialize an ValueSum object into a list of amounts …\nSerialize an ValueSum object into a list of amounts …\nSerialize an ValueSum object into a list of amounts …\nReturns a zero-valued ValueSum.\nTypes and functions for building MASP shielded transaction …\nTypes related to computation of fees and change related to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsensus rules (§7.3) &amp; (§7.4):\nConsensus rules (§4.4) &amp; (§4.5):\nConsensus rules (§4.4):\nConsensus rules (§4.4):\nConsensus rules (§4.4) &amp; (§4.5):\nA subset of the parameters necessary to build a transaction\nParameters that go into constructing an output description\nA struct containing the information required in order to …\nParameters that go into constructing an output description\nLazily generated random parameters for MASP transactions\nMetadata about a transaction created by a <code>SaplingBuilder</code>.\nA struct containing the information required in order to …\nParameters that go into constructing a spend description\nPre-generated random parameters for MASPtTransactions\nAdds a convert note to be applied in this transaction.\nAdds a Sapling address to send funds to.\nAdds a Sapling note to be spent in this transaction.\nThe spend authorization randomizer\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith convert …\nThe parameters required to construct convert descriptions\nGet the commitment value randomness for the ith convert …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of Sapling inputs that will be consumed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a build parameter generator using the given RNG\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith output …\nThe parameters required to construct output descriptions\nGet the note RCM for the ith output description\nGet the commitment value randomness for the ith output …\nGet the random seed for the ith output description\nReturns the Sapling outputs that will be produced by the …\nThe note rcm value\nThe commitment value randomness\nThe commitment value randomness\nThe commitment value randomness\nThe note’s random seed\nGet the spend authorization randomizer for the ith spend …\nReturns the index within the transaction of the …\nGet the parameters necessary to build the ith spend …\nThe parameters required to construct spend descriptions\nGet the commitment value randomness for the ith spend …\nConvert these build parameters to their stored equivalent\nReturns the net value represented by the spends and …\nA trait that provides a minimized view of a Sapling …\nA trait that provides a minimized view of a Sapling input …\nA trait that provides a minimized view of a Sapling output …\nThe destination of this output\nThe asset type of the input being spent.\nThe asset type of the output being produced.\nThe allowed conversion being used.\nThe spend/view key of the input being spent.\nAn identifier for the input being spent.\nThe value of the input being spent.\nThe amount of the conversion being used.\nThe value of the output being produced.\nTypes and functions for building transparent transaction …\nTypes related to computation of fees and change related to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the address to which the TxOut was sent, if this …\nThe amount of value added to or removed from the …\nAdds a coin (the output of a previous transaction) to be …\nConstructs a new TransparentBuilder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of transparent inputs that will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the transparent outputs that will be produced by …\nThis trait provides a minimized view of a transparent …\nThis trait provides a minimized view of a transparent …\nReturns the asset type of the output being created.\nThe previous output being spent.\nReturns the script corresponding to the newly created …\nReturns the value of the output being created.\nA trait that represents the ability to compute the fees …\nComputes the total fee required for a transaction given …\nA fee rule that always returns a fixed fee, irrespective …\nReturns the fixed fee amount which which this rule was …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new nonstandard fixed fee rule with the …\nCreates a new fixed fee rule with the standard default fee.\nAdditional context that is needed to compute signature …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of all transparent input amounts, provided\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the signature hash for an input to a transaction, …\nImplements the Signature Digest section of ZIP 244\nDigester which constructs a digest of only the witness …\nA TransactionDigest implementation that commits to all of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA BIP-32 chain code\nA child index for a derived key\nA scope used for wallet-external operations, namely …\nA scope used for wallet-internal operations, such as …\nThe scope of a viewing key or address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSapling key derivation according to ZIP 32 and ZIP 316\nA Sapling key that provides the capability to view …\nA key used to derive diversifiers for a particular child …\nRepresents the collection of keys that comprise extended …\nA Sapling extended spending key\nAn extended full viewing key bundled with partial …\nAttempt to produce a payment address given the specified …\nAttempts to produce a valid payment address for the given …\nReturns the byte representation of the diversifier key.\nAugment this spending key with proof generation data. …\nAugment this this extended key with spend authorization …\nAugment this this extended key with spend authorization …\nReturns the internal address corresponding to the smallest …\nAttempts to decrypt the given address’s diversifier with …\nReturns the address with the lowest valid diversifier …\nReturns the payment address corresponding to the smallest …\nReturns the payment address corresponding to the smallest …\nDerives an internal spending key given an external …\nDerives an internal full viewing key used for internal …\nReturns the payment address corresponding to the specified …\nReturns the change address corresponding to the specified …\nAttempts to produce a diversifier at the given index. …\nReturns the diversifier index to which this key maps the …\nSearch the diversifier space starting at diversifier index …\nFinds the next valid payment address starting from the …\nReturns the first index starting from j that generates a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pseudo extended spending key from an extended …\nConstruct a pseudo extended spending key from an extended …\nReturns the argument unchanged.\nConstructs the diversifier key from its constituent bytes.\nDecodes the extended spending key from its serialized …\nParses a <code>DiversifiableFullViewingKey</code> from its raw byte …\nReturns the child key corresponding to the path derived …\nExposes the external <code>FullViewingKey</code> component of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads and decodes the encoded form of the extended …\nAttempt to produce a payment address given the specified …\nReturns the payment address corresponding to the smallest …\nReturns the internal full viewing key and diversifier key …\nSearch the diversifier space starting at diversifier index …\nEncodes the extended spending key to the its seralized …\nReturns the raw encoding of this …\nDerives an incoming viewing key corresponding to this full …\nDerives a nullifier-deriving key for the provided scope.\nDerives an outgoing viewing key corresponding to this full …\nGroup this collection of keys into a proof generation key. …\nReturns the Sapling derivation of a proof generation key …\nReturn None since there is insufficient data to construct …\nBundle this object into a proof generation key if a proof …\nGroup this collection of keys into an extended spending …\nReturns this key\nReturn None since there is insufficient data to construct …\nBundle this object into an extended spending key if a spend\nGroup this collection of keys into an extended full …\nReturns the Sapling derivation of an extended full viewing …\nReturn this key\nReturns the extended full viewing key contained in this …\nWrites the encoded form of the extended spending key as …")