searchState.loadedDescShard("namada_vp", 0, "This crate contains the trait for native validity …\nAn account’s address\nAn established address is generated on-chain\nCustom events that can be queried from Tendermint using a …\nABCI event type.\nA hash, typically a sha-2 hash of a tx\nAn implicit address is derived from a cryptographic key\nAn internal address represents a module with a native VP\nType to read storage state after the transaction execution\nType to read storage state before the transaction execution\nStorage read prefix iterator\nValidity predicate’s environment is available for native …\nReturn the inner pointer to the hash data.\nReturn a reference to the event’s attributes.\nReturn a mutable reference to the event’s attributes.\nCharge the provided gas for the current vp\nGiven hashes A and B, compute Sha256(A||B), but if one …\nDecode an address from Bech32m encoding\nRetrieve the domain of some event.\nCompute the gas cost of emitting this event. Returns <code>None</code> …\nEncode an address with Bech32m encoding\nEvaluate a validity predicate with given data. The …\nExtend this <code>Event</code> with additional data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nGet the events emitted by the current tx.\nGet the address of the native token.\nGiven the information about predecessor block epochs\nGet a tx hash\nGet the shielded transaction index.\nCheck if a certain attribute is present in the event.\nStorage <code>has_key</code> in posterior state (after tx execution). …\nStorage <code>has_key</code> in prior state (before tx execution). It …\nCheck if this <code>Event</code> has a subset of the keys and values in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the attributes of the event, destroying it in the …\nIf the address established?\nIf the address implicit?\nIf the address internal?\nCheck if the hash is all zeros\nStorage prefix iterator, ordered by storage keys. It will …\nReturn the type of the event.\nReturn the length of the hash.\nReturn the level of the event.\nJoins the attribute sets of two <code>Event</code>\nNative validity predicate interface associated with …\nCreate a new event type.\nCreate a new event with no attributes and the given …\nRead storage state after the transaction execution\nRead storage state before the transaction execution\nTry to get a raw hash of an address, only defined for …\nGet the raw string value corresponding to a given …\nGet the value corresponding to a given attribute.\nGet the value corresponding to a given attribute, if it …\nStorage read posterior state raw bytes (after tx …\nStorage read prior state raw bytes (before tx execution). …\nStorage read temporary state raw bytes (after tx …\nStorage read posterior state Borsh encoded value (after tx …\nStorage read prior state Borsh encoded value (before tx …\nStorage read temporary state Borsh encoded value (after tx …\nCompute sha256 of some bytes\nRetrieve the sub-domain of some event.\nPrint the type of the address and its bech32m encoded value\nConvert this <code>Hash</code> to a <code>Vec</code>.\nHost functions for VPs used for both native and WASM VPs.\nReturn zeros\nA validity predicate’s host context.\nRead access to the posterior storage (state after tx …\nRead access to the prior storage (state before tx …\nContains the error value\nA native VP module should implement its validation logic …\nContains the success value\nResult of a storage API call.\nResult extension to easily wrap custom errors into <code>Error</code>.\nA convenience trait for reading and automatically …\nA Validity predicate runner for calls from the host env …\nThe address of the account that owns the VP\nThe commitments in the transaction\nThe inner context\nThe inner context\nEvaluate a given validity predicate code with the given …\nVP evaluator type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVP gas meter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>std::result::Result</code> into storage_api <code>Result</code>.\nStorage prefix iterators.\nThe storage keys that have been changed. Used for calls to …\nCalls <code>read_post_value</code>, and returns an error on <code>Ok(None)</code>.\nCalls <code>read_pre_value</code>, and returns an error on <code>Ok(None)</code>.\nInitialize a new context for native VP call\nRead access to the posterior storage (state after tx …\nRead access to the prior storage (state before tx …\nStorage read posterior state (after tx execution). It will …\nHelper function. After reading posterior state, borsh …\nStorage read prior state (before tx execution). It will …\nHelper function. After reading prior state, borsh …\nRead-only state access.\nThe transaction\nThe transaction index is used to obtain the shielded …\nRun the validity predicate\nThe verifiers whose validity predicates should be …\nVP WASM compilation cache\nAdd a static message to a possible error in <code>Result</code>.\nVP environment function result\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nResult of a storage API call.\nThese runtime errors will abort VP execution immediately\nAdd a gas cost incured in a validity predicate\nAttempt to downgrade the inner error to <code>E</code> if any.\nReturns some reference to the inner value if it is of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetting the block epoch. The epoch is that of the block to …\nGetting the block header.\nGetting the block height. The height is that of the block …\nGetting the chain ID.\nQuery events emitted by the current transaction.\nGetting the native token’s address.\nGiven the information about predecessor block epochs\nGetting the block hash. The height is that of the block to …\nGetting the block epoch. The epoch is that of the block to …\nStorage <code>has_key</code> in posterior state (after tx execution). …\nStorage <code>has_key</code> in prior state (before tx execution). It …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the next item in a storage prefix iterator (pre or …\nStorage prefix iterator for posterior state (after tx …\nStorage prefix iterator for prior state (before tx …\nCreate an <code>Error</code> from another <code>std::error::Error</code>.\nCreate an <code>Error</code> from a heap allocated message.\nCreate an <code>Error</code> from a static message.\nStorage read posterior state (after tx execution). It will …\nStorage read prior state (before tx execution). It will …\nStorage read temporary state (after tx execution). It will …\nWrap another <code>std::error::Error</code> with a static message.")