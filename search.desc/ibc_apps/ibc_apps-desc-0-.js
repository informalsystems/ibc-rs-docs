searchState.loadedDescShard("ibc_apps", 0, "Re-exports implementations and data structures of …\nRe-exports the implementation of the IBC Non-Fungible Token\nRe-exports the implementation of the IBC fungible token …\nDefines the required context traits for ICS-721 to …\nImplements IBC handlers responsible for processing …\nProvides IBC module callbacks implementation for the …\nRe-exports the implementation of the IBC Non-Fungible Token\nRead-write methods required in NFT transfer execution …\nRead-only methods required in NFT transfer validation …\nExecutes burning of the NFT in a user account.\nValidates the sender account and the coin input before …\nReturns Ok() if the host chain supports receiving NFTs.\nReturns Ok() if the host chain supports sending NFTs.\nCreates a new NFT Class identified by classId. If the …\nValidates that the NFT can be created or updated …\nExecutes the escrow of the NFT in a user account.\nValidates that the tokens can be escrowed successfully.\nGet the class ID of the token\nGet the token Data\nGet the class Data\nGet the token ID\nGet the class ID\nReturns the NFT\nReturns the NFT class\nget_port returns the portID for the transfer module.\nGet the token URI\nGet the class URI\nExecutes minting of the NFT in a user account.\nValidates the receiver account and the NFT input\nReturns a hash of the prefixed class ID and the token ID. …\nExecutes the unescrow of the NFT in a user account.\nValidates that the NFT can be unescrowed successfully.\nThis function handles the transfer receiving logic.\nInitiate a token transfer. Equivalent to calling …\nExecutes the token transfer. A prior call to …\nValidates the NFT transfer\nThe successful string, used for creating an …\nClass data for an NFT\nClass ID for an NFT\nClass URI for an NFT\nModule identifier for the ICS-721 application.\nRepresents the token transfer memo\nThe port identifier that the ICS-721 applications …\nPrefixed class to trace sources like ICS-20 PrefixedDenom\nToken data for an NFT\nToken ID for an NFT\nToken URI for an NFT\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nICS-721 application current version.\nReturns a successful acknowledgement status for the NFT …\nAdds the specified prefix to the path.\nAdds the specified prefix to the trace path.\nBase class of the relayed non-fungible token.\nReturn empty trace path\nDefines the Non-Fungible Token Transfer (ICS-721) error …\nDefines Non-Fungible Token Transfer (ICS-721) event types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe parsing logic is same as <code>FromStr</code> impl of <code>PrefixedDenom</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the path is empty and false otherwise.\nReturns true if the class ID originally came from the …\nReturns true if the class ID originally came from the …\nDefines the Non-Fungible Token Transfer (ICS-721) message …\nContains the <code>PacketData</code> type that defines the structure of …\nParses the data in the format specified by ICS-721.\nRe-exports ICS-721 NFT transfer proto types from the …\nRemoves the specified prefix from the path if there is a …\nRemoves the specified prefix from the trace path if there …\nReturns true iff this path starts with the specified prefix\nReturns a string slice with <code>TracePrefix</code> removed.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns a string slice with <code>TracePath</code> or all <code>TracePrefix</code>es …\nfailed to deserialize acknowledgement\nchannel cannot be closed\nexpected <code>{expect_order}</code> channel, got <code>{got_order}</code>\ncontext error: <code>{0}</code>\ndecoding raw msg error: <code>{reason}</code>\ndestination channel not found in the counterparty of …\nduplicated token IDs\nbase class ID is empty\nthe data is not in the JSON format specified by ICS-721\ninvalid identifier: <code>{0}</code>\ninvalid json data\n<code>{sender}</code> doesn’t own the NFT\ninvalid port: <code>{port_id}</code>, expected <code>{exp_port_id}</code>\ninvalid token ID\ninvalid channel id in trace at position: <code>{pos}</code>, validation …\ntrace length must be even but got: <code>{len}</code>\ninvalid prot id n trace at position: <code>{pos}</code>, validation …\ninvalid URI: <code>{uri}</code>, validation error: `{validation_error}``\nnft class is not found\nnft is not found\nno token ID\nother error: <code>{0}</code>\nowner is not found\nfailed to deserialize packet data\nfailed to parse as AccountId\nreceive is not enabled\nsend is not enabled\nThe length of token IDs mismatched that of token URIs or …\nunknown msg type: <code>{msg_type}</code>\ndecoding raw bytes as UTF-8 string error: <code>{0}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the Non-Fungible Token Transfer message type\nMessage used to build an ICS-721 Non-Fungible Token …\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNFT transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms the basic validation of the packet data fields.\nClassTrace contains the base classID for ICS721 …\nGenesisState defines the ibc-nft-transfer genesis state\nMsgTransfer defines a msg to transfer non fungible tokens …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nNonFungibleTokenPacketData defines a struct for the packet …\nParams defines the set of IBC nft-transfer parameters. …\nQueryClassHashRequest is the request type for the …\nQueryClassHashResponse is the response type for the …\nQueryClassTraceRequest is the request type for the …\nQueryClassTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryClassTracesResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is request type for the Query/Params …\nQueryParamsResponse is response type for the Query/Params …\nauthority is the address that controls the module …\nbase classID of the relayed non-fungible token.\nunique channel identifier\nthe class_data of class to be transferred\nthe class_id of tokens to be transferred\nthe class_id of class to be transferred\nclass_trace returns the requested class trace information.\nclass_traces returns all class trace information.\nthe class_uri of class to be transferred\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or classID (full classID with ibc …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\noptional memo\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the nft-transfer parameters to update.\nparams holds all the parameters of this module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nreceive_enabled enables or disables all cross-chain nft …\nthe recipient address on the destination chain\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain nft …\nthe sender address\nthe sender address\nsequence number of the transfer packet sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe non fungible tokens’s data to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens’s uri to be transferred\nThe class trace <code>([port_id]/[channel_id])+/[class]</code>\nDefines the main context traits and IBC module callbacks\nImplements the processing logic for ICS20 (token transfer) …\nRe-exports the implementation of the IBC fungible token …\nMethods required in token transfer execution, to be …\nMethods required in token transfer validation, to be …\nExecutes burning of the tokens in a user account.\nValidates the sender account and the coin input before …\nReturns Ok() if the host chain supports receiving coins.\nReturns Ok() if the host chain supports sending coins.\nReturns a hash of the prefixed denom. Implement only if …\nExecutes the escrow of the tokens in a user account.\nValidates that the tokens can be escrowed successfully.\nget_port returns the portID for the transfer module.\nExecutes minting of the tokens in a user account.\nValidates the receiver account and the coin input\nExecutes the unescrow of the tokens in a user account.\nValidates that the tokens can be unescrowed successfully.\nThis function handles the transfer receiving logic.\nInitiate a token transfer. Equivalent to calling …\nExecutes the token transfer. A prior call to …\nValidates the token transfer. If this succeeds, then it is …\nThe successful string, used for creating an …\nA type for representing token transfer amounts.\nA <code>Coin</code> type with an unprefixed denomination.\nThe “base” of a denomination.\nCoin defines a token with a denomination and an amount.\nMaximum value.\nModule identifier for the ICS20 application.\nRepresents the token transfer memo\nThe port identifier that the ICS20 applications typically …\nA <code>Coin</code> type with fully qualified <code>PrefixedDenom</code>.\nA type that contains the base denomination for ICS20 and …\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nLittle-endian large integer type 256-bit unsigned integer.\nICS20 application current version.\nComputes the absolute difference between self and other.\nReturns a successful acknowledgement status for the token …\nAdds the specified prefix to the trace path.\nAmount\nAmount\nAmount\nAmount\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nBase denomination of the relayed fungible token.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nDenomination\nDenomination\nDenomination\nDenomination\nReturns a pair <code>(self / other, self % other)</code>.\nDefines the token transfer error type\nDefines all token transfer event types\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nInitializes a <code>PrefixedDenom</code> from a string that adheres to …\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the denomination originally came from the …\nReturns true if the denomination originally came from the …\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nDefines the token transfer message type\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nContains the <code>PacketData</code> type that defines the structure of …\nFast exponentiation by squaring …\nRe-exports ICS-20 token transfer proto types from the …\nRemoves the specified prefix from the trace path if there …\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nfailed to deserialize acknowledgement\nchannel cannot be closed\nexpected <code>{expect_order}</code> channel, got <code>{got_order}</code>\ncontext error: <code>{0}</code>\ndecoding raw msg error: <code>{reason}</code>\ndestination channel not found in the counterparty of …\nbase denomination is empty\ninsufficient funds: tried to send <code>{send_attempt}</code>, sender …\ninvalid amount: <code>{0}</code>\ninvalid coin string: <code>{coin}</code>\ninvalid identifier: <code>{0}</code>\ninvalid port: <code>{port_id}</code>, expected <code>{exp_port_id}</code>\ninvalid token\ninvalid channel id in trace at position: <code>{pos}</code>, validation …\ntrace length must be even but got: <code>{len}</code>\ninvalid prot id n trace at position: <code>{pos}</code>, validation …\nmalformed trace: <code>{0}</code>\nother error: <code>{0}</code>\nfailed to deserialize packet data\nfailed to parse as AccountId\nreceive is not enabled\nsend is not enabled\nunknown msg type: <code>{msg_type}</code>\ndecoding raw bytes as UTF-8 string error: <code>{0}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the token transfer message type\nMessage used to build an ICS20 token transfer packet.\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntoken transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocation defines the spend limit for a particular port …\nDenomTrace contains the base denomination for ICS20 …\nGenesisState defines the ibc-transfer genesis state\nMsgTransfer defines a msg to transfer fungible tokens (i.e …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nParams defines the set of IBC transfer parameters. NOTE: …\nQueryDenomHashRequest is the request type for the …\nQueryDenomHashResponse is the response type for the …\nQueryDenomTraceRequest is the request type for the …\nQueryDenomTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryConnectionsResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is the request type for the …\nQueryParamsResponse is the response type for the …\nQueryTotalEscrowForDenomRequest is the request type for …\nQueryTotalEscrowForDenomResponse is the response type for …\nTransferAuthorization allows the grantee to spend up to …\nport and channel amounts\nallow list of receivers, an empty allow list permits any …\nallow list of packet data keys, an empty list prohibits …\nbase denomination of the relayed fungible token.\nunique channel identifier\ndenom_trace returns the requested denomination trace …\ndenom_traces returns all denominations trace information.\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or denom (full denom with ibc prefix) …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the transfer parameters to update.\nparams defines the parameters of the module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nreceive_enabled enables or disables all cross-chain token …\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain token …\nthe sender address\nsequence number of the transfer packet sent\nsigner address\nthe channel by which the packet will be sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nthe port on which the packet will be sent\nspend limitation on the channel\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe tokens to be transferred\ntotal_escrowed contains the total amount of tokens escrowed\nThe denomination trace <code>([port_id]/[channel_id])+/[denom]</code>\nFungibleTokenPacketData defines a struct for the packet …\nthe token amount to be transferred\nthe token denomination to be transferred\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\noptional memo\nthe recipient address on the destination chain\nthe sender address")