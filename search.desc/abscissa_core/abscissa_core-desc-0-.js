searchState.loadedDescShard("abscissa_core", 0, "Abscissa\nThis shutdown type is a “best effort” to communicate …\nForced shutdowns indicate the program’s user has …\nGraceful shutdowns may take prolonged periods of time, …\nAn ordered map based on a B-Tree.\n<code>Runnable</code> is a common trait for things which can be run …\nWrapper type for values that contains secrets, which …\nTypes of shutdown recognized by Abscissa\nAbscissa version\n<strong>SemVer version</strong> as defined by https://semver.org.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nTrait for representing an Abscissa application and it’s …\nClears the map, removing all elements.\nCompare the major, minor, patch, and pre-release value of …\nApplication (sub)command(s), i.e. app entry points\nApplication components: extensions/plugins for Abscissa …\nSupport for managing global configuration, as well as …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>BTreeMap</code>.\nEnsure a condition holds, returning an error if it doesn’…\nGets the given key’s corresponding entry in the map for …\nError types used by this crate\nCreates an iterator that visits all elements (key-value …\nCreate and return an error with a formatted message\nTerminate the application with a fatal error, running …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nCreate a new error (of a given kind) with a formatted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an owning iterator over the entries of the map, …\nCreates a consuming iterator visiting all the keys, in …\nCreates a consuming iterator visiting all the values, in …\nReturns <code>true</code> if the map contains no elements.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nGets an iterator over the keys of the map, in sorted order.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nAn ordered map based on a B-Tree.\nTake ownership of a secret value\nCreate <code>Version</code> with an empty pre-release and build …\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new empty BTreeMap with a reasonable choice for B.\nCreate <code>Version</code> by parsing from string representation.\nPaths for resources used by the application.\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nCore prelude: imported in every application’s <code>prelude.rs</code>\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nRun this <code>Runnable</code>\nAn ordered set based on a B-Tree.\nSplits the collection into two at the given key. Returns …\nPrint a tab-delimited status attribute (in red if colors …\nPrint a tab-delimited status attribute (in green if colors …\nPrint an error message (in red if colors are enabled)\nPrint an informational status message (in cyan if colors …\nPrint a success status message (in green if colors are …\nPrint a warning status message (in yellow if colors are …\nTerminal handling (TTY interactions, colors, etc)\nAcceptance testing for Abscissa applications.\nThread wrapper types.\nTracing subsystem\nTries to insert a key-value pair into the map, and returns …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nApplication types implementing this trait own global …\nConfiguration type used by this application.\nApplication (sub)command which serves as the main entry …\nApplication name\nPaths to application resources,\nFramework-managed application state\nPost-configuration lifecycle callback.\nAuthors of this application.\nBoot the given application, parsing subcommand and options …\nApplication cell: holder of application state.\nObtain a read-only lock on the component registry.\nObtain a mutable lock on the component registry.\nAccessor for application configuration.\nDescription of this application.\nPrint a fatal error message and exit\nInitialize the framework’s default set of components, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad this application’s configuration and initialize its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad configuration from the given path.\nName of this application as a string.\nBorrow the application paths.\nRegister all components used by this application.\nRun application with the given command-line arguments and …\nShut down this application gracefully, exiting with …\nBorrow the application state.\nColor configuration for this application.\nObtain a read-only lock on the thread manager.\nObtain a mutable lock on the component registry.\nGet the tracing configuration for this application.\nApplication cell: holder of application state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new application cell.\nSubcommand of an application: derives or otherwise …\nAuthors of this program\nDescription of this program\nName of this program as a string\nParse command-line arguments from a string iterator\nParse command-line arguments from the environment\nDynamic type helper trait\nApplication components.\nComponent handles are references to components which have …\nIdentifier for an individual component\nLifecycle event called when application configuration …\nBorrow this concrete type as a <code>&amp;dyn Any</code>\nBorrow this concrete type as a <code>&amp;mut dyn Any</code>\nPerform any tasks which should occur before the app exits\nNames of the components this component depends on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier for this component.\nGet the identifier of the component this handle points to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new component identifier\nRegister a dependency of this component (a.k.a. “…\nAbscissa’s component registry\nVersion of this component\nIndex type providing efficient access to a particular …\nIterator over the components in the registry.\nMutable iterator over the components in the registry.\nReader guard for the registry.\nThe component registry provides a system for runtime …\nWriter guard for the registry.\nCallback fired by application when configuration has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a component reference by its handle\nGet a component ref by its ID\nGet a mutable component reference by its type\nGet a component reference by its type\nGet the handle for the given component, if it’s …\nGet a component’s handle by its ID\nGet a mutable component reference by its handle\nGet a mutable component ref by its ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the registry empty?\nIterate over the components.\nIterate over the components mutably.\nGet the number of currently registered components\nRegister components, determining their dependency order\nShutdown components (in the reverse order they were …\nConfiguration cell: holder of application configuration.\nTrait for Abscissa configuration data structures.\nCommand type with which a configuration file is associated\nUse options from the given <code>Command</code> to override settings in …\nConfiguration reader.\nPath to the command’s configuration file. Returns an …\nPath to the command’s configuration file. Returns an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad the configuration from the given TOML string.\nLoad the global configuration from the TOML file at the …\nProcess the given command line options, overriding …\nProcess the given command line options, overriding …\nProcess the configuration after it has been loaded, …\nProcess the configuration after it has been loaded, …\nRead the current configuration.\nSet the application configuration to the given value.\nBox containing a thread-safe + <code>&#39;static</code> error suitable for …\nError contexts\nFramework error types\nError-handling macros for the <code>abscissa</code> framework\nError messages\nError context\nGet the backtrace associated with this error (if available)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtract the backtrace from the context, allowing it to be …\nGet the kind of error\nCreate a new error context\nErrors relating to components\nError reading configuration file\nAbscissa-internal framework errors\nTypes of errors which occur internally within the framework\nI/O operation failed\nCouldn’t parse the given value\nErrors associated with filesystem paths\nErrors occurring in subprocess\nErrors involving multithreading\nTimeout performing operation\nCreate an error context from this error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a message to display for this error\nName of the affected path (if applicable)\nError message type: provide additional context with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new error message\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::ValuesMut</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nCreates an empty <code>btree_map::RangeMut</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nThe value which was not inserted, because the entry was …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nA reference type for a canonical filesystem path\nAn owned path on the filesystem which is guaranteed to be …\nPath to the application’s executable.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nPath to application’s root directory\nPath to the application’s secrets directory\nStandard set of “happy paths” used by Abscissa …\nAppend <code>self.extension</code> with <code>extension</code>.\nProduces an iterator over <code>Path</code> and its ancestors.\nReturn a <code>CanonicalPath</code> reference.\nYields a mutable reference to the underlying <code>OsStr</code> slice.\nYields a mutable reference to the underlying <code>OsString</code> …\nReturn an <code>OsStr</code> reference.\nReturn an <code>OsStr</code> reference.\nYields the underlying <code>OsStr</code> slice.\nReturn a <code>Path</code> reference.\nReturn a <code>Path</code> reference.\nCoerces to a <code>Path</code> slice.\nCreate a canonical path by first canonicalizing the given …\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nProduces an iterator over the <code>Component</code>s of a path\nProduces an iterator over the <code>Component</code>s of a path\nProduces an iterator over the <code>Component</code>s of the path.\nReturns an object that implements <code>Display</code> for safely …\nReturns an object that implements <code>Display</code> for safely …\nReturns an object that implements <code>Display</code> for safely …\nDetermines whether child is a suffix of self.\nDetermines whether child is a suffix of self.\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nGet the path to the application’s executable\nDoes this path exist?\nDoes this path exist?\nReturns <code>true</code> if the path points at an existing entity.\nExtracts the extension of <code>self.file_name</code>, if possible.\nExtracts the extension of <code>self.file_name</code>, if possible.\nExtracts the extension (without the leading dot) of …\nReturns the final component of the path, if there is one.\nReturns the final component of the path, if there is one.\nReturns the final component of the <code>Path</code>, if there is one.\nExtracts the prefix of <code>self.file_name</code>.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.\nConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.\nConverts an <code>OsString</code> into a <code>PathBuf</code>.\nConverts a <code>String</code> into a <code>PathBuf</code>\nConverts a clone-on-write pointer to an owned path.\nReturns the argument unchanged.\nCreate a canonical path from a path, skipping the …\nReturns <code>true</code> if the <code>Path</code> has a root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConsumes the <code>CanonicalPathBuf</code>, yielding its internal …\nConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …\nConsumes the <code>CanonicalPathBuf</code>, yielding its internal …\nConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nIs this path a directory?\nIs this path a directory?\nReturns <code>true</code> if the path exists on disk and is pointing at …\nIs this path a file?\nIs this path a file?\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nReturns <code>true</code> if the path exists on disk and is pointing at …\nProduces an iterator over the path’s components viewed as\nProduces an iterator over the path’s components viewed as\nProduces an iterator over the path’s components viewed …\nJoin a path onto a canonical path, returning a …\nJoin a path onto a canonical path, returning a …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nConsumes and leaks the <code>PathBuf</code>, returning a mutable …\nQueries the file system to get information about a file, …\nQueries the file system to get information about a file, …\nQueries the file system to get information about a file, …\nCreate a canonical path, returning error if the supplied …\nCreate a canonical path, returning error if the supplied …\nAllocates an empty <code>PathBuf</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nReturn a canonical parent path of this path, or <code>io::Error</code> …\nReturn a canonical parent path of this path, or <code>io::Error</code> …\nReturns the <code>Path</code> without its final component, if there is …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nReturns an iterator over the entries within a directory.\nReturns an iterator over the entries within a directory.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of …\nGet the path to the application’s root directory\nGet the path to the application’s secrets directory\nUpdates <code>self.extension</code> to extension.\nUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if …\nUpdates <code>self</code>’s filename ala the same method on <code>PathBuf</code>\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of …\nDetermines whether base is a prefix of self.\nDetermines whether base is a prefix of self.\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nQueries the metadata about a file without following …\nConvert a canonical path reference into an owned …\nConverts a <code>Path</code> to an owned <code>PathBuf</code>.\nYields a <code>&amp;str</code> slice if the path is valid unicode.\nYields a <code>&amp;str</code> slice if the path is valid unicode.\nYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.\nConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nInvokes <code>try_reserve</code> on the underlying instance of <code>OsString</code>.\nInvokes <code>try_reserve_exact</code> on the underlying instance of …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the extension …\nCreates a new <code>PathBuf</code> with a given capacity used to create …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file …\nCommonly used Abscissa traits\nCommonly used Abscissa traits\nCommonly used Abscissa traits\nCommonly used Abscissa traits\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nTracing macros Describes the level of verbosity of a span …\nCommonly used Abscissa traits\nCommonly used Abscissa traits\nCommonly used Abscissa traits\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nTracing macros Constructs an event at the debug level.\nError macros Ensure a condition holds, returning an error …\nTracing macros Constructs an event at the error level.\nTracing macros Events represent single points in time …\nTracing macros Constructs a new <code>Event</code>.\nError macros Create and return an error with a formatted …\nError macros Terminate the application with a fatal error, …\nError macros Create a new error (of a given kind) with a …\nReturns the argument unchanged.\nTracing macros Constructs an event at the info level.\nCalls <code>U::from(self)</code>.\nTracing macros Spans represent periods of time in which a …\nTracing macros Constructs a new span.\nStatus macros Print an error message (in red if colors are …\nStatus macros Print an informational status message (in …\nStatus macros Print a success status message (in green if …\nStatus macros Print a warning status message (in yellow if …\nTracing macros Constructs an event at the trace level.\nTracing macros Constructs an event at the warn level.\n<code>Event</code>s represent single points in time where something …\nConstructs a new <code>Event</code> with the specified metadata and set …\nConstructs a new <code>Event</code> with the specified metadata and set …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the new event’s parent should be …\nReturns true if the new event should be a root.\nReturns metadata describing this <code>Event</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nReturns the new event’s explicitly-specified parent, if …\nVisits all the fields on this <code>Event</code> with the specified …\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nEnters this span, returning a guard that will exit the …\nEnters this span, consuming it and returning a guard that …\nExits this span, returning the underlying <code>Span</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the set of all fields defined by this span’s …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns a reference to the new span’s metadata.\nConstructs a new <code>Span</code> with the given metadata and set of …\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nReturns <code>Attributes</code> describing a new span at the root of …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nReturns the new span’s explicitly-specified parent, if …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nRecords all the fields in the provided <code>ValueSet</code>.\nReturns a reference to a <code>ValueSet</code> containing any values …\nInvokes a function with a reference to this span’s ID …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nClears the set, removing all elements.\nReturns <code>true</code> if the set contains an element equal to the …\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nVisits the elements representing the difference, i.e., the …\nCreates an iterator that visits all elements in ascending …\nReturns a reference to the first element in the set, if …\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the element in the set, if any, …\nAdds a value to the set.\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nReturns a reference to the last element in the set, if any.\nReturns the number of elements in the set.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nMakes a new, empty <code>BTreeSet</code>.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nAdvances the cursor to the next gap, returning the element …\nAdvances the cursor to the next gap, returning the  …\nAdvances the cursor to the next gap, returning the element …\nReturns a reference to the next element without moving the …\nReturns a reference to the next element without moving the …\nReturns a reference to next element without moving the …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nRemoves the first element from the set and returns it, if …\nRemoves the last element from the set and returns it, if …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nConstructs a double-ended iterator over a sub-range of …\nIf the set contains an element equal to the value, removes …\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nAdds a value to the set, replacing the existing element, …\nRetains only the elements specified by the predicate.\nSplits the collection into two at the value. Returns a new …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nVisits the elements representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nTry very hard to emit colors. This includes emitting ANSI …\nAlwaysAnsi is like Always, except it never tries to use …\nTry to use colors, but don’t force the issue. If the …\nThe set of available colors for the terminal …\nColorChoice represents the color preferences of an end …\nNever emit colors.\nSatisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …\nTerminal component\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock the underlying writer.\nTerminal status handling.\nGet the standard error stream\nCreate a new <code>StandardStream</code> with the given color …\nGet the standard output stream\nCreate a new <code>StandardStream</code> with the given color …\nTerminal streams (STDOUT and STDIN)\nGet the terminal <code>Streams</code>.\nAbscissa terminal subsystem component\nReturns the argument unchanged.\nIdentifier for this component\nCalls <code>U::from(self)</code>.\nCreate a new <code>Terminal</code> component with the given <code>ColorChoice</code>\nVersion of this component\nStatus message builder\nMake colors bold\nSet the colors used to display this message\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJustify status on display\nCreate a new status message with default settings\nPrint the given message to stderr\nPrint the given message to stdout\nSet a status message to display\nTerminal streams\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new set of terminal streams\nStandard error\nStandard output\nRun a command via <code>cargo run</code>\nRegex newtype (wraps <code>regex::Regex</code>)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompile a regular expression\nImport prelude for Abscissa tests\nSubprocesses spawned by runners\nRun a command via <code>cargo run</code>\nAppend an argument to the set of arguments to run\nAppend multiple arguments to the set of arguments to run\nEnable capturing of standard error\nEnable capturing of standard output\nAdd the given configuration file\nSerialize invocations of this command using a mutex\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new command runner which runs an arbitrary …\nDisable printing a <code>+ run: ...</code> logline when running command\nRun the given subcommand\nGet the exit status for the given subcommand\nRun a target binary via cargo by passing <code>--bin</code> to <code>cargo run</code>…\nSet the timeout after which the command should complete.\nInformation about a process’s exit status\nMethods common to output streams\nSubprocess under test spawned by <code>CargoRunner</code> or <code>CmdRunner</code>\nBuffered reader for standard error\nBuffered reader for standard output\nGet the exit code\nAssert that the process exited with the given code\nRead a line and ensure it matches the expected value.\nRead a line and ensure it matches the expected value.\nRead a line and test it against the given regex.\nRead a line and test it against the given regex.\nAssert that the process exited successfully\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets a handle to the child’s stderr.\nGets a handle to the child’s stdout.\nDid the process exit successfully?\nWait for the child to exit\nJoin handles for Abscissa-managed threads.\nThread name.\nThreads spawned and managed by Abscissa\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin to a running thread, waiting for it to finish\nThread manager.\nGet the name of this thread.\nCreate a new thread name\nRequest that this thread terminate.\nCheck whether the currently running thread should exit, as …\nSpawn a new thread, executing the given runnable\nThread manager that tracks threads spawned by the …\nReader guard for the thread manager.\nWriter guard for the thread manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSignal all running threads to terminate and then join them\nSpawn a thread within the thread manager.\nTracing configuration\nAbscissa tracing component\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a config for verbose output.\nAbscissa component for initializing the <code>tracing</code> subsystem\nReturn the currently-active tracing filter.\nReturns the argument unchanged.\nIdentifier for this component\nCalls <code>U::from(self)</code>.\nCreate a new <code>Tracing</code> component from the given <code>Config</code>.\nReload the currently-active filter with the supplied value.\nVersion of this component")