searchState.loadedDescShard("namada_io", 0, "Traits for implementing IO handlers. This is to enable …\nA client with async request dispatcher method\nNOOP progress bar implementation.\nA trait that abstracts out I/O operations\nCaptures the input/output streams used by this object\nIgnores all I/O operations.\nMechanism that allows keeping track of the progress of …\nRust native I/O handling.\nObtain the client for communicating with the ledger\nConvenience macro for formatting arguments to <code>Io::print</code>\nConvenience macro for formatting arguments to <code>Io::println</code> …\nConvenience macro for formatting arguments to <code>Io::eprintln</code>\nPrint the given error string\nSignal that a progress bar has completed\nFlush the output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAnnounce that <code>amount</code> virtual elements have been processed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the input/output handle for this context\nSpecify a message to be display alongside the bar.\nPrint the given string\nPrint the given string with a newline\nDisplay the given prompt and return the string input\nA convenience macro for formatting the user prompt before …\nA generic function for displaying a prompt to users and …\nRead a string from input\nA generic function for reading input from users\nSet the amount of virtual elements the progress tracker is …\nQuery the amount of virtual elements the progress tracker …\nPrint the given string into the given Writer\nPrint the given string into the given Writer and terminate …\nA client with async request dispatcher method, which can …\n<code>ResponseQuery</code> with borsh-encoded <code>data</code> field\n<code>std::io::Error</code> can happen in decoding with …\nGeneric response from a query\n<code>/abci_info</code>: get information about the ABCI application.\n<code>/abci_query</code>: query the ABCI application\n<code>/block</code>: get block at a given height.\n<code>/block_results</code>: get ABCI results for a block at a …\n<code>/block_search</code>: search for blocks by BeginBlock and …\n<code>/blockchain</code>: get block headers for <code>min</code> &lt;= <code>height</code> &lt;= <code>max</code>.\n<code>/broadcast_tx_sync</code>: broadcast a transaction, returning the …\n<code>/commit</code>: get block commit at a given height.\n<code>/consensus_params</code>: get current consensus parameters at the …\n<code>/consensus_state</code>: get current consensus state\nResponse data to be borsh encoded\nResponse data to be borsh encoded\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>/health</code>: get node health.\nBlock height from which data was derived\nBlock height from which data was derived\nNon-deterministic log of the request execution\nNon-deterministic log of the request execution\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>/block</code>: get the latest block.\n<code>/block_results</code>: get ABCI results for the latest block.\n<code>/commit</code>: get the latest block commit\n<code>/consensus_params</code>: get the latest consensus parameters.\n<code>/net_info</code>: obtain information about P2P and other network …\nPerform a request against the RPC endpoint\nOptional proof - used for storage value reads which …\nOptional proof - used for storage value reads which …\nSend a query request at the given path.\nSend a simple query request at the given path. For more …\n<code>/status</code>: get Tendermint status including node info, …\n<code>/tx_search</code>: search for transactions with their results.")