searchState.loadedDescShard("ibc_clients", 0, "Exports data structures and implementations of different …\nRe-exports implementations of ICS-07 Tendermint light …\nRe-exports implementations of ICS-08 Wasm light client …\nThis module includes trait implementations for the …\nThis module includes trait implementations for the …\nRe-exports Tendermint light client data structures from the\nNewtype wrapper around the <code>ClientState</code> type, imported from …\nCheck for misbehaviour on the client state as part of the …\nChecks for misbehaviour upon receiving a new consensus …\nCheck that the subject and substitute client states match …\nDetermines the <code>Status</code>, whether it is <code>Active</code> or <code>Expired</code>, of …\nReturns the argument unchanged.\nSeed the host store with initial client and consensus …\nCalls <code>U::from(self)</code>.\nRemoves consensus states from the client store whose …\nQuery the status of the client state.\nCommit a frozen client state, which was frozen as a result …\nUpdate the <code>client_state</code>’s ID, trusting period, latest …\nCommit the new client state and consensus state to the …\nUpdate the host store with a new client state, pruning old …\nValidate the given proof height against the client state’…\nVerify the client message as part of the client state …\nThe default verification logic exposed by ibc-rs simply …\nVerify an <code>Any</code> consensus state by attempting to convert it …\nVerify membership of the given value against the client’…\nDetermines if two conflicting headers at the same height …\nVerify that the given value does not belong in the client…\nPerform client-specific verifications and check all data …\nNewtype wrapper around the <code>ConsensusState</code> type imported …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines data structure for Tendermint client state.\nDefines the Tendermint light client’s consensus state\nTendermint consensus header\nTendermint light client’s misbehaviour type\nConstant for a trust threshold of 1/3.\nConstant for a trust threshold of 2/3.\n<code>TrustThreshold</code> defines the level of trust that a client has\nConstant for a trust threshold of 0/0.\nHelper method to produce a <code>Options</code> struct for use in …\n<code>header.trusted_next_validator_set</code> was given to us by the …\nReturns the tendermint <code>ClientType</code>\nThe denominator of the fraction underlying this trust …\nDefines the Tendermint light client’s error type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new Tendermint <code>ClientState</code> by given …\nInstantiate a TrustThreshold with the given denominator and\nThe numerator of the fraction underlying this trust …\nRe-exports ICS-07 Tendermint light client from <code>ibc-proto</code> …\nGet the refresh time to ensure the state does not expire\nReturns the timestamp of the consensus state as a …\nChecks if the fields of a given header are consistent with …\ndecoding error: {0}\nfailed to verify header: {0}\ninsufficient misbehaviour header height: header1 height …\ninsufficient trusting period <code>{trusting_period:?}</code>; should …\ninsufficient validator overlap <code>{0}</code>\ninvalid header height <code>{0}</code>\ninvalid max clock drift; must be greater than 0\ninvalid client proof specs <code>{0}</code>\ninvalid timestamp <code>{0}</code>\ninvalid client state trust threshold: {description}\nmismatched header chain ids: expected <code>{expected}</code>, actual …\nmismatched revision heights: expected <code>{expected}</code>, actual …\nmismatched validator hashes: expected <code>{expected}</code>, actual …\nmissing client state upgrade-path key\nThe main error type for the Tendermint light client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClientState from Tendermint tracks the current validator …\nConsensusState defines the consensus state from Tendermint.\nFraction defines the protobuf message type for …\nHeader defines the Tendermint client consensus Header. It …\nMisbehaviour is a wrapper over two conflicting Headers …\nallow_update_after_expiry is deprecated\nallow_update_after_misbehaviour is deprecated\nClientID is deprecated\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock height when the client was frozen due to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatest height the client was updated to\ndefines how much new (untrusted) header’s Time can drift …\nProof specifications used in verifying counterparty state\ncommitment root (i.e app hash)\ntimestamp that corresponds to the block height in which …\nduration of the period since the LastestTimestamp during …\nduration of the staking unbonding period\nPath at which next upgraded client will be committed. Each …\nDefines the client message type for the ICS-08 Wasm light …\nDefines the client state type for the ICS-08 Wasm light …\nReturns the wasm <code>ClientType</code>\nDefines the consensus state type for the ICS-08 Wasm light …\nContains definitions of message types for the ICS-08 Wasm …\nRe-exports ICS-08 Wasm light client proto types from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for migrating a Wasm contract on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for removing a checksum from the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the message type for storing the Wasm byte code on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecksums defines a list of all checksums that are stored\nWasm light client message (either header(s) or …\nWasm light client’s Client state\nWasm light client’s ConsensusState\nContract stores contract code\nGenesisState defines 08-wasm’s keeper genesis state\nMsgMigrateContract defines the request type for the …\nMsgMigrateContractResponse defines the response type for …\nMsgRemoveChecksum defines the request type for the …\nMsgStoreChecksumResponse defines the response type for the …\nMsgStoreCode defines the request type for the StoreCode …\nMsgStoreCodeResponse defines the response type for the …\nQueryChecksumsRequest is the request type for the …\nQueryChecksumsResponse is the response type for the …\nQueryCodeRequest is the request type for the Query/Code …\nQueryCodeResponse is the response type for the Query/Code …\nchecksum is the sha256 hash of the stored code\nchecksum is the sha256 hash to be removed from the store\nchecksum is the sha256 hash of the new wasm byte code for …\nchecksum is a hex encoded string of the code stored.\nchecksums is a list of the hex encoded checksums of all …\nthe client id of the contract\ncontract byte code\nuploaded light client wasm contracts\nbytes encoding the client state of the underlying light …\nbytes encoding the consensus state of the underlying light …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe json encoded message to be passed to the contract on …\nGenerated client implementations.\nGenerated server implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nGenerated client implementations.\nGenerated server implementations.\nsigner address\nsigner address\nsigner address\nwasm byte code of light client contract. It can be raw or …\nMsg defines the ibc/08-wasm Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nMigrateContract defines a rpc handler method for …\nRemoveChecksum defines a rpc handler method for …\nCompress requests with the given encoding.\nStoreCode defines a rpc handler method for MsgStoreCode.\nGenerated trait containing gRPC methods that should be …\nMsg defines the ibc/08-wasm Msg service.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nMigrateContract defines a rpc handler method for …\nRemoveChecksum defines a rpc handler method for …\nCompress responses with the given encoding, if the client …\nStoreCode defines a rpc handler method for MsgStoreCode.\nQuery service for wasm module\nEnable decompressing responses.\nGet all Wasm checksums\nGet Wasm code for given checksum\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nQuery service for wasm module\nEnable decompressing requests with the given encoding.\nGet all Wasm checksums\nGet Wasm code for given checksum\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")