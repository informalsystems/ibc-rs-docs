searchState.loadedDescShard("penumbra_sdk_stake", 0, "Data structure used to track our view of Tendermint’s …\nData structure used to track queued delegation changes …\nDelegation tokens represent a share of a particular …\nThe root of a validator’s governance identity (which may …\nThe root of a validator’s identity.\nTracks slashing penalties applied to a validator in some …\nUnbonding tokens represent staking tokens that are …\nRecords information on a validator’s uptime.\nApply this <code>Penalty</code> to some fraction.\nApply this <code>Penalty</code> to an <code>Amount</code> of unbonding tokens.\nReturns the block height up to which this tracker has …\nHelper method to compute the effect of an UndelegateClaim …\nCompound this <code>Penalty</code> with another <code>Penalty</code>.\nReturns the default display denomination for this …\nGet the default display denomination for this delegation …\nReturns the base denomination for this delegation token.\nGet the base denomination for this delegation token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Penalty</code> from a basis point e.g. …\nCreate a <code>Penalty</code> from a basis point squared e.g. …\nCreate a <code>Penalty</code> from a percentage e.g. …\nReturns the asset ID for this delegation token.\nGet the asset ID for this delegation token.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA rate representing how much of an asset remains after …\nMark that the validator signed the block at the given …\nEnumerates the missed blocks over the window in terms of …\nReturns the size of the window of blocks being recorded.\nReturns a new <code>DelegationToken</code> with the provided identity.\nInitialize an uptime tracker for a new validator.\nCounts the number of missed blocks over the window.\nStaking reward and delegation token exchange rates.\nPenumbra validators and related structures.\nReturns the identity key of the validator this delegation …\nGet the identity key of the validator this delegation …\nA transaction action adding stake to a validator’s …\nReturn the balance resulting from issuing delegation …\nThe amount of delegation tokens produced by this action.\nReturns the <code>Value</code> of the delegation <code>Amount</code>.\nThe index of the epoch in which this delegation was …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe delegation amount, in units of unbonded stake. TODO: …\nReturns the <code>Value</code> of the unbonded <code>Amount</code>.\nThe identity key of the validator to delegate to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA destination for a portion of a validator’s commission …\nA list of funding streams whose total commission is less …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the amount of reward at the epoch boundary. The …\nThe destination address for the funding stream..\nThe portion (in terms of basis points) of the validator’…\nThe portion (in terms of basis points) of the validator’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe initial configuration parameters for the staking …\nThe initial validator set.\nThe number of validators allowed in the consensus set …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum amount of stake required for a validator to be …\nThe maximum number of blocks in the window each validator …\nThe number of blocks in the window to check for downtime.\nThe penalty for slashing due to downtime, expressed in …\nThe penalty for slashing due to misbehavior, expressed in …\nThe number of blocks to wait before a validator can unbond …\nDescribes the base reward and exchange rates in some epoch.\nDescribes a validator’s reward rate and voting power in …\nThe base exchange rate.\nThe base reward rate.\nUses this <code>RateData</code> to build a <code>Delegate</code> transaction action …\nUses this <code>RateData</code> to build an <code>Undelegate</code> transaction …\nComputes the amount of delegation tokens corresponding to …\nThe index of the epoch for which this rate is valid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe validator’s identity key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the validator rate data for the next epoch.\nCompute the next epoch’s base rate.\nComputes the amount of unbonded stake corresponding to the …\nThe validator-specific exchange rate.\nThe validator-specific reward rate.\nCompute the voting power of the validator given the size …\nTracks the funding rewards of the previously active …\nA transaction action withdrawing stake from a validator’…\nReturn the balance after consuming delegation tokens, and …\nThe amount of delegation tokens produced by this action.\nReturns the <code>Value</code> of the delegation <code>Amount</code>.\nReturns the argument unchanged.\nThe epoch at which the undelegation was performed. The …\nCalls <code>U::from(self)</code>.\nThe amount to undelegate, in units of unbonding tokens.\nReturns the <code>Value</code> of the unbonded <code>Amount</code>.\nThe identity key of the validator to undelegate from.\nThe private inputs to an <code>UndelegateClaimProof</code>.\nThe public inputs to an <code>UndelegateClaimProof</code>.\nThe blinding factor that will be used for the balance …\nThe action’s contribution to the transaction’s value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe penalty applied to undelegation, in bps^2.\nThe penalty applied to undelegation, in bps^2.\nThe first blinding factor used for generating the ZK proof.\nThe second blinding factor used for generating the ZK …\nGenerate an <code>UndelegateClaimProof</code> given the proving key, …\nThe amount of unbonding tokens to claim. This is a bare …\nThe height at which unbonding started.\nThe height at which unbonding began, used to verify the …\nConvenience method to construct the <code>UndelegateClaim</code> …\nConstruct the <code>UndelegateClaimBody</code> described by this …\nConstruct the <code>UndelegateClaimProof</code> required by the …\nThe identity key of the validator to undelegate from.\nThe identity key of the validator to undelegate from.\nCalled to verify the proof using the provided public …\nThe validator is an active part of the consensus set.\nThe validator is in the active set.\nThe validator definition has been published, but the …\nAuthenticated configuration data for a validator.\nThe validator operator has disabled this validator’s …\nHuman-readable TOML-optimized version of a <code>FundingStream</code>.\nThe validator is not currently a part of the consensus …\nThe validator has been slashed for downtime, and is …\nThe state of a validator in the validator state machine.\nThe current status of a validator, including its identity, …\nThe validator has been slashed for byzantine misbehavior, …\nThe validator is not in the active set.\nThe validator has been removed from the active set.\nDescribes a Penumbra validator’s configuration data.\nRepresents the bonding status of the validator’s stake …\nThe validator’s consensus key, used by Tendermint for …\nThe validator’s consensus key, used by Tendermint for …\nThe validator’s description. Length: &lt;= 280 characters.\nThe validator’s description.\nWhether the validator is enabled or not.\nWhether the validator is enabled or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe destinations for the validator’s staking reward. The …\nThe destinations for the validator’s staking reward. The …\nThe validator’s governance verification key.\nThe validator’s governance verification key.\nThe validator’s identity.\nThe validator’s identity verification key.\nThe validator’s identity verification key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe validator’s (human-readable) name. Length: &lt;= 140 …\nThe validator’s (human-readable) name.\nThe sequence number determines which validator data takes …\nThe sequence number determines which validator data takes …\nThe validator’s current state.\nThe validator’s voting power.\nThe validator’s website URL. Length: &lt;= 70 characters.\nThe validator’s website URL.")