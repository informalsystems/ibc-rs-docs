searchState.loadedDescShard("ibc_app_nft_transfer_types", 0, "Implementation of the IBC Non-Fungible Token Transfer …\nThe successful string, used for creating an …\nClass data for an NFT\nClass ID for an NFT\nClass URI for an NFT\nModule identifier for the ICS-721 application.\nRepresents the token transfer memo\nThe port identifier that the ICS-721 applications …\nPrefixed class to trace sources like ICS-20 PrefixedDenom\nToken data for an NFT\nToken ID for an NFT\nToken URI for an NFT\nA full trace path modelled as a collection of <code>TracePrefix</code>s.\nOne hop in a token’s trace, which consists of the port …\nICS-721 application current version.\nReturns a successful acknowledgement status for the NFT …\nAdds the specified prefix to the path.\nAdds the specified prefix to the trace path.\nBase class of the relayed non-fungible token.\nReturn empty trace path\nDefines the Non-Fungible Token Transfer (ICS-721) error …\nDefines Non-Fungible Token Transfer (ICS-721) event types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe parsing logic is same as <code>FromStr</code> impl of <code>PrefixedDenom</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the path is empty and false otherwise.\nReturns true if the class ID originally came from the …\nReturns true if the class ID originally came from the …\nDefines the Non-Fungible Token Transfer (ICS-721) message …\nContains the <code>PacketData</code> type that defines the structure of …\nParses the data in the format specified by ICS-721.\nRe-exports ICS-721 NFT transfer proto types from the …\nRemoves the specified prefix from the path if there is a …\nRemoves the specified prefix from the trace path if there …\nReturns true iff this path starts with the specified prefix\nReturns a string slice with <code>TracePrefix</code> removed.\nA series of <code>{port-id}/{channel-id}</code>s for tracing the source …\nReturns a string slice with <code>TracePath</code> or all <code>TracePrefix</code>es …\nchannel error: {0}\ndecoding error: {0}\nfailed to deserialize acknowledgement\nfailed to deserialize packet data\nhost error: {0}\ninvalid channel state: cannot be closed\nmismatched channel orders: expected <code>{expected}</code>, actual …\nmismatched number of token IDs: expected <code>{expected}</code>, …\nmismatched port IDs: expected <code>{expected}</code>, actual <code>{actual}</code>\nmissing destination channel <code>{channel_id}</code> on port <code>{port_id}</code>\nmissing token ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEvent emitted in the <code>onAcknowledgePacket</code> module callback\nEvent emitted in the <code>onAcknowledgePacket</code> module callback …\nContains all events variants that can be emitted from the …\nEvent emitted by the <code>onRecvPacket</code> module callback to …\nEvent emitted in the <code>onTimeoutPacket</code> module callback\nEvent emitted in the <code>onRecvPacket</code> module callback when new …\nEvent emitted after a successful <code>sendTransfer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the Non-Fungible Token Transfer message type\nMessage used to build an ICS-721 Non-Fungible Token …\nthe channel by which the packet will be sent\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNFT transfer packet data of the packet that will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp relative to the current block timestamp. …\nDefines the structure of token transfers’ packet bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms the basic validation of the packet data fields.\nClassTrace contains the base classID for ICS721 …\nGenesisState defines the ibc-nft-transfer genesis state\nMsgTransfer defines a msg to transfer non fungible tokens …\nMsgTransferResponse defines the Msg/Transfer response type.\nMsgUpdateParams is the Msg/UpdateParams request type.\nMsgUpdateParamsResponse defines the response structure for …\nNonFungibleTokenPacketData defines a struct for the packet …\nParams defines the set of IBC nft-transfer parameters. …\nQueryClassHashRequest is the request type for the …\nQueryClassHashResponse is the response type for the …\nQueryClassTraceRequest is the request type for the …\nQueryClassTraceResponse is the response type for the …\nQueryConnectionsRequest is the request type for the …\nQueryClassTracesResponse is the response type for the …\nQueryEscrowAddressRequest is the request type for the …\nQueryEscrowAddressResponse is the response type of the …\nQueryParamsRequest is request type for the Query/Params …\nQueryParamsResponse is response type for the Query/Params …\nauthority is the address that controls the module …\nbase classID of the relayed non-fungible token.\nunique channel identifier\nthe class_data of class to be transferred\nthe class_id of tokens to be transferred\nthe class_id of class to be transferred\nclass_trace returns the requested class trace information.\nclass_traces returns all class trace information.\nthe class_uri of class to be transferred\nthe escrow account address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhash (in hex format) or classID (full classID with ibc …\nhash (in hex format) of the denomination trace information.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional memo\noptional memo\nGenerated client implementations.\npagination defines an optional pagination for the request.\npagination defines the pagination in the response.\nparams defines the nft-transfer parameters to update.\nparams holds all the parameters of this module.\npath defines the chain of port/channel identifiers used …\nunique port identifier\nGenerated client implementations.\nreceive_enabled enables or disables all cross-chain nft …\nthe recipient address on the destination chain\nthe recipient address on the destination chain\nsend_enabled enables or disables all cross-chain nft …\nthe sender address\nthe sender address\nsequence number of the transfer packet sent\nthe channel by which the packet will be sent\nthe port on which the packet will be sent\nTimeout height relative to the current block height. The …\nTimeout timestamp in absolute nanoseconds since unix epoch.\nthe non fungible tokens’s data to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens to be transferred\nthe non fungible tokens’s uri to be transferred\nThe class trace <code>([port_id]/[channel_id])+/[class]</code>\nMsg defines the ibc/nft-transfer Msg service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nTransfer defines a rpc handler method for MsgTransfer.\nUpdateParams defines a governance operation for updating …\nQuery provides defines the gRPC querier service.\nEnable decompressing responses.\nClassHash queries a class hash information.\nClassTrace queries a class trace information.\nClassTraces queries all class traces.\nAttempt to create a new client by connecting to a given …\nEscrowAddress returns the escrow address for a particular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nParams queries all parameters of the nft-transfer module.\nCompress requests with the given encoding.")